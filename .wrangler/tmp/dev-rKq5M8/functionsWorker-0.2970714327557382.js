var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });

// .wrangler/tmp/bundle-lPmCNf/strip-cf-connecting-ip-header.js
function stripCfConnectingIPHeader(input, init2) {
  const request = new Request(input, init2);
  request.headers.delete("CF-Connecting-IP");
  return request;
}
__name(stripCfConnectingIPHeader, "stripCfConnectingIPHeader");
globalThis.fetch = new Proxy(globalThis.fetch, {
  apply(target, thisArg, argArray) {
    return Reflect.apply(target, thisArg, [
      stripCfConnectingIPHeader.apply(null, argArray)
    ]);
  }
});

// .wrangler/tmp/pages-gZIvIM/functionsWorker-0.2970714327557382.mjs
var __create = Object.create;
var __defProp2 = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name2 = /* @__PURE__ */ __name((target, value) => __defProp2(target, "name", { value, configurable: true }), "__name");
var __esm = /* @__PURE__ */ __name((fn, res) => /* @__PURE__ */ __name(function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
}, "__init"), "__esm");
var __commonJS = /* @__PURE__ */ __name((cb, mod) => /* @__PURE__ */ __name(function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
}, "__require"), "__commonJS");
var __export = /* @__PURE__ */ __name((target, all) => {
  for (var name in all)
    __defProp2(target, name, { get: all[name], enumerable: true });
}, "__export");
var __copyProps = /* @__PURE__ */ __name((to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp2(to, key, { get: /* @__PURE__ */ __name(() => from[key], "get"), enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
}, "__copyProps");
var __toESM = /* @__PURE__ */ __name((mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target,
  mod
)), "__toESM");
function stripCfConnectingIPHeader2(input, init2) {
  const request = new Request(input, init2);
  request.headers.delete("CF-Connecting-IP");
  return request;
}
__name(stripCfConnectingIPHeader2, "stripCfConnectingIPHeader");
var init_strip_cf_connecting_ip_header = __esm({
  "../.wrangler/tmp/bundle-KvVchS/strip-cf-connecting-ip-header.js"() {
    __name2(stripCfConnectingIPHeader2, "stripCfConnectingIPHeader");
    globalThis.fetch = new Proxy(globalThis.fetch, {
      apply(target, thisArg, argArray) {
        return Reflect.apply(target, thisArg, [
          stripCfConnectingIPHeader2.apply(null, argArray)
        ]);
      }
    });
  }
});
var LibsqlError;
var init_api = __esm({
  "../node_modules/@libsql/core/lib-esm/api.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    LibsqlError = class extends Error {
      static {
        __name(this, "LibsqlError");
      }
      static {
        __name2(this, "LibsqlError");
      }
      /** Machine-readable error code. */
      code;
      /** Raw numeric error code */
      rawCode;
      constructor(message2, code, rawCode, cause) {
        if (code !== void 0) {
          message2 = `${code}: ${message2}`;
        }
        super(message2, { cause });
        this.code = code;
        this.rawCode = rawCode;
        this.name = "LibsqlError";
      }
    };
  }
});
function parseUri(text) {
  const match2 = URI_RE.exec(text);
  if (match2 === null) {
    throw new LibsqlError(`The URL '${text}' is not in a valid format`, "URL_INVALID");
  }
  const groups = match2.groups;
  const scheme = groups["scheme"];
  const authority = groups["authority"] !== void 0 ? parseAuthority(groups["authority"]) : void 0;
  const path = percentDecode(groups["path"]);
  const query = groups["query"] !== void 0 ? parseQuery(groups["query"]) : void 0;
  const fragment = groups["fragment"] !== void 0 ? percentDecode(groups["fragment"]) : void 0;
  return { scheme, authority, path, query, fragment };
}
__name(parseUri, "parseUri");
function parseAuthority(text) {
  const match2 = AUTHORITY_RE.exec(text);
  if (match2 === null) {
    throw new LibsqlError("The authority part of the URL is not in a valid format", "URL_INVALID");
  }
  const groups = match2.groups;
  const host = percentDecode(groups["host_br"] ?? groups["host"]);
  const port = groups["port"] ? parseInt(groups["port"], 10) : void 0;
  const userinfo = groups["username"] !== void 0 ? {
    username: percentDecode(groups["username"]),
    password: groups["password"] !== void 0 ? percentDecode(groups["password"]) : void 0
  } : void 0;
  return { host, port, userinfo };
}
__name(parseAuthority, "parseAuthority");
function parseQuery(text) {
  const sequences = text.split("&");
  const pairs = [];
  for (const sequence of sequences) {
    if (sequence === "") {
      continue;
    }
    let key;
    let value;
    const splitIdx = sequence.indexOf("=");
    if (splitIdx < 0) {
      key = sequence;
      value = "";
    } else {
      key = sequence.substring(0, splitIdx);
      value = sequence.substring(splitIdx + 1);
    }
    pairs.push({
      key: percentDecode(key.replaceAll("+", " ")),
      value: percentDecode(value.replaceAll("+", " "))
    });
  }
  return { pairs };
}
__name(parseQuery, "parseQuery");
function percentDecode(text) {
  try {
    return decodeURIComponent(text);
  } catch (e) {
    if (e instanceof URIError) {
      throw new LibsqlError(`URL component has invalid percent encoding: ${e}`, "URL_INVALID", void 0, e);
    }
    throw e;
  }
}
__name(percentDecode, "percentDecode");
function encodeBaseUrl(scheme, authority, path) {
  if (authority === void 0) {
    throw new LibsqlError(`URL with scheme ${JSON.stringify(scheme + ":")} requires authority (the "//" part)`, "URL_INVALID");
  }
  const schemeText = `${scheme}:`;
  const hostText = encodeHost(authority.host);
  const portText = encodePort(authority.port);
  const userinfoText = encodeUserinfo(authority.userinfo);
  const authorityText = `//${userinfoText}${hostText}${portText}`;
  let pathText = path.split("/").map(encodeURIComponent).join("/");
  if (pathText !== "" && !pathText.startsWith("/")) {
    pathText = "/" + pathText;
  }
  return new URL(`${schemeText}${authorityText}${pathText}`);
}
__name(encodeBaseUrl, "encodeBaseUrl");
function encodeHost(host) {
  return host.includes(":") ? `[${encodeURI(host)}]` : encodeURI(host);
}
__name(encodeHost, "encodeHost");
function encodePort(port) {
  return port !== void 0 ? `:${port}` : "";
}
__name(encodePort, "encodePort");
function encodeUserinfo(userinfo) {
  if (userinfo === void 0) {
    return "";
  }
  const usernameText = encodeURIComponent(userinfo.username);
  const passwordText = userinfo.password !== void 0 ? `:${encodeURIComponent(userinfo.password)}` : "";
  return `${usernameText}${passwordText}@`;
}
__name(encodeUserinfo, "encodeUserinfo");
var URI_RE;
var AUTHORITY_RE;
var init_uri = __esm({
  "../node_modules/@libsql/core/lib-esm/uri.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_api();
    __name2(parseUri, "parseUri");
    URI_RE = (() => {
      const SCHEME = "(?<scheme>[A-Za-z][A-Za-z.+-]*)";
      const AUTHORITY = "(?<authority>[^/?#]*)";
      const PATH = "(?<path>[^?#]*)";
      const QUERY = "(?<query>[^#]*)";
      const FRAGMENT = "(?<fragment>.*)";
      return new RegExp(`^${SCHEME}:(//${AUTHORITY})?${PATH}(\\?${QUERY})?(#${FRAGMENT})?$`, "su");
    })();
    __name2(parseAuthority, "parseAuthority");
    AUTHORITY_RE = (() => {
      return new RegExp(`^((?<username>[^:]*)(:(?<password>.*))?@)?((?<host>[^:\\[\\]]*)|(\\[(?<host_br>[^\\[\\]]*)\\]))(:(?<port>[0-9]*))?$`, "su");
    })();
    __name2(parseQuery, "parseQuery");
    __name2(percentDecode, "percentDecode");
    __name2(encodeBaseUrl, "encodeBaseUrl");
    __name2(encodeHost, "encodeHost");
    __name2(encodePort, "encodePort");
    __name2(encodeUserinfo, "encodeUserinfo");
  }
});
var version;
var VERSION;
var _hasBuffer;
var _TD;
var _TE;
var b64ch;
var b64chs;
var b64tab;
var b64re;
var _fromCC;
var _U8Afrom;
var _mkUriSafe;
var _tidyB64;
var btoaPolyfill;
var _btoa;
var _fromUint8Array;
var fromUint8Array;
var cb_utob;
var re_utob;
var utob;
var _encode;
var encode;
var encodeURI2;
var re_btou;
var cb_btou;
var btou;
var atobPolyfill;
var _atob;
var _toUint8Array;
var toUint8Array;
var _decode;
var _unURI;
var decode;
var isValid;
var _noEnum;
var extendString;
var extendUint8Array;
var extendBuiltins;
var gBase64;
var init_base64 = __esm({
  "../node_modules/js-base64/base64.mjs"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    version = "3.7.7";
    VERSION = version;
    _hasBuffer = typeof Buffer === "function";
    _TD = typeof TextDecoder === "function" ? new TextDecoder() : void 0;
    _TE = typeof TextEncoder === "function" ? new TextEncoder() : void 0;
    b64ch = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
    b64chs = Array.prototype.slice.call(b64ch);
    b64tab = ((a) => {
      let tab = {};
      a.forEach((c, i) => tab[c] = i);
      return tab;
    })(b64chs);
    b64re = /^(?:[A-Za-z\d+\/]{4})*?(?:[A-Za-z\d+\/]{2}(?:==)?|[A-Za-z\d+\/]{3}=?)?$/;
    _fromCC = String.fromCharCode.bind(String);
    _U8Afrom = typeof Uint8Array.from === "function" ? Uint8Array.from.bind(Uint8Array) : (it) => new Uint8Array(Array.prototype.slice.call(it, 0));
    _mkUriSafe = /* @__PURE__ */ __name2((src) => src.replace(/=/g, "").replace(/[+\/]/g, (m0) => m0 == "+" ? "-" : "_"), "_mkUriSafe");
    _tidyB64 = /* @__PURE__ */ __name2((s) => s.replace(/[^A-Za-z0-9\+\/]/g, ""), "_tidyB64");
    btoaPolyfill = /* @__PURE__ */ __name2((bin) => {
      let u322, c0, c1, c2, asc = "";
      const pad = bin.length % 3;
      for (let i = 0; i < bin.length; ) {
        if ((c0 = bin.charCodeAt(i++)) > 255 || (c1 = bin.charCodeAt(i++)) > 255 || (c2 = bin.charCodeAt(i++)) > 255)
          throw new TypeError("invalid character found");
        u322 = c0 << 16 | c1 << 8 | c2;
        asc += b64chs[u322 >> 18 & 63] + b64chs[u322 >> 12 & 63] + b64chs[u322 >> 6 & 63] + b64chs[u322 & 63];
      }
      return pad ? asc.slice(0, pad - 3) + "===".substring(pad) : asc;
    }, "btoaPolyfill");
    _btoa = typeof btoa === "function" ? (bin) => btoa(bin) : _hasBuffer ? (bin) => Buffer.from(bin, "binary").toString("base64") : btoaPolyfill;
    _fromUint8Array = _hasBuffer ? (u8a) => Buffer.from(u8a).toString("base64") : (u8a) => {
      const maxargs = 4096;
      let strs = [];
      for (let i = 0, l = u8a.length; i < l; i += maxargs) {
        strs.push(_fromCC.apply(null, u8a.subarray(i, i + maxargs)));
      }
      return _btoa(strs.join(""));
    };
    fromUint8Array = /* @__PURE__ */ __name2((u8a, urlsafe = false) => urlsafe ? _mkUriSafe(_fromUint8Array(u8a)) : _fromUint8Array(u8a), "fromUint8Array");
    cb_utob = /* @__PURE__ */ __name2((c) => {
      if (c.length < 2) {
        var cc = c.charCodeAt(0);
        return cc < 128 ? c : cc < 2048 ? _fromCC(192 | cc >>> 6) + _fromCC(128 | cc & 63) : _fromCC(224 | cc >>> 12 & 15) + _fromCC(128 | cc >>> 6 & 63) + _fromCC(128 | cc & 63);
      } else {
        var cc = 65536 + (c.charCodeAt(0) - 55296) * 1024 + (c.charCodeAt(1) - 56320);
        return _fromCC(240 | cc >>> 18 & 7) + _fromCC(128 | cc >>> 12 & 63) + _fromCC(128 | cc >>> 6 & 63) + _fromCC(128 | cc & 63);
      }
    }, "cb_utob");
    re_utob = /[\uD800-\uDBFF][\uDC00-\uDFFFF]|[^\x00-\x7F]/g;
    utob = /* @__PURE__ */ __name2((u) => u.replace(re_utob, cb_utob), "utob");
    _encode = _hasBuffer ? (s) => Buffer.from(s, "utf8").toString("base64") : _TE ? (s) => _fromUint8Array(_TE.encode(s)) : (s) => _btoa(utob(s));
    encode = /* @__PURE__ */ __name2((src, urlsafe = false) => urlsafe ? _mkUriSafe(_encode(src)) : _encode(src), "encode");
    encodeURI2 = /* @__PURE__ */ __name2((src) => encode(src, true), "encodeURI");
    re_btou = /[\xC0-\xDF][\x80-\xBF]|[\xE0-\xEF][\x80-\xBF]{2}|[\xF0-\xF7][\x80-\xBF]{3}/g;
    cb_btou = /* @__PURE__ */ __name2((cccc) => {
      switch (cccc.length) {
        case 4:
          var cp = (7 & cccc.charCodeAt(0)) << 18 | (63 & cccc.charCodeAt(1)) << 12 | (63 & cccc.charCodeAt(2)) << 6 | 63 & cccc.charCodeAt(3), offset = cp - 65536;
          return _fromCC((offset >>> 10) + 55296) + _fromCC((offset & 1023) + 56320);
        case 3:
          return _fromCC((15 & cccc.charCodeAt(0)) << 12 | (63 & cccc.charCodeAt(1)) << 6 | 63 & cccc.charCodeAt(2));
        default:
          return _fromCC((31 & cccc.charCodeAt(0)) << 6 | 63 & cccc.charCodeAt(1));
      }
    }, "cb_btou");
    btou = /* @__PURE__ */ __name2((b) => b.replace(re_btou, cb_btou), "btou");
    atobPolyfill = /* @__PURE__ */ __name2((asc) => {
      asc = asc.replace(/\s+/g, "");
      if (!b64re.test(asc))
        throw new TypeError("malformed base64.");
      asc += "==".slice(2 - (asc.length & 3));
      let u24, bin = "", r1, r2;
      for (let i = 0; i < asc.length; ) {
        u24 = b64tab[asc.charAt(i++)] << 18 | b64tab[asc.charAt(i++)] << 12 | (r1 = b64tab[asc.charAt(i++)]) << 6 | (r2 = b64tab[asc.charAt(i++)]);
        bin += r1 === 64 ? _fromCC(u24 >> 16 & 255) : r2 === 64 ? _fromCC(u24 >> 16 & 255, u24 >> 8 & 255) : _fromCC(u24 >> 16 & 255, u24 >> 8 & 255, u24 & 255);
      }
      return bin;
    }, "atobPolyfill");
    _atob = typeof atob === "function" ? (asc) => atob(_tidyB64(asc)) : _hasBuffer ? (asc) => Buffer.from(asc, "base64").toString("binary") : atobPolyfill;
    _toUint8Array = _hasBuffer ? (a) => _U8Afrom(Buffer.from(a, "base64")) : (a) => _U8Afrom(_atob(a).split("").map((c) => c.charCodeAt(0)));
    toUint8Array = /* @__PURE__ */ __name2((a) => _toUint8Array(_unURI(a)), "toUint8Array");
    _decode = _hasBuffer ? (a) => Buffer.from(a, "base64").toString("utf8") : _TD ? (a) => _TD.decode(_toUint8Array(a)) : (a) => btou(_atob(a));
    _unURI = /* @__PURE__ */ __name2((a) => _tidyB64(a.replace(/[-_]/g, (m0) => m0 == "-" ? "+" : "/")), "_unURI");
    decode = /* @__PURE__ */ __name2((src) => _decode(_unURI(src)), "decode");
    isValid = /* @__PURE__ */ __name2((src) => {
      if (typeof src !== "string")
        return false;
      const s = src.replace(/\s+/g, "").replace(/={0,2}$/, "");
      return !/[^\s0-9a-zA-Z\+/]/.test(s) || !/[^\s0-9a-zA-Z\-_]/.test(s);
    }, "isValid");
    _noEnum = /* @__PURE__ */ __name2((v) => {
      return {
        value: v,
        enumerable: false,
        writable: true,
        configurable: true
      };
    }, "_noEnum");
    extendString = /* @__PURE__ */ __name2(function() {
      const _add = /* @__PURE__ */ __name2((name, body) => Object.defineProperty(String.prototype, name, _noEnum(body)), "_add");
      _add("fromBase64", function() {
        return decode(this);
      });
      _add("toBase64", function(urlsafe) {
        return encode(this, urlsafe);
      });
      _add("toBase64URI", function() {
        return encode(this, true);
      });
      _add("toBase64URL", function() {
        return encode(this, true);
      });
      _add("toUint8Array", function() {
        return toUint8Array(this);
      });
    }, "extendString");
    extendUint8Array = /* @__PURE__ */ __name2(function() {
      const _add = /* @__PURE__ */ __name2((name, body) => Object.defineProperty(Uint8Array.prototype, name, _noEnum(body)), "_add");
      _add("toBase64", function(urlsafe) {
        return fromUint8Array(this, urlsafe);
      });
      _add("toBase64URI", function() {
        return fromUint8Array(this, true);
      });
      _add("toBase64URL", function() {
        return fromUint8Array(this, true);
      });
    }, "extendUint8Array");
    extendBuiltins = /* @__PURE__ */ __name2(() => {
      extendString();
      extendUint8Array();
    }, "extendBuiltins");
    gBase64 = {
      version,
      VERSION,
      atob: _atob,
      atobPolyfill,
      btoa: _btoa,
      btoaPolyfill,
      fromBase64: decode,
      toBase64: encode,
      encode,
      encodeURI: encodeURI2,
      encodeURL: encodeURI2,
      utob,
      btou,
      decode,
      isValid,
      fromUint8Array,
      toUint8Array,
      extendString,
      extendUint8Array,
      extendBuiltins
    };
  }
});
function transactionModeToBegin(mode) {
  if (mode === "write") {
    return "BEGIN IMMEDIATE";
  } else if (mode === "read") {
    return "BEGIN TRANSACTION READONLY";
  } else if (mode === "deferred") {
    return "BEGIN DEFERRED";
  } else {
    throw RangeError('Unknown transaction mode, supported values are "write", "read" and "deferred"');
  }
}
__name(transactionModeToBegin, "transactionModeToBegin");
function rowToJson(row) {
  return Array.prototype.map.call(row, valueToJson);
}
__name(rowToJson, "rowToJson");
function valueToJson(value) {
  if (typeof value === "bigint") {
    return "" + value;
  } else if (value instanceof ArrayBuffer) {
    return gBase64.fromUint8Array(new Uint8Array(value));
  } else {
    return value;
  }
}
__name(valueToJson, "valueToJson");
var supportedUrlLink;
var ResultSetImpl;
var init_util = __esm({
  "../node_modules/@libsql/core/lib-esm/util.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_base64();
    supportedUrlLink = "https://github.com/libsql/libsql-client-ts#supported-urls";
    __name2(transactionModeToBegin, "transactionModeToBegin");
    ResultSetImpl = class {
      static {
        __name(this, "ResultSetImpl");
      }
      static {
        __name2(this, "ResultSetImpl");
      }
      columns;
      columnTypes;
      rows;
      rowsAffected;
      lastInsertRowid;
      constructor(columns, columnTypes, rows, rowsAffected, lastInsertRowid) {
        this.columns = columns;
        this.columnTypes = columnTypes;
        this.rows = rows;
        this.rowsAffected = rowsAffected;
        this.lastInsertRowid = lastInsertRowid;
      }
      toJSON() {
        return {
          columns: this.columns,
          columnTypes: this.columnTypes,
          rows: this.rows.map(rowToJson),
          rowsAffected: this.rowsAffected,
          lastInsertRowid: this.lastInsertRowid !== void 0 ? "" + this.lastInsertRowid : null
        };
      }
    };
    __name2(rowToJson, "rowToJson");
    __name2(valueToJson, "valueToJson");
  }
});
function expandConfig(config2, preferHttp) {
  if (typeof config2 !== "object") {
    throw new TypeError(`Expected client configuration as object, got ${typeof config2}`);
  }
  let { url, authToken, tls, intMode, concurrency } = config2;
  concurrency = Math.max(0, concurrency || 20);
  intMode ??= "number";
  let connectionQueryParams = [];
  if (url === inMemoryMode) {
    url = "file::memory:";
  }
  const uri = parseUri(url);
  const originalUriScheme = uri.scheme.toLowerCase();
  const isInMemoryMode = originalUriScheme === "file" && uri.path === inMemoryMode && uri.authority === void 0;
  let queryParamsDef;
  if (isInMemoryMode) {
    queryParamsDef = {
      cache: {
        values: ["shared", "private"],
        update: /* @__PURE__ */ __name2((key, value) => connectionQueryParams.push(`${key}=${value}`), "update")
      }
    };
  } else {
    queryParamsDef = {
      tls: {
        values: ["0", "1"],
        update: /* @__PURE__ */ __name2((_, value) => tls = value === "1", "update")
      },
      authToken: {
        update: /* @__PURE__ */ __name2((_, value) => authToken = value, "update")
      }
    };
  }
  for (const { key, value } of uri.query?.pairs ?? []) {
    if (!Object.hasOwn(queryParamsDef, key)) {
      throw new LibsqlError(`Unsupported URL query parameter ${JSON.stringify(key)}`, "URL_PARAM_NOT_SUPPORTED");
    }
    const queryParamDef = queryParamsDef[key];
    if (queryParamDef.values !== void 0 && !queryParamDef.values.includes(value)) {
      throw new LibsqlError(`Unknown value for the "${key}" query argument: ${JSON.stringify(value)}. Supported values are: [${queryParamDef.values.map((x) => '"' + x + '"').join(", ")}]`, "URL_INVALID");
    }
    if (queryParamDef.update !== void 0) {
      queryParamDef?.update(key, value);
    }
  }
  const connectionQueryParamsString = connectionQueryParams.length === 0 ? "" : `?${connectionQueryParams.join("&")}`;
  const path = uri.path + connectionQueryParamsString;
  let scheme;
  if (originalUriScheme === "libsql") {
    if (tls === false) {
      if (uri.authority?.port === void 0) {
        throw new LibsqlError('A "libsql:" URL with ?tls=0 must specify an explicit port', "URL_INVALID");
      }
      scheme = preferHttp ? "http" : "ws";
    } else {
      scheme = preferHttp ? "https" : "wss";
    }
  } else {
    scheme = originalUriScheme;
  }
  if (scheme === "http" || scheme === "ws") {
    tls ??= false;
  } else {
    tls ??= true;
  }
  if (scheme !== "http" && scheme !== "ws" && scheme !== "https" && scheme !== "wss" && scheme !== "file") {
    throw new LibsqlError(`The client supports only "libsql:", "wss:", "ws:", "https:", "http:" and "file:" URLs, got ${JSON.stringify(uri.scheme + ":")}. For more information, please read ${supportedUrlLink}`, "URL_SCHEME_NOT_SUPPORTED");
  }
  if (intMode !== "number" && intMode !== "bigint" && intMode !== "string") {
    throw new TypeError(`Invalid value for intMode, expected "number", "bigint" or "string", got ${JSON.stringify(intMode)}`);
  }
  if (uri.fragment !== void 0) {
    throw new LibsqlError(`URL fragments are not supported: ${JSON.stringify("#" + uri.fragment)}`, "URL_INVALID");
  }
  if (isInMemoryMode) {
    return {
      scheme: "file",
      tls: false,
      path,
      intMode,
      concurrency,
      syncUrl: config2.syncUrl,
      syncInterval: config2.syncInterval,
      readYourWrites: config2.readYourWrites,
      offline: config2.offline,
      fetch: config2.fetch,
      authToken: void 0,
      encryptionKey: void 0,
      authority: void 0
    };
  }
  return {
    scheme,
    tls,
    authority: uri.authority,
    path,
    authToken,
    intMode,
    concurrency,
    encryptionKey: config2.encryptionKey,
    syncUrl: config2.syncUrl,
    syncInterval: config2.syncInterval,
    readYourWrites: config2.readYourWrites,
    offline: config2.offline,
    fetch: config2.fetch
  };
}
__name(expandConfig, "expandConfig");
var inMemoryMode;
var init_config = __esm({
  "../node_modules/@libsql/core/lib-esm/config.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_api();
    init_uri();
    init_util();
    inMemoryMode = ":memory:";
    __name2(expandConfig, "expandConfig");
  }
});
var _WebSocket;
var init_web = __esm({
  "../node_modules/@libsql/isomorphic-ws/web.mjs"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    if (typeof WebSocket !== "undefined") {
      _WebSocket = WebSocket;
    } else if (typeof global !== "undefined") {
      _WebSocket = global.WebSocket;
    } else if (typeof window !== "undefined") {
      _WebSocket = window.WebSocket;
    } else if (typeof self !== "undefined") {
      _WebSocket = self.WebSocket;
    }
  }
});
var Client;
var init_client = __esm({
  "../node_modules/@libsql/hrana-client/lib-esm/client.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    Client = class {
      static {
        __name(this, "Client");
      }
      static {
        __name2(this, "Client");
      }
      /** @private */
      constructor() {
        this.intMode = "number";
      }
      /** Representation of integers returned from the database. See {@link IntMode}.
       *
       * This value is inherited by {@link Stream} objects created with {@link openStream}, but you can
       * override the integer mode for every stream by setting {@link Stream.intMode} on the stream.
       */
      intMode;
    };
  }
});
var ClientError;
var ProtoError;
var ResponseError;
var ClosedError;
var WebSocketUnsupportedError;
var WebSocketError;
var HttpServerError;
var ProtocolVersionError;
var InternalError;
var MisuseError;
var init_errors = __esm({
  "../node_modules/@libsql/hrana-client/lib-esm/errors.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    ClientError = class extends Error {
      static {
        __name(this, "ClientError");
      }
      static {
        __name2(this, "ClientError");
      }
      /** @private */
      constructor(message2) {
        super(message2);
        this.name = "ClientError";
      }
    };
    ProtoError = class extends ClientError {
      static {
        __name(this, "ProtoError");
      }
      static {
        __name2(this, "ProtoError");
      }
      /** @private */
      constructor(message2) {
        super(message2);
        this.name = "ProtoError";
      }
    };
    ResponseError = class extends ClientError {
      static {
        __name(this, "ResponseError");
      }
      static {
        __name2(this, "ResponseError");
      }
      code;
      /** @internal */
      proto;
      /** @private */
      constructor(message2, protoError) {
        super(message2);
        this.name = "ResponseError";
        this.code = protoError.code;
        this.proto = protoError;
        this.stack = void 0;
      }
    };
    ClosedError = class extends ClientError {
      static {
        __name(this, "ClosedError");
      }
      static {
        __name2(this, "ClosedError");
      }
      /** @private */
      constructor(message2, cause) {
        if (cause !== void 0) {
          super(`${message2}: ${cause}`);
          this.cause = cause;
        } else {
          super(message2);
        }
        this.name = "ClosedError";
      }
    };
    WebSocketUnsupportedError = class extends ClientError {
      static {
        __name(this, "WebSocketUnsupportedError");
      }
      static {
        __name2(this, "WebSocketUnsupportedError");
      }
      /** @private */
      constructor(message2) {
        super(message2);
        this.name = "WebSocketUnsupportedError";
      }
    };
    WebSocketError = class extends ClientError {
      static {
        __name(this, "WebSocketError");
      }
      static {
        __name2(this, "WebSocketError");
      }
      /** @private */
      constructor(message2) {
        super(message2);
        this.name = "WebSocketError";
      }
    };
    HttpServerError = class extends ClientError {
      static {
        __name(this, "HttpServerError");
      }
      static {
        __name2(this, "HttpServerError");
      }
      status;
      /** @private */
      constructor(message2, status) {
        super(message2);
        this.status = status;
        this.name = "HttpServerError";
      }
    };
    ProtocolVersionError = class extends ClientError {
      static {
        __name(this, "ProtocolVersionError");
      }
      static {
        __name2(this, "ProtocolVersionError");
      }
      /** @private */
      constructor(message2) {
        super(message2);
        this.name = "ProtocolVersionError";
      }
    };
    InternalError = class extends ClientError {
      static {
        __name(this, "InternalError");
      }
      static {
        __name2(this, "InternalError");
      }
      /** @private */
      constructor(message2) {
        super(message2);
        this.name = "InternalError";
      }
    };
    MisuseError = class extends ClientError {
      static {
        __name(this, "MisuseError");
      }
      static {
        __name2(this, "MisuseError");
      }
      /** @private */
      constructor(message2) {
        super(message2);
        this.name = "MisuseError";
      }
    };
  }
});
function string(value) {
  if (typeof value === "string") {
    return value;
  }
  throw typeError(value, "string");
}
__name(string, "string");
function stringOpt(value) {
  if (value === null || value === void 0) {
    return void 0;
  } else if (typeof value === "string") {
    return value;
  }
  throw typeError(value, "string or null");
}
__name(stringOpt, "stringOpt");
function number(value) {
  if (typeof value === "number") {
    return value;
  }
  throw typeError(value, "number");
}
__name(number, "number");
function boolean(value) {
  if (typeof value === "boolean") {
    return value;
  }
  throw typeError(value, "boolean");
}
__name(boolean, "boolean");
function array(value) {
  if (Array.isArray(value)) {
    return value;
  }
  throw typeError(value, "array");
}
__name(array, "array");
function object(value) {
  if (value !== null && typeof value === "object" && !Array.isArray(value)) {
    return value;
  }
  throw typeError(value, "object");
}
__name(object, "object");
function arrayObjectsMap(value, fun) {
  return array(value).map((elemValue) => fun(object(elemValue)));
}
__name(arrayObjectsMap, "arrayObjectsMap");
function typeError(value, expected) {
  if (value === void 0) {
    return new ProtoError(`Expected ${expected}, but the property was missing`);
  }
  let received = typeof value;
  if (value === null) {
    received = "null";
  } else if (Array.isArray(value)) {
    received = "array";
  }
  return new ProtoError(`Expected ${expected}, received ${received}`);
}
__name(typeError, "typeError");
function readJsonObject(value, fun) {
  return fun(object(value));
}
__name(readJsonObject, "readJsonObject");
var init_decode = __esm({
  "../node_modules/@libsql/hrana-client/lib-esm/encoding/json/decode.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_errors();
    __name2(string, "string");
    __name2(stringOpt, "stringOpt");
    __name2(number, "number");
    __name2(boolean, "boolean");
    __name2(array, "array");
    __name2(object, "object");
    __name2(arrayObjectsMap, "arrayObjectsMap");
    __name2(typeError, "typeError");
    __name2(readJsonObject, "readJsonObject");
  }
});
function writeJsonObject(value, fun) {
  const output = [];
  const writer = new ObjectWriter(output);
  writer.begin();
  fun(writer, value);
  writer.end();
  return output.join("");
}
__name(writeJsonObject, "writeJsonObject");
var ObjectWriter;
var init_encode = __esm({
  "../node_modules/@libsql/hrana-client/lib-esm/encoding/json/encode.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    ObjectWriter = class {
      static {
        __name(this, "ObjectWriter");
      }
      static {
        __name2(this, "ObjectWriter");
      }
      #output;
      #isFirst;
      constructor(output) {
        this.#output = output;
        this.#isFirst = false;
      }
      begin() {
        this.#output.push("{");
        this.#isFirst = true;
      }
      end() {
        this.#output.push("}");
        this.#isFirst = false;
      }
      #key(name) {
        if (this.#isFirst) {
          this.#output.push('"');
          this.#isFirst = false;
        } else {
          this.#output.push(',"');
        }
        this.#output.push(name);
        this.#output.push('":');
      }
      string(name, value) {
        this.#key(name);
        this.#output.push(JSON.stringify(value));
      }
      stringRaw(name, value) {
        this.#key(name);
        this.#output.push('"');
        this.#output.push(value);
        this.#output.push('"');
      }
      number(name, value) {
        this.#key(name);
        this.#output.push("" + value);
      }
      boolean(name, value) {
        this.#key(name);
        this.#output.push(value ? "true" : "false");
      }
      object(name, value, valueFun) {
        this.#key(name);
        this.begin();
        valueFun(this, value);
        this.end();
      }
      arrayObjects(name, values, valueFun) {
        this.#key(name);
        this.#output.push("[");
        for (let i = 0; i < values.length; ++i) {
          if (i !== 0) {
            this.#output.push(",");
          }
          this.begin();
          valueFun(this, values[i]);
          this.end();
        }
        this.#output.push("]");
      }
    };
    __name2(writeJsonObject, "writeJsonObject");
  }
});
var VARINT;
var FIXED_64;
var LENGTH_DELIMITED;
var FIXED_32;
var init_util2 = __esm({
  "../node_modules/@libsql/hrana-client/lib-esm/encoding/protobuf/util.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    VARINT = 0;
    FIXED_64 = 1;
    LENGTH_DELIMITED = 2;
    FIXED_32 = 5;
  }
});
function readProtobufMessage(data, def) {
  const msgReader = new MessageReader(data);
  const fieldReader = new FieldReader(msgReader);
  let value = def.default();
  while (!msgReader.eof()) {
    const key = msgReader.varint();
    const tag2 = key >> 3;
    const wireType = key & 7;
    fieldReader.setup(wireType);
    const tagFun = def[tag2];
    if (tagFun !== void 0) {
      const returnedValue = tagFun(fieldReader, value);
      if (returnedValue !== void 0) {
        value = returnedValue;
      }
    }
    fieldReader.maybeSkip();
  }
  return value;
}
__name(readProtobufMessage, "readProtobufMessage");
var MessageReader;
var FieldReader;
var init_decode2 = __esm({
  "../node_modules/@libsql/hrana-client/lib-esm/encoding/protobuf/decode.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_errors();
    init_util2();
    MessageReader = class {
      static {
        __name(this, "MessageReader");
      }
      static {
        __name2(this, "MessageReader");
      }
      #array;
      #view;
      #pos;
      constructor(array3) {
        this.#array = array3;
        this.#view = new DataView(array3.buffer, array3.byteOffset, array3.byteLength);
        this.#pos = 0;
      }
      varint() {
        let value = 0;
        for (let shift = 0; ; shift += 7) {
          const byte = this.#array[this.#pos++];
          value |= (byte & 127) << shift;
          if (!(byte & 128)) {
            break;
          }
        }
        return value;
      }
      varintBig() {
        let value = 0n;
        for (let shift = 0n; ; shift += 7n) {
          const byte = this.#array[this.#pos++];
          value |= BigInt(byte & 127) << shift;
          if (!(byte & 128)) {
            break;
          }
        }
        return value;
      }
      bytes(length) {
        const array3 = new Uint8Array(this.#array.buffer, this.#array.byteOffset + this.#pos, length);
        this.#pos += length;
        return array3;
      }
      double() {
        const value = this.#view.getFloat64(this.#pos, true);
        this.#pos += 8;
        return value;
      }
      skipVarint() {
        for (; ; ) {
          const byte = this.#array[this.#pos++];
          if (!(byte & 128)) {
            break;
          }
        }
      }
      skip(count) {
        this.#pos += count;
      }
      eof() {
        return this.#pos >= this.#array.byteLength;
      }
    };
    FieldReader = class {
      static {
        __name(this, "FieldReader");
      }
      static {
        __name2(this, "FieldReader");
      }
      #reader;
      #wireType;
      constructor(reader) {
        this.#reader = reader;
        this.#wireType = -1;
      }
      setup(wireType) {
        this.#wireType = wireType;
      }
      #expect(expectedWireType) {
        if (this.#wireType !== expectedWireType) {
          throw new ProtoError(`Expected wire type ${expectedWireType}, got ${this.#wireType}`);
        }
        this.#wireType = -1;
      }
      bytes() {
        this.#expect(LENGTH_DELIMITED);
        const length = this.#reader.varint();
        return this.#reader.bytes(length);
      }
      string() {
        return new TextDecoder().decode(this.bytes());
      }
      message(def) {
        return readProtobufMessage(this.bytes(), def);
      }
      int32() {
        this.#expect(VARINT);
        return this.#reader.varint();
      }
      uint32() {
        return this.int32();
      }
      bool() {
        return this.int32() !== 0;
      }
      uint64() {
        this.#expect(VARINT);
        return this.#reader.varintBig();
      }
      sint64() {
        const value = this.uint64();
        return value >> 1n ^ -(value & 1n);
      }
      double() {
        this.#expect(FIXED_64);
        return this.#reader.double();
      }
      maybeSkip() {
        if (this.#wireType < 0) {
          return;
        } else if (this.#wireType === VARINT) {
          this.#reader.skipVarint();
        } else if (this.#wireType === FIXED_64) {
          this.#reader.skip(8);
        } else if (this.#wireType === LENGTH_DELIMITED) {
          const length = this.#reader.varint();
          this.#reader.skip(length);
        } else if (this.#wireType === FIXED_32) {
          this.#reader.skip(4);
        } else {
          throw new ProtoError(`Unexpected wire type ${this.#wireType}`);
        }
        this.#wireType = -1;
      }
    };
    __name2(readProtobufMessage, "readProtobufMessage");
  }
});
function writeProtobufMessage(value, fun) {
  const w = new MessageWriter();
  fun(w, value);
  return w.data();
}
__name(writeProtobufMessage, "writeProtobufMessage");
var MessageWriter;
var init_encode2 = __esm({
  "../node_modules/@libsql/hrana-client/lib-esm/encoding/protobuf/encode.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_util2();
    MessageWriter = class _MessageWriter {
      static {
        __name(this, "_MessageWriter");
      }
      static {
        __name2(this, "MessageWriter");
      }
      #buf;
      #array;
      #view;
      #pos;
      constructor() {
        this.#buf = new ArrayBuffer(256);
        this.#array = new Uint8Array(this.#buf);
        this.#view = new DataView(this.#buf);
        this.#pos = 0;
      }
      #ensure(extra) {
        if (this.#pos + extra <= this.#buf.byteLength) {
          return;
        }
        let newCap = this.#buf.byteLength;
        while (newCap < this.#pos + extra) {
          newCap *= 2;
        }
        const newBuf = new ArrayBuffer(newCap);
        const newArray = new Uint8Array(newBuf);
        const newView = new DataView(newBuf);
        newArray.set(new Uint8Array(this.#buf, 0, this.#pos));
        this.#buf = newBuf;
        this.#array = newArray;
        this.#view = newView;
      }
      #varint(value) {
        this.#ensure(5);
        value = 0 | value;
        do {
          let byte = value & 127;
          value >>>= 7;
          byte |= value ? 128 : 0;
          this.#array[this.#pos++] = byte;
        } while (value);
      }
      #varintBig(value) {
        this.#ensure(10);
        value = value & 0xffffffffffffffffn;
        do {
          let byte = Number(value & 0x7fn);
          value >>= 7n;
          byte |= value ? 128 : 0;
          this.#array[this.#pos++] = byte;
        } while (value);
      }
      #tag(tag2, wireType) {
        this.#varint(tag2 << 3 | wireType);
      }
      bytes(tag2, value) {
        this.#tag(tag2, LENGTH_DELIMITED);
        this.#varint(value.byteLength);
        this.#ensure(value.byteLength);
        this.#array.set(value, this.#pos);
        this.#pos += value.byteLength;
      }
      string(tag2, value) {
        this.bytes(tag2, new TextEncoder().encode(value));
      }
      message(tag2, value, fun) {
        const writer = new _MessageWriter();
        fun(writer, value);
        this.bytes(tag2, writer.data());
      }
      int32(tag2, value) {
        this.#tag(tag2, VARINT);
        this.#varint(value);
      }
      uint32(tag2, value) {
        this.int32(tag2, value);
      }
      bool(tag2, value) {
        this.int32(tag2, value ? 1 : 0);
      }
      sint64(tag2, value) {
        this.#tag(tag2, VARINT);
        this.#varintBig(value << 1n ^ value >> 63n);
      }
      double(tag2, value) {
        this.#tag(tag2, FIXED_64);
        this.#ensure(8);
        this.#view.setFloat64(this.#pos, value, true);
        this.#pos += 8;
      }
      data() {
        return new Uint8Array(this.#buf, 0, this.#pos);
      }
    };
    __name2(writeProtobufMessage, "writeProtobufMessage");
  }
});
var init_encoding = __esm({
  "../node_modules/@libsql/hrana-client/lib-esm/encoding/index.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_decode();
    init_encode();
    init_decode2();
    init_encode2();
  }
});
var IdAlloc;
var init_id_alloc = __esm({
  "../node_modules/@libsql/hrana-client/lib-esm/id_alloc.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_errors();
    IdAlloc = class {
      static {
        __name(this, "IdAlloc");
      }
      static {
        __name2(this, "IdAlloc");
      }
      // Set of all allocated ids
      #usedIds;
      // Set of all free ids lower than `#usedIds.size`
      #freeIds;
      constructor() {
        this.#usedIds = /* @__PURE__ */ new Set();
        this.#freeIds = /* @__PURE__ */ new Set();
      }
      // Returns an id that was free, and marks it as used.
      alloc() {
        for (const freeId2 of this.#freeIds) {
          this.#freeIds.delete(freeId2);
          this.#usedIds.add(freeId2);
          if (!this.#usedIds.has(this.#usedIds.size - 1)) {
            this.#freeIds.add(this.#usedIds.size - 1);
          }
          return freeId2;
        }
        const freeId = this.#usedIds.size;
        this.#usedIds.add(freeId);
        return freeId;
      }
      free(id) {
        if (!this.#usedIds.delete(id)) {
          throw new InternalError("Freeing an id that is not allocated");
        }
        this.#freeIds.delete(this.#usedIds.size);
        if (id < this.#usedIds.size) {
          this.#freeIds.add(id);
        }
      }
    };
  }
});
function impossible(value, message2) {
  throw new InternalError(message2);
}
__name(impossible, "impossible");
var init_util3 = __esm({
  "../node_modules/@libsql/hrana-client/lib-esm/util.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_errors();
    __name2(impossible, "impossible");
  }
});
function valueToProto(value) {
  if (value === null) {
    return null;
  } else if (typeof value === "string") {
    return value;
  } else if (typeof value === "number") {
    if (!Number.isFinite(value)) {
      throw new RangeError("Only finite numbers (not Infinity or NaN) can be passed as arguments");
    }
    return value;
  } else if (typeof value === "bigint") {
    if (value < minInteger || value > maxInteger) {
      throw new RangeError("This bigint value is too large to be represented as a 64-bit integer and passed as argument");
    }
    return value;
  } else if (typeof value === "boolean") {
    return value ? 1n : 0n;
  } else if (value instanceof ArrayBuffer) {
    return new Uint8Array(value);
  } else if (value instanceof Uint8Array) {
    return value;
  } else if (value instanceof Date) {
    return +value.valueOf();
  } else if (typeof value === "object") {
    return "" + value.toString();
  } else {
    throw new TypeError("Unsupported type of value");
  }
}
__name(valueToProto, "valueToProto");
function valueFromProto(value, intMode) {
  if (value === null) {
    return null;
  } else if (typeof value === "number") {
    return value;
  } else if (typeof value === "string") {
    return value;
  } else if (typeof value === "bigint") {
    if (intMode === "number") {
      const num = Number(value);
      if (!Number.isSafeInteger(num)) {
        throw new RangeError("Received integer which is too large to be safely represented as a JavaScript number");
      }
      return num;
    } else if (intMode === "bigint") {
      return value;
    } else if (intMode === "string") {
      return "" + value;
    } else {
      throw new MisuseError("Invalid value for IntMode");
    }
  } else if (value instanceof Uint8Array) {
    return value.slice().buffer;
  } else if (value === void 0) {
    throw new ProtoError("Received unrecognized type of Value");
  } else {
    throw impossible(value, "Impossible type of Value");
  }
}
__name(valueFromProto, "valueFromProto");
var minInteger;
var maxInteger;
var init_value = __esm({
  "../node_modules/@libsql/hrana-client/lib-esm/value.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_errors();
    init_util3();
    __name2(valueToProto, "valueToProto");
    minInteger = -9223372036854775808n;
    maxInteger = 9223372036854775807n;
    __name2(valueFromProto, "valueFromProto");
  }
});
function stmtResultFromProto(result) {
  return {
    affectedRowCount: result.affectedRowCount,
    lastInsertRowid: result.lastInsertRowid,
    columnNames: result.cols.map((col) => col.name),
    columnDecltypes: result.cols.map((col) => col.decltype)
  };
}
__name(stmtResultFromProto, "stmtResultFromProto");
function rowsResultFromProto(result, intMode) {
  const stmtResult = stmtResultFromProto(result);
  const rows = result.rows.map((row) => rowFromProto(stmtResult.columnNames, row, intMode));
  return { ...stmtResult, rows };
}
__name(rowsResultFromProto, "rowsResultFromProto");
function rowResultFromProto(result, intMode) {
  const stmtResult = stmtResultFromProto(result);
  let row;
  if (result.rows.length > 0) {
    row = rowFromProto(stmtResult.columnNames, result.rows[0], intMode);
  }
  return { ...stmtResult, row };
}
__name(rowResultFromProto, "rowResultFromProto");
function valueResultFromProto(result, intMode) {
  const stmtResult = stmtResultFromProto(result);
  let value;
  if (result.rows.length > 0 && stmtResult.columnNames.length > 0) {
    value = valueFromProto(result.rows[0][0], intMode);
  }
  return { ...stmtResult, value };
}
__name(valueResultFromProto, "valueResultFromProto");
function rowFromProto(colNames, values, intMode) {
  const row = {};
  Object.defineProperty(row, "length", { value: values.length });
  for (let i = 0; i < values.length; ++i) {
    const value = valueFromProto(values[i], intMode);
    Object.defineProperty(row, i, { value });
    const colName = colNames[i];
    if (colName !== void 0 && !Object.hasOwn(row, colName)) {
      Object.defineProperty(row, colName, { value, enumerable: true, configurable: true, writable: true });
    }
  }
  return row;
}
__name(rowFromProto, "rowFromProto");
function errorFromProto(error2) {
  return new ResponseError(error2.message, error2);
}
__name(errorFromProto, "errorFromProto");
var init_result = __esm({
  "../node_modules/@libsql/hrana-client/lib-esm/result.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_errors();
    init_value();
    __name2(stmtResultFromProto, "stmtResultFromProto");
    __name2(rowsResultFromProto, "rowsResultFromProto");
    __name2(rowResultFromProto, "rowResultFromProto");
    __name2(valueResultFromProto, "valueResultFromProto");
    __name2(rowFromProto, "rowFromProto");
    __name2(errorFromProto, "errorFromProto");
  }
});
function sqlToProto(owner, sql2) {
  if (sql2 instanceof Sql) {
    return { sqlId: sql2._getSqlId(owner) };
  } else {
    return { sql: "" + sql2 };
  }
}
__name(sqlToProto, "sqlToProto");
var Sql;
var init_sql = __esm({
  "../node_modules/@libsql/hrana-client/lib-esm/sql.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_errors();
    Sql = class {
      static {
        __name(this, "Sql");
      }
      static {
        __name2(this, "Sql");
      }
      #owner;
      #sqlId;
      #closed;
      /** @private */
      constructor(owner, sqlId) {
        this.#owner = owner;
        this.#sqlId = sqlId;
        this.#closed = void 0;
      }
      /** @private */
      _getSqlId(owner) {
        if (this.#owner !== owner) {
          throw new MisuseError("Attempted to use SQL text opened with other object");
        } else if (this.#closed !== void 0) {
          throw new ClosedError("SQL text is closed", this.#closed);
        }
        return this.#sqlId;
      }
      /** Remove the SQL text from the server, releasing resouces. */
      close() {
        this._setClosed(new ClientError("SQL text was manually closed"));
      }
      /** @private */
      _setClosed(error2) {
        if (this.#closed === void 0) {
          this.#closed = error2;
          this.#owner._closeSql(this.#sqlId);
        }
      }
      /** True if the SQL text is closed (removed from the server). */
      get closed() {
        return this.#closed !== void 0;
      }
    };
    __name2(sqlToProto, "sqlToProto");
  }
});
var Queue;
var init_queue = __esm({
  "../node_modules/@libsql/hrana-client/lib-esm/queue.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    Queue = class {
      static {
        __name(this, "Queue");
      }
      static {
        __name2(this, "Queue");
      }
      #pushStack;
      #shiftStack;
      constructor() {
        this.#pushStack = [];
        this.#shiftStack = [];
      }
      get length() {
        return this.#pushStack.length + this.#shiftStack.length;
      }
      push(elem) {
        this.#pushStack.push(elem);
      }
      shift() {
        if (this.#shiftStack.length === 0 && this.#pushStack.length > 0) {
          this.#shiftStack = this.#pushStack.reverse();
          this.#pushStack = [];
        }
        return this.#shiftStack.pop();
      }
      first() {
        return this.#shiftStack.length !== 0 ? this.#shiftStack[this.#shiftStack.length - 1] : this.#pushStack[0];
      }
    };
  }
});
function stmtToProto(sqlOwner, stmt, wantRows) {
  let inSql;
  let args = [];
  let namedArgs = [];
  if (stmt instanceof Stmt) {
    inSql = stmt.sql;
    args = stmt._args;
    for (const [name, value] of stmt._namedArgs.entries()) {
      namedArgs.push({ name, value });
    }
  } else if (Array.isArray(stmt)) {
    inSql = stmt[0];
    if (Array.isArray(stmt[1])) {
      args = stmt[1].map((arg) => valueToProto(arg));
    } else {
      namedArgs = Object.entries(stmt[1]).map(([name, value]) => {
        return { name, value: valueToProto(value) };
      });
    }
  } else {
    inSql = stmt;
  }
  const { sql: sql2, sqlId } = sqlToProto(sqlOwner, inSql);
  return { sql: sql2, sqlId, args, namedArgs, wantRows };
}
__name(stmtToProto, "stmtToProto");
var Stmt;
var init_stmt = __esm({
  "../node_modules/@libsql/hrana-client/lib-esm/stmt.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_sql();
    init_value();
    Stmt = class {
      static {
        __name(this, "Stmt");
      }
      static {
        __name2(this, "Stmt");
      }
      /** The SQL statement text. */
      sql;
      /** @private */
      _args;
      /** @private */
      _namedArgs;
      /** Initialize the statement with given SQL text. */
      constructor(sql2) {
        this.sql = sql2;
        this._args = [];
        this._namedArgs = /* @__PURE__ */ new Map();
      }
      /** Binds positional parameters from the given `values`. All previous positional bindings are cleared. */
      bindIndexes(values) {
        this._args.length = 0;
        for (const value of values) {
          this._args.push(valueToProto(value));
        }
        return this;
      }
      /** Binds a parameter by a 1-based index. */
      bindIndex(index, value) {
        if (index !== (index | 0) || index <= 0) {
          throw new RangeError("Index of a positional argument must be positive integer");
        }
        while (this._args.length < index) {
          this._args.push(null);
        }
        this._args[index - 1] = valueToProto(value);
        return this;
      }
      /** Binds a parameter by name. */
      bindName(name, value) {
        this._namedArgs.set(name, valueToProto(value));
        return this;
      }
      /** Clears all bindings. */
      unbindAll() {
        this._args.length = 0;
        this._namedArgs.clear();
        return this;
      }
    };
    __name2(stmtToProto, "stmtToProto");
  }
});
function executeRegular(stream, steps, batch) {
  return stream._batch(batch).then((result) => {
    for (let step = 0; step < steps.length; ++step) {
      const stepResult = result.stepResults.get(step);
      const stepError = result.stepErrors.get(step);
      steps[step].callback(stepResult, stepError);
    }
  });
}
__name(executeRegular, "executeRegular");
async function executeCursor(stream, steps, batch) {
  const cursor = await stream._openCursor(batch);
  try {
    let nextStep = 0;
    let beginEntry = void 0;
    let rows = [];
    for (; ; ) {
      const entry = await cursor.next();
      if (entry === void 0) {
        break;
      }
      if (entry.type === "step_begin") {
        if (entry.step < nextStep || entry.step >= steps.length) {
          throw new ProtoError("Server produced StepBeginEntry for unexpected step");
        } else if (beginEntry !== void 0) {
          throw new ProtoError("Server produced StepBeginEntry before terminating previous step");
        }
        for (let step = nextStep; step < entry.step; ++step) {
          steps[step].callback(void 0, void 0);
        }
        nextStep = entry.step + 1;
        beginEntry = entry;
        rows = [];
      } else if (entry.type === "step_end") {
        if (beginEntry === void 0) {
          throw new ProtoError("Server produced StepEndEntry but no step is active");
        }
        const stmtResult = {
          cols: beginEntry.cols,
          rows,
          affectedRowCount: entry.affectedRowCount,
          lastInsertRowid: entry.lastInsertRowid
        };
        steps[beginEntry.step].callback(stmtResult, void 0);
        beginEntry = void 0;
        rows = [];
      } else if (entry.type === "step_error") {
        if (beginEntry === void 0) {
          if (entry.step >= steps.length) {
            throw new ProtoError("Server produced StepErrorEntry for unexpected step");
          }
          for (let step = nextStep; step < entry.step; ++step) {
            steps[step].callback(void 0, void 0);
          }
        } else {
          if (entry.step !== beginEntry.step) {
            throw new ProtoError("Server produced StepErrorEntry for unexpected step");
          }
          beginEntry = void 0;
          rows = [];
        }
        steps[entry.step].callback(void 0, entry.error);
        nextStep = entry.step + 1;
      } else if (entry.type === "row") {
        if (beginEntry === void 0) {
          throw new ProtoError("Server produced RowEntry but no step is active");
        }
        rows.push(entry.row);
      } else if (entry.type === "error") {
        throw errorFromProto(entry.error);
      } else if (entry.type === "none") {
        throw new ProtoError("Server produced unrecognized CursorEntry");
      } else {
        throw impossible(entry, "Impossible CursorEntry");
      }
    }
    if (beginEntry !== void 0) {
      throw new ProtoError("Server closed Cursor before terminating active step");
    }
    for (let step = nextStep; step < steps.length; ++step) {
      steps[step].callback(void 0, void 0);
    }
  } finally {
    cursor.close();
  }
}
__name(executeCursor, "executeCursor");
function stepIndex(step) {
  if (step._index === void 0) {
    throw new MisuseError("Cannot add a condition referencing a step that has not been added to the batch");
  }
  return step._index;
}
__name(stepIndex, "stepIndex");
function checkCondBatch(expectedBatch, cond) {
  if (cond._batch !== expectedBatch) {
    throw new MisuseError("Cannot mix BatchCond objects for different Batch objects");
  }
}
__name(checkCondBatch, "checkCondBatch");
var Batch;
var BatchStep;
var BatchCond;
var init_batch = __esm({
  "../node_modules/@libsql/hrana-client/lib-esm/batch.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_errors();
    init_result();
    init_stmt();
    init_util3();
    Batch = class {
      static {
        __name(this, "Batch");
      }
      static {
        __name2(this, "Batch");
      }
      /** @private */
      _stream;
      #useCursor;
      /** @private */
      _steps;
      #executed;
      /** @private */
      constructor(stream, useCursor) {
        this._stream = stream;
        this.#useCursor = useCursor;
        this._steps = [];
        this.#executed = false;
      }
      /** Return a builder for adding a step to the batch. */
      step() {
        return new BatchStep(this);
      }
      /** Execute the batch. */
      execute() {
        if (this.#executed) {
          throw new MisuseError("This batch has already been executed");
        }
        this.#executed = true;
        const batch = {
          steps: this._steps.map((step) => step.proto)
        };
        if (this.#useCursor) {
          return executeCursor(this._stream, this._steps, batch);
        } else {
          return executeRegular(this._stream, this._steps, batch);
        }
      }
    };
    __name2(executeRegular, "executeRegular");
    __name2(executeCursor, "executeCursor");
    BatchStep = class {
      static {
        __name(this, "BatchStep");
      }
      static {
        __name2(this, "BatchStep");
      }
      /** @private */
      _batch;
      #conds;
      /** @private */
      _index;
      /** @private */
      constructor(batch) {
        this._batch = batch;
        this.#conds = [];
        this._index = void 0;
      }
      /** Add the condition that needs to be satisfied to execute the statement. If you use this method multiple
       * times, we join the conditions with a logical AND. */
      condition(cond) {
        this.#conds.push(cond._proto);
        return this;
      }
      /** Add a statement that returns rows. */
      query(stmt) {
        return this.#add(stmt, true, rowsResultFromProto);
      }
      /** Add a statement that returns at most a single row. */
      queryRow(stmt) {
        return this.#add(stmt, true, rowResultFromProto);
      }
      /** Add a statement that returns at most a single value. */
      queryValue(stmt) {
        return this.#add(stmt, true, valueResultFromProto);
      }
      /** Add a statement without returning rows. */
      run(stmt) {
        return this.#add(stmt, false, stmtResultFromProto);
      }
      #add(inStmt, wantRows, fromProto) {
        if (this._index !== void 0) {
          throw new MisuseError("This BatchStep has already been added to the batch");
        }
        const stmt = stmtToProto(this._batch._stream._sqlOwner(), inStmt, wantRows);
        let condition;
        if (this.#conds.length === 0) {
          condition = void 0;
        } else if (this.#conds.length === 1) {
          condition = this.#conds[0];
        } else {
          condition = { type: "and", conds: this.#conds.slice() };
        }
        const proto = { stmt, condition };
        return new Promise((outputCallback, errorCallback) => {
          const callback = /* @__PURE__ */ __name2((stepResult, stepError) => {
            if (stepResult !== void 0 && stepError !== void 0) {
              errorCallback(new ProtoError("Server returned both result and error"));
            } else if (stepError !== void 0) {
              errorCallback(errorFromProto(stepError));
            } else if (stepResult !== void 0) {
              outputCallback(fromProto(stepResult, this._batch._stream.intMode));
            } else {
              outputCallback(void 0);
            }
          }, "callback");
          this._index = this._batch._steps.length;
          this._batch._steps.push({ proto, callback });
        });
      }
    };
    BatchCond = class _BatchCond {
      static {
        __name(this, "_BatchCond");
      }
      static {
        __name2(this, "BatchCond");
      }
      /** @private */
      _batch;
      /** @private */
      _proto;
      /** @private */
      constructor(batch, proto) {
        this._batch = batch;
        this._proto = proto;
      }
      /** Create a condition that evaluates to true when the given step executes successfully.
       *
       * If the given step fails error or is skipped because its condition evaluated to false, this
       * condition evaluates to false.
       */
      static ok(step) {
        return new _BatchCond(step._batch, { type: "ok", step: stepIndex(step) });
      }
      /** Create a condition that evaluates to true when the given step fails.
       *
       * If the given step succeeds or is skipped because its condition evaluated to false, this condition
       * evaluates to false.
       */
      static error(step) {
        return new _BatchCond(step._batch, { type: "error", step: stepIndex(step) });
      }
      /** Create a condition that is a logical negation of another condition.
       */
      static not(cond) {
        return new _BatchCond(cond._batch, { type: "not", cond: cond._proto });
      }
      /** Create a condition that is a logical AND of other conditions.
       */
      static and(batch, conds) {
        for (const cond of conds) {
          checkCondBatch(batch, cond);
        }
        return new _BatchCond(batch, { type: "and", conds: conds.map((e) => e._proto) });
      }
      /** Create a condition that is a logical OR of other conditions.
       */
      static or(batch, conds) {
        for (const cond of conds) {
          checkCondBatch(batch, cond);
        }
        return new _BatchCond(batch, { type: "or", conds: conds.map((e) => e._proto) });
      }
      /** Create a condition that evaluates to true when the SQL connection is in autocommit mode (not inside an
       * explicit transaction). This requires protocol version 3 or higher.
       */
      static isAutocommit(batch) {
        batch._stream.client()._ensureVersion(3, "BatchCond.isAutocommit()");
        return new _BatchCond(batch, { type: "is_autocommit" });
      }
    };
    __name2(stepIndex, "stepIndex");
    __name2(checkCondBatch, "checkCondBatch");
  }
});
function describeResultFromProto(result) {
  return {
    paramNames: result.params.map((p) => p.name),
    columns: result.cols,
    isExplain: result.isExplain,
    isReadonly: result.isReadonly
  };
}
__name(describeResultFromProto, "describeResultFromProto");
var init_describe = __esm({
  "../node_modules/@libsql/hrana-client/lib-esm/describe.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    __name2(describeResultFromProto, "describeResultFromProto");
  }
});
var Stream;
var init_stream = __esm({
  "../node_modules/@libsql/hrana-client/lib-esm/stream.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_batch();
    init_describe();
    init_result();
    init_sql();
    init_stmt();
    Stream = class {
      static {
        __name(this, "Stream");
      }
      static {
        __name2(this, "Stream");
      }
      /** @private */
      constructor(intMode) {
        this.intMode = intMode;
      }
      /** Execute a statement and return rows. */
      query(stmt) {
        return this.#execute(stmt, true, rowsResultFromProto);
      }
      /** Execute a statement and return at most a single row. */
      queryRow(stmt) {
        return this.#execute(stmt, true, rowResultFromProto);
      }
      /** Execute a statement and return at most a single value. */
      queryValue(stmt) {
        return this.#execute(stmt, true, valueResultFromProto);
      }
      /** Execute a statement without returning rows. */
      run(stmt) {
        return this.#execute(stmt, false, stmtResultFromProto);
      }
      #execute(inStmt, wantRows, fromProto) {
        const stmt = stmtToProto(this._sqlOwner(), inStmt, wantRows);
        return this._execute(stmt).then((r) => fromProto(r, this.intMode));
      }
      /** Return a builder for creating and executing a batch.
       *
       * If `useCursor` is true, the batch will be executed using a Hrana cursor, which will stream results from
       * the server to the client, which consumes less memory on the server. This requires protocol version 3 or
       * higher.
       */
      batch(useCursor = false) {
        return new Batch(this, useCursor);
      }
      /** Parse and analyze a statement. This requires protocol version 2 or higher. */
      describe(inSql) {
        const protoSql = sqlToProto(this._sqlOwner(), inSql);
        return this._describe(protoSql).then(describeResultFromProto);
      }
      /** Execute a sequence of statements separated by semicolons. This requires protocol version 2 or higher.
       * */
      sequence(inSql) {
        const protoSql = sqlToProto(this._sqlOwner(), inSql);
        return this._sequence(protoSql);
      }
      /** Representation of integers returned from the database. See {@link IntMode}.
       *
       * This value affects the results of all operations on this stream.
       */
      intMode;
    };
  }
});
var Cursor;
var init_cursor = __esm({
  "../node_modules/@libsql/hrana-client/lib-esm/cursor.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    Cursor = class {
      static {
        __name(this, "Cursor");
      }
      static {
        __name2(this, "Cursor");
      }
    };
  }
});
var fetchChunkSize;
var fetchQueueSize;
var WsCursor;
var init_cursor2 = __esm({
  "../node_modules/@libsql/hrana-client/lib-esm/ws/cursor.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_errors();
    init_cursor();
    init_queue();
    fetchChunkSize = 1e3;
    fetchQueueSize = 10;
    WsCursor = class extends Cursor {
      static {
        __name(this, "WsCursor");
      }
      static {
        __name2(this, "WsCursor");
      }
      #client;
      #stream;
      #cursorId;
      #entryQueue;
      #fetchQueue;
      #closed;
      #done;
      /** @private */
      constructor(client, stream, cursorId) {
        super();
        this.#client = client;
        this.#stream = stream;
        this.#cursorId = cursorId;
        this.#entryQueue = new Queue();
        this.#fetchQueue = new Queue();
        this.#closed = void 0;
        this.#done = false;
      }
      /** Fetch the next entry from the cursor. */
      async next() {
        for (; ; ) {
          if (this.#closed !== void 0) {
            throw new ClosedError("Cursor is closed", this.#closed);
          }
          while (!this.#done && this.#fetchQueue.length < fetchQueueSize) {
            this.#fetchQueue.push(this.#fetch());
          }
          const entry = this.#entryQueue.shift();
          if (this.#done || entry !== void 0) {
            return entry;
          }
          await this.#fetchQueue.shift().then((response) => {
            if (response === void 0) {
              return;
            }
            for (const entry2 of response.entries) {
              this.#entryQueue.push(entry2);
            }
            this.#done ||= response.done;
          });
        }
      }
      #fetch() {
        return this.#stream._sendCursorRequest(this, {
          type: "fetch_cursor",
          cursorId: this.#cursorId,
          maxCount: fetchChunkSize
        }).then((resp) => resp, (error2) => {
          this._setClosed(error2);
          return void 0;
        });
      }
      /** @private */
      _setClosed(error2) {
        if (this.#closed !== void 0) {
          return;
        }
        this.#closed = error2;
        this.#stream._sendCursorRequest(this, {
          type: "close_cursor",
          cursorId: this.#cursorId
        }).catch(() => void 0);
        this.#stream._cursorClosed(this);
      }
      /** Close the cursor. */
      close() {
        this._setClosed(new ClientError("Cursor was manually closed"));
      }
      /** True if the cursor is closed. */
      get closed() {
        return this.#closed !== void 0;
      }
    };
  }
});
var WsStream;
var init_stream2 = __esm({
  "../node_modules/@libsql/hrana-client/lib-esm/ws/stream.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_errors();
    init_queue();
    init_stream();
    init_cursor2();
    WsStream = class _WsStream extends Stream {
      static {
        __name(this, "_WsStream");
      }
      static {
        __name2(this, "WsStream");
      }
      #client;
      #streamId;
      #queue;
      #cursor;
      #closing;
      #closed;
      /** @private */
      static open(client) {
        const streamId = client._streamIdAlloc.alloc();
        const stream = new _WsStream(client, streamId);
        const responseCallback = /* @__PURE__ */ __name2(() => void 0, "responseCallback");
        const errorCallback = /* @__PURE__ */ __name2((e) => stream.#setClosed(e), "errorCallback");
        const request = { type: "open_stream", streamId };
        client._sendRequest(request, { responseCallback, errorCallback });
        return stream;
      }
      /** @private */
      constructor(client, streamId) {
        super(client.intMode);
        this.#client = client;
        this.#streamId = streamId;
        this.#queue = new Queue();
        this.#cursor = void 0;
        this.#closing = false;
        this.#closed = void 0;
      }
      /** Get the {@link WsClient} object that this stream belongs to. */
      client() {
        return this.#client;
      }
      /** @private */
      _sqlOwner() {
        return this.#client;
      }
      /** @private */
      _execute(stmt) {
        return this.#sendStreamRequest({
          type: "execute",
          streamId: this.#streamId,
          stmt
        }).then((response) => {
          return response.result;
        });
      }
      /** @private */
      _batch(batch) {
        return this.#sendStreamRequest({
          type: "batch",
          streamId: this.#streamId,
          batch
        }).then((response) => {
          return response.result;
        });
      }
      /** @private */
      _describe(protoSql) {
        this.#client._ensureVersion(2, "describe()");
        return this.#sendStreamRequest({
          type: "describe",
          streamId: this.#streamId,
          sql: protoSql.sql,
          sqlId: protoSql.sqlId
        }).then((response) => {
          return response.result;
        });
      }
      /** @private */
      _sequence(protoSql) {
        this.#client._ensureVersion(2, "sequence()");
        return this.#sendStreamRequest({
          type: "sequence",
          streamId: this.#streamId,
          sql: protoSql.sql,
          sqlId: protoSql.sqlId
        }).then((_response) => {
          return void 0;
        });
      }
      /** Check whether the SQL connection underlying this stream is in autocommit state (i.e., outside of an
       * explicit transaction). This requires protocol version 3 or higher.
       */
      getAutocommit() {
        this.#client._ensureVersion(3, "getAutocommit()");
        return this.#sendStreamRequest({
          type: "get_autocommit",
          streamId: this.#streamId
        }).then((response) => {
          return response.isAutocommit;
        });
      }
      #sendStreamRequest(request) {
        return new Promise((responseCallback, errorCallback) => {
          this.#pushToQueue({ type: "request", request, responseCallback, errorCallback });
        });
      }
      /** @private */
      _openCursor(batch) {
        this.#client._ensureVersion(3, "cursor");
        return new Promise((cursorCallback, errorCallback) => {
          this.#pushToQueue({ type: "cursor", batch, cursorCallback, errorCallback });
        });
      }
      /** @private */
      _sendCursorRequest(cursor, request) {
        if (cursor !== this.#cursor) {
          throw new InternalError("Cursor not associated with the stream attempted to execute a request");
        }
        return new Promise((responseCallback, errorCallback) => {
          if (this.#closed !== void 0) {
            errorCallback(new ClosedError("Stream is closed", this.#closed));
          } else {
            this.#client._sendRequest(request, { responseCallback, errorCallback });
          }
        });
      }
      /** @private */
      _cursorClosed(cursor) {
        if (cursor !== this.#cursor) {
          throw new InternalError("Cursor was closed, but it was not associated with the stream");
        }
        this.#cursor = void 0;
        this.#flushQueue();
      }
      #pushToQueue(entry) {
        if (this.#closed !== void 0) {
          entry.errorCallback(new ClosedError("Stream is closed", this.#closed));
        } else if (this.#closing) {
          entry.errorCallback(new ClosedError("Stream is closing", void 0));
        } else {
          this.#queue.push(entry);
          this.#flushQueue();
        }
      }
      #flushQueue() {
        for (; ; ) {
          const entry = this.#queue.first();
          if (entry === void 0 && this.#cursor === void 0 && this.#closing) {
            this.#setClosed(new ClientError("Stream was gracefully closed"));
            break;
          } else if (entry?.type === "request" && this.#cursor === void 0) {
            const { request, responseCallback, errorCallback } = entry;
            this.#queue.shift();
            this.#client._sendRequest(request, { responseCallback, errorCallback });
          } else if (entry?.type === "cursor" && this.#cursor === void 0) {
            const { batch, cursorCallback } = entry;
            this.#queue.shift();
            const cursorId = this.#client._cursorIdAlloc.alloc();
            const cursor = new WsCursor(this.#client, this, cursorId);
            const request = {
              type: "open_cursor",
              streamId: this.#streamId,
              cursorId,
              batch
            };
            const responseCallback = /* @__PURE__ */ __name2(() => void 0, "responseCallback");
            const errorCallback = /* @__PURE__ */ __name2((e) => cursor._setClosed(e), "errorCallback");
            this.#client._sendRequest(request, { responseCallback, errorCallback });
            this.#cursor = cursor;
            cursorCallback(cursor);
          } else {
            break;
          }
        }
      }
      #setClosed(error2) {
        if (this.#closed !== void 0) {
          return;
        }
        this.#closed = error2;
        if (this.#cursor !== void 0) {
          this.#cursor._setClosed(error2);
        }
        for (; ; ) {
          const entry = this.#queue.shift();
          if (entry !== void 0) {
            entry.errorCallback(error2);
          } else {
            break;
          }
        }
        const request = { type: "close_stream", streamId: this.#streamId };
        const responseCallback = /* @__PURE__ */ __name2(() => this.#client._streamIdAlloc.free(this.#streamId), "responseCallback");
        const errorCallback = /* @__PURE__ */ __name2(() => void 0, "errorCallback");
        this.#client._sendRequest(request, { responseCallback, errorCallback });
      }
      /** Immediately close the stream. */
      close() {
        this.#setClosed(new ClientError("Stream was manually closed"));
      }
      /** Gracefully close the stream. */
      closeGracefully() {
        this.#closing = true;
        this.#flushQueue();
      }
      /** True if the stream is closed or closing. */
      get closed() {
        return this.#closed !== void 0 || this.#closing;
      }
    };
  }
});
function Stmt2(w, msg) {
  if (msg.sql !== void 0) {
    w.string("sql", msg.sql);
  }
  if (msg.sqlId !== void 0) {
    w.number("sql_id", msg.sqlId);
  }
  w.arrayObjects("args", msg.args, Value);
  w.arrayObjects("named_args", msg.namedArgs, NamedArg);
  w.boolean("want_rows", msg.wantRows);
}
__name(Stmt2, "Stmt2");
function NamedArg(w, msg) {
  w.string("name", msg.name);
  w.object("value", msg.value, Value);
}
__name(NamedArg, "NamedArg");
function Batch2(w, msg) {
  w.arrayObjects("steps", msg.steps, BatchStep2);
}
__name(Batch2, "Batch2");
function BatchStep2(w, msg) {
  if (msg.condition !== void 0) {
    w.object("condition", msg.condition, BatchCond2);
  }
  w.object("stmt", msg.stmt, Stmt2);
}
__name(BatchStep2, "BatchStep2");
function BatchCond2(w, msg) {
  w.stringRaw("type", msg.type);
  if (msg.type === "ok" || msg.type === "error") {
    w.number("step", msg.step);
  } else if (msg.type === "not") {
    w.object("cond", msg.cond, BatchCond2);
  } else if (msg.type === "and" || msg.type === "or") {
    w.arrayObjects("conds", msg.conds, BatchCond2);
  } else if (msg.type === "is_autocommit") {
  } else {
    throw impossible(msg, "Impossible type of BatchCond");
  }
}
__name(BatchCond2, "BatchCond2");
function Value(w, msg) {
  if (msg === null) {
    w.stringRaw("type", "null");
  } else if (typeof msg === "bigint") {
    w.stringRaw("type", "integer");
    w.stringRaw("value", "" + msg);
  } else if (typeof msg === "number") {
    w.stringRaw("type", "float");
    w.number("value", msg);
  } else if (typeof msg === "string") {
    w.stringRaw("type", "text");
    w.string("value", msg);
  } else if (msg instanceof Uint8Array) {
    w.stringRaw("type", "blob");
    w.stringRaw("base64", gBase64.fromUint8Array(msg));
  } else if (msg === void 0) {
  } else {
    throw impossible(msg, "Impossible type of Value");
  }
}
__name(Value, "Value");
var init_json_encode = __esm({
  "../node_modules/@libsql/hrana-client/lib-esm/shared/json_encode.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_base64();
    init_util3();
    __name2(Stmt2, "Stmt");
    __name2(NamedArg, "NamedArg");
    __name2(Batch2, "Batch");
    __name2(BatchStep2, "BatchStep");
    __name2(BatchCond2, "BatchCond");
    __name2(Value, "Value");
  }
});
function ClientMsg(w, msg) {
  w.stringRaw("type", msg.type);
  if (msg.type === "hello") {
    if (msg.jwt !== void 0) {
      w.string("jwt", msg.jwt);
    }
  } else if (msg.type === "request") {
    w.number("request_id", msg.requestId);
    w.object("request", msg.request, Request2);
  } else {
    throw impossible(msg, "Impossible type of ClientMsg");
  }
}
__name(ClientMsg, "ClientMsg");
function Request2(w, msg) {
  w.stringRaw("type", msg.type);
  if (msg.type === "open_stream") {
    w.number("stream_id", msg.streamId);
  } else if (msg.type === "close_stream") {
    w.number("stream_id", msg.streamId);
  } else if (msg.type === "execute") {
    w.number("stream_id", msg.streamId);
    w.object("stmt", msg.stmt, Stmt2);
  } else if (msg.type === "batch") {
    w.number("stream_id", msg.streamId);
    w.object("batch", msg.batch, Batch2);
  } else if (msg.type === "open_cursor") {
    w.number("stream_id", msg.streamId);
    w.number("cursor_id", msg.cursorId);
    w.object("batch", msg.batch, Batch2);
  } else if (msg.type === "close_cursor") {
    w.number("cursor_id", msg.cursorId);
  } else if (msg.type === "fetch_cursor") {
    w.number("cursor_id", msg.cursorId);
    w.number("max_count", msg.maxCount);
  } else if (msg.type === "sequence") {
    w.number("stream_id", msg.streamId);
    if (msg.sql !== void 0) {
      w.string("sql", msg.sql);
    }
    if (msg.sqlId !== void 0) {
      w.number("sql_id", msg.sqlId);
    }
  } else if (msg.type === "describe") {
    w.number("stream_id", msg.streamId);
    if (msg.sql !== void 0) {
      w.string("sql", msg.sql);
    }
    if (msg.sqlId !== void 0) {
      w.number("sql_id", msg.sqlId);
    }
  } else if (msg.type === "store_sql") {
    w.number("sql_id", msg.sqlId);
    w.string("sql", msg.sql);
  } else if (msg.type === "close_sql") {
    w.number("sql_id", msg.sqlId);
  } else if (msg.type === "get_autocommit") {
    w.number("stream_id", msg.streamId);
  } else {
    throw impossible(msg, "Impossible type of Request");
  }
}
__name(Request2, "Request2");
var init_json_encode2 = __esm({
  "../node_modules/@libsql/hrana-client/lib-esm/ws/json_encode.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_json_encode();
    init_util3();
    __name2(ClientMsg, "ClientMsg");
    __name2(Request2, "Request");
  }
});
function Stmt3(w, msg) {
  if (msg.sql !== void 0) {
    w.string(1, msg.sql);
  }
  if (msg.sqlId !== void 0) {
    w.int32(2, msg.sqlId);
  }
  for (const arg of msg.args) {
    w.message(3, arg, Value2);
  }
  for (const arg of msg.namedArgs) {
    w.message(4, arg, NamedArg2);
  }
  w.bool(5, msg.wantRows);
}
__name(Stmt3, "Stmt3");
function NamedArg2(w, msg) {
  w.string(1, msg.name);
  w.message(2, msg.value, Value2);
}
__name(NamedArg2, "NamedArg2");
function Batch3(w, msg) {
  for (const step of msg.steps) {
    w.message(1, step, BatchStep3);
  }
}
__name(Batch3, "Batch3");
function BatchStep3(w, msg) {
  if (msg.condition !== void 0) {
    w.message(1, msg.condition, BatchCond3);
  }
  w.message(2, msg.stmt, Stmt3);
}
__name(BatchStep3, "BatchStep3");
function BatchCond3(w, msg) {
  if (msg.type === "ok") {
    w.uint32(1, msg.step);
  } else if (msg.type === "error") {
    w.uint32(2, msg.step);
  } else if (msg.type === "not") {
    w.message(3, msg.cond, BatchCond3);
  } else if (msg.type === "and") {
    w.message(4, msg.conds, BatchCondList);
  } else if (msg.type === "or") {
    w.message(5, msg.conds, BatchCondList);
  } else if (msg.type === "is_autocommit") {
    w.message(6, void 0, Empty);
  } else {
    throw impossible(msg, "Impossible type of BatchCond");
  }
}
__name(BatchCond3, "BatchCond3");
function BatchCondList(w, msg) {
  for (const cond of msg) {
    w.message(1, cond, BatchCond3);
  }
}
__name(BatchCondList, "BatchCondList");
function Value2(w, msg) {
  if (msg === null) {
    w.message(1, void 0, Empty);
  } else if (typeof msg === "bigint") {
    w.sint64(2, msg);
  } else if (typeof msg === "number") {
    w.double(3, msg);
  } else if (typeof msg === "string") {
    w.string(4, msg);
  } else if (msg instanceof Uint8Array) {
    w.bytes(5, msg);
  } else if (msg === void 0) {
  } else {
    throw impossible(msg, "Impossible type of Value");
  }
}
__name(Value2, "Value2");
function Empty(_w, _msg) {
}
__name(Empty, "Empty");
var init_protobuf_encode = __esm({
  "../node_modules/@libsql/hrana-client/lib-esm/shared/protobuf_encode.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_util3();
    __name2(Stmt3, "Stmt");
    __name2(NamedArg2, "NamedArg");
    __name2(Batch3, "Batch");
    __name2(BatchStep3, "BatchStep");
    __name2(BatchCond3, "BatchCond");
    __name2(BatchCondList, "BatchCondList");
    __name2(Value2, "Value");
    __name2(Empty, "Empty");
  }
});
function ClientMsg2(w, msg) {
  if (msg.type === "hello") {
    w.message(1, msg, HelloMsg);
  } else if (msg.type === "request") {
    w.message(2, msg, RequestMsg);
  } else {
    throw impossible(msg, "Impossible type of ClientMsg");
  }
}
__name(ClientMsg2, "ClientMsg2");
function HelloMsg(w, msg) {
  if (msg.jwt !== void 0) {
    w.string(1, msg.jwt);
  }
}
__name(HelloMsg, "HelloMsg");
function RequestMsg(w, msg) {
  w.int32(1, msg.requestId);
  const request = msg.request;
  if (request.type === "open_stream") {
    w.message(2, request, OpenStreamReq);
  } else if (request.type === "close_stream") {
    w.message(3, request, CloseStreamReq);
  } else if (request.type === "execute") {
    w.message(4, request, ExecuteReq);
  } else if (request.type === "batch") {
    w.message(5, request, BatchReq);
  } else if (request.type === "open_cursor") {
    w.message(6, request, OpenCursorReq);
  } else if (request.type === "close_cursor") {
    w.message(7, request, CloseCursorReq);
  } else if (request.type === "fetch_cursor") {
    w.message(8, request, FetchCursorReq);
  } else if (request.type === "sequence") {
    w.message(9, request, SequenceReq);
  } else if (request.type === "describe") {
    w.message(10, request, DescribeReq);
  } else if (request.type === "store_sql") {
    w.message(11, request, StoreSqlReq);
  } else if (request.type === "close_sql") {
    w.message(12, request, CloseSqlReq);
  } else if (request.type === "get_autocommit") {
    w.message(13, request, GetAutocommitReq);
  } else {
    throw impossible(request, "Impossible type of Request");
  }
}
__name(RequestMsg, "RequestMsg");
function OpenStreamReq(w, msg) {
  w.int32(1, msg.streamId);
}
__name(OpenStreamReq, "OpenStreamReq");
function CloseStreamReq(w, msg) {
  w.int32(1, msg.streamId);
}
__name(CloseStreamReq, "CloseStreamReq");
function ExecuteReq(w, msg) {
  w.int32(1, msg.streamId);
  w.message(2, msg.stmt, Stmt3);
}
__name(ExecuteReq, "ExecuteReq");
function BatchReq(w, msg) {
  w.int32(1, msg.streamId);
  w.message(2, msg.batch, Batch3);
}
__name(BatchReq, "BatchReq");
function OpenCursorReq(w, msg) {
  w.int32(1, msg.streamId);
  w.int32(2, msg.cursorId);
  w.message(3, msg.batch, Batch3);
}
__name(OpenCursorReq, "OpenCursorReq");
function CloseCursorReq(w, msg) {
  w.int32(1, msg.cursorId);
}
__name(CloseCursorReq, "CloseCursorReq");
function FetchCursorReq(w, msg) {
  w.int32(1, msg.cursorId);
  w.uint32(2, msg.maxCount);
}
__name(FetchCursorReq, "FetchCursorReq");
function SequenceReq(w, msg) {
  w.int32(1, msg.streamId);
  if (msg.sql !== void 0) {
    w.string(2, msg.sql);
  }
  if (msg.sqlId !== void 0) {
    w.int32(3, msg.sqlId);
  }
}
__name(SequenceReq, "SequenceReq");
function DescribeReq(w, msg) {
  w.int32(1, msg.streamId);
  if (msg.sql !== void 0) {
    w.string(2, msg.sql);
  }
  if (msg.sqlId !== void 0) {
    w.int32(3, msg.sqlId);
  }
}
__name(DescribeReq, "DescribeReq");
function StoreSqlReq(w, msg) {
  w.int32(1, msg.sqlId);
  w.string(2, msg.sql);
}
__name(StoreSqlReq, "StoreSqlReq");
function CloseSqlReq(w, msg) {
  w.int32(1, msg.sqlId);
}
__name(CloseSqlReq, "CloseSqlReq");
function GetAutocommitReq(w, msg) {
  w.int32(1, msg.streamId);
}
__name(GetAutocommitReq, "GetAutocommitReq");
var init_protobuf_encode2 = __esm({
  "../node_modules/@libsql/hrana-client/lib-esm/ws/protobuf_encode.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_protobuf_encode();
    init_util3();
    __name2(ClientMsg2, "ClientMsg");
    __name2(HelloMsg, "HelloMsg");
    __name2(RequestMsg, "RequestMsg");
    __name2(OpenStreamReq, "OpenStreamReq");
    __name2(CloseStreamReq, "CloseStreamReq");
    __name2(ExecuteReq, "ExecuteReq");
    __name2(BatchReq, "BatchReq");
    __name2(OpenCursorReq, "OpenCursorReq");
    __name2(CloseCursorReq, "CloseCursorReq");
    __name2(FetchCursorReq, "FetchCursorReq");
    __name2(SequenceReq, "SequenceReq");
    __name2(DescribeReq, "DescribeReq");
    __name2(StoreSqlReq, "StoreSqlReq");
    __name2(CloseSqlReq, "CloseSqlReq");
    __name2(GetAutocommitReq, "GetAutocommitReq");
  }
});
function Error2(obj) {
  const message2 = string(obj["message"]);
  const code = stringOpt(obj["code"]);
  return { message: message2, code };
}
__name(Error2, "Error2");
function StmtResult(obj) {
  const cols = arrayObjectsMap(obj["cols"], Col);
  const rows = array(obj["rows"]).map((rowObj) => arrayObjectsMap(rowObj, Value3));
  const affectedRowCount = number(obj["affected_row_count"]);
  const lastInsertRowidStr = stringOpt(obj["last_insert_rowid"]);
  const lastInsertRowid = lastInsertRowidStr !== void 0 ? BigInt(lastInsertRowidStr) : void 0;
  return { cols, rows, affectedRowCount, lastInsertRowid };
}
__name(StmtResult, "StmtResult");
function Col(obj) {
  const name = stringOpt(obj["name"]);
  const decltype = stringOpt(obj["decltype"]);
  return { name, decltype };
}
__name(Col, "Col");
function BatchResult(obj) {
  const stepResults = /* @__PURE__ */ new Map();
  array(obj["step_results"]).forEach((value, i) => {
    if (value !== null) {
      stepResults.set(i, StmtResult(object(value)));
    }
  });
  const stepErrors = /* @__PURE__ */ new Map();
  array(obj["step_errors"]).forEach((value, i) => {
    if (value !== null) {
      stepErrors.set(i, Error2(object(value)));
    }
  });
  return { stepResults, stepErrors };
}
__name(BatchResult, "BatchResult");
function CursorEntry(obj) {
  const type = string(obj["type"]);
  if (type === "step_begin") {
    const step = number(obj["step"]);
    const cols = arrayObjectsMap(obj["cols"], Col);
    return { type: "step_begin", step, cols };
  } else if (type === "step_end") {
    const affectedRowCount = number(obj["affected_row_count"]);
    const lastInsertRowidStr = stringOpt(obj["last_insert_rowid"]);
    const lastInsertRowid = lastInsertRowidStr !== void 0 ? BigInt(lastInsertRowidStr) : void 0;
    return { type: "step_end", affectedRowCount, lastInsertRowid };
  } else if (type === "step_error") {
    const step = number(obj["step"]);
    const error2 = Error2(object(obj["error"]));
    return { type: "step_error", step, error: error2 };
  } else if (type === "row") {
    const row = arrayObjectsMap(obj["row"], Value3);
    return { type: "row", row };
  } else if (type === "error") {
    const error2 = Error2(object(obj["error"]));
    return { type: "error", error: error2 };
  } else {
    throw new ProtoError("Unexpected type of CursorEntry");
  }
}
__name(CursorEntry, "CursorEntry");
function DescribeResult(obj) {
  const params = arrayObjectsMap(obj["params"], DescribeParam);
  const cols = arrayObjectsMap(obj["cols"], DescribeCol);
  const isExplain = boolean(obj["is_explain"]);
  const isReadonly = boolean(obj["is_readonly"]);
  return { params, cols, isExplain, isReadonly };
}
__name(DescribeResult, "DescribeResult");
function DescribeParam(obj) {
  const name = stringOpt(obj["name"]);
  return { name };
}
__name(DescribeParam, "DescribeParam");
function DescribeCol(obj) {
  const name = string(obj["name"]);
  const decltype = stringOpt(obj["decltype"]);
  return { name, decltype };
}
__name(DescribeCol, "DescribeCol");
function Value3(obj) {
  const type = string(obj["type"]);
  if (type === "null") {
    return null;
  } else if (type === "integer") {
    const value = string(obj["value"]);
    return BigInt(value);
  } else if (type === "float") {
    return number(obj["value"]);
  } else if (type === "text") {
    return string(obj["value"]);
  } else if (type === "blob") {
    return gBase64.toUint8Array(string(obj["base64"]));
  } else {
    throw new ProtoError("Unexpected type of Value");
  }
}
__name(Value3, "Value3");
var init_json_decode = __esm({
  "../node_modules/@libsql/hrana-client/lib-esm/shared/json_decode.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_base64();
    init_errors();
    init_decode();
    __name2(Error2, "Error");
    __name2(StmtResult, "StmtResult");
    __name2(Col, "Col");
    __name2(BatchResult, "BatchResult");
    __name2(CursorEntry, "CursorEntry");
    __name2(DescribeResult, "DescribeResult");
    __name2(DescribeParam, "DescribeParam");
    __name2(DescribeCol, "DescribeCol");
    __name2(Value3, "Value");
  }
});
function ServerMsg(obj) {
  const type = string(obj["type"]);
  if (type === "hello_ok") {
    return { type: "hello_ok" };
  } else if (type === "hello_error") {
    const error2 = Error2(object(obj["error"]));
    return { type: "hello_error", error: error2 };
  } else if (type === "response_ok") {
    const requestId = number(obj["request_id"]);
    const response = Response2(object(obj["response"]));
    return { type: "response_ok", requestId, response };
  } else if (type === "response_error") {
    const requestId = number(obj["request_id"]);
    const error2 = Error2(object(obj["error"]));
    return { type: "response_error", requestId, error: error2 };
  } else {
    throw new ProtoError("Unexpected type of ServerMsg");
  }
}
__name(ServerMsg, "ServerMsg");
function Response2(obj) {
  const type = string(obj["type"]);
  if (type === "open_stream") {
    return { type: "open_stream" };
  } else if (type === "close_stream") {
    return { type: "close_stream" };
  } else if (type === "execute") {
    const result = StmtResult(object(obj["result"]));
    return { type: "execute", result };
  } else if (type === "batch") {
    const result = BatchResult(object(obj["result"]));
    return { type: "batch", result };
  } else if (type === "open_cursor") {
    return { type: "open_cursor" };
  } else if (type === "close_cursor") {
    return { type: "close_cursor" };
  } else if (type === "fetch_cursor") {
    const entries = arrayObjectsMap(obj["entries"], CursorEntry);
    const done = boolean(obj["done"]);
    return { type: "fetch_cursor", entries, done };
  } else if (type === "sequence") {
    return { type: "sequence" };
  } else if (type === "describe") {
    const result = DescribeResult(object(obj["result"]));
    return { type: "describe", result };
  } else if (type === "store_sql") {
    return { type: "store_sql" };
  } else if (type === "close_sql") {
    return { type: "close_sql" };
  } else if (type === "get_autocommit") {
    const isAutocommit = boolean(obj["is_autocommit"]);
    return { type: "get_autocommit", isAutocommit };
  } else {
    throw new ProtoError("Unexpected type of Response");
  }
}
__name(Response2, "Response2");
var init_json_decode2 = __esm({
  "../node_modules/@libsql/hrana-client/lib-esm/ws/json_decode.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_errors();
    init_decode();
    init_json_decode();
    __name2(ServerMsg, "ServerMsg");
    __name2(Response2, "Response");
  }
});
var Error3;
var StmtResult2;
var Col2;
var Row;
var BatchResult2;
var BatchResultStepResult;
var BatchResultStepError;
var CursorEntry2;
var StepBeginEntry;
var StepEndEntry;
var StepErrorEntry;
var DescribeResult2;
var DescribeParam2;
var DescribeCol2;
var Value4;
var init_protobuf_decode = __esm({
  "../node_modules/@libsql/hrana-client/lib-esm/shared/protobuf_decode.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    Error3 = {
      default() {
        return { message: "", code: void 0 };
      },
      1(r, msg) {
        msg.message = r.string();
      },
      2(r, msg) {
        msg.code = r.string();
      }
    };
    StmtResult2 = {
      default() {
        return {
          cols: [],
          rows: [],
          affectedRowCount: 0,
          lastInsertRowid: void 0
        };
      },
      1(r, msg) {
        msg.cols.push(r.message(Col2));
      },
      2(r, msg) {
        msg.rows.push(r.message(Row));
      },
      3(r, msg) {
        msg.affectedRowCount = Number(r.uint64());
      },
      4(r, msg) {
        msg.lastInsertRowid = r.sint64();
      }
    };
    Col2 = {
      default() {
        return { name: void 0, decltype: void 0 };
      },
      1(r, msg) {
        msg.name = r.string();
      },
      2(r, msg) {
        msg.decltype = r.string();
      }
    };
    Row = {
      default() {
        return [];
      },
      1(r, msg) {
        msg.push(r.message(Value4));
      }
    };
    BatchResult2 = {
      default() {
        return { stepResults: /* @__PURE__ */ new Map(), stepErrors: /* @__PURE__ */ new Map() };
      },
      1(r, msg) {
        const [key, value] = r.message(BatchResultStepResult);
        msg.stepResults.set(key, value);
      },
      2(r, msg) {
        const [key, value] = r.message(BatchResultStepError);
        msg.stepErrors.set(key, value);
      }
    };
    BatchResultStepResult = {
      default() {
        return [0, StmtResult2.default()];
      },
      1(r, msg) {
        msg[0] = r.uint32();
      },
      2(r, msg) {
        msg[1] = r.message(StmtResult2);
      }
    };
    BatchResultStepError = {
      default() {
        return [0, Error3.default()];
      },
      1(r, msg) {
        msg[0] = r.uint32();
      },
      2(r, msg) {
        msg[1] = r.message(Error3);
      }
    };
    CursorEntry2 = {
      default() {
        return { type: "none" };
      },
      1(r) {
        return r.message(StepBeginEntry);
      },
      2(r) {
        return r.message(StepEndEntry);
      },
      3(r) {
        return r.message(StepErrorEntry);
      },
      4(r) {
        return { type: "row", row: r.message(Row) };
      },
      5(r) {
        return { type: "error", error: r.message(Error3) };
      }
    };
    StepBeginEntry = {
      default() {
        return { type: "step_begin", step: 0, cols: [] };
      },
      1(r, msg) {
        msg.step = r.uint32();
      },
      2(r, msg) {
        msg.cols.push(r.message(Col2));
      }
    };
    StepEndEntry = {
      default() {
        return {
          type: "step_end",
          affectedRowCount: 0,
          lastInsertRowid: void 0
        };
      },
      1(r, msg) {
        msg.affectedRowCount = r.uint32();
      },
      2(r, msg) {
        msg.lastInsertRowid = r.uint64();
      }
    };
    StepErrorEntry = {
      default() {
        return {
          type: "step_error",
          step: 0,
          error: Error3.default()
        };
      },
      1(r, msg) {
        msg.step = r.uint32();
      },
      2(r, msg) {
        msg.error = r.message(Error3);
      }
    };
    DescribeResult2 = {
      default() {
        return {
          params: [],
          cols: [],
          isExplain: false,
          isReadonly: false
        };
      },
      1(r, msg) {
        msg.params.push(r.message(DescribeParam2));
      },
      2(r, msg) {
        msg.cols.push(r.message(DescribeCol2));
      },
      3(r, msg) {
        msg.isExplain = r.bool();
      },
      4(r, msg) {
        msg.isReadonly = r.bool();
      }
    };
    DescribeParam2 = {
      default() {
        return { name: void 0 };
      },
      1(r, msg) {
        msg.name = r.string();
      }
    };
    DescribeCol2 = {
      default() {
        return { name: "", decltype: void 0 };
      },
      1(r, msg) {
        msg.name = r.string();
      },
      2(r, msg) {
        msg.decltype = r.string();
      }
    };
    Value4 = {
      default() {
        return void 0;
      },
      1(r) {
        return null;
      },
      2(r) {
        return r.sint64();
      },
      3(r) {
        return r.double();
      },
      4(r) {
        return r.string();
      },
      5(r) {
        return r.bytes();
      }
    };
  }
});
var ServerMsg2;
var HelloErrorMsg;
var ResponseErrorMsg;
var ResponseOkMsg;
var ExecuteResp;
var BatchResp;
var FetchCursorResp;
var DescribeResp;
var GetAutocommitResp;
var init_protobuf_decode2 = __esm({
  "../node_modules/@libsql/hrana-client/lib-esm/ws/protobuf_decode.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_protobuf_decode();
    ServerMsg2 = {
      default() {
        return { type: "none" };
      },
      1(r) {
        return { type: "hello_ok" };
      },
      2(r) {
        return r.message(HelloErrorMsg);
      },
      3(r) {
        return r.message(ResponseOkMsg);
      },
      4(r) {
        return r.message(ResponseErrorMsg);
      }
    };
    HelloErrorMsg = {
      default() {
        return { type: "hello_error", error: Error3.default() };
      },
      1(r, msg) {
        msg.error = r.message(Error3);
      }
    };
    ResponseErrorMsg = {
      default() {
        return { type: "response_error", requestId: 0, error: Error3.default() };
      },
      1(r, msg) {
        msg.requestId = r.int32();
      },
      2(r, msg) {
        msg.error = r.message(Error3);
      }
    };
    ResponseOkMsg = {
      default() {
        return {
          type: "response_ok",
          requestId: 0,
          response: { type: "none" }
        };
      },
      1(r, msg) {
        msg.requestId = r.int32();
      },
      2(r, msg) {
        msg.response = { type: "open_stream" };
      },
      3(r, msg) {
        msg.response = { type: "close_stream" };
      },
      4(r, msg) {
        msg.response = r.message(ExecuteResp);
      },
      5(r, msg) {
        msg.response = r.message(BatchResp);
      },
      6(r, msg) {
        msg.response = { type: "open_cursor" };
      },
      7(r, msg) {
        msg.response = { type: "close_cursor" };
      },
      8(r, msg) {
        msg.response = r.message(FetchCursorResp);
      },
      9(r, msg) {
        msg.response = { type: "sequence" };
      },
      10(r, msg) {
        msg.response = r.message(DescribeResp);
      },
      11(r, msg) {
        msg.response = { type: "store_sql" };
      },
      12(r, msg) {
        msg.response = { type: "close_sql" };
      },
      13(r, msg) {
        msg.response = r.message(GetAutocommitResp);
      }
    };
    ExecuteResp = {
      default() {
        return { type: "execute", result: StmtResult2.default() };
      },
      1(r, msg) {
        msg.result = r.message(StmtResult2);
      }
    };
    BatchResp = {
      default() {
        return { type: "batch", result: BatchResult2.default() };
      },
      1(r, msg) {
        msg.result = r.message(BatchResult2);
      }
    };
    FetchCursorResp = {
      default() {
        return { type: "fetch_cursor", entries: [], done: false };
      },
      1(r, msg) {
        msg.entries.push(r.message(CursorEntry2));
      },
      2(r, msg) {
        msg.done = r.bool();
      }
    };
    DescribeResp = {
      default() {
        return { type: "describe", result: DescribeResult2.default() };
      },
      1(r, msg) {
        msg.result = r.message(DescribeResult2);
      }
    };
    GetAutocommitResp = {
      default() {
        return { type: "get_autocommit", isAutocommit: false };
      },
      1(r, msg) {
        msg.isAutocommit = r.bool();
      }
    };
  }
});
var subprotocolsV2;
var subprotocolsV3;
var WsClient;
var init_client2 = __esm({
  "../node_modules/@libsql/hrana-client/lib-esm/ws/client.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_client();
    init_encoding();
    init_errors();
    init_id_alloc();
    init_result();
    init_sql();
    init_util3();
    init_stream2();
    init_json_encode2();
    init_protobuf_encode2();
    init_json_decode2();
    init_protobuf_decode2();
    subprotocolsV2 = /* @__PURE__ */ new Map([
      ["hrana2", { version: 2, encoding: "json" }],
      ["hrana1", { version: 1, encoding: "json" }]
    ]);
    subprotocolsV3 = /* @__PURE__ */ new Map([
      ["hrana3-protobuf", { version: 3, encoding: "protobuf" }],
      ["hrana3", { version: 3, encoding: "json" }],
      ["hrana2", { version: 2, encoding: "json" }],
      ["hrana1", { version: 1, encoding: "json" }]
    ]);
    WsClient = class extends Client {
      static {
        __name(this, "WsClient");
      }
      static {
        __name2(this, "WsClient");
      }
      #socket;
      // List of callbacks that we queue until the socket transitions from the CONNECTING to the OPEN state.
      #openCallbacks;
      // Have we already transitioned from CONNECTING to OPEN and fired the callbacks in #openCallbacks?
      #opened;
      // Stores the error that caused us to close the client (and the socket). If we are not closed, this is
      // `undefined`.
      #closed;
      // Have we received a response to our "hello" from the server?
      #recvdHello;
      // Subprotocol negotiated with the server. It is only available after the socket transitions to the OPEN
      // state.
      #subprotocol;
      // Has the `getVersion()` function been called? This is only used to validate that the API is used
      // correctly.
      #getVersionCalled;
      // A map from request id to the responses that we expect to receive from the server.
      #responseMap;
      // An allocator of request ids.
      #requestIdAlloc;
      // An allocator of stream ids.
      /** @private */
      _streamIdAlloc;
      // An allocator of cursor ids.
      /** @private */
      _cursorIdAlloc;
      // An allocator of SQL text ids.
      #sqlIdAlloc;
      /** @private */
      constructor(socket, jwt) {
        super();
        this.#socket = socket;
        this.#openCallbacks = [];
        this.#opened = false;
        this.#closed = void 0;
        this.#recvdHello = false;
        this.#subprotocol = void 0;
        this.#getVersionCalled = false;
        this.#responseMap = /* @__PURE__ */ new Map();
        this.#requestIdAlloc = new IdAlloc();
        this._streamIdAlloc = new IdAlloc();
        this._cursorIdAlloc = new IdAlloc();
        this.#sqlIdAlloc = new IdAlloc();
        this.#socket.binaryType = "arraybuffer";
        this.#socket.addEventListener("open", () => this.#onSocketOpen());
        this.#socket.addEventListener("close", (event) => this.#onSocketClose(event));
        this.#socket.addEventListener("error", (event) => this.#onSocketError(event));
        this.#socket.addEventListener("message", (event) => this.#onSocketMessage(event));
        this.#send({ type: "hello", jwt });
      }
      // Send (or enqueue to send) a message to the server.
      #send(msg) {
        if (this.#closed !== void 0) {
          throw new InternalError("Trying to send a message on a closed client");
        }
        if (this.#opened) {
          this.#sendToSocket(msg);
        } else {
          const openCallback = /* @__PURE__ */ __name2(() => this.#sendToSocket(msg), "openCallback");
          const errorCallback = /* @__PURE__ */ __name2(() => void 0, "errorCallback");
          this.#openCallbacks.push({ openCallback, errorCallback });
        }
      }
      // The socket transitioned from CONNECTING to OPEN
      #onSocketOpen() {
        const protocol = this.#socket.protocol;
        if (protocol === void 0) {
          this.#setClosed(new ClientError("The `WebSocket.protocol` property is undefined. This most likely means that the WebSocket implementation provided by the environment is broken. If you are using Miniflare 2, please update to Miniflare 3, which fixes this problem."));
          return;
        } else if (protocol === "") {
          this.#subprotocol = { version: 1, encoding: "json" };
        } else {
          this.#subprotocol = subprotocolsV3.get(protocol);
          if (this.#subprotocol === void 0) {
            this.#setClosed(new ProtoError(`Unrecognized WebSocket subprotocol: ${JSON.stringify(protocol)}`));
            return;
          }
        }
        for (const callbacks of this.#openCallbacks) {
          callbacks.openCallback();
        }
        this.#openCallbacks.length = 0;
        this.#opened = true;
      }
      #sendToSocket(msg) {
        const encoding = this.#subprotocol.encoding;
        if (encoding === "json") {
          const jsonMsg = writeJsonObject(msg, ClientMsg);
          this.#socket.send(jsonMsg);
        } else if (encoding === "protobuf") {
          const protobufMsg = writeProtobufMessage(msg, ClientMsg2);
          this.#socket.send(protobufMsg);
        } else {
          throw impossible(encoding, "Impossible encoding");
        }
      }
      /** Get the protocol version negotiated with the server, possibly waiting until the socket is open. */
      getVersion() {
        return new Promise((versionCallback, errorCallback) => {
          this.#getVersionCalled = true;
          if (this.#closed !== void 0) {
            errorCallback(this.#closed);
          } else if (!this.#opened) {
            const openCallback = /* @__PURE__ */ __name2(() => versionCallback(this.#subprotocol.version), "openCallback");
            this.#openCallbacks.push({ openCallback, errorCallback });
          } else {
            versionCallback(this.#subprotocol.version);
          }
        });
      }
      // Make sure that the negotiated version is at least `minVersion`.
      /** @private */
      _ensureVersion(minVersion, feature) {
        if (this.#subprotocol === void 0 || !this.#getVersionCalled) {
          throw new ProtocolVersionError(`${feature} is supported only on protocol version ${minVersion} and higher, but the version supported by the WebSocket server is not yet known. Use Client.getVersion() to wait until the version is available.`);
        } else if (this.#subprotocol.version < minVersion) {
          throw new ProtocolVersionError(`${feature} is supported on protocol version ${minVersion} and higher, but the WebSocket server only supports version ${this.#subprotocol.version}`);
        }
      }
      // Send a request to the server and invoke a callback when we get the response.
      /** @private */
      _sendRequest(request, callbacks) {
        if (this.#closed !== void 0) {
          callbacks.errorCallback(new ClosedError("Client is closed", this.#closed));
          return;
        }
        const requestId = this.#requestIdAlloc.alloc();
        this.#responseMap.set(requestId, { ...callbacks, type: request.type });
        this.#send({ type: "request", requestId, request });
      }
      // The socket encountered an error.
      #onSocketError(event) {
        const eventMessage = event.message;
        const message2 = eventMessage ?? "WebSocket was closed due to an error";
        this.#setClosed(new WebSocketError(message2));
      }
      // The socket was closed.
      #onSocketClose(event) {
        let message2 = `WebSocket was closed with code ${event.code}`;
        if (event.reason) {
          message2 += `: ${event.reason}`;
        }
        this.#setClosed(new WebSocketError(message2));
      }
      // Close the client with the given error.
      #setClosed(error2) {
        if (this.#closed !== void 0) {
          return;
        }
        this.#closed = error2;
        for (const callbacks of this.#openCallbacks) {
          callbacks.errorCallback(error2);
        }
        this.#openCallbacks.length = 0;
        for (const [requestId, responseState] of this.#responseMap.entries()) {
          responseState.errorCallback(error2);
          this.#requestIdAlloc.free(requestId);
        }
        this.#responseMap.clear();
        this.#socket.close();
      }
      // We received a message from the socket.
      #onSocketMessage(event) {
        if (this.#closed !== void 0) {
          return;
        }
        try {
          let msg;
          const encoding = this.#subprotocol.encoding;
          if (encoding === "json") {
            if (typeof event.data !== "string") {
              this.#socket.close(3003, "Only text messages are accepted with JSON encoding");
              this.#setClosed(new ProtoError("Received non-text message from server with JSON encoding"));
              return;
            }
            msg = readJsonObject(JSON.parse(event.data), ServerMsg);
          } else if (encoding === "protobuf") {
            if (!(event.data instanceof ArrayBuffer)) {
              this.#socket.close(3003, "Only binary messages are accepted with Protobuf encoding");
              this.#setClosed(new ProtoError("Received non-binary message from server with Protobuf encoding"));
              return;
            }
            msg = readProtobufMessage(new Uint8Array(event.data), ServerMsg2);
          } else {
            throw impossible(encoding, "Impossible encoding");
          }
          this.#handleMsg(msg);
        } catch (e) {
          this.#socket.close(3007, "Could not handle message");
          this.#setClosed(e);
        }
      }
      // Handle a message from the server.
      #handleMsg(msg) {
        if (msg.type === "none") {
          throw new ProtoError("Received an unrecognized ServerMsg");
        } else if (msg.type === "hello_ok" || msg.type === "hello_error") {
          if (this.#recvdHello) {
            throw new ProtoError("Received a duplicated hello response");
          }
          this.#recvdHello = true;
          if (msg.type === "hello_error") {
            throw errorFromProto(msg.error);
          }
          return;
        } else if (!this.#recvdHello) {
          throw new ProtoError("Received a non-hello message before a hello response");
        }
        if (msg.type === "response_ok") {
          const requestId = msg.requestId;
          const responseState = this.#responseMap.get(requestId);
          this.#responseMap.delete(requestId);
          if (responseState === void 0) {
            throw new ProtoError("Received unexpected OK response");
          }
          this.#requestIdAlloc.free(requestId);
          try {
            if (responseState.type !== msg.response.type) {
              console.dir({ responseState, msg });
              throw new ProtoError("Received unexpected type of response");
            }
            responseState.responseCallback(msg.response);
          } catch (e) {
            responseState.errorCallback(e);
            throw e;
          }
        } else if (msg.type === "response_error") {
          const requestId = msg.requestId;
          const responseState = this.#responseMap.get(requestId);
          this.#responseMap.delete(requestId);
          if (responseState === void 0) {
            throw new ProtoError("Received unexpected error response");
          }
          this.#requestIdAlloc.free(requestId);
          responseState.errorCallback(errorFromProto(msg.error));
        } else {
          throw impossible(msg, "Impossible ServerMsg type");
        }
      }
      /** Open a {@link WsStream}, a stream for executing SQL statements. */
      openStream() {
        return WsStream.open(this);
      }
      /** Cache a SQL text on the server. This requires protocol version 2 or higher. */
      storeSql(sql2) {
        this._ensureVersion(2, "storeSql()");
        const sqlId = this.#sqlIdAlloc.alloc();
        const sqlObj = new Sql(this, sqlId);
        const responseCallback = /* @__PURE__ */ __name2(() => void 0, "responseCallback");
        const errorCallback = /* @__PURE__ */ __name2((e) => sqlObj._setClosed(e), "errorCallback");
        const request = { type: "store_sql", sqlId, sql: sql2 };
        this._sendRequest(request, { responseCallback, errorCallback });
        return sqlObj;
      }
      /** @private */
      _closeSql(sqlId) {
        if (this.#closed !== void 0) {
          return;
        }
        const responseCallback = /* @__PURE__ */ __name2(() => this.#sqlIdAlloc.free(sqlId), "responseCallback");
        const errorCallback = /* @__PURE__ */ __name2((e) => this.#setClosed(e), "errorCallback");
        const request = { type: "close_sql", sqlId };
        this._sendRequest(request, { responseCallback, errorCallback });
      }
      /** Close the client and the WebSocket. */
      close() {
        this.#setClosed(new ClientError("Client was manually closed"));
      }
      /** True if the client is closed. */
      get closed() {
        return this.#closed !== void 0;
      }
    };
  }
});
var _fetch;
var _Request;
var _Headers;
var init_web2 = __esm({
  "../node_modules/@libsql/isomorphic-fetch/web.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    _fetch = fetch;
    _Request = Request;
    _Headers = Headers;
  }
});
var _queueMicrotask;
var init_queue_microtask = __esm({
  "../node_modules/@libsql/hrana-client/lib-esm/queue_microtask.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    if (typeof queueMicrotask !== "undefined") {
      _queueMicrotask = queueMicrotask;
    } else {
      const resolved = Promise.resolve();
      _queueMicrotask = /* @__PURE__ */ __name2((callback) => {
        resolved.then(callback);
      }, "_queueMicrotask");
    }
  }
});
var ByteQueue;
var init_byte_queue = __esm({
  "../node_modules/@libsql/hrana-client/lib-esm/byte_queue.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    ByteQueue = class {
      static {
        __name(this, "ByteQueue");
      }
      static {
        __name2(this, "ByteQueue");
      }
      #array;
      #shiftPos;
      #pushPos;
      constructor(initialCap) {
        this.#array = new Uint8Array(new ArrayBuffer(initialCap));
        this.#shiftPos = 0;
        this.#pushPos = 0;
      }
      get length() {
        return this.#pushPos - this.#shiftPos;
      }
      data() {
        return this.#array.slice(this.#shiftPos, this.#pushPos);
      }
      push(chunk) {
        this.#ensurePush(chunk.byteLength);
        this.#array.set(chunk, this.#pushPos);
        this.#pushPos += chunk.byteLength;
      }
      #ensurePush(pushLength) {
        if (this.#pushPos + pushLength <= this.#array.byteLength) {
          return;
        }
        const filledLength = this.#pushPos - this.#shiftPos;
        if (filledLength + pushLength <= this.#array.byteLength && 2 * this.#pushPos >= this.#array.byteLength) {
          this.#array.copyWithin(0, this.#shiftPos, this.#pushPos);
        } else {
          let newCap = this.#array.byteLength;
          do {
            newCap *= 2;
          } while (filledLength + pushLength > newCap);
          const newArray = new Uint8Array(new ArrayBuffer(newCap));
          newArray.set(this.#array.slice(this.#shiftPos, this.#pushPos), 0);
          this.#array = newArray;
        }
        this.#pushPos = filledLength;
        this.#shiftPos = 0;
      }
      shift(length) {
        this.#shiftPos += length;
      }
    };
  }
});
function PipelineRespBody(obj) {
  const baton = stringOpt(obj["baton"]);
  const baseUrl = stringOpt(obj["base_url"]);
  const results = arrayObjectsMap(obj["results"], StreamResult);
  return { baton, baseUrl, results };
}
__name(PipelineRespBody, "PipelineRespBody");
function StreamResult(obj) {
  const type = string(obj["type"]);
  if (type === "ok") {
    const response = StreamResponse(object(obj["response"]));
    return { type: "ok", response };
  } else if (type === "error") {
    const error2 = Error2(object(obj["error"]));
    return { type: "error", error: error2 };
  } else {
    throw new ProtoError("Unexpected type of StreamResult");
  }
}
__name(StreamResult, "StreamResult");
function StreamResponse(obj) {
  const type = string(obj["type"]);
  if (type === "close") {
    return { type: "close" };
  } else if (type === "execute") {
    const result = StmtResult(object(obj["result"]));
    return { type: "execute", result };
  } else if (type === "batch") {
    const result = BatchResult(object(obj["result"]));
    return { type: "batch", result };
  } else if (type === "sequence") {
    return { type: "sequence" };
  } else if (type === "describe") {
    const result = DescribeResult(object(obj["result"]));
    return { type: "describe", result };
  } else if (type === "store_sql") {
    return { type: "store_sql" };
  } else if (type === "close_sql") {
    return { type: "close_sql" };
  } else if (type === "get_autocommit") {
    const isAutocommit = boolean(obj["is_autocommit"]);
    return { type: "get_autocommit", isAutocommit };
  } else {
    throw new ProtoError("Unexpected type of StreamResponse");
  }
}
__name(StreamResponse, "StreamResponse");
function CursorRespBody(obj) {
  const baton = stringOpt(obj["baton"]);
  const baseUrl = stringOpt(obj["base_url"]);
  return { baton, baseUrl };
}
__name(CursorRespBody, "CursorRespBody");
var init_json_decode3 = __esm({
  "../node_modules/@libsql/hrana-client/lib-esm/http/json_decode.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_errors();
    init_decode();
    init_json_decode();
    __name2(PipelineRespBody, "PipelineRespBody");
    __name2(StreamResult, "StreamResult");
    __name2(StreamResponse, "StreamResponse");
    __name2(CursorRespBody, "CursorRespBody");
  }
});
var PipelineRespBody2;
var StreamResult2;
var StreamResponse2;
var ExecuteStreamResp;
var BatchStreamResp;
var DescribeStreamResp;
var GetAutocommitStreamResp;
var CursorRespBody2;
var init_protobuf_decode3 = __esm({
  "../node_modules/@libsql/hrana-client/lib-esm/http/protobuf_decode.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_protobuf_decode();
    PipelineRespBody2 = {
      default() {
        return { baton: void 0, baseUrl: void 0, results: [] };
      },
      1(r, msg) {
        msg.baton = r.string();
      },
      2(r, msg) {
        msg.baseUrl = r.string();
      },
      3(r, msg) {
        msg.results.push(r.message(StreamResult2));
      }
    };
    StreamResult2 = {
      default() {
        return { type: "none" };
      },
      1(r) {
        return { type: "ok", response: r.message(StreamResponse2) };
      },
      2(r) {
        return { type: "error", error: r.message(Error3) };
      }
    };
    StreamResponse2 = {
      default() {
        return { type: "none" };
      },
      1(r) {
        return { type: "close" };
      },
      2(r) {
        return r.message(ExecuteStreamResp);
      },
      3(r) {
        return r.message(BatchStreamResp);
      },
      4(r) {
        return { type: "sequence" };
      },
      5(r) {
        return r.message(DescribeStreamResp);
      },
      6(r) {
        return { type: "store_sql" };
      },
      7(r) {
        return { type: "close_sql" };
      },
      8(r) {
        return r.message(GetAutocommitStreamResp);
      }
    };
    ExecuteStreamResp = {
      default() {
        return { type: "execute", result: StmtResult2.default() };
      },
      1(r, msg) {
        msg.result = r.message(StmtResult2);
      }
    };
    BatchStreamResp = {
      default() {
        return { type: "batch", result: BatchResult2.default() };
      },
      1(r, msg) {
        msg.result = r.message(BatchResult2);
      }
    };
    DescribeStreamResp = {
      default() {
        return { type: "describe", result: DescribeResult2.default() };
      },
      1(r, msg) {
        msg.result = r.message(DescribeResult2);
      }
    };
    GetAutocommitStreamResp = {
      default() {
        return { type: "get_autocommit", isAutocommit: false };
      },
      1(r, msg) {
        msg.isAutocommit = r.bool();
      }
    };
    CursorRespBody2 = {
      default() {
        return { baton: void 0, baseUrl: void 0 };
      },
      1(r, msg) {
        msg.baton = r.string();
      },
      2(r, msg) {
        msg.baseUrl = r.string();
      }
    };
  }
});
var HttpCursor;
var init_cursor3 = __esm({
  "../node_modules/@libsql/hrana-client/lib-esm/http/cursor.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_byte_queue();
    init_cursor();
    init_decode();
    init_decode2();
    init_errors();
    init_util3();
    init_json_decode3();
    init_protobuf_decode3();
    init_json_decode();
    init_protobuf_decode();
    HttpCursor = class extends Cursor {
      static {
        __name(this, "HttpCursor");
      }
      static {
        __name2(this, "HttpCursor");
      }
      #stream;
      #encoding;
      #reader;
      #queue;
      #closed;
      #done;
      /** @private */
      constructor(stream, encoding) {
        super();
        this.#stream = stream;
        this.#encoding = encoding;
        this.#reader = void 0;
        this.#queue = new ByteQueue(16 * 1024);
        this.#closed = void 0;
        this.#done = false;
      }
      async open(response) {
        if (response.body === null) {
          throw new ProtoError("No response body for cursor request");
        }
        this.#reader = response.body.getReader();
        const respBody = await this.#nextItem(CursorRespBody, CursorRespBody2);
        if (respBody === void 0) {
          throw new ProtoError("Empty response to cursor request");
        }
        return respBody;
      }
      /** Fetch the next entry from the cursor. */
      next() {
        return this.#nextItem(CursorEntry, CursorEntry2);
      }
      /** Close the cursor. */
      close() {
        this._setClosed(new ClientError("Cursor was manually closed"));
      }
      /** @private */
      _setClosed(error2) {
        if (this.#closed !== void 0) {
          return;
        }
        this.#closed = error2;
        this.#stream._cursorClosed(this);
        if (this.#reader !== void 0) {
          this.#reader.cancel();
        }
      }
      /** True if the cursor is closed. */
      get closed() {
        return this.#closed !== void 0;
      }
      async #nextItem(jsonFun, protobufDef) {
        for (; ; ) {
          if (this.#done) {
            return void 0;
          } else if (this.#closed !== void 0) {
            throw new ClosedError("Cursor is closed", this.#closed);
          }
          if (this.#encoding === "json") {
            const jsonData = this.#parseItemJson();
            if (jsonData !== void 0) {
              const jsonText = new TextDecoder().decode(jsonData);
              const jsonValue = JSON.parse(jsonText);
              return readJsonObject(jsonValue, jsonFun);
            }
          } else if (this.#encoding === "protobuf") {
            const protobufData = this.#parseItemProtobuf();
            if (protobufData !== void 0) {
              return readProtobufMessage(protobufData, protobufDef);
            }
          } else {
            throw impossible(this.#encoding, "Impossible encoding");
          }
          if (this.#reader === void 0) {
            throw new InternalError("Attempted to read from HTTP cursor before it was opened");
          }
          const { value, done } = await this.#reader.read();
          if (done && this.#queue.length === 0) {
            this.#done = true;
          } else if (done) {
            throw new ProtoError("Unexpected end of cursor stream");
          } else {
            this.#queue.push(value);
          }
        }
      }
      #parseItemJson() {
        const data = this.#queue.data();
        const newlineByte = 10;
        const newlinePos = data.indexOf(newlineByte);
        if (newlinePos < 0) {
          return void 0;
        }
        const jsonData = data.slice(0, newlinePos);
        this.#queue.shift(newlinePos + 1);
        return jsonData;
      }
      #parseItemProtobuf() {
        const data = this.#queue.data();
        let varintValue = 0;
        let varintLength = 0;
        for (; ; ) {
          if (varintLength >= data.byteLength) {
            return void 0;
          }
          const byte = data[varintLength];
          varintValue |= (byte & 127) << 7 * varintLength;
          varintLength += 1;
          if (!(byte & 128)) {
            break;
          }
        }
        if (data.byteLength < varintLength + varintValue) {
          return void 0;
        }
        const protobufData = data.slice(varintLength, varintLength + varintValue);
        this.#queue.shift(varintLength + varintValue);
        return protobufData;
      }
    };
  }
});
function PipelineReqBody(w, msg) {
  if (msg.baton !== void 0) {
    w.string("baton", msg.baton);
  }
  w.arrayObjects("requests", msg.requests, StreamRequest);
}
__name(PipelineReqBody, "PipelineReqBody");
function StreamRequest(w, msg) {
  w.stringRaw("type", msg.type);
  if (msg.type === "close") {
  } else if (msg.type === "execute") {
    w.object("stmt", msg.stmt, Stmt2);
  } else if (msg.type === "batch") {
    w.object("batch", msg.batch, Batch2);
  } else if (msg.type === "sequence") {
    if (msg.sql !== void 0) {
      w.string("sql", msg.sql);
    }
    if (msg.sqlId !== void 0) {
      w.number("sql_id", msg.sqlId);
    }
  } else if (msg.type === "describe") {
    if (msg.sql !== void 0) {
      w.string("sql", msg.sql);
    }
    if (msg.sqlId !== void 0) {
      w.number("sql_id", msg.sqlId);
    }
  } else if (msg.type === "store_sql") {
    w.number("sql_id", msg.sqlId);
    w.string("sql", msg.sql);
  } else if (msg.type === "close_sql") {
    w.number("sql_id", msg.sqlId);
  } else if (msg.type === "get_autocommit") {
  } else {
    throw impossible(msg, "Impossible type of StreamRequest");
  }
}
__name(StreamRequest, "StreamRequest");
function CursorReqBody(w, msg) {
  if (msg.baton !== void 0) {
    w.string("baton", msg.baton);
  }
  w.object("batch", msg.batch, Batch2);
}
__name(CursorReqBody, "CursorReqBody");
var init_json_encode3 = __esm({
  "../node_modules/@libsql/hrana-client/lib-esm/http/json_encode.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_json_encode();
    init_util3();
    __name2(PipelineReqBody, "PipelineReqBody");
    __name2(StreamRequest, "StreamRequest");
    __name2(CursorReqBody, "CursorReqBody");
  }
});
function PipelineReqBody2(w, msg) {
  if (msg.baton !== void 0) {
    w.string(1, msg.baton);
  }
  for (const req of msg.requests) {
    w.message(2, req, StreamRequest2);
  }
}
__name(PipelineReqBody2, "PipelineReqBody2");
function StreamRequest2(w, msg) {
  if (msg.type === "close") {
    w.message(1, msg, CloseStreamReq2);
  } else if (msg.type === "execute") {
    w.message(2, msg, ExecuteStreamReq);
  } else if (msg.type === "batch") {
    w.message(3, msg, BatchStreamReq);
  } else if (msg.type === "sequence") {
    w.message(4, msg, SequenceStreamReq);
  } else if (msg.type === "describe") {
    w.message(5, msg, DescribeStreamReq);
  } else if (msg.type === "store_sql") {
    w.message(6, msg, StoreSqlStreamReq);
  } else if (msg.type === "close_sql") {
    w.message(7, msg, CloseSqlStreamReq);
  } else if (msg.type === "get_autocommit") {
    w.message(8, msg, GetAutocommitStreamReq);
  } else {
    throw impossible(msg, "Impossible type of StreamRequest");
  }
}
__name(StreamRequest2, "StreamRequest2");
function CloseStreamReq2(_w, _msg) {
}
__name(CloseStreamReq2, "CloseStreamReq2");
function ExecuteStreamReq(w, msg) {
  w.message(1, msg.stmt, Stmt3);
}
__name(ExecuteStreamReq, "ExecuteStreamReq");
function BatchStreamReq(w, msg) {
  w.message(1, msg.batch, Batch3);
}
__name(BatchStreamReq, "BatchStreamReq");
function SequenceStreamReq(w, msg) {
  if (msg.sql !== void 0) {
    w.string(1, msg.sql);
  }
  if (msg.sqlId !== void 0) {
    w.int32(2, msg.sqlId);
  }
}
__name(SequenceStreamReq, "SequenceStreamReq");
function DescribeStreamReq(w, msg) {
  if (msg.sql !== void 0) {
    w.string(1, msg.sql);
  }
  if (msg.sqlId !== void 0) {
    w.int32(2, msg.sqlId);
  }
}
__name(DescribeStreamReq, "DescribeStreamReq");
function StoreSqlStreamReq(w, msg) {
  w.int32(1, msg.sqlId);
  w.string(2, msg.sql);
}
__name(StoreSqlStreamReq, "StoreSqlStreamReq");
function CloseSqlStreamReq(w, msg) {
  w.int32(1, msg.sqlId);
}
__name(CloseSqlStreamReq, "CloseSqlStreamReq");
function GetAutocommitStreamReq(_w, _msg) {
}
__name(GetAutocommitStreamReq, "GetAutocommitStreamReq");
function CursorReqBody2(w, msg) {
  if (msg.baton !== void 0) {
    w.string(1, msg.baton);
  }
  w.message(2, msg.batch, Batch3);
}
__name(CursorReqBody2, "CursorReqBody2");
var init_protobuf_encode3 = __esm({
  "../node_modules/@libsql/hrana-client/lib-esm/http/protobuf_encode.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_protobuf_encode();
    init_util3();
    __name2(PipelineReqBody2, "PipelineReqBody");
    __name2(StreamRequest2, "StreamRequest");
    __name2(CloseStreamReq2, "CloseStreamReq");
    __name2(ExecuteStreamReq, "ExecuteStreamReq");
    __name2(BatchStreamReq, "BatchStreamReq");
    __name2(SequenceStreamReq, "SequenceStreamReq");
    __name2(DescribeStreamReq, "DescribeStreamReq");
    __name2(StoreSqlStreamReq, "StoreSqlStreamReq");
    __name2(CloseSqlStreamReq, "CloseSqlStreamReq");
    __name2(GetAutocommitStreamReq, "GetAutocommitStreamReq");
    __name2(CursorReqBody2, "CursorReqBody");
  }
});
function handlePipelineResponse(pipeline, respBody) {
  if (respBody.results.length !== pipeline.length) {
    throw new ProtoError("Server returned unexpected number of pipeline results");
  }
  for (let i = 0; i < pipeline.length; ++i) {
    const result = respBody.results[i];
    const entry = pipeline[i];
    if (result.type === "ok") {
      if (result.response.type !== entry.request.type) {
        throw new ProtoError("Received unexpected type of response");
      }
      entry.responseCallback(result.response);
    } else if (result.type === "error") {
      entry.errorCallback(errorFromProto(result.error));
    } else if (result.type === "none") {
      throw new ProtoError("Received unrecognized type of StreamResult");
    } else {
      throw impossible(result, "Received impossible type of StreamResult");
    }
  }
}
__name(handlePipelineResponse, "handlePipelineResponse");
async function decodePipelineResponse(resp, encoding) {
  if (encoding === "json") {
    const respJson = await resp.json();
    return readJsonObject(respJson, PipelineRespBody);
  }
  if (encoding === "protobuf") {
    const respData = await resp.arrayBuffer();
    return readProtobufMessage(new Uint8Array(respData), PipelineRespBody2);
  }
  await resp.body?.cancel();
  throw impossible(encoding, "Impossible encoding");
}
__name(decodePipelineResponse, "decodePipelineResponse");
async function errorFromResponse(resp) {
  const respType = resp.headers.get("content-type") ?? "text/plain";
  let message2 = `Server returned HTTP status ${resp.status}`;
  if (respType === "application/json") {
    const respBody = await resp.json();
    if ("message" in respBody) {
      return errorFromProto(respBody);
    }
    return new HttpServerError(message2, resp.status);
  }
  if (respType === "text/plain") {
    const respBody = (await resp.text()).trim();
    if (respBody !== "") {
      message2 += `: ${respBody}`;
    }
    return new HttpServerError(message2, resp.status);
  }
  await resp.body?.cancel();
  return new HttpServerError(message2, resp.status);
}
__name(errorFromResponse, "errorFromResponse");
var HttpStream;
var init_stream3 = __esm({
  "../node_modules/@libsql/hrana-client/lib-esm/http/stream.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_web2();
    init_errors();
    init_encoding();
    init_id_alloc();
    init_queue();
    init_queue_microtask();
    init_result();
    init_sql();
    init_stream();
    init_util3();
    init_cursor3();
    init_json_encode3();
    init_protobuf_encode3();
    init_json_encode3();
    init_protobuf_encode3();
    init_json_decode3();
    init_protobuf_decode3();
    HttpStream = class extends Stream {
      static {
        __name(this, "HttpStream");
      }
      static {
        __name2(this, "HttpStream");
      }
      #client;
      #baseUrl;
      #jwt;
      #fetch;
      #baton;
      #queue;
      #flushing;
      #cursor;
      #closing;
      #closeQueued;
      #closed;
      #sqlIdAlloc;
      /** @private */
      constructor(client, baseUrl, jwt, customFetch) {
        super(client.intMode);
        this.#client = client;
        this.#baseUrl = baseUrl.toString();
        this.#jwt = jwt;
        this.#fetch = customFetch;
        this.#baton = void 0;
        this.#queue = new Queue();
        this.#flushing = false;
        this.#closing = false;
        this.#closeQueued = false;
        this.#closed = void 0;
        this.#sqlIdAlloc = new IdAlloc();
      }
      /** Get the {@link HttpClient} object that this stream belongs to. */
      client() {
        return this.#client;
      }
      /** @private */
      _sqlOwner() {
        return this;
      }
      /** Cache a SQL text on the server. */
      storeSql(sql2) {
        const sqlId = this.#sqlIdAlloc.alloc();
        this.#sendStreamRequest({ type: "store_sql", sqlId, sql: sql2 }).then(() => void 0, (error2) => this._setClosed(error2));
        return new Sql(this, sqlId);
      }
      /** @private */
      _closeSql(sqlId) {
        if (this.#closed !== void 0) {
          return;
        }
        this.#sendStreamRequest({ type: "close_sql", sqlId }).then(() => this.#sqlIdAlloc.free(sqlId), (error2) => this._setClosed(error2));
      }
      /** @private */
      _execute(stmt) {
        return this.#sendStreamRequest({ type: "execute", stmt }).then((response) => {
          return response.result;
        });
      }
      /** @private */
      _batch(batch) {
        return this.#sendStreamRequest({ type: "batch", batch }).then((response) => {
          return response.result;
        });
      }
      /** @private */
      _describe(protoSql) {
        return this.#sendStreamRequest({
          type: "describe",
          sql: protoSql.sql,
          sqlId: protoSql.sqlId
        }).then((response) => {
          return response.result;
        });
      }
      /** @private */
      _sequence(protoSql) {
        return this.#sendStreamRequest({
          type: "sequence",
          sql: protoSql.sql,
          sqlId: protoSql.sqlId
        }).then((_response) => {
          return void 0;
        });
      }
      /** Check whether the SQL connection underlying this stream is in autocommit state (i.e., outside of an
       * explicit transaction). This requires protocol version 3 or higher.
       */
      getAutocommit() {
        this.#client._ensureVersion(3, "getAutocommit()");
        return this.#sendStreamRequest({
          type: "get_autocommit"
        }).then((response) => {
          return response.isAutocommit;
        });
      }
      #sendStreamRequest(request) {
        return new Promise((responseCallback, errorCallback) => {
          this.#pushToQueue({ type: "pipeline", request, responseCallback, errorCallback });
        });
      }
      /** @private */
      _openCursor(batch) {
        return new Promise((cursorCallback, errorCallback) => {
          this.#pushToQueue({ type: "cursor", batch, cursorCallback, errorCallback });
        });
      }
      /** @private */
      _cursorClosed(cursor) {
        if (cursor !== this.#cursor) {
          throw new InternalError("Cursor was closed, but it was not associated with the stream");
        }
        this.#cursor = void 0;
        _queueMicrotask(() => this.#flushQueue());
      }
      /** Immediately close the stream. */
      close() {
        this._setClosed(new ClientError("Stream was manually closed"));
      }
      /** Gracefully close the stream. */
      closeGracefully() {
        this.#closing = true;
        _queueMicrotask(() => this.#flushQueue());
      }
      /** True if the stream is closed. */
      get closed() {
        return this.#closed !== void 0 || this.#closing;
      }
      /** @private */
      _setClosed(error2) {
        if (this.#closed !== void 0) {
          return;
        }
        this.#closed = error2;
        if (this.#cursor !== void 0) {
          this.#cursor._setClosed(error2);
        }
        this.#client._streamClosed(this);
        for (; ; ) {
          const entry = this.#queue.shift();
          if (entry !== void 0) {
            entry.errorCallback(error2);
          } else {
            break;
          }
        }
        if ((this.#baton !== void 0 || this.#flushing) && !this.#closeQueued) {
          this.#queue.push({
            type: "pipeline",
            request: { type: "close" },
            responseCallback: /* @__PURE__ */ __name2(() => void 0, "responseCallback"),
            errorCallback: /* @__PURE__ */ __name2(() => void 0, "errorCallback")
          });
          this.#closeQueued = true;
          _queueMicrotask(() => this.#flushQueue());
        }
      }
      #pushToQueue(entry) {
        if (this.#closed !== void 0) {
          throw new ClosedError("Stream is closed", this.#closed);
        } else if (this.#closing) {
          throw new ClosedError("Stream is closing", void 0);
        } else {
          this.#queue.push(entry);
          _queueMicrotask(() => this.#flushQueue());
        }
      }
      #flushQueue() {
        if (this.#flushing || this.#cursor !== void 0) {
          return;
        }
        if (this.#closing && this.#queue.length === 0) {
          this._setClosed(new ClientError("Stream was gracefully closed"));
          return;
        }
        const endpoint = this.#client._endpoint;
        if (endpoint === void 0) {
          this.#client._endpointPromise.then(() => this.#flushQueue(), (error2) => this._setClosed(error2));
          return;
        }
        const firstEntry = this.#queue.shift();
        if (firstEntry === void 0) {
          return;
        } else if (firstEntry.type === "pipeline") {
          const pipeline = [firstEntry];
          for (; ; ) {
            const entry = this.#queue.first();
            if (entry !== void 0 && entry.type === "pipeline") {
              pipeline.push(entry);
              this.#queue.shift();
            } else if (entry === void 0 && this.#closing && !this.#closeQueued) {
              pipeline.push({
                type: "pipeline",
                request: { type: "close" },
                responseCallback: /* @__PURE__ */ __name2(() => void 0, "responseCallback"),
                errorCallback: /* @__PURE__ */ __name2(() => void 0, "errorCallback")
              });
              this.#closeQueued = true;
              break;
            } else {
              break;
            }
          }
          this.#flushPipeline(endpoint, pipeline);
        } else if (firstEntry.type === "cursor") {
          this.#flushCursor(endpoint, firstEntry);
        } else {
          throw impossible(firstEntry, "Impossible type of QueueEntry");
        }
      }
      #flushPipeline(endpoint, pipeline) {
        this.#flush(() => this.#createPipelineRequest(pipeline, endpoint), (resp) => decodePipelineResponse(resp, endpoint.encoding), (respBody) => respBody.baton, (respBody) => respBody.baseUrl, (respBody) => handlePipelineResponse(pipeline, respBody), (error2) => pipeline.forEach((entry) => entry.errorCallback(error2)));
      }
      #flushCursor(endpoint, entry) {
        const cursor = new HttpCursor(this, endpoint.encoding);
        this.#cursor = cursor;
        this.#flush(() => this.#createCursorRequest(entry, endpoint), (resp) => cursor.open(resp), (respBody) => respBody.baton, (respBody) => respBody.baseUrl, (_respBody) => entry.cursorCallback(cursor), (error2) => entry.errorCallback(error2));
      }
      #flush(createRequest, decodeResponse, getBaton, getBaseUrl, handleResponse, handleError) {
        let promise;
        try {
          const request = createRequest();
          const fetch2 = this.#fetch;
          promise = fetch2(request);
        } catch (error2) {
          promise = Promise.reject(error2);
        }
        this.#flushing = true;
        promise.then((resp) => {
          if (!resp.ok) {
            return errorFromResponse(resp).then((error2) => {
              throw error2;
            });
          }
          return decodeResponse(resp);
        }).then((r) => {
          this.#baton = getBaton(r);
          this.#baseUrl = getBaseUrl(r) ?? this.#baseUrl;
          handleResponse(r);
        }).catch((error2) => {
          this._setClosed(error2);
          handleError(error2);
        }).finally(() => {
          this.#flushing = false;
          this.#flushQueue();
        });
      }
      #createPipelineRequest(pipeline, endpoint) {
        return this.#createRequest(new URL(endpoint.pipelinePath, this.#baseUrl), {
          baton: this.#baton,
          requests: pipeline.map((entry) => entry.request)
        }, endpoint.encoding, PipelineReqBody, PipelineReqBody2);
      }
      #createCursorRequest(entry, endpoint) {
        if (endpoint.cursorPath === void 0) {
          throw new ProtocolVersionError(`Cursors are supported only on protocol version 3 and higher, but the HTTP server only supports version ${endpoint.version}.`);
        }
        return this.#createRequest(new URL(endpoint.cursorPath, this.#baseUrl), {
          baton: this.#baton,
          batch: entry.batch
        }, endpoint.encoding, CursorReqBody, CursorReqBody2);
      }
      #createRequest(url, reqBody, encoding, jsonFun, protobufFun) {
        let bodyData;
        let contentType;
        if (encoding === "json") {
          bodyData = writeJsonObject(reqBody, jsonFun);
          contentType = "application/json";
        } else if (encoding === "protobuf") {
          bodyData = writeProtobufMessage(reqBody, protobufFun);
          contentType = "application/x-protobuf";
        } else {
          throw impossible(encoding, "Impossible encoding");
        }
        const headers = new _Headers();
        headers.set("content-type", contentType);
        if (this.#jwt !== void 0) {
          headers.set("authorization", `Bearer ${this.#jwt}`);
        }
        return new _Request(url.toString(), { method: "POST", headers, body: bodyData });
      }
    };
    __name2(handlePipelineResponse, "handlePipelineResponse");
    __name2(decodePipelineResponse, "decodePipelineResponse");
    __name2(errorFromResponse, "errorFromResponse");
  }
});
async function findEndpoint(customFetch, clientUrl) {
  const fetch2 = customFetch;
  for (const endpoint of checkEndpoints) {
    const url = new URL(endpoint.versionPath, clientUrl);
    const request = new _Request(url.toString(), { method: "GET" });
    const response = await fetch2(request);
    await response.arrayBuffer();
    if (response.ok) {
      return endpoint;
    }
  }
  return fallbackEndpoint;
}
__name(findEndpoint, "findEndpoint");
var checkEndpoints;
var fallbackEndpoint;
var HttpClient;
var init_client3 = __esm({
  "../node_modules/@libsql/hrana-client/lib-esm/http/client.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_web2();
    init_client();
    init_errors();
    init_stream3();
    checkEndpoints = [
      {
        versionPath: "v3-protobuf",
        pipelinePath: "v3-protobuf/pipeline",
        cursorPath: "v3-protobuf/cursor",
        version: 3,
        encoding: "protobuf"
      }
      /*
      {
          versionPath: "v3",
          pipelinePath: "v3/pipeline",
          cursorPath: "v3/cursor",
          version: 3,
          encoding: "json",
      },
      */
    ];
    fallbackEndpoint = {
      versionPath: "v2",
      pipelinePath: "v2/pipeline",
      cursorPath: void 0,
      version: 2,
      encoding: "json"
    };
    HttpClient = class extends Client {
      static {
        __name(this, "HttpClient");
      }
      static {
        __name2(this, "HttpClient");
      }
      #url;
      #jwt;
      #fetch;
      #closed;
      #streams;
      /** @private */
      _endpointPromise;
      /** @private */
      _endpoint;
      /** @private */
      constructor(url, jwt, customFetch, protocolVersion = 2) {
        super();
        this.#url = url;
        this.#jwt = jwt;
        this.#fetch = customFetch ?? _fetch;
        this.#closed = void 0;
        this.#streams = /* @__PURE__ */ new Set();
        if (protocolVersion == 3) {
          this._endpointPromise = findEndpoint(this.#fetch, this.#url);
          this._endpointPromise.then((endpoint) => this._endpoint = endpoint, (error2) => this.#setClosed(error2));
        } else {
          this._endpointPromise = Promise.resolve(fallbackEndpoint);
          this._endpointPromise.then((endpoint) => this._endpoint = endpoint, (error2) => this.#setClosed(error2));
        }
      }
      /** Get the protocol version supported by the server. */
      async getVersion() {
        if (this._endpoint !== void 0) {
          return this._endpoint.version;
        }
        return (await this._endpointPromise).version;
      }
      // Make sure that the negotiated version is at least `minVersion`.
      /** @private */
      _ensureVersion(minVersion, feature) {
        if (minVersion <= fallbackEndpoint.version) {
          return;
        } else if (this._endpoint === void 0) {
          throw new ProtocolVersionError(`${feature} is supported only on protocol version ${minVersion} and higher, but the version supported by the HTTP server is not yet known. Use Client.getVersion() to wait until the version is available.`);
        } else if (this._endpoint.version < minVersion) {
          throw new ProtocolVersionError(`${feature} is supported only on protocol version ${minVersion} and higher, but the HTTP server only supports version ${this._endpoint.version}.`);
        }
      }
      /** Open a {@link HttpStream}, a stream for executing SQL statements. */
      openStream() {
        if (this.#closed !== void 0) {
          throw new ClosedError("Client is closed", this.#closed);
        }
        const stream = new HttpStream(this, this.#url, this.#jwt, this.#fetch);
        this.#streams.add(stream);
        return stream;
      }
      /** @private */
      _streamClosed(stream) {
        this.#streams.delete(stream);
      }
      /** Close the client and all its streams. */
      close() {
        this.#setClosed(new ClientError("Client was manually closed"));
      }
      /** True if the client is closed. */
      get closed() {
        return this.#closed !== void 0;
      }
      #setClosed(error2) {
        if (this.#closed !== void 0) {
          return;
        }
        this.#closed = error2;
        for (const stream of Array.from(this.#streams)) {
          stream._setClosed(new ClosedError("Client was closed", error2));
        }
      }
    };
    __name2(findEndpoint, "findEndpoint");
  }
});
var init_libsql_url = __esm({
  "../node_modules/@libsql/hrana-client/lib-esm/libsql_url.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_errors();
  }
});
function openWs(url, jwt, protocolVersion = 2) {
  if (typeof _WebSocket === "undefined") {
    throw new WebSocketUnsupportedError("WebSockets are not supported in this environment");
  }
  var subprotocols = void 0;
  if (protocolVersion == 3) {
    subprotocols = Array.from(subprotocolsV3.keys());
  } else {
    subprotocols = Array.from(subprotocolsV2.keys());
  }
  const socket = new _WebSocket(url, subprotocols);
  return new WsClient(socket, jwt);
}
__name(openWs, "openWs");
function openHttp(url, jwt, customFetch, protocolVersion = 2) {
  return new HttpClient(url instanceof URL ? url : new URL(url), jwt, customFetch, protocolVersion);
}
__name(openHttp, "openHttp");
var init_lib_esm = __esm({
  "../node_modules/@libsql/hrana-client/lib-esm/index.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_web();
    init_client2();
    init_errors();
    init_client3();
    init_client2();
    init_web();
    init_web2();
    init_client();
    init_errors();
    init_batch();
    init_libsql_url();
    init_sql();
    init_stmt();
    init_stream();
    init_client3();
    init_stream3();
    init_client2();
    init_stream2();
    __name2(openWs, "openWs");
    __name2(openHttp, "openHttp");
  }
});
async function executeHranaBatch(mode, version2, batch, hranaStmts, disableForeignKeys = false) {
  if (disableForeignKeys) {
    batch.step().run("PRAGMA foreign_keys=off");
  }
  const beginStep = batch.step();
  const beginPromise = beginStep.run(transactionModeToBegin(mode));
  let lastStep = beginStep;
  const stmtPromises = hranaStmts.map((hranaStmt) => {
    const stmtStep = batch.step().condition(BatchCond.ok(lastStep));
    if (version2 >= 3) {
      stmtStep.condition(BatchCond.not(BatchCond.isAutocommit(batch)));
    }
    const stmtPromise = stmtStep.query(hranaStmt);
    lastStep = stmtStep;
    return stmtPromise;
  });
  const commitStep = batch.step().condition(BatchCond.ok(lastStep));
  if (version2 >= 3) {
    commitStep.condition(BatchCond.not(BatchCond.isAutocommit(batch)));
  }
  const commitPromise = commitStep.run("COMMIT");
  const rollbackStep = batch.step().condition(BatchCond.not(BatchCond.ok(commitStep)));
  rollbackStep.run("ROLLBACK").catch((_) => void 0);
  if (disableForeignKeys) {
    batch.step().run("PRAGMA foreign_keys=on");
  }
  await batch.execute();
  const resultSets = [];
  await beginPromise;
  for (const stmtPromise of stmtPromises) {
    const hranaRows = await stmtPromise;
    if (hranaRows === void 0) {
      throw new LibsqlError("Statement in a batch was not executed, probably because the transaction has been rolled back", "TRANSACTION_CLOSED");
    }
    resultSets.push(resultSetFromHrana(hranaRows));
  }
  await commitPromise;
  return resultSets;
}
__name(executeHranaBatch, "executeHranaBatch");
function stmtToHrana(stmt) {
  let sql2;
  let args;
  if (Array.isArray(stmt)) {
    [sql2, args] = stmt;
  } else if (typeof stmt === "string") {
    sql2 = stmt;
  } else {
    sql2 = stmt.sql;
    args = stmt.args;
  }
  const hranaStmt = new Stmt(sql2);
  if (args) {
    if (Array.isArray(args)) {
      hranaStmt.bindIndexes(args);
    } else {
      for (const [key, value] of Object.entries(args)) {
        hranaStmt.bindName(key, value);
      }
    }
  }
  return hranaStmt;
}
__name(stmtToHrana, "stmtToHrana");
function resultSetFromHrana(hranaRows) {
  const columns = hranaRows.columnNames.map((c) => c ?? "");
  const columnTypes = hranaRows.columnDecltypes.map((c) => c ?? "");
  const rows = hranaRows.rows;
  const rowsAffected = hranaRows.affectedRowCount;
  const lastInsertRowid = hranaRows.lastInsertRowid !== void 0 ? hranaRows.lastInsertRowid : void 0;
  return new ResultSetImpl(columns, columnTypes, rows, rowsAffected, lastInsertRowid);
}
__name(resultSetFromHrana, "resultSetFromHrana");
function mapHranaError(e) {
  if (e instanceof ClientError) {
    const code = mapHranaErrorCode(e);
    return new LibsqlError(e.message, code, void 0, e);
  }
  return e;
}
__name(mapHranaError, "mapHranaError");
function mapHranaErrorCode(e) {
  if (e instanceof ResponseError && e.code !== void 0) {
    return e.code;
  } else if (e instanceof ProtoError) {
    return "HRANA_PROTO_ERROR";
  } else if (e instanceof ClosedError) {
    return e.cause instanceof ClientError ? mapHranaErrorCode(e.cause) : "HRANA_CLOSED_ERROR";
  } else if (e instanceof WebSocketError) {
    return "HRANA_WEBSOCKET_ERROR";
  } else if (e instanceof HttpServerError) {
    return "SERVER_ERROR";
  } else if (e instanceof ProtocolVersionError) {
    return "PROTOCOL_VERSION_ERROR";
  } else if (e instanceof InternalError) {
    return "INTERNAL_ERROR";
  } else {
    return "UNKNOWN";
  }
}
__name(mapHranaErrorCode, "mapHranaErrorCode");
var HranaTransaction;
var init_hrana = __esm({
  "../node_modules/@libsql/client/lib-esm/hrana.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_lib_esm();
    init_api();
    init_util();
    HranaTransaction = class {
      static {
        __name(this, "HranaTransaction");
      }
      static {
        __name2(this, "HranaTransaction");
      }
      #mode;
      #version;
      // Promise that is resolved when the BEGIN statement completes, or `undefined` if we haven't executed the
      // BEGIN statement yet.
      #started;
      /** @private */
      constructor(mode, version2) {
        this.#mode = mode;
        this.#version = version2;
        this.#started = void 0;
      }
      execute(stmt) {
        return this.batch([stmt]).then((results) => results[0]);
      }
      async batch(stmts) {
        const stream = this._getStream();
        if (stream.closed) {
          throw new LibsqlError("Cannot execute statements because the transaction is closed", "TRANSACTION_CLOSED");
        }
        try {
          const hranaStmts = stmts.map(stmtToHrana);
          let rowsPromises;
          if (this.#started === void 0) {
            this._getSqlCache().apply(hranaStmts);
            const batch = stream.batch(this.#version >= 3);
            const beginStep = batch.step();
            const beginPromise = beginStep.run(transactionModeToBegin(this.#mode));
            let lastStep = beginStep;
            rowsPromises = hranaStmts.map((hranaStmt) => {
              const stmtStep = batch.step().condition(BatchCond.ok(lastStep));
              if (this.#version >= 3) {
                stmtStep.condition(BatchCond.not(BatchCond.isAutocommit(batch)));
              }
              const rowsPromise = stmtStep.query(hranaStmt);
              rowsPromise.catch(() => void 0);
              lastStep = stmtStep;
              return rowsPromise;
            });
            this.#started = batch.execute().then(() => beginPromise).then(() => void 0);
            try {
              await this.#started;
            } catch (e) {
              this.close();
              throw e;
            }
          } else {
            if (this.#version < 3) {
              await this.#started;
            } else {
            }
            this._getSqlCache().apply(hranaStmts);
            const batch = stream.batch(this.#version >= 3);
            let lastStep = void 0;
            rowsPromises = hranaStmts.map((hranaStmt) => {
              const stmtStep = batch.step();
              if (lastStep !== void 0) {
                stmtStep.condition(BatchCond.ok(lastStep));
              }
              if (this.#version >= 3) {
                stmtStep.condition(BatchCond.not(BatchCond.isAutocommit(batch)));
              }
              const rowsPromise = stmtStep.query(hranaStmt);
              rowsPromise.catch(() => void 0);
              lastStep = stmtStep;
              return rowsPromise;
            });
            await batch.execute();
          }
          const resultSets = [];
          for (const rowsPromise of rowsPromises) {
            const rows = await rowsPromise;
            if (rows === void 0) {
              throw new LibsqlError("Statement in a transaction was not executed, probably because the transaction has been rolled back", "TRANSACTION_CLOSED");
            }
            resultSets.push(resultSetFromHrana(rows));
          }
          return resultSets;
        } catch (e) {
          throw mapHranaError(e);
        }
      }
      async executeMultiple(sql2) {
        const stream = this._getStream();
        if (stream.closed) {
          throw new LibsqlError("Cannot execute statements because the transaction is closed", "TRANSACTION_CLOSED");
        }
        try {
          if (this.#started === void 0) {
            this.#started = stream.run(transactionModeToBegin(this.#mode)).then(() => void 0);
            try {
              await this.#started;
            } catch (e) {
              this.close();
              throw e;
            }
          } else {
            await this.#started;
          }
          await stream.sequence(sql2);
        } catch (e) {
          throw mapHranaError(e);
        }
      }
      async rollback() {
        try {
          const stream = this._getStream();
          if (stream.closed) {
            return;
          }
          if (this.#started !== void 0) {
          } else {
            return;
          }
          const promise = stream.run("ROLLBACK").catch((e) => {
            throw mapHranaError(e);
          });
          stream.closeGracefully();
          await promise;
        } catch (e) {
          throw mapHranaError(e);
        } finally {
          this.close();
        }
      }
      async commit() {
        try {
          const stream = this._getStream();
          if (stream.closed) {
            throw new LibsqlError("Cannot commit the transaction because it is already closed", "TRANSACTION_CLOSED");
          }
          if (this.#started !== void 0) {
            await this.#started;
          } else {
            return;
          }
          const promise = stream.run("COMMIT").catch((e) => {
            throw mapHranaError(e);
          });
          stream.closeGracefully();
          await promise;
        } catch (e) {
          throw mapHranaError(e);
        } finally {
          this.close();
        }
      }
    };
    __name2(executeHranaBatch, "executeHranaBatch");
    __name2(stmtToHrana, "stmtToHrana");
    __name2(resultSetFromHrana, "resultSetFromHrana");
    __name2(mapHranaError, "mapHranaError");
    __name2(mapHranaErrorCode, "mapHranaErrorCode");
  }
});
var SqlCache;
var Lru;
var init_sql_cache = __esm({
  "../node_modules/@libsql/client/lib-esm/sql_cache.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    SqlCache = class {
      static {
        __name(this, "SqlCache");
      }
      static {
        __name2(this, "SqlCache");
      }
      #owner;
      #sqls;
      capacity;
      constructor(owner, capacity) {
        this.#owner = owner;
        this.#sqls = new Lru();
        this.capacity = capacity;
      }
      // Replaces SQL strings with cached `hrana.Sql` objects in the statements in `hranaStmts`. After this
      // function returns, we guarantee that all `hranaStmts` refer to valid (not closed) `hrana.Sql` objects,
      // but _we may invalidate any other `hrana.Sql` objects_ (by closing them, thus removing them from the
      // server).
      //
      // In practice, this means that after calling this function, you can use the statements only up to the
      // first `await`, because concurrent code may also use the cache and invalidate those statements.
      apply(hranaStmts) {
        if (this.capacity <= 0) {
          return;
        }
        const usedSqlObjs = /* @__PURE__ */ new Set();
        for (const hranaStmt of hranaStmts) {
          if (typeof hranaStmt.sql !== "string") {
            continue;
          }
          const sqlText = hranaStmt.sql;
          if (sqlText.length >= 5e3) {
            continue;
          }
          let sqlObj = this.#sqls.get(sqlText);
          if (sqlObj === void 0) {
            while (this.#sqls.size + 1 > this.capacity) {
              const [evictSqlText, evictSqlObj] = this.#sqls.peekLru();
              if (usedSqlObjs.has(evictSqlObj)) {
                break;
              }
              evictSqlObj.close();
              this.#sqls.delete(evictSqlText);
            }
            if (this.#sqls.size + 1 <= this.capacity) {
              sqlObj = this.#owner.storeSql(sqlText);
              this.#sqls.set(sqlText, sqlObj);
            }
          }
          if (sqlObj !== void 0) {
            hranaStmt.sql = sqlObj;
            usedSqlObjs.add(sqlObj);
          }
        }
      }
    };
    Lru = class {
      static {
        __name(this, "Lru");
      }
      static {
        __name2(this, "Lru");
      }
      // This maps keys to the cache values. The entries are ordered by their last use (entires that were used
      // most recently are at the end).
      #cache;
      constructor() {
        this.#cache = /* @__PURE__ */ new Map();
      }
      get(key) {
        const value = this.#cache.get(key);
        if (value !== void 0) {
          this.#cache.delete(key);
          this.#cache.set(key, value);
        }
        return value;
      }
      set(key, value) {
        this.#cache.set(key, value);
      }
      peekLru() {
        for (const entry of this.#cache.entries()) {
          return entry;
        }
        return void 0;
      }
      delete(key) {
        this.#cache.delete(key);
      }
      get size() {
        return this.#cache.size;
      }
    };
  }
});
var require_promise_limit = __commonJS({
  "../node_modules/promise-limit/index.js"(exports, module) {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    function limiter(count) {
      var outstanding = 0;
      var jobs = [];
      function remove() {
        outstanding--;
        if (outstanding < count) {
          dequeue();
        }
      }
      __name(remove, "remove");
      __name2(remove, "remove");
      function dequeue() {
        var job = jobs.shift();
        semaphore.queue = jobs.length;
        if (job) {
          run(job.fn).then(job.resolve).catch(job.reject);
        }
      }
      __name(dequeue, "dequeue");
      __name2(dequeue, "dequeue");
      function queue(fn) {
        return new Promise(function(resolve, reject) {
          jobs.push({ fn, resolve, reject });
          semaphore.queue = jobs.length;
        });
      }
      __name(queue, "queue");
      __name2(queue, "queue");
      function run(fn) {
        outstanding++;
        try {
          return Promise.resolve(fn()).then(function(result) {
            remove();
            return result;
          }, function(error2) {
            remove();
            throw error2;
          });
        } catch (err) {
          remove();
          return Promise.reject(err);
        }
      }
      __name(run, "run");
      __name2(run, "run");
      var semaphore = /* @__PURE__ */ __name2(function(fn) {
        if (outstanding >= count) {
          return queue(fn);
        } else {
          return run(fn);
        }
      }, "semaphore");
      return semaphore;
    }
    __name(limiter, "limiter");
    __name2(limiter, "limiter");
    function map2(items, mapper) {
      var failed = false;
      var limit = this;
      return Promise.all(items.map(function() {
        var args = arguments;
        return limit(function() {
          if (!failed) {
            return mapper.apply(void 0, args).catch(function(e) {
              failed = true;
              throw e;
            });
          }
        });
      }));
    }
    __name(map2, "map2");
    __name2(map2, "map");
    function addExtras(fn) {
      fn.queue = 0;
      fn.map = map2;
      return fn;
    }
    __name(addExtras, "addExtras");
    __name2(addExtras, "addExtras");
    module.exports = function(count) {
      if (count) {
        return addExtras(limiter(count));
      } else {
        return addExtras(function(fn) {
          return fn();
        });
      }
    };
  }
});
function _createClient(config2) {
  if (config2.scheme !== "wss" && config2.scheme !== "ws") {
    throw new LibsqlError(`The WebSocket client supports only "libsql:", "wss:" and "ws:" URLs, got ${JSON.stringify(config2.scheme + ":")}. For more information, please read ${supportedUrlLink}`, "URL_SCHEME_NOT_SUPPORTED");
  }
  if (config2.encryptionKey !== void 0) {
    throw new LibsqlError("Encryption key is not supported by the remote client.", "ENCRYPTION_KEY_NOT_SUPPORTED");
  }
  if (config2.scheme === "ws" && config2.tls) {
    throw new LibsqlError(`A "ws:" URL cannot opt into TLS by using ?tls=1`, "URL_INVALID");
  } else if (config2.scheme === "wss" && !config2.tls) {
    throw new LibsqlError(`A "wss:" URL cannot opt out of TLS by using ?tls=0`, "URL_INVALID");
  }
  const url = encodeBaseUrl(config2.scheme, config2.authority, config2.path);
  let client;
  try {
    client = openWs(url, config2.authToken);
  } catch (e) {
    if (e instanceof WebSocketUnsupportedError) {
      const suggestedScheme = config2.scheme === "wss" ? "https" : "http";
      const suggestedUrl = encodeBaseUrl(suggestedScheme, config2.authority, config2.path);
      throw new LibsqlError(`This environment does not support WebSockets, please switch to the HTTP client by using a "${suggestedScheme}:" URL (${JSON.stringify(suggestedUrl)}). For more information, please read ${supportedUrlLink}`, "WEBSOCKETS_NOT_SUPPORTED");
    }
    throw mapHranaError(e);
  }
  return new WsClient2(client, url, config2.authToken, config2.intMode, config2.concurrency);
}
__name(_createClient, "_createClient");
var import_promise_limit;
var maxConnAgeMillis;
var sqlCacheCapacity;
var WsClient2;
var WsTransaction;
var init_ws = __esm({
  "../node_modules/@libsql/client/lib-esm/ws.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_lib_esm();
    init_api();
    init_config();
    init_hrana();
    init_sql_cache();
    init_uri();
    init_util();
    import_promise_limit = __toESM(require_promise_limit(), 1);
    init_api();
    __name2(_createClient, "_createClient");
    maxConnAgeMillis = 60 * 1e3;
    sqlCacheCapacity = 100;
    WsClient2 = class {
      static {
        __name(this, "WsClient2");
      }
      static {
        __name2(this, "WsClient");
      }
      #url;
      #authToken;
      #intMode;
      // State of the current connection. The `hrana.WsClient` inside may be closed at any moment due to an
      // asynchronous error.
      #connState;
      // If defined, this is a connection that will be used in the future, once it is ready.
      #futureConnState;
      closed;
      protocol;
      #isSchemaDatabase;
      #promiseLimitFunction;
      /** @private */
      constructor(client, url, authToken, intMode, concurrency) {
        this.#url = url;
        this.#authToken = authToken;
        this.#intMode = intMode;
        this.#connState = this.#openConn(client);
        this.#futureConnState = void 0;
        this.closed = false;
        this.protocol = "ws";
        this.#promiseLimitFunction = (0, import_promise_limit.default)(concurrency);
      }
      async limit(fn) {
        return this.#promiseLimitFunction(fn);
      }
      async execute(stmtOrSql, args) {
        let stmt;
        if (typeof stmtOrSql === "string") {
          stmt = {
            sql: stmtOrSql,
            args: args || []
          };
        } else {
          stmt = stmtOrSql;
        }
        return this.limit(async () => {
          const streamState = await this.#openStream();
          try {
            const hranaStmt = stmtToHrana(stmt);
            streamState.conn.sqlCache.apply([hranaStmt]);
            const hranaRowsPromise = streamState.stream.query(hranaStmt);
            streamState.stream.closeGracefully();
            const hranaRowsResult = await hranaRowsPromise;
            return resultSetFromHrana(hranaRowsResult);
          } catch (e) {
            throw mapHranaError(e);
          } finally {
            this._closeStream(streamState);
          }
        });
      }
      async batch(stmts, mode = "deferred") {
        return this.limit(async () => {
          const streamState = await this.#openStream();
          try {
            const normalizedStmts = stmts.map((stmt) => {
              if (Array.isArray(stmt)) {
                return {
                  sql: stmt[0],
                  args: stmt[1] || []
                };
              }
              return stmt;
            });
            const hranaStmts = normalizedStmts.map(stmtToHrana);
            const version2 = await streamState.conn.client.getVersion();
            streamState.conn.sqlCache.apply(hranaStmts);
            const batch = streamState.stream.batch(version2 >= 3);
            const resultsPromise = executeHranaBatch(mode, version2, batch, hranaStmts);
            const results = await resultsPromise;
            return results;
          } catch (e) {
            throw mapHranaError(e);
          } finally {
            this._closeStream(streamState);
          }
        });
      }
      async migrate(stmts) {
        return this.limit(async () => {
          const streamState = await this.#openStream();
          try {
            const hranaStmts = stmts.map(stmtToHrana);
            const version2 = await streamState.conn.client.getVersion();
            const batch = streamState.stream.batch(version2 >= 3);
            const resultsPromise = executeHranaBatch("deferred", version2, batch, hranaStmts, true);
            const results = await resultsPromise;
            return results;
          } catch (e) {
            throw mapHranaError(e);
          } finally {
            this._closeStream(streamState);
          }
        });
      }
      async transaction(mode = "write") {
        return this.limit(async () => {
          const streamState = await this.#openStream();
          try {
            const version2 = await streamState.conn.client.getVersion();
            return new WsTransaction(this, streamState, mode, version2);
          } catch (e) {
            this._closeStream(streamState);
            throw mapHranaError(e);
          }
        });
      }
      async executeMultiple(sql2) {
        return this.limit(async () => {
          const streamState = await this.#openStream();
          try {
            const promise = streamState.stream.sequence(sql2);
            streamState.stream.closeGracefully();
            await promise;
          } catch (e) {
            throw mapHranaError(e);
          } finally {
            this._closeStream(streamState);
          }
        });
      }
      sync() {
        throw new LibsqlError("sync not supported in ws mode", "SYNC_NOT_SUPPORTED");
      }
      async #openStream() {
        if (this.closed) {
          throw new LibsqlError("The client is closed", "CLIENT_CLOSED");
        }
        const now = /* @__PURE__ */ new Date();
        const ageMillis = now.valueOf() - this.#connState.openTime.valueOf();
        if (ageMillis > maxConnAgeMillis && this.#futureConnState === void 0) {
          const futureConnState = this.#openConn();
          this.#futureConnState = futureConnState;
          futureConnState.client.getVersion().then((_version) => {
            if (this.#connState !== futureConnState) {
              if (this.#connState.streamStates.size === 0) {
                this.#connState.client.close();
              } else {
              }
            }
            this.#connState = futureConnState;
            this.#futureConnState = void 0;
          }, (_e) => {
            this.#futureConnState = void 0;
          });
        }
        if (this.#connState.client.closed) {
          try {
            if (this.#futureConnState !== void 0) {
              this.#connState = this.#futureConnState;
            } else {
              this.#connState = this.#openConn();
            }
          } catch (e) {
            throw mapHranaError(e);
          }
        }
        const connState = this.#connState;
        try {
          if (connState.useSqlCache === void 0) {
            connState.useSqlCache = await connState.client.getVersion() >= 2;
            if (connState.useSqlCache) {
              connState.sqlCache.capacity = sqlCacheCapacity;
            }
          }
          const stream = connState.client.openStream();
          stream.intMode = this.#intMode;
          const streamState = { conn: connState, stream };
          connState.streamStates.add(streamState);
          return streamState;
        } catch (e) {
          throw mapHranaError(e);
        }
      }
      #openConn(client) {
        try {
          client ??= openWs(this.#url, this.#authToken);
          return {
            client,
            useSqlCache: void 0,
            sqlCache: new SqlCache(client, 0),
            openTime: /* @__PURE__ */ new Date(),
            streamStates: /* @__PURE__ */ new Set()
          };
        } catch (e) {
          throw mapHranaError(e);
        }
      }
      _closeStream(streamState) {
        streamState.stream.close();
        const connState = streamState.conn;
        connState.streamStates.delete(streamState);
        if (connState.streamStates.size === 0 && connState !== this.#connState) {
          connState.client.close();
        }
      }
      close() {
        this.#connState.client.close();
        this.closed = true;
      }
    };
    WsTransaction = class extends HranaTransaction {
      static {
        __name(this, "WsTransaction");
      }
      static {
        __name2(this, "WsTransaction");
      }
      #client;
      #streamState;
      /** @private */
      constructor(client, state, mode, version2) {
        super(mode, version2);
        this.#client = client;
        this.#streamState = state;
      }
      /** @private */
      _getStream() {
        return this.#streamState.stream;
      }
      /** @private */
      _getSqlCache() {
        return this.#streamState.conn.sqlCache;
      }
      close() {
        this.#client._closeStream(this.#streamState);
      }
      get closed() {
        return this.#streamState.stream.closed;
      }
    };
  }
});
function _createClient2(config2) {
  if (config2.scheme !== "https" && config2.scheme !== "http") {
    throw new LibsqlError(`The HTTP client supports only "libsql:", "https:" and "http:" URLs, got ${JSON.stringify(config2.scheme + ":")}. For more information, please read ${supportedUrlLink}`, "URL_SCHEME_NOT_SUPPORTED");
  }
  if (config2.encryptionKey !== void 0) {
    throw new LibsqlError("Encryption key is not supported by the remote client.", "ENCRYPTION_KEY_NOT_SUPPORTED");
  }
  if (config2.scheme === "http" && config2.tls) {
    throw new LibsqlError(`A "http:" URL cannot opt into TLS by using ?tls=1`, "URL_INVALID");
  } else if (config2.scheme === "https" && !config2.tls) {
    throw new LibsqlError(`A "https:" URL cannot opt out of TLS by using ?tls=0`, "URL_INVALID");
  }
  const url = encodeBaseUrl(config2.scheme, config2.authority, config2.path);
  return new HttpClient2(url, config2.authToken, config2.intMode, config2.fetch, config2.concurrency);
}
__name(_createClient2, "_createClient2");
var import_promise_limit2;
var sqlCacheCapacity2;
var HttpClient2;
var HttpTransaction;
var init_http = __esm({
  "../node_modules/@libsql/client/lib-esm/http.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_lib_esm();
    init_api();
    init_config();
    init_hrana();
    init_sql_cache();
    init_uri();
    init_util();
    import_promise_limit2 = __toESM(require_promise_limit(), 1);
    init_api();
    __name2(_createClient2, "_createClient");
    sqlCacheCapacity2 = 30;
    HttpClient2 = class {
      static {
        __name(this, "HttpClient2");
      }
      static {
        __name2(this, "HttpClient");
      }
      #client;
      protocol;
      #authToken;
      #promiseLimitFunction;
      /** @private */
      constructor(url, authToken, intMode, customFetch, concurrency) {
        this.#client = openHttp(url, authToken, customFetch);
        this.#client.intMode = intMode;
        this.protocol = "http";
        this.#authToken = authToken;
        this.#promiseLimitFunction = (0, import_promise_limit2.default)(concurrency);
      }
      async limit(fn) {
        return this.#promiseLimitFunction(fn);
      }
      async execute(stmtOrSql, args) {
        let stmt;
        if (typeof stmtOrSql === "string") {
          stmt = {
            sql: stmtOrSql,
            args: args || []
          };
        } else {
          stmt = stmtOrSql;
        }
        return this.limit(async () => {
          try {
            const hranaStmt = stmtToHrana(stmt);
            let rowsPromise;
            const stream = this.#client.openStream();
            try {
              rowsPromise = stream.query(hranaStmt);
            } finally {
              stream.closeGracefully();
            }
            const rowsResult = await rowsPromise;
            return resultSetFromHrana(rowsResult);
          } catch (e) {
            throw mapHranaError(e);
          }
        });
      }
      async batch(stmts, mode = "deferred") {
        return this.limit(async () => {
          try {
            const normalizedStmts = stmts.map((stmt) => {
              if (Array.isArray(stmt)) {
                return {
                  sql: stmt[0],
                  args: stmt[1] || []
                };
              }
              return stmt;
            });
            const hranaStmts = normalizedStmts.map(stmtToHrana);
            const version2 = await this.#client.getVersion();
            let resultsPromise;
            const stream = this.#client.openStream();
            try {
              const sqlCache = new SqlCache(stream, sqlCacheCapacity2);
              sqlCache.apply(hranaStmts);
              const batch = stream.batch(false);
              resultsPromise = executeHranaBatch(mode, version2, batch, hranaStmts);
            } finally {
              stream.closeGracefully();
            }
            const results = await resultsPromise;
            return results;
          } catch (e) {
            throw mapHranaError(e);
          }
        });
      }
      async migrate(stmts) {
        return this.limit(async () => {
          try {
            const hranaStmts = stmts.map(stmtToHrana);
            const version2 = await this.#client.getVersion();
            let resultsPromise;
            const stream = this.#client.openStream();
            try {
              const batch = stream.batch(false);
              resultsPromise = executeHranaBatch("deferred", version2, batch, hranaStmts, true);
            } finally {
              stream.closeGracefully();
            }
            const results = await resultsPromise;
            return results;
          } catch (e) {
            throw mapHranaError(e);
          }
        });
      }
      async transaction(mode = "write") {
        return this.limit(async () => {
          try {
            const version2 = await this.#client.getVersion();
            return new HttpTransaction(this.#client.openStream(), mode, version2);
          } catch (e) {
            throw mapHranaError(e);
          }
        });
      }
      async executeMultiple(sql2) {
        return this.limit(async () => {
          try {
            let promise;
            const stream = this.#client.openStream();
            try {
              promise = stream.sequence(sql2);
            } finally {
              stream.closeGracefully();
            }
            await promise;
          } catch (e) {
            throw mapHranaError(e);
          }
        });
      }
      sync() {
        throw new LibsqlError("sync not supported in http mode", "SYNC_NOT_SUPPORTED");
      }
      close() {
        this.#client.close();
      }
      get closed() {
        return this.#client.closed;
      }
    };
    HttpTransaction = class extends HranaTransaction {
      static {
        __name(this, "HttpTransaction");
      }
      static {
        __name2(this, "HttpTransaction");
      }
      #stream;
      #sqlCache;
      /** @private */
      constructor(stream, mode, version2) {
        super(mode, version2);
        this.#stream = stream;
        this.#sqlCache = new SqlCache(stream, sqlCacheCapacity2);
      }
      /** @private */
      _getStream() {
        return this.#stream;
      }
      /** @private */
      _getSqlCache() {
        return this.#sqlCache;
      }
      close() {
        this.#stream.close();
      }
      get closed() {
        return this.#stream.closed;
      }
    };
  }
});
function createClient(config2) {
  return _createClient3(expandConfig(config2, true));
}
__name(createClient, "createClient");
function _createClient3(config2) {
  if (config2.scheme === "ws" || config2.scheme === "wss") {
    return _createClient(config2);
  } else if (config2.scheme === "http" || config2.scheme === "https") {
    return _createClient2(config2);
  } else {
    throw new LibsqlError(`The client that uses Web standard APIs supports only "libsql:", "wss:", "ws:", "https:" and "http:" URLs, got ${JSON.stringify(config2.scheme + ":")}. For more information, please read ${supportedUrlLink}`, "URL_SCHEME_NOT_SUPPORTED");
  }
}
__name(_createClient3, "_createClient3");
var init_web3 = __esm({
  "../node_modules/@libsql/client/lib-esm/web.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_api();
    init_config();
    init_util();
    init_ws();
    init_http();
    init_api();
    __name2(createClient, "createClient");
    __name2(_createClient3, "_createClient");
  }
});
var LibsqlError2;
var init_api2 = __esm({
  "../node_modules/@libsql/kysely-libsql/node_modules/@libsql/client/node_modules/@libsql/core/lib-esm/api.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    LibsqlError2 = class extends Error {
      static {
        __name(this, "LibsqlError2");
      }
      static {
        __name2(this, "LibsqlError");
      }
      /** Machine-readable error code. */
      code;
      /** Raw numeric error code */
      rawCode;
      constructor(message2, code, rawCode, cause) {
        if (code !== void 0) {
          message2 = `${code}: ${message2}`;
        }
        super(message2, { cause });
        this.code = code;
        this.rawCode = rawCode;
        this.name = "LibsqlError";
      }
    };
  }
});
function parseUri2(text) {
  const match2 = URI_RE2.exec(text);
  if (match2 === null) {
    throw new LibsqlError2(`The URL '${text}' is not in a valid format`, "URL_INVALID");
  }
  const groups = match2.groups;
  const scheme = groups["scheme"];
  const authority = groups["authority"] !== void 0 ? parseAuthority2(groups["authority"]) : void 0;
  const path = percentDecode2(groups["path"]);
  const query = groups["query"] !== void 0 ? parseQuery2(groups["query"]) : void 0;
  const fragment = groups["fragment"] !== void 0 ? percentDecode2(groups["fragment"]) : void 0;
  return { scheme, authority, path, query, fragment };
}
__name(parseUri2, "parseUri2");
function parseAuthority2(text) {
  const match2 = AUTHORITY_RE2.exec(text);
  if (match2 === null) {
    throw new LibsqlError2("The authority part of the URL is not in a valid format", "URL_INVALID");
  }
  const groups = match2.groups;
  const host = percentDecode2(groups["host_br"] ?? groups["host"]);
  const port = groups["port"] ? parseInt(groups["port"], 10) : void 0;
  const userinfo = groups["username"] !== void 0 ? {
    username: percentDecode2(groups["username"]),
    password: groups["password"] !== void 0 ? percentDecode2(groups["password"]) : void 0
  } : void 0;
  return { host, port, userinfo };
}
__name(parseAuthority2, "parseAuthority2");
function parseQuery2(text) {
  const sequences = text.split("&");
  const pairs = [];
  for (const sequence of sequences) {
    if (sequence === "") {
      continue;
    }
    let key;
    let value;
    const splitIdx = sequence.indexOf("=");
    if (splitIdx < 0) {
      key = sequence;
      value = "";
    } else {
      key = sequence.substring(0, splitIdx);
      value = sequence.substring(splitIdx + 1);
    }
    pairs.push({
      key: percentDecode2(key.replaceAll("+", " ")),
      value: percentDecode2(value.replaceAll("+", " "))
    });
  }
  return { pairs };
}
__name(parseQuery2, "parseQuery2");
function percentDecode2(text) {
  try {
    return decodeURIComponent(text);
  } catch (e) {
    if (e instanceof URIError) {
      throw new LibsqlError2(`URL component has invalid percent encoding: ${e}`, "URL_INVALID", void 0, e);
    }
    throw e;
  }
}
__name(percentDecode2, "percentDecode2");
function encodeBaseUrl2(scheme, authority, path) {
  if (authority === void 0) {
    throw new LibsqlError2(`URL with scheme ${JSON.stringify(scheme + ":")} requires authority (the "//" part)`, "URL_INVALID");
  }
  const schemeText = `${scheme}:`;
  const hostText = encodeHost2(authority.host);
  const portText = encodePort2(authority.port);
  const userinfoText = encodeUserinfo2(authority.userinfo);
  const authorityText = `//${userinfoText}${hostText}${portText}`;
  let pathText = path.split("/").map(encodeURIComponent).join("/");
  if (pathText !== "" && !pathText.startsWith("/")) {
    pathText = "/" + pathText;
  }
  return new URL(`${schemeText}${authorityText}${pathText}`);
}
__name(encodeBaseUrl2, "encodeBaseUrl2");
function encodeHost2(host) {
  return host.includes(":") ? `[${encodeURI(host)}]` : encodeURI(host);
}
__name(encodeHost2, "encodeHost2");
function encodePort2(port) {
  return port !== void 0 ? `:${port}` : "";
}
__name(encodePort2, "encodePort2");
function encodeUserinfo2(userinfo) {
  if (userinfo === void 0) {
    return "";
  }
  const usernameText = encodeURIComponent(userinfo.username);
  const passwordText = userinfo.password !== void 0 ? `:${encodeURIComponent(userinfo.password)}` : "";
  return `${usernameText}${passwordText}@`;
}
__name(encodeUserinfo2, "encodeUserinfo2");
var URI_RE2;
var AUTHORITY_RE2;
var init_uri2 = __esm({
  "../node_modules/@libsql/kysely-libsql/node_modules/@libsql/client/node_modules/@libsql/core/lib-esm/uri.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_api2();
    __name2(parseUri2, "parseUri");
    URI_RE2 = (() => {
      const SCHEME = "(?<scheme>[A-Za-z][A-Za-z.+-]*)";
      const AUTHORITY = "(?<authority>[^/?#]*)";
      const PATH = "(?<path>[^?#]*)";
      const QUERY = "(?<query>[^#]*)";
      const FRAGMENT = "(?<fragment>.*)";
      return new RegExp(`^${SCHEME}:(//${AUTHORITY})?${PATH}(\\?${QUERY})?(#${FRAGMENT})?$`, "su");
    })();
    __name2(parseAuthority2, "parseAuthority");
    AUTHORITY_RE2 = (() => {
      return new RegExp(`^((?<username>[^:]*)(:(?<password>.*))?@)?((?<host>[^:\\[\\]]*)|(\\[(?<host_br>[^\\[\\]]*)\\]))(:(?<port>[0-9]*))?$`, "su");
    })();
    __name2(parseQuery2, "parseQuery");
    __name2(percentDecode2, "percentDecode");
    __name2(encodeBaseUrl2, "encodeBaseUrl");
    __name2(encodeHost2, "encodeHost");
    __name2(encodePort2, "encodePort");
    __name2(encodeUserinfo2, "encodeUserinfo");
  }
});
function transactionModeToBegin2(mode) {
  if (mode === "write") {
    return "BEGIN IMMEDIATE";
  } else if (mode === "read") {
    return "BEGIN TRANSACTION READONLY";
  } else if (mode === "deferred") {
    return "BEGIN DEFERRED";
  } else {
    throw RangeError('Unknown transaction mode, supported values are "write", "read" and "deferred"');
  }
}
__name(transactionModeToBegin2, "transactionModeToBegin2");
function rowToJson2(row) {
  return Array.prototype.map.call(row, valueToJson2);
}
__name(rowToJson2, "rowToJson2");
function valueToJson2(value) {
  if (typeof value === "bigint") {
    return "" + value;
  } else if (value instanceof ArrayBuffer) {
    return gBase64.fromUint8Array(new Uint8Array(value));
  } else {
    return value;
  }
}
__name(valueToJson2, "valueToJson2");
var supportedUrlLink2;
var ResultSetImpl2;
var init_util4 = __esm({
  "../node_modules/@libsql/kysely-libsql/node_modules/@libsql/client/node_modules/@libsql/core/lib-esm/util.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_base64();
    supportedUrlLink2 = "https://github.com/libsql/libsql-client-ts#supported-urls";
    __name2(transactionModeToBegin2, "transactionModeToBegin");
    ResultSetImpl2 = class {
      static {
        __name(this, "ResultSetImpl2");
      }
      static {
        __name2(this, "ResultSetImpl");
      }
      columns;
      columnTypes;
      rows;
      rowsAffected;
      lastInsertRowid;
      constructor(columns, columnTypes, rows, rowsAffected, lastInsertRowid) {
        this.columns = columns;
        this.columnTypes = columnTypes;
        this.rows = rows;
        this.rowsAffected = rowsAffected;
        this.lastInsertRowid = lastInsertRowid;
      }
      toJSON() {
        return {
          columns: this.columns,
          columnTypes: this.columnTypes,
          rows: this.rows.map(rowToJson2),
          rowsAffected: this.rowsAffected,
          lastInsertRowid: this.lastInsertRowid !== void 0 ? "" + this.lastInsertRowid : null
        };
      }
    };
    __name2(rowToJson2, "rowToJson");
    __name2(valueToJson2, "valueToJson");
  }
});
function expandConfig2(config2, preferHttp) {
  if (typeof config2 !== "object") {
    throw new TypeError(`Expected client configuration as object, got ${typeof config2}`);
  }
  let { url, authToken, tls, intMode, concurrency } = config2;
  concurrency = Math.max(0, concurrency || 20);
  intMode ??= "number";
  let connectionQueryParams = [];
  if (url === inMemoryMode2) {
    url = "file::memory:";
  }
  const uri = parseUri2(url);
  const originalUriScheme = uri.scheme.toLowerCase();
  const isInMemoryMode = originalUriScheme === "file" && uri.path === inMemoryMode2 && uri.authority === void 0;
  let queryParamsDef;
  if (isInMemoryMode) {
    queryParamsDef = {
      cache: {
        values: ["shared", "private"],
        update: /* @__PURE__ */ __name2((key, value) => connectionQueryParams.push(`${key}=${value}`), "update")
      }
    };
  } else {
    queryParamsDef = {
      tls: {
        values: ["0", "1"],
        update: /* @__PURE__ */ __name2((_, value) => tls = value === "1", "update")
      },
      authToken: {
        update: /* @__PURE__ */ __name2((_, value) => authToken = value, "update")
      }
    };
  }
  for (const { key, value } of uri.query?.pairs ?? []) {
    if (!Object.hasOwn(queryParamsDef, key)) {
      throw new LibsqlError2(`Unsupported URL query parameter ${JSON.stringify(key)}`, "URL_PARAM_NOT_SUPPORTED");
    }
    const queryParamDef = queryParamsDef[key];
    if (queryParamDef.values !== void 0 && !queryParamDef.values.includes(value)) {
      throw new LibsqlError2(`Unknown value for the "${key}" query argument: ${JSON.stringify(value)}. Supported values are: [${queryParamDef.values.map((x) => '"' + x + '"').join(", ")}]`, "URL_INVALID");
    }
    if (queryParamDef.update !== void 0) {
      queryParamDef?.update(key, value);
    }
  }
  const connectionQueryParamsString = connectionQueryParams.length === 0 ? "" : `?${connectionQueryParams.join("&")}`;
  const path = uri.path + connectionQueryParamsString;
  let scheme;
  if (originalUriScheme === "libsql") {
    if (tls === false) {
      if (uri.authority?.port === void 0) {
        throw new LibsqlError2('A "libsql:" URL with ?tls=0 must specify an explicit port', "URL_INVALID");
      }
      scheme = preferHttp ? "http" : "ws";
    } else {
      scheme = preferHttp ? "https" : "wss";
    }
  } else {
    scheme = originalUriScheme;
  }
  if (scheme === "http" || scheme === "ws") {
    tls ??= false;
  } else {
    tls ??= true;
  }
  if (scheme !== "http" && scheme !== "ws" && scheme !== "https" && scheme !== "wss" && scheme !== "file") {
    throw new LibsqlError2(`The client supports only "libsql:", "wss:", "ws:", "https:", "http:" and "file:" URLs, got ${JSON.stringify(uri.scheme + ":")}. For more information, please read ${supportedUrlLink2}`, "URL_SCHEME_NOT_SUPPORTED");
  }
  if (intMode !== "number" && intMode !== "bigint" && intMode !== "string") {
    throw new TypeError(`Invalid value for intMode, expected "number", "bigint" or "string", got ${JSON.stringify(intMode)}`);
  }
  if (uri.fragment !== void 0) {
    throw new LibsqlError2(`URL fragments are not supported: ${JSON.stringify("#" + uri.fragment)}`, "URL_INVALID");
  }
  if (isInMemoryMode) {
    return {
      scheme: "file",
      tls: false,
      path,
      intMode,
      concurrency,
      syncUrl: config2.syncUrl,
      syncInterval: config2.syncInterval,
      fetch: config2.fetch,
      authToken: void 0,
      encryptionKey: void 0,
      authority: void 0
    };
  }
  return {
    scheme,
    tls,
    authority: uri.authority,
    path,
    authToken,
    intMode,
    concurrency,
    encryptionKey: config2.encryptionKey,
    syncUrl: config2.syncUrl,
    syncInterval: config2.syncInterval,
    fetch: config2.fetch
  };
}
__name(expandConfig2, "expandConfig2");
var inMemoryMode2;
var init_config2 = __esm({
  "../node_modules/@libsql/kysely-libsql/node_modules/@libsql/client/node_modules/@libsql/core/lib-esm/config.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_api2();
    init_uri2();
    init_util4();
    inMemoryMode2 = ":memory:";
    __name2(expandConfig2, "expandConfig");
  }
});
var Client2;
var init_client4 = __esm({
  "../node_modules/@libsql/kysely-libsql/node_modules/@libsql/client/node_modules/@libsql/hrana-client/lib-esm/client.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    Client2 = class {
      static {
        __name(this, "Client2");
      }
      static {
        __name2(this, "Client");
      }
      /** @private */
      constructor() {
        this.intMode = "number";
      }
      /** Representation of integers returned from the database. See {@link IntMode}.
       *
       * This value is inherited by {@link Stream} objects created with {@link openStream}, but you can
       * override the integer mode for every stream by setting {@link Stream.intMode} on the stream.
       */
      intMode;
    };
  }
});
var ClientError2;
var ProtoError2;
var ResponseError2;
var ClosedError2;
var WebSocketUnsupportedError2;
var WebSocketError2;
var HttpServerError2;
var ProtocolVersionError2;
var InternalError2;
var MisuseError2;
var init_errors2 = __esm({
  "../node_modules/@libsql/kysely-libsql/node_modules/@libsql/client/node_modules/@libsql/hrana-client/lib-esm/errors.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    ClientError2 = class extends Error {
      static {
        __name(this, "ClientError2");
      }
      static {
        __name2(this, "ClientError");
      }
      /** @private */
      constructor(message2) {
        super(message2);
        this.name = "ClientError";
      }
    };
    ProtoError2 = class extends ClientError2 {
      static {
        __name(this, "ProtoError2");
      }
      static {
        __name2(this, "ProtoError");
      }
      /** @private */
      constructor(message2) {
        super(message2);
        this.name = "ProtoError";
      }
    };
    ResponseError2 = class extends ClientError2 {
      static {
        __name(this, "ResponseError2");
      }
      static {
        __name2(this, "ResponseError");
      }
      code;
      /** @internal */
      proto;
      /** @private */
      constructor(message2, protoError) {
        super(message2);
        this.name = "ResponseError";
        this.code = protoError.code;
        this.proto = protoError;
        this.stack = void 0;
      }
    };
    ClosedError2 = class extends ClientError2 {
      static {
        __name(this, "ClosedError2");
      }
      static {
        __name2(this, "ClosedError");
      }
      /** @private */
      constructor(message2, cause) {
        if (cause !== void 0) {
          super(`${message2}: ${cause}`);
          this.cause = cause;
        } else {
          super(message2);
        }
        this.name = "ClosedError";
      }
    };
    WebSocketUnsupportedError2 = class extends ClientError2 {
      static {
        __name(this, "WebSocketUnsupportedError2");
      }
      static {
        __name2(this, "WebSocketUnsupportedError");
      }
      /** @private */
      constructor(message2) {
        super(message2);
        this.name = "WebSocketUnsupportedError";
      }
    };
    WebSocketError2 = class extends ClientError2 {
      static {
        __name(this, "WebSocketError2");
      }
      static {
        __name2(this, "WebSocketError");
      }
      /** @private */
      constructor(message2) {
        super(message2);
        this.name = "WebSocketError";
      }
    };
    HttpServerError2 = class extends ClientError2 {
      static {
        __name(this, "HttpServerError2");
      }
      static {
        __name2(this, "HttpServerError");
      }
      status;
      /** @private */
      constructor(message2, status) {
        super(message2);
        this.status = status;
        this.name = "HttpServerError";
      }
    };
    ProtocolVersionError2 = class extends ClientError2 {
      static {
        __name(this, "ProtocolVersionError2");
      }
      static {
        __name2(this, "ProtocolVersionError");
      }
      /** @private */
      constructor(message2) {
        super(message2);
        this.name = "ProtocolVersionError";
      }
    };
    InternalError2 = class extends ClientError2 {
      static {
        __name(this, "InternalError2");
      }
      static {
        __name2(this, "InternalError");
      }
      /** @private */
      constructor(message2) {
        super(message2);
        this.name = "InternalError";
      }
    };
    MisuseError2 = class extends ClientError2 {
      static {
        __name(this, "MisuseError2");
      }
      static {
        __name2(this, "MisuseError");
      }
      /** @private */
      constructor(message2) {
        super(message2);
        this.name = "MisuseError";
      }
    };
  }
});
function string2(value) {
  if (typeof value === "string") {
    return value;
  }
  throw typeError2(value, "string");
}
__name(string2, "string2");
function stringOpt2(value) {
  if (value === null || value === void 0) {
    return void 0;
  } else if (typeof value === "string") {
    return value;
  }
  throw typeError2(value, "string or null");
}
__name(stringOpt2, "stringOpt2");
function number2(value) {
  if (typeof value === "number") {
    return value;
  }
  throw typeError2(value, "number");
}
__name(number2, "number2");
function boolean2(value) {
  if (typeof value === "boolean") {
    return value;
  }
  throw typeError2(value, "boolean");
}
__name(boolean2, "boolean2");
function array2(value) {
  if (Array.isArray(value)) {
    return value;
  }
  throw typeError2(value, "array");
}
__name(array2, "array2");
function object2(value) {
  if (value !== null && typeof value === "object" && !Array.isArray(value)) {
    return value;
  }
  throw typeError2(value, "object");
}
__name(object2, "object2");
function arrayObjectsMap2(value, fun) {
  return array2(value).map((elemValue) => fun(object2(elemValue)));
}
__name(arrayObjectsMap2, "arrayObjectsMap2");
function typeError2(value, expected) {
  if (value === void 0) {
    return new ProtoError2(`Expected ${expected}, but the property was missing`);
  }
  let received = typeof value;
  if (value === null) {
    received = "null";
  } else if (Array.isArray(value)) {
    received = "array";
  }
  return new ProtoError2(`Expected ${expected}, received ${received}`);
}
__name(typeError2, "typeError2");
function readJsonObject2(value, fun) {
  return fun(object2(value));
}
__name(readJsonObject2, "readJsonObject2");
var init_decode3 = __esm({
  "../node_modules/@libsql/kysely-libsql/node_modules/@libsql/client/node_modules/@libsql/hrana-client/lib-esm/encoding/json/decode.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_errors2();
    __name2(string2, "string");
    __name2(stringOpt2, "stringOpt");
    __name2(number2, "number");
    __name2(boolean2, "boolean");
    __name2(array2, "array");
    __name2(object2, "object");
    __name2(arrayObjectsMap2, "arrayObjectsMap");
    __name2(typeError2, "typeError");
    __name2(readJsonObject2, "readJsonObject");
  }
});
function writeJsonObject2(value, fun) {
  const output = [];
  const writer = new ObjectWriter2(output);
  writer.begin();
  fun(writer, value);
  writer.end();
  return output.join("");
}
__name(writeJsonObject2, "writeJsonObject2");
var ObjectWriter2;
var init_encode3 = __esm({
  "../node_modules/@libsql/kysely-libsql/node_modules/@libsql/client/node_modules/@libsql/hrana-client/lib-esm/encoding/json/encode.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    ObjectWriter2 = class {
      static {
        __name(this, "ObjectWriter2");
      }
      static {
        __name2(this, "ObjectWriter");
      }
      #output;
      #isFirst;
      constructor(output) {
        this.#output = output;
        this.#isFirst = false;
      }
      begin() {
        this.#output.push("{");
        this.#isFirst = true;
      }
      end() {
        this.#output.push("}");
        this.#isFirst = false;
      }
      #key(name) {
        if (this.#isFirst) {
          this.#output.push('"');
          this.#isFirst = false;
        } else {
          this.#output.push(',"');
        }
        this.#output.push(name);
        this.#output.push('":');
      }
      string(name, value) {
        this.#key(name);
        this.#output.push(JSON.stringify(value));
      }
      stringRaw(name, value) {
        this.#key(name);
        this.#output.push('"');
        this.#output.push(value);
        this.#output.push('"');
      }
      number(name, value) {
        this.#key(name);
        this.#output.push("" + value);
      }
      boolean(name, value) {
        this.#key(name);
        this.#output.push(value ? "true" : "false");
      }
      object(name, value, valueFun) {
        this.#key(name);
        this.begin();
        valueFun(this, value);
        this.end();
      }
      arrayObjects(name, values, valueFun) {
        this.#key(name);
        this.#output.push("[");
        for (let i = 0; i < values.length; ++i) {
          if (i !== 0) {
            this.#output.push(",");
          }
          this.begin();
          valueFun(this, values[i]);
          this.end();
        }
        this.#output.push("]");
      }
    };
    __name2(writeJsonObject2, "writeJsonObject");
  }
});
var VARINT2;
var FIXED_642;
var LENGTH_DELIMITED2;
var FIXED_322;
var init_util5 = __esm({
  "../node_modules/@libsql/kysely-libsql/node_modules/@libsql/client/node_modules/@libsql/hrana-client/lib-esm/encoding/protobuf/util.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    VARINT2 = 0;
    FIXED_642 = 1;
    LENGTH_DELIMITED2 = 2;
    FIXED_322 = 5;
  }
});
function readProtobufMessage2(data, def) {
  const msgReader = new MessageReader2(data);
  const fieldReader = new FieldReader2(msgReader);
  let value = def.default();
  while (!msgReader.eof()) {
    const key = msgReader.varint();
    const tag2 = key >> 3;
    const wireType = key & 7;
    fieldReader.setup(wireType);
    const tagFun = def[tag2];
    if (tagFun !== void 0) {
      const returnedValue = tagFun(fieldReader, value);
      if (returnedValue !== void 0) {
        value = returnedValue;
      }
    }
    fieldReader.maybeSkip();
  }
  return value;
}
__name(readProtobufMessage2, "readProtobufMessage2");
var MessageReader2;
var FieldReader2;
var init_decode4 = __esm({
  "../node_modules/@libsql/kysely-libsql/node_modules/@libsql/client/node_modules/@libsql/hrana-client/lib-esm/encoding/protobuf/decode.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_errors2();
    init_util5();
    MessageReader2 = class {
      static {
        __name(this, "MessageReader2");
      }
      static {
        __name2(this, "MessageReader");
      }
      #array;
      #view;
      #pos;
      constructor(array3) {
        this.#array = array3;
        this.#view = new DataView(array3.buffer, array3.byteOffset, array3.byteLength);
        this.#pos = 0;
      }
      varint() {
        let value = 0;
        for (let shift = 0; ; shift += 7) {
          const byte = this.#array[this.#pos++];
          value |= (byte & 127) << shift;
          if (!(byte & 128)) {
            break;
          }
        }
        return value;
      }
      varintBig() {
        let value = 0n;
        for (let shift = 0n; ; shift += 7n) {
          const byte = this.#array[this.#pos++];
          value |= BigInt(byte & 127) << shift;
          if (!(byte & 128)) {
            break;
          }
        }
        return value;
      }
      bytes(length) {
        const array3 = new Uint8Array(this.#array.buffer, this.#array.byteOffset + this.#pos, length);
        this.#pos += length;
        return array3;
      }
      double() {
        const value = this.#view.getFloat64(this.#pos, true);
        this.#pos += 8;
        return value;
      }
      skipVarint() {
        for (; ; ) {
          const byte = this.#array[this.#pos++];
          if (!(byte & 128)) {
            break;
          }
        }
      }
      skip(count) {
        this.#pos += count;
      }
      eof() {
        return this.#pos >= this.#array.byteLength;
      }
    };
    FieldReader2 = class {
      static {
        __name(this, "FieldReader2");
      }
      static {
        __name2(this, "FieldReader");
      }
      #reader;
      #wireType;
      constructor(reader) {
        this.#reader = reader;
        this.#wireType = -1;
      }
      setup(wireType) {
        this.#wireType = wireType;
      }
      #expect(expectedWireType) {
        if (this.#wireType !== expectedWireType) {
          throw new ProtoError2(`Expected wire type ${expectedWireType}, got ${this.#wireType}`);
        }
        this.#wireType = -1;
      }
      bytes() {
        this.#expect(LENGTH_DELIMITED2);
        const length = this.#reader.varint();
        return this.#reader.bytes(length);
      }
      string() {
        return new TextDecoder().decode(this.bytes());
      }
      message(def) {
        return readProtobufMessage2(this.bytes(), def);
      }
      int32() {
        this.#expect(VARINT2);
        return this.#reader.varint();
      }
      uint32() {
        return this.int32();
      }
      bool() {
        return this.int32() !== 0;
      }
      uint64() {
        this.#expect(VARINT2);
        return this.#reader.varintBig();
      }
      sint64() {
        const value = this.uint64();
        return value >> 1n ^ -(value & 1n);
      }
      double() {
        this.#expect(FIXED_642);
        return this.#reader.double();
      }
      maybeSkip() {
        if (this.#wireType < 0) {
          return;
        } else if (this.#wireType === VARINT2) {
          this.#reader.skipVarint();
        } else if (this.#wireType === FIXED_642) {
          this.#reader.skip(8);
        } else if (this.#wireType === LENGTH_DELIMITED2) {
          const length = this.#reader.varint();
          this.#reader.skip(length);
        } else if (this.#wireType === FIXED_322) {
          this.#reader.skip(4);
        } else {
          throw new ProtoError2(`Unexpected wire type ${this.#wireType}`);
        }
        this.#wireType = -1;
      }
    };
    __name2(readProtobufMessage2, "readProtobufMessage");
  }
});
function writeProtobufMessage2(value, fun) {
  const w = new MessageWriter2();
  fun(w, value);
  return w.data();
}
__name(writeProtobufMessage2, "writeProtobufMessage2");
var MessageWriter2;
var init_encode4 = __esm({
  "../node_modules/@libsql/kysely-libsql/node_modules/@libsql/client/node_modules/@libsql/hrana-client/lib-esm/encoding/protobuf/encode.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_util5();
    MessageWriter2 = class _MessageWriter {
      static {
        __name(this, "_MessageWriter");
      }
      static {
        __name2(this, "MessageWriter");
      }
      #buf;
      #array;
      #view;
      #pos;
      constructor() {
        this.#buf = new ArrayBuffer(256);
        this.#array = new Uint8Array(this.#buf);
        this.#view = new DataView(this.#buf);
        this.#pos = 0;
      }
      #ensure(extra) {
        if (this.#pos + extra <= this.#buf.byteLength) {
          return;
        }
        let newCap = this.#buf.byteLength;
        while (newCap < this.#pos + extra) {
          newCap *= 2;
        }
        const newBuf = new ArrayBuffer(newCap);
        const newArray = new Uint8Array(newBuf);
        const newView = new DataView(newBuf);
        newArray.set(new Uint8Array(this.#buf, 0, this.#pos));
        this.#buf = newBuf;
        this.#array = newArray;
        this.#view = newView;
      }
      #varint(value) {
        this.#ensure(5);
        value = 0 | value;
        do {
          let byte = value & 127;
          value >>>= 7;
          byte |= value ? 128 : 0;
          this.#array[this.#pos++] = byte;
        } while (value);
      }
      #varintBig(value) {
        this.#ensure(10);
        value = value & 0xffffffffffffffffn;
        do {
          let byte = Number(value & 0x7fn);
          value >>= 7n;
          byte |= value ? 128 : 0;
          this.#array[this.#pos++] = byte;
        } while (value);
      }
      #tag(tag2, wireType) {
        this.#varint(tag2 << 3 | wireType);
      }
      bytes(tag2, value) {
        this.#tag(tag2, LENGTH_DELIMITED2);
        this.#varint(value.byteLength);
        this.#ensure(value.byteLength);
        this.#array.set(value, this.#pos);
        this.#pos += value.byteLength;
      }
      string(tag2, value) {
        this.bytes(tag2, new TextEncoder().encode(value));
      }
      message(tag2, value, fun) {
        const writer = new _MessageWriter();
        fun(writer, value);
        this.bytes(tag2, writer.data());
      }
      int32(tag2, value) {
        this.#tag(tag2, VARINT2);
        this.#varint(value);
      }
      uint32(tag2, value) {
        this.int32(tag2, value);
      }
      bool(tag2, value) {
        this.int32(tag2, value ? 1 : 0);
      }
      sint64(tag2, value) {
        this.#tag(tag2, VARINT2);
        this.#varintBig(value << 1n ^ value >> 63n);
      }
      double(tag2, value) {
        this.#tag(tag2, FIXED_642);
        this.#ensure(8);
        this.#view.setFloat64(this.#pos, value, true);
        this.#pos += 8;
      }
      data() {
        return new Uint8Array(this.#buf, 0, this.#pos);
      }
    };
    __name2(writeProtobufMessage2, "writeProtobufMessage");
  }
});
var init_encoding2 = __esm({
  "../node_modules/@libsql/kysely-libsql/node_modules/@libsql/client/node_modules/@libsql/hrana-client/lib-esm/encoding/index.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_decode3();
    init_encode3();
    init_decode4();
    init_encode4();
  }
});
var IdAlloc2;
var init_id_alloc2 = __esm({
  "../node_modules/@libsql/kysely-libsql/node_modules/@libsql/client/node_modules/@libsql/hrana-client/lib-esm/id_alloc.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_errors2();
    IdAlloc2 = class {
      static {
        __name(this, "IdAlloc2");
      }
      static {
        __name2(this, "IdAlloc");
      }
      // Set of all allocated ids
      #usedIds;
      // Set of all free ids lower than `#usedIds.size`
      #freeIds;
      constructor() {
        this.#usedIds = /* @__PURE__ */ new Set();
        this.#freeIds = /* @__PURE__ */ new Set();
      }
      // Returns an id that was free, and marks it as used.
      alloc() {
        for (const freeId2 of this.#freeIds) {
          this.#freeIds.delete(freeId2);
          this.#usedIds.add(freeId2);
          if (!this.#usedIds.has(this.#usedIds.size - 1)) {
            this.#freeIds.add(this.#usedIds.size - 1);
          }
          return freeId2;
        }
        const freeId = this.#usedIds.size;
        this.#usedIds.add(freeId);
        return freeId;
      }
      free(id) {
        if (!this.#usedIds.delete(id)) {
          throw new InternalError2("Freeing an id that is not allocated");
        }
        this.#freeIds.delete(this.#usedIds.size);
        if (id < this.#usedIds.size) {
          this.#freeIds.add(id);
        }
      }
    };
  }
});
function impossible2(value, message2) {
  throw new InternalError2(message2);
}
__name(impossible2, "impossible2");
var init_util6 = __esm({
  "../node_modules/@libsql/kysely-libsql/node_modules/@libsql/client/node_modules/@libsql/hrana-client/lib-esm/util.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_errors2();
    __name2(impossible2, "impossible");
  }
});
function valueToProto2(value) {
  if (value === null) {
    return null;
  } else if (typeof value === "string") {
    return value;
  } else if (typeof value === "number") {
    if (!Number.isFinite(value)) {
      throw new RangeError("Only finite numbers (not Infinity or NaN) can be passed as arguments");
    }
    return value;
  } else if (typeof value === "bigint") {
    if (value < minInteger2 || value > maxInteger2) {
      throw new RangeError("This bigint value is too large to be represented as a 64-bit integer and passed as argument");
    }
    return value;
  } else if (typeof value === "boolean") {
    return value ? 1n : 0n;
  } else if (value instanceof ArrayBuffer) {
    return new Uint8Array(value);
  } else if (value instanceof Uint8Array) {
    return value;
  } else if (value instanceof Date) {
    return +value.valueOf();
  } else if (typeof value === "object") {
    return "" + value.toString();
  } else {
    throw new TypeError("Unsupported type of value");
  }
}
__name(valueToProto2, "valueToProto2");
function valueFromProto2(value, intMode) {
  if (value === null) {
    return null;
  } else if (typeof value === "number") {
    return value;
  } else if (typeof value === "string") {
    return value;
  } else if (typeof value === "bigint") {
    if (intMode === "number") {
      const num = Number(value);
      if (!Number.isSafeInteger(num)) {
        throw new RangeError("Received integer which is too large to be safely represented as a JavaScript number");
      }
      return num;
    } else if (intMode === "bigint") {
      return value;
    } else if (intMode === "string") {
      return "" + value;
    } else {
      throw new MisuseError2("Invalid value for IntMode");
    }
  } else if (value instanceof Uint8Array) {
    return value.slice().buffer;
  } else if (value === void 0) {
    throw new ProtoError2("Received unrecognized type of Value");
  } else {
    throw impossible2(value, "Impossible type of Value");
  }
}
__name(valueFromProto2, "valueFromProto2");
var minInteger2;
var maxInteger2;
var init_value2 = __esm({
  "../node_modules/@libsql/kysely-libsql/node_modules/@libsql/client/node_modules/@libsql/hrana-client/lib-esm/value.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_errors2();
    init_util6();
    __name2(valueToProto2, "valueToProto");
    minInteger2 = -9223372036854775808n;
    maxInteger2 = 9223372036854775807n;
    __name2(valueFromProto2, "valueFromProto");
  }
});
function stmtResultFromProto2(result) {
  return {
    affectedRowCount: result.affectedRowCount,
    lastInsertRowid: result.lastInsertRowid,
    columnNames: result.cols.map((col) => col.name),
    columnDecltypes: result.cols.map((col) => col.decltype)
  };
}
__name(stmtResultFromProto2, "stmtResultFromProto2");
function rowsResultFromProto2(result, intMode) {
  const stmtResult = stmtResultFromProto2(result);
  const rows = result.rows.map((row) => rowFromProto2(stmtResult.columnNames, row, intMode));
  return { ...stmtResult, rows };
}
__name(rowsResultFromProto2, "rowsResultFromProto2");
function rowResultFromProto2(result, intMode) {
  const stmtResult = stmtResultFromProto2(result);
  let row;
  if (result.rows.length > 0) {
    row = rowFromProto2(stmtResult.columnNames, result.rows[0], intMode);
  }
  return { ...stmtResult, row };
}
__name(rowResultFromProto2, "rowResultFromProto2");
function valueResultFromProto2(result, intMode) {
  const stmtResult = stmtResultFromProto2(result);
  let value;
  if (result.rows.length > 0 && stmtResult.columnNames.length > 0) {
    value = valueFromProto2(result.rows[0][0], intMode);
  }
  return { ...stmtResult, value };
}
__name(valueResultFromProto2, "valueResultFromProto2");
function rowFromProto2(colNames, values, intMode) {
  const row = {};
  Object.defineProperty(row, "length", { value: values.length });
  for (let i = 0; i < values.length; ++i) {
    const value = valueFromProto2(values[i], intMode);
    Object.defineProperty(row, i, { value });
    const colName = colNames[i];
    if (colName !== void 0 && !Object.hasOwn(row, colName)) {
      Object.defineProperty(row, colName, { value, enumerable: true, configurable: true, writable: true });
    }
  }
  return row;
}
__name(rowFromProto2, "rowFromProto2");
function errorFromProto2(error2) {
  return new ResponseError2(error2.message, error2);
}
__name(errorFromProto2, "errorFromProto2");
var init_result2 = __esm({
  "../node_modules/@libsql/kysely-libsql/node_modules/@libsql/client/node_modules/@libsql/hrana-client/lib-esm/result.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_errors2();
    init_value2();
    __name2(stmtResultFromProto2, "stmtResultFromProto");
    __name2(rowsResultFromProto2, "rowsResultFromProto");
    __name2(rowResultFromProto2, "rowResultFromProto");
    __name2(valueResultFromProto2, "valueResultFromProto");
    __name2(rowFromProto2, "rowFromProto");
    __name2(errorFromProto2, "errorFromProto");
  }
});
function sqlToProto2(owner, sql2) {
  if (sql2 instanceof Sql2) {
    return { sqlId: sql2._getSqlId(owner) };
  } else {
    return { sql: "" + sql2 };
  }
}
__name(sqlToProto2, "sqlToProto2");
var Sql2;
var init_sql2 = __esm({
  "../node_modules/@libsql/kysely-libsql/node_modules/@libsql/client/node_modules/@libsql/hrana-client/lib-esm/sql.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_errors2();
    Sql2 = class {
      static {
        __name(this, "Sql2");
      }
      static {
        __name2(this, "Sql");
      }
      #owner;
      #sqlId;
      #closed;
      /** @private */
      constructor(owner, sqlId) {
        this.#owner = owner;
        this.#sqlId = sqlId;
        this.#closed = void 0;
      }
      /** @private */
      _getSqlId(owner) {
        if (this.#owner !== owner) {
          throw new MisuseError2("Attempted to use SQL text opened with other object");
        } else if (this.#closed !== void 0) {
          throw new ClosedError2("SQL text is closed", this.#closed);
        }
        return this.#sqlId;
      }
      /** Remove the SQL text from the server, releasing resouces. */
      close() {
        this._setClosed(new ClientError2("SQL text was manually closed"));
      }
      /** @private */
      _setClosed(error2) {
        if (this.#closed === void 0) {
          this.#closed = error2;
          this.#owner._closeSql(this.#sqlId);
        }
      }
      /** True if the SQL text is closed (removed from the server). */
      get closed() {
        return this.#closed !== void 0;
      }
    };
    __name2(sqlToProto2, "sqlToProto");
  }
});
var Queue2;
var init_queue2 = __esm({
  "../node_modules/@libsql/kysely-libsql/node_modules/@libsql/client/node_modules/@libsql/hrana-client/lib-esm/queue.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    Queue2 = class {
      static {
        __name(this, "Queue2");
      }
      static {
        __name2(this, "Queue");
      }
      #pushStack;
      #shiftStack;
      constructor() {
        this.#pushStack = [];
        this.#shiftStack = [];
      }
      get length() {
        return this.#pushStack.length + this.#shiftStack.length;
      }
      push(elem) {
        this.#pushStack.push(elem);
      }
      shift() {
        if (this.#shiftStack.length === 0 && this.#pushStack.length > 0) {
          this.#shiftStack = this.#pushStack.reverse();
          this.#pushStack = [];
        }
        return this.#shiftStack.pop();
      }
      first() {
        return this.#shiftStack.length !== 0 ? this.#shiftStack[this.#shiftStack.length - 1] : this.#pushStack[0];
      }
    };
  }
});
function stmtToProto2(sqlOwner, stmt, wantRows) {
  let inSql;
  let args = [];
  let namedArgs = [];
  if (stmt instanceof Stmt4) {
    inSql = stmt.sql;
    args = stmt._args;
    for (const [name, value] of stmt._namedArgs.entries()) {
      namedArgs.push({ name, value });
    }
  } else if (Array.isArray(stmt)) {
    inSql = stmt[0];
    if (Array.isArray(stmt[1])) {
      args = stmt[1].map((arg) => valueToProto2(arg));
    } else {
      namedArgs = Object.entries(stmt[1]).map(([name, value]) => {
        return { name, value: valueToProto2(value) };
      });
    }
  } else {
    inSql = stmt;
  }
  const { sql: sql2, sqlId } = sqlToProto2(sqlOwner, inSql);
  return { sql: sql2, sqlId, args, namedArgs, wantRows };
}
__name(stmtToProto2, "stmtToProto2");
var Stmt4;
var init_stmt2 = __esm({
  "../node_modules/@libsql/kysely-libsql/node_modules/@libsql/client/node_modules/@libsql/hrana-client/lib-esm/stmt.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_sql2();
    init_value2();
    Stmt4 = class {
      static {
        __name(this, "Stmt4");
      }
      static {
        __name2(this, "Stmt");
      }
      /** The SQL statement text. */
      sql;
      /** @private */
      _args;
      /** @private */
      _namedArgs;
      /** Initialize the statement with given SQL text. */
      constructor(sql2) {
        this.sql = sql2;
        this._args = [];
        this._namedArgs = /* @__PURE__ */ new Map();
      }
      /** Binds positional parameters from the given `values`. All previous positional bindings are cleared. */
      bindIndexes(values) {
        this._args.length = 0;
        for (const value of values) {
          this._args.push(valueToProto2(value));
        }
        return this;
      }
      /** Binds a parameter by a 1-based index. */
      bindIndex(index, value) {
        if (index !== (index | 0) || index <= 0) {
          throw new RangeError("Index of a positional argument must be positive integer");
        }
        while (this._args.length < index) {
          this._args.push(null);
        }
        this._args[index - 1] = valueToProto2(value);
        return this;
      }
      /** Binds a parameter by name. */
      bindName(name, value) {
        this._namedArgs.set(name, valueToProto2(value));
        return this;
      }
      /** Clears all bindings. */
      unbindAll() {
        this._args.length = 0;
        this._namedArgs.clear();
        return this;
      }
    };
    __name2(stmtToProto2, "stmtToProto");
  }
});
function executeRegular2(stream, steps, batch) {
  return stream._batch(batch).then((result) => {
    for (let step = 0; step < steps.length; ++step) {
      const stepResult = result.stepResults.get(step);
      const stepError = result.stepErrors.get(step);
      steps[step].callback(stepResult, stepError);
    }
  });
}
__name(executeRegular2, "executeRegular2");
async function executeCursor2(stream, steps, batch) {
  const cursor = await stream._openCursor(batch);
  try {
    let nextStep = 0;
    let beginEntry = void 0;
    let rows = [];
    for (; ; ) {
      const entry = await cursor.next();
      if (entry === void 0) {
        break;
      }
      if (entry.type === "step_begin") {
        if (entry.step < nextStep || entry.step >= steps.length) {
          throw new ProtoError2("Server produced StepBeginEntry for unexpected step");
        } else if (beginEntry !== void 0) {
          throw new ProtoError2("Server produced StepBeginEntry before terminating previous step");
        }
        for (let step = nextStep; step < entry.step; ++step) {
          steps[step].callback(void 0, void 0);
        }
        nextStep = entry.step + 1;
        beginEntry = entry;
        rows = [];
      } else if (entry.type === "step_end") {
        if (beginEntry === void 0) {
          throw new ProtoError2("Server produced StepEndEntry but no step is active");
        }
        const stmtResult = {
          cols: beginEntry.cols,
          rows,
          affectedRowCount: entry.affectedRowCount,
          lastInsertRowid: entry.lastInsertRowid
        };
        steps[beginEntry.step].callback(stmtResult, void 0);
        beginEntry = void 0;
        rows = [];
      } else if (entry.type === "step_error") {
        if (beginEntry === void 0) {
          if (entry.step >= steps.length) {
            throw new ProtoError2("Server produced StepErrorEntry for unexpected step");
          }
          for (let step = nextStep; step < entry.step; ++step) {
            steps[step].callback(void 0, void 0);
          }
        } else {
          if (entry.step !== beginEntry.step) {
            throw new ProtoError2("Server produced StepErrorEntry for unexpected step");
          }
          beginEntry = void 0;
          rows = [];
        }
        steps[entry.step].callback(void 0, entry.error);
        nextStep = entry.step + 1;
      } else if (entry.type === "row") {
        if (beginEntry === void 0) {
          throw new ProtoError2("Server produced RowEntry but no step is active");
        }
        rows.push(entry.row);
      } else if (entry.type === "error") {
        throw errorFromProto2(entry.error);
      } else if (entry.type === "none") {
        throw new ProtoError2("Server produced unrecognized CursorEntry");
      } else {
        throw impossible2(entry, "Impossible CursorEntry");
      }
    }
    if (beginEntry !== void 0) {
      throw new ProtoError2("Server closed Cursor before terminating active step");
    }
    for (let step = nextStep; step < steps.length; ++step) {
      steps[step].callback(void 0, void 0);
    }
  } finally {
    cursor.close();
  }
}
__name(executeCursor2, "executeCursor2");
function stepIndex2(step) {
  if (step._index === void 0) {
    throw new MisuseError2("Cannot add a condition referencing a step that has not been added to the batch");
  }
  return step._index;
}
__name(stepIndex2, "stepIndex2");
function checkCondBatch2(expectedBatch, cond) {
  if (cond._batch !== expectedBatch) {
    throw new MisuseError2("Cannot mix BatchCond objects for different Batch objects");
  }
}
__name(checkCondBatch2, "checkCondBatch2");
var Batch4;
var BatchStep4;
var BatchCond4;
var init_batch2 = __esm({
  "../node_modules/@libsql/kysely-libsql/node_modules/@libsql/client/node_modules/@libsql/hrana-client/lib-esm/batch.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_errors2();
    init_result2();
    init_stmt2();
    init_util6();
    Batch4 = class {
      static {
        __name(this, "Batch4");
      }
      static {
        __name2(this, "Batch");
      }
      /** @private */
      _stream;
      #useCursor;
      /** @private */
      _steps;
      #executed;
      /** @private */
      constructor(stream, useCursor) {
        this._stream = stream;
        this.#useCursor = useCursor;
        this._steps = [];
        this.#executed = false;
      }
      /** Return a builder for adding a step to the batch. */
      step() {
        return new BatchStep4(this);
      }
      /** Execute the batch. */
      execute() {
        if (this.#executed) {
          throw new MisuseError2("This batch has already been executed");
        }
        this.#executed = true;
        const batch = {
          steps: this._steps.map((step) => step.proto)
        };
        if (this.#useCursor) {
          return executeCursor2(this._stream, this._steps, batch);
        } else {
          return executeRegular2(this._stream, this._steps, batch);
        }
      }
    };
    __name2(executeRegular2, "executeRegular");
    __name2(executeCursor2, "executeCursor");
    BatchStep4 = class {
      static {
        __name(this, "BatchStep4");
      }
      static {
        __name2(this, "BatchStep");
      }
      /** @private */
      _batch;
      #conds;
      /** @private */
      _index;
      /** @private */
      constructor(batch) {
        this._batch = batch;
        this.#conds = [];
        this._index = void 0;
      }
      /** Add the condition that needs to be satisfied to execute the statement. If you use this method multiple
       * times, we join the conditions with a logical AND. */
      condition(cond) {
        this.#conds.push(cond._proto);
        return this;
      }
      /** Add a statement that returns rows. */
      query(stmt) {
        return this.#add(stmt, true, rowsResultFromProto2);
      }
      /** Add a statement that returns at most a single row. */
      queryRow(stmt) {
        return this.#add(stmt, true, rowResultFromProto2);
      }
      /** Add a statement that returns at most a single value. */
      queryValue(stmt) {
        return this.#add(stmt, true, valueResultFromProto2);
      }
      /** Add a statement without returning rows. */
      run(stmt) {
        return this.#add(stmt, false, stmtResultFromProto2);
      }
      #add(inStmt, wantRows, fromProto) {
        if (this._index !== void 0) {
          throw new MisuseError2("This BatchStep has already been added to the batch");
        }
        const stmt = stmtToProto2(this._batch._stream._sqlOwner(), inStmt, wantRows);
        let condition;
        if (this.#conds.length === 0) {
          condition = void 0;
        } else if (this.#conds.length === 1) {
          condition = this.#conds[0];
        } else {
          condition = { type: "and", conds: this.#conds.slice() };
        }
        const proto = { stmt, condition };
        return new Promise((outputCallback, errorCallback) => {
          const callback = /* @__PURE__ */ __name2((stepResult, stepError) => {
            if (stepResult !== void 0 && stepError !== void 0) {
              errorCallback(new ProtoError2("Server returned both result and error"));
            } else if (stepError !== void 0) {
              errorCallback(errorFromProto2(stepError));
            } else if (stepResult !== void 0) {
              outputCallback(fromProto(stepResult, this._batch._stream.intMode));
            } else {
              outputCallback(void 0);
            }
          }, "callback");
          this._index = this._batch._steps.length;
          this._batch._steps.push({ proto, callback });
        });
      }
    };
    BatchCond4 = class _BatchCond {
      static {
        __name(this, "_BatchCond");
      }
      static {
        __name2(this, "BatchCond");
      }
      /** @private */
      _batch;
      /** @private */
      _proto;
      /** @private */
      constructor(batch, proto) {
        this._batch = batch;
        this._proto = proto;
      }
      /** Create a condition that evaluates to true when the given step executes successfully.
       *
       * If the given step fails error or is skipped because its condition evaluated to false, this
       * condition evaluates to false.
       */
      static ok(step) {
        return new _BatchCond(step._batch, { type: "ok", step: stepIndex2(step) });
      }
      /** Create a condition that evaluates to true when the given step fails.
       *
       * If the given step succeeds or is skipped because its condition evaluated to false, this condition
       * evaluates to false.
       */
      static error(step) {
        return new _BatchCond(step._batch, { type: "error", step: stepIndex2(step) });
      }
      /** Create a condition that is a logical negation of another condition.
       */
      static not(cond) {
        return new _BatchCond(cond._batch, { type: "not", cond: cond._proto });
      }
      /** Create a condition that is a logical AND of other conditions.
       */
      static and(batch, conds) {
        for (const cond of conds) {
          checkCondBatch2(batch, cond);
        }
        return new _BatchCond(batch, { type: "and", conds: conds.map((e) => e._proto) });
      }
      /** Create a condition that is a logical OR of other conditions.
       */
      static or(batch, conds) {
        for (const cond of conds) {
          checkCondBatch2(batch, cond);
        }
        return new _BatchCond(batch, { type: "or", conds: conds.map((e) => e._proto) });
      }
      /** Create a condition that evaluates to true when the SQL connection is in autocommit mode (not inside an
       * explicit transaction). This requires protocol version 3 or higher.
       */
      static isAutocommit(batch) {
        batch._stream.client()._ensureVersion(3, "BatchCond.isAutocommit()");
        return new _BatchCond(batch, { type: "is_autocommit" });
      }
    };
    __name2(stepIndex2, "stepIndex");
    __name2(checkCondBatch2, "checkCondBatch");
  }
});
function describeResultFromProto2(result) {
  return {
    paramNames: result.params.map((p) => p.name),
    columns: result.cols,
    isExplain: result.isExplain,
    isReadonly: result.isReadonly
  };
}
__name(describeResultFromProto2, "describeResultFromProto2");
var init_describe2 = __esm({
  "../node_modules/@libsql/kysely-libsql/node_modules/@libsql/client/node_modules/@libsql/hrana-client/lib-esm/describe.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    __name2(describeResultFromProto2, "describeResultFromProto");
  }
});
var Stream2;
var init_stream4 = __esm({
  "../node_modules/@libsql/kysely-libsql/node_modules/@libsql/client/node_modules/@libsql/hrana-client/lib-esm/stream.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_batch2();
    init_describe2();
    init_result2();
    init_sql2();
    init_stmt2();
    Stream2 = class {
      static {
        __name(this, "Stream2");
      }
      static {
        __name2(this, "Stream");
      }
      /** @private */
      constructor(intMode) {
        this.intMode = intMode;
      }
      /** Execute a statement and return rows. */
      query(stmt) {
        return this.#execute(stmt, true, rowsResultFromProto2);
      }
      /** Execute a statement and return at most a single row. */
      queryRow(stmt) {
        return this.#execute(stmt, true, rowResultFromProto2);
      }
      /** Execute a statement and return at most a single value. */
      queryValue(stmt) {
        return this.#execute(stmt, true, valueResultFromProto2);
      }
      /** Execute a statement without returning rows. */
      run(stmt) {
        return this.#execute(stmt, false, stmtResultFromProto2);
      }
      #execute(inStmt, wantRows, fromProto) {
        const stmt = stmtToProto2(this._sqlOwner(), inStmt, wantRows);
        return this._execute(stmt).then((r) => fromProto(r, this.intMode));
      }
      /** Return a builder for creating and executing a batch.
       *
       * If `useCursor` is true, the batch will be executed using a Hrana cursor, which will stream results from
       * the server to the client, which consumes less memory on the server. This requires protocol version 3 or
       * higher.
       */
      batch(useCursor = false) {
        return new Batch4(this, useCursor);
      }
      /** Parse and analyze a statement. This requires protocol version 2 or higher. */
      describe(inSql) {
        const protoSql = sqlToProto2(this._sqlOwner(), inSql);
        return this._describe(protoSql).then(describeResultFromProto2);
      }
      /** Execute a sequence of statements separated by semicolons. This requires protocol version 2 or higher.
       * */
      sequence(inSql) {
        const protoSql = sqlToProto2(this._sqlOwner(), inSql);
        return this._sequence(protoSql);
      }
      /** Representation of integers returned from the database. See {@link IntMode}.
       *
       * This value affects the results of all operations on this stream.
       */
      intMode;
    };
  }
});
var Cursor2;
var init_cursor4 = __esm({
  "../node_modules/@libsql/kysely-libsql/node_modules/@libsql/client/node_modules/@libsql/hrana-client/lib-esm/cursor.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    Cursor2 = class {
      static {
        __name(this, "Cursor2");
      }
      static {
        __name2(this, "Cursor");
      }
    };
  }
});
var fetchChunkSize2;
var fetchQueueSize2;
var WsCursor2;
var init_cursor5 = __esm({
  "../node_modules/@libsql/kysely-libsql/node_modules/@libsql/client/node_modules/@libsql/hrana-client/lib-esm/ws/cursor.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_errors2();
    init_cursor4();
    init_queue2();
    fetchChunkSize2 = 1e3;
    fetchQueueSize2 = 10;
    WsCursor2 = class extends Cursor2 {
      static {
        __name(this, "WsCursor2");
      }
      static {
        __name2(this, "WsCursor");
      }
      #client;
      #stream;
      #cursorId;
      #entryQueue;
      #fetchQueue;
      #closed;
      #done;
      /** @private */
      constructor(client, stream, cursorId) {
        super();
        this.#client = client;
        this.#stream = stream;
        this.#cursorId = cursorId;
        this.#entryQueue = new Queue2();
        this.#fetchQueue = new Queue2();
        this.#closed = void 0;
        this.#done = false;
      }
      /** Fetch the next entry from the cursor. */
      async next() {
        for (; ; ) {
          if (this.#closed !== void 0) {
            throw new ClosedError2("Cursor is closed", this.#closed);
          }
          while (!this.#done && this.#fetchQueue.length < fetchQueueSize2) {
            this.#fetchQueue.push(this.#fetch());
          }
          const entry = this.#entryQueue.shift();
          if (this.#done || entry !== void 0) {
            return entry;
          }
          await this.#fetchQueue.shift().then((response) => {
            if (response === void 0) {
              return;
            }
            for (const entry2 of response.entries) {
              this.#entryQueue.push(entry2);
            }
            this.#done ||= response.done;
          });
        }
      }
      #fetch() {
        return this.#stream._sendCursorRequest(this, {
          type: "fetch_cursor",
          cursorId: this.#cursorId,
          maxCount: fetchChunkSize2
        }).then((resp) => resp, (error2) => {
          this._setClosed(error2);
          return void 0;
        });
      }
      /** @private */
      _setClosed(error2) {
        if (this.#closed !== void 0) {
          return;
        }
        this.#closed = error2;
        this.#stream._sendCursorRequest(this, {
          type: "close_cursor",
          cursorId: this.#cursorId
        }).catch(() => void 0);
        this.#stream._cursorClosed(this);
      }
      /** Close the cursor. */
      close() {
        this._setClosed(new ClientError2("Cursor was manually closed"));
      }
      /** True if the cursor is closed. */
      get closed() {
        return this.#closed !== void 0;
      }
    };
  }
});
var WsStream2;
var init_stream5 = __esm({
  "../node_modules/@libsql/kysely-libsql/node_modules/@libsql/client/node_modules/@libsql/hrana-client/lib-esm/ws/stream.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_errors2();
    init_queue2();
    init_stream4();
    init_cursor5();
    WsStream2 = class _WsStream extends Stream2 {
      static {
        __name(this, "_WsStream");
      }
      static {
        __name2(this, "WsStream");
      }
      #client;
      #streamId;
      #queue;
      #cursor;
      #closing;
      #closed;
      /** @private */
      static open(client) {
        const streamId = client._streamIdAlloc.alloc();
        const stream = new _WsStream(client, streamId);
        const responseCallback = /* @__PURE__ */ __name2(() => void 0, "responseCallback");
        const errorCallback = /* @__PURE__ */ __name2((e) => stream.#setClosed(e), "errorCallback");
        const request = { type: "open_stream", streamId };
        client._sendRequest(request, { responseCallback, errorCallback });
        return stream;
      }
      /** @private */
      constructor(client, streamId) {
        super(client.intMode);
        this.#client = client;
        this.#streamId = streamId;
        this.#queue = new Queue2();
        this.#cursor = void 0;
        this.#closing = false;
        this.#closed = void 0;
      }
      /** Get the {@link WsClient} object that this stream belongs to. */
      client() {
        return this.#client;
      }
      /** @private */
      _sqlOwner() {
        return this.#client;
      }
      /** @private */
      _execute(stmt) {
        return this.#sendStreamRequest({
          type: "execute",
          streamId: this.#streamId,
          stmt
        }).then((response) => {
          return response.result;
        });
      }
      /** @private */
      _batch(batch) {
        return this.#sendStreamRequest({
          type: "batch",
          streamId: this.#streamId,
          batch
        }).then((response) => {
          return response.result;
        });
      }
      /** @private */
      _describe(protoSql) {
        this.#client._ensureVersion(2, "describe()");
        return this.#sendStreamRequest({
          type: "describe",
          streamId: this.#streamId,
          sql: protoSql.sql,
          sqlId: protoSql.sqlId
        }).then((response) => {
          return response.result;
        });
      }
      /** @private */
      _sequence(protoSql) {
        this.#client._ensureVersion(2, "sequence()");
        return this.#sendStreamRequest({
          type: "sequence",
          streamId: this.#streamId,
          sql: protoSql.sql,
          sqlId: protoSql.sqlId
        }).then((_response) => {
          return void 0;
        });
      }
      /** Check whether the SQL connection underlying this stream is in autocommit state (i.e., outside of an
       * explicit transaction). This requires protocol version 3 or higher.
       */
      getAutocommit() {
        this.#client._ensureVersion(3, "getAutocommit()");
        return this.#sendStreamRequest({
          type: "get_autocommit",
          streamId: this.#streamId
        }).then((response) => {
          return response.isAutocommit;
        });
      }
      #sendStreamRequest(request) {
        return new Promise((responseCallback, errorCallback) => {
          this.#pushToQueue({ type: "request", request, responseCallback, errorCallback });
        });
      }
      /** @private */
      _openCursor(batch) {
        this.#client._ensureVersion(3, "cursor");
        return new Promise((cursorCallback, errorCallback) => {
          this.#pushToQueue({ type: "cursor", batch, cursorCallback, errorCallback });
        });
      }
      /** @private */
      _sendCursorRequest(cursor, request) {
        if (cursor !== this.#cursor) {
          throw new InternalError2("Cursor not associated with the stream attempted to execute a request");
        }
        return new Promise((responseCallback, errorCallback) => {
          if (this.#closed !== void 0) {
            errorCallback(new ClosedError2("Stream is closed", this.#closed));
          } else {
            this.#client._sendRequest(request, { responseCallback, errorCallback });
          }
        });
      }
      /** @private */
      _cursorClosed(cursor) {
        if (cursor !== this.#cursor) {
          throw new InternalError2("Cursor was closed, but it was not associated with the stream");
        }
        this.#cursor = void 0;
        this.#flushQueue();
      }
      #pushToQueue(entry) {
        if (this.#closed !== void 0) {
          entry.errorCallback(new ClosedError2("Stream is closed", this.#closed));
        } else if (this.#closing) {
          entry.errorCallback(new ClosedError2("Stream is closing", void 0));
        } else {
          this.#queue.push(entry);
          this.#flushQueue();
        }
      }
      #flushQueue() {
        for (; ; ) {
          const entry = this.#queue.first();
          if (entry === void 0 && this.#cursor === void 0 && this.#closing) {
            this.#setClosed(new ClientError2("Stream was gracefully closed"));
            break;
          } else if (entry?.type === "request" && this.#cursor === void 0) {
            const { request, responseCallback, errorCallback } = entry;
            this.#queue.shift();
            this.#client._sendRequest(request, { responseCallback, errorCallback });
          } else if (entry?.type === "cursor" && this.#cursor === void 0) {
            const { batch, cursorCallback } = entry;
            this.#queue.shift();
            const cursorId = this.#client._cursorIdAlloc.alloc();
            const cursor = new WsCursor2(this.#client, this, cursorId);
            const request = {
              type: "open_cursor",
              streamId: this.#streamId,
              cursorId,
              batch
            };
            const responseCallback = /* @__PURE__ */ __name2(() => void 0, "responseCallback");
            const errorCallback = /* @__PURE__ */ __name2((e) => cursor._setClosed(e), "errorCallback");
            this.#client._sendRequest(request, { responseCallback, errorCallback });
            this.#cursor = cursor;
            cursorCallback(cursor);
          } else {
            break;
          }
        }
      }
      #setClosed(error2) {
        if (this.#closed !== void 0) {
          return;
        }
        this.#closed = error2;
        if (this.#cursor !== void 0) {
          this.#cursor._setClosed(error2);
        }
        for (; ; ) {
          const entry = this.#queue.shift();
          if (entry !== void 0) {
            entry.errorCallback(error2);
          } else {
            break;
          }
        }
        const request = { type: "close_stream", streamId: this.#streamId };
        const responseCallback = /* @__PURE__ */ __name2(() => this.#client._streamIdAlloc.free(this.#streamId), "responseCallback");
        const errorCallback = /* @__PURE__ */ __name2(() => void 0, "errorCallback");
        this.#client._sendRequest(request, { responseCallback, errorCallback });
      }
      /** Immediately close the stream. */
      close() {
        this.#setClosed(new ClientError2("Stream was manually closed"));
      }
      /** Gracefully close the stream. */
      closeGracefully() {
        this.#closing = true;
        this.#flushQueue();
      }
      /** True if the stream is closed or closing. */
      get closed() {
        return this.#closed !== void 0 || this.#closing;
      }
    };
  }
});
function Stmt5(w, msg) {
  if (msg.sql !== void 0) {
    w.string("sql", msg.sql);
  }
  if (msg.sqlId !== void 0) {
    w.number("sql_id", msg.sqlId);
  }
  w.arrayObjects("args", msg.args, Value5);
  w.arrayObjects("named_args", msg.namedArgs, NamedArg3);
  w.boolean("want_rows", msg.wantRows);
}
__name(Stmt5, "Stmt5");
function NamedArg3(w, msg) {
  w.string("name", msg.name);
  w.object("value", msg.value, Value5);
}
__name(NamedArg3, "NamedArg3");
function Batch5(w, msg) {
  w.arrayObjects("steps", msg.steps, BatchStep5);
}
__name(Batch5, "Batch5");
function BatchStep5(w, msg) {
  if (msg.condition !== void 0) {
    w.object("condition", msg.condition, BatchCond5);
  }
  w.object("stmt", msg.stmt, Stmt5);
}
__name(BatchStep5, "BatchStep5");
function BatchCond5(w, msg) {
  w.stringRaw("type", msg.type);
  if (msg.type === "ok" || msg.type === "error") {
    w.number("step", msg.step);
  } else if (msg.type === "not") {
    w.object("cond", msg.cond, BatchCond5);
  } else if (msg.type === "and" || msg.type === "or") {
    w.arrayObjects("conds", msg.conds, BatchCond5);
  } else if (msg.type === "is_autocommit") {
  } else {
    throw impossible2(msg, "Impossible type of BatchCond");
  }
}
__name(BatchCond5, "BatchCond5");
function Value5(w, msg) {
  if (msg === null) {
    w.stringRaw("type", "null");
  } else if (typeof msg === "bigint") {
    w.stringRaw("type", "integer");
    w.stringRaw("value", "" + msg);
  } else if (typeof msg === "number") {
    w.stringRaw("type", "float");
    w.number("value", msg);
  } else if (typeof msg === "string") {
    w.stringRaw("type", "text");
    w.string("value", msg);
  } else if (msg instanceof Uint8Array) {
    w.stringRaw("type", "blob");
    w.stringRaw("base64", gBase64.fromUint8Array(msg));
  } else if (msg === void 0) {
  } else {
    throw impossible2(msg, "Impossible type of Value");
  }
}
__name(Value5, "Value5");
var init_json_encode4 = __esm({
  "../node_modules/@libsql/kysely-libsql/node_modules/@libsql/client/node_modules/@libsql/hrana-client/lib-esm/shared/json_encode.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_base64();
    init_util6();
    __name2(Stmt5, "Stmt");
    __name2(NamedArg3, "NamedArg");
    __name2(Batch5, "Batch");
    __name2(BatchStep5, "BatchStep");
    __name2(BatchCond5, "BatchCond");
    __name2(Value5, "Value");
  }
});
function ClientMsg3(w, msg) {
  w.stringRaw("type", msg.type);
  if (msg.type === "hello") {
    if (msg.jwt !== void 0) {
      w.string("jwt", msg.jwt);
    }
  } else if (msg.type === "request") {
    w.number("request_id", msg.requestId);
    w.object("request", msg.request, Request3);
  } else {
    throw impossible2(msg, "Impossible type of ClientMsg");
  }
}
__name(ClientMsg3, "ClientMsg3");
function Request3(w, msg) {
  w.stringRaw("type", msg.type);
  if (msg.type === "open_stream") {
    w.number("stream_id", msg.streamId);
  } else if (msg.type === "close_stream") {
    w.number("stream_id", msg.streamId);
  } else if (msg.type === "execute") {
    w.number("stream_id", msg.streamId);
    w.object("stmt", msg.stmt, Stmt5);
  } else if (msg.type === "batch") {
    w.number("stream_id", msg.streamId);
    w.object("batch", msg.batch, Batch5);
  } else if (msg.type === "open_cursor") {
    w.number("stream_id", msg.streamId);
    w.number("cursor_id", msg.cursorId);
    w.object("batch", msg.batch, Batch5);
  } else if (msg.type === "close_cursor") {
    w.number("cursor_id", msg.cursorId);
  } else if (msg.type === "fetch_cursor") {
    w.number("cursor_id", msg.cursorId);
    w.number("max_count", msg.maxCount);
  } else if (msg.type === "sequence") {
    w.number("stream_id", msg.streamId);
    if (msg.sql !== void 0) {
      w.string("sql", msg.sql);
    }
    if (msg.sqlId !== void 0) {
      w.number("sql_id", msg.sqlId);
    }
  } else if (msg.type === "describe") {
    w.number("stream_id", msg.streamId);
    if (msg.sql !== void 0) {
      w.string("sql", msg.sql);
    }
    if (msg.sqlId !== void 0) {
      w.number("sql_id", msg.sqlId);
    }
  } else if (msg.type === "store_sql") {
    w.number("sql_id", msg.sqlId);
    w.string("sql", msg.sql);
  } else if (msg.type === "close_sql") {
    w.number("sql_id", msg.sqlId);
  } else if (msg.type === "get_autocommit") {
    w.number("stream_id", msg.streamId);
  } else {
    throw impossible2(msg, "Impossible type of Request");
  }
}
__name(Request3, "Request3");
var init_json_encode5 = __esm({
  "../node_modules/@libsql/kysely-libsql/node_modules/@libsql/client/node_modules/@libsql/hrana-client/lib-esm/ws/json_encode.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_json_encode4();
    init_util6();
    __name2(ClientMsg3, "ClientMsg");
    __name2(Request3, "Request");
  }
});
function Stmt6(w, msg) {
  if (msg.sql !== void 0) {
    w.string(1, msg.sql);
  }
  if (msg.sqlId !== void 0) {
    w.int32(2, msg.sqlId);
  }
  for (const arg of msg.args) {
    w.message(3, arg, Value6);
  }
  for (const arg of msg.namedArgs) {
    w.message(4, arg, NamedArg4);
  }
  w.bool(5, msg.wantRows);
}
__name(Stmt6, "Stmt6");
function NamedArg4(w, msg) {
  w.string(1, msg.name);
  w.message(2, msg.value, Value6);
}
__name(NamedArg4, "NamedArg4");
function Batch6(w, msg) {
  for (const step of msg.steps) {
    w.message(1, step, BatchStep6);
  }
}
__name(Batch6, "Batch6");
function BatchStep6(w, msg) {
  if (msg.condition !== void 0) {
    w.message(1, msg.condition, BatchCond6);
  }
  w.message(2, msg.stmt, Stmt6);
}
__name(BatchStep6, "BatchStep6");
function BatchCond6(w, msg) {
  if (msg.type === "ok") {
    w.uint32(1, msg.step);
  } else if (msg.type === "error") {
    w.uint32(2, msg.step);
  } else if (msg.type === "not") {
    w.message(3, msg.cond, BatchCond6);
  } else if (msg.type === "and") {
    w.message(4, msg.conds, BatchCondList2);
  } else if (msg.type === "or") {
    w.message(5, msg.conds, BatchCondList2);
  } else if (msg.type === "is_autocommit") {
    w.message(6, void 0, Empty2);
  } else {
    throw impossible2(msg, "Impossible type of BatchCond");
  }
}
__name(BatchCond6, "BatchCond6");
function BatchCondList2(w, msg) {
  for (const cond of msg) {
    w.message(1, cond, BatchCond6);
  }
}
__name(BatchCondList2, "BatchCondList2");
function Value6(w, msg) {
  if (msg === null) {
    w.message(1, void 0, Empty2);
  } else if (typeof msg === "bigint") {
    w.sint64(2, msg);
  } else if (typeof msg === "number") {
    w.double(3, msg);
  } else if (typeof msg === "string") {
    w.string(4, msg);
  } else if (msg instanceof Uint8Array) {
    w.bytes(5, msg);
  } else if (msg === void 0) {
  } else {
    throw impossible2(msg, "Impossible type of Value");
  }
}
__name(Value6, "Value6");
function Empty2(_w, _msg) {
}
__name(Empty2, "Empty2");
var init_protobuf_encode4 = __esm({
  "../node_modules/@libsql/kysely-libsql/node_modules/@libsql/client/node_modules/@libsql/hrana-client/lib-esm/shared/protobuf_encode.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_util6();
    __name2(Stmt6, "Stmt");
    __name2(NamedArg4, "NamedArg");
    __name2(Batch6, "Batch");
    __name2(BatchStep6, "BatchStep");
    __name2(BatchCond6, "BatchCond");
    __name2(BatchCondList2, "BatchCondList");
    __name2(Value6, "Value");
    __name2(Empty2, "Empty");
  }
});
function ClientMsg4(w, msg) {
  if (msg.type === "hello") {
    w.message(1, msg, HelloMsg2);
  } else if (msg.type === "request") {
    w.message(2, msg, RequestMsg2);
  } else {
    throw impossible2(msg, "Impossible type of ClientMsg");
  }
}
__name(ClientMsg4, "ClientMsg4");
function HelloMsg2(w, msg) {
  if (msg.jwt !== void 0) {
    w.string(1, msg.jwt);
  }
}
__name(HelloMsg2, "HelloMsg2");
function RequestMsg2(w, msg) {
  w.int32(1, msg.requestId);
  const request = msg.request;
  if (request.type === "open_stream") {
    w.message(2, request, OpenStreamReq2);
  } else if (request.type === "close_stream") {
    w.message(3, request, CloseStreamReq3);
  } else if (request.type === "execute") {
    w.message(4, request, ExecuteReq2);
  } else if (request.type === "batch") {
    w.message(5, request, BatchReq2);
  } else if (request.type === "open_cursor") {
    w.message(6, request, OpenCursorReq2);
  } else if (request.type === "close_cursor") {
    w.message(7, request, CloseCursorReq2);
  } else if (request.type === "fetch_cursor") {
    w.message(8, request, FetchCursorReq2);
  } else if (request.type === "sequence") {
    w.message(9, request, SequenceReq2);
  } else if (request.type === "describe") {
    w.message(10, request, DescribeReq2);
  } else if (request.type === "store_sql") {
    w.message(11, request, StoreSqlReq2);
  } else if (request.type === "close_sql") {
    w.message(12, request, CloseSqlReq2);
  } else if (request.type === "get_autocommit") {
    w.message(13, request, GetAutocommitReq2);
  } else {
    throw impossible2(request, "Impossible type of Request");
  }
}
__name(RequestMsg2, "RequestMsg2");
function OpenStreamReq2(w, msg) {
  w.int32(1, msg.streamId);
}
__name(OpenStreamReq2, "OpenStreamReq2");
function CloseStreamReq3(w, msg) {
  w.int32(1, msg.streamId);
}
__name(CloseStreamReq3, "CloseStreamReq3");
function ExecuteReq2(w, msg) {
  w.int32(1, msg.streamId);
  w.message(2, msg.stmt, Stmt6);
}
__name(ExecuteReq2, "ExecuteReq2");
function BatchReq2(w, msg) {
  w.int32(1, msg.streamId);
  w.message(2, msg.batch, Batch6);
}
__name(BatchReq2, "BatchReq2");
function OpenCursorReq2(w, msg) {
  w.int32(1, msg.streamId);
  w.int32(2, msg.cursorId);
  w.message(3, msg.batch, Batch6);
}
__name(OpenCursorReq2, "OpenCursorReq2");
function CloseCursorReq2(w, msg) {
  w.int32(1, msg.cursorId);
}
__name(CloseCursorReq2, "CloseCursorReq2");
function FetchCursorReq2(w, msg) {
  w.int32(1, msg.cursorId);
  w.uint32(2, msg.maxCount);
}
__name(FetchCursorReq2, "FetchCursorReq2");
function SequenceReq2(w, msg) {
  w.int32(1, msg.streamId);
  if (msg.sql !== void 0) {
    w.string(2, msg.sql);
  }
  if (msg.sqlId !== void 0) {
    w.int32(3, msg.sqlId);
  }
}
__name(SequenceReq2, "SequenceReq2");
function DescribeReq2(w, msg) {
  w.int32(1, msg.streamId);
  if (msg.sql !== void 0) {
    w.string(2, msg.sql);
  }
  if (msg.sqlId !== void 0) {
    w.int32(3, msg.sqlId);
  }
}
__name(DescribeReq2, "DescribeReq2");
function StoreSqlReq2(w, msg) {
  w.int32(1, msg.sqlId);
  w.string(2, msg.sql);
}
__name(StoreSqlReq2, "StoreSqlReq2");
function CloseSqlReq2(w, msg) {
  w.int32(1, msg.sqlId);
}
__name(CloseSqlReq2, "CloseSqlReq2");
function GetAutocommitReq2(w, msg) {
  w.int32(1, msg.streamId);
}
__name(GetAutocommitReq2, "GetAutocommitReq2");
var init_protobuf_encode5 = __esm({
  "../node_modules/@libsql/kysely-libsql/node_modules/@libsql/client/node_modules/@libsql/hrana-client/lib-esm/ws/protobuf_encode.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_protobuf_encode4();
    init_util6();
    __name2(ClientMsg4, "ClientMsg");
    __name2(HelloMsg2, "HelloMsg");
    __name2(RequestMsg2, "RequestMsg");
    __name2(OpenStreamReq2, "OpenStreamReq");
    __name2(CloseStreamReq3, "CloseStreamReq");
    __name2(ExecuteReq2, "ExecuteReq");
    __name2(BatchReq2, "BatchReq");
    __name2(OpenCursorReq2, "OpenCursorReq");
    __name2(CloseCursorReq2, "CloseCursorReq");
    __name2(FetchCursorReq2, "FetchCursorReq");
    __name2(SequenceReq2, "SequenceReq");
    __name2(DescribeReq2, "DescribeReq");
    __name2(StoreSqlReq2, "StoreSqlReq");
    __name2(CloseSqlReq2, "CloseSqlReq");
    __name2(GetAutocommitReq2, "GetAutocommitReq");
  }
});
function Error4(obj) {
  const message2 = string2(obj["message"]);
  const code = stringOpt2(obj["code"]);
  return { message: message2, code };
}
__name(Error4, "Error4");
function StmtResult3(obj) {
  const cols = arrayObjectsMap2(obj["cols"], Col3);
  const rows = array2(obj["rows"]).map((rowObj) => arrayObjectsMap2(rowObj, Value7));
  const affectedRowCount = number2(obj["affected_row_count"]);
  const lastInsertRowidStr = stringOpt2(obj["last_insert_rowid"]);
  const lastInsertRowid = lastInsertRowidStr !== void 0 ? BigInt(lastInsertRowidStr) : void 0;
  return { cols, rows, affectedRowCount, lastInsertRowid };
}
__name(StmtResult3, "StmtResult3");
function Col3(obj) {
  const name = stringOpt2(obj["name"]);
  const decltype = stringOpt2(obj["decltype"]);
  return { name, decltype };
}
__name(Col3, "Col3");
function BatchResult3(obj) {
  const stepResults = /* @__PURE__ */ new Map();
  array2(obj["step_results"]).forEach((value, i) => {
    if (value !== null) {
      stepResults.set(i, StmtResult3(object2(value)));
    }
  });
  const stepErrors = /* @__PURE__ */ new Map();
  array2(obj["step_errors"]).forEach((value, i) => {
    if (value !== null) {
      stepErrors.set(i, Error4(object2(value)));
    }
  });
  return { stepResults, stepErrors };
}
__name(BatchResult3, "BatchResult3");
function CursorEntry3(obj) {
  const type = string2(obj["type"]);
  if (type === "step_begin") {
    const step = number2(obj["step"]);
    const cols = arrayObjectsMap2(obj["cols"], Col3);
    return { type: "step_begin", step, cols };
  } else if (type === "step_end") {
    const affectedRowCount = number2(obj["affected_row_count"]);
    const lastInsertRowidStr = stringOpt2(obj["last_insert_rowid"]);
    const lastInsertRowid = lastInsertRowidStr !== void 0 ? BigInt(lastInsertRowidStr) : void 0;
    return { type: "step_end", affectedRowCount, lastInsertRowid };
  } else if (type === "step_error") {
    const step = number2(obj["step"]);
    const error2 = Error4(object2(obj["error"]));
    return { type: "step_error", step, error: error2 };
  } else if (type === "row") {
    const row = arrayObjectsMap2(obj["row"], Value7);
    return { type: "row", row };
  } else if (type === "error") {
    const error2 = Error4(object2(obj["error"]));
    return { type: "error", error: error2 };
  } else {
    throw new ProtoError2("Unexpected type of CursorEntry");
  }
}
__name(CursorEntry3, "CursorEntry3");
function DescribeResult3(obj) {
  const params = arrayObjectsMap2(obj["params"], DescribeParam3);
  const cols = arrayObjectsMap2(obj["cols"], DescribeCol3);
  const isExplain = boolean2(obj["is_explain"]);
  const isReadonly = boolean2(obj["is_readonly"]);
  return { params, cols, isExplain, isReadonly };
}
__name(DescribeResult3, "DescribeResult3");
function DescribeParam3(obj) {
  const name = stringOpt2(obj["name"]);
  return { name };
}
__name(DescribeParam3, "DescribeParam3");
function DescribeCol3(obj) {
  const name = string2(obj["name"]);
  const decltype = stringOpt2(obj["decltype"]);
  return { name, decltype };
}
__name(DescribeCol3, "DescribeCol3");
function Value7(obj) {
  const type = string2(obj["type"]);
  if (type === "null") {
    return null;
  } else if (type === "integer") {
    const value = string2(obj["value"]);
    return BigInt(value);
  } else if (type === "float") {
    return number2(obj["value"]);
  } else if (type === "text") {
    return string2(obj["value"]);
  } else if (type === "blob") {
    return gBase64.toUint8Array(string2(obj["base64"]));
  } else {
    throw new ProtoError2("Unexpected type of Value");
  }
}
__name(Value7, "Value7");
var init_json_decode4 = __esm({
  "../node_modules/@libsql/kysely-libsql/node_modules/@libsql/client/node_modules/@libsql/hrana-client/lib-esm/shared/json_decode.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_base64();
    init_errors2();
    init_decode3();
    __name2(Error4, "Error");
    __name2(StmtResult3, "StmtResult");
    __name2(Col3, "Col");
    __name2(BatchResult3, "BatchResult");
    __name2(CursorEntry3, "CursorEntry");
    __name2(DescribeResult3, "DescribeResult");
    __name2(DescribeParam3, "DescribeParam");
    __name2(DescribeCol3, "DescribeCol");
    __name2(Value7, "Value");
  }
});
function ServerMsg3(obj) {
  const type = string2(obj["type"]);
  if (type === "hello_ok") {
    return { type: "hello_ok" };
  } else if (type === "hello_error") {
    const error2 = Error4(object2(obj["error"]));
    return { type: "hello_error", error: error2 };
  } else if (type === "response_ok") {
    const requestId = number2(obj["request_id"]);
    const response = Response3(object2(obj["response"]));
    return { type: "response_ok", requestId, response };
  } else if (type === "response_error") {
    const requestId = number2(obj["request_id"]);
    const error2 = Error4(object2(obj["error"]));
    return { type: "response_error", requestId, error: error2 };
  } else {
    throw new ProtoError2("Unexpected type of ServerMsg");
  }
}
__name(ServerMsg3, "ServerMsg3");
function Response3(obj) {
  const type = string2(obj["type"]);
  if (type === "open_stream") {
    return { type: "open_stream" };
  } else if (type === "close_stream") {
    return { type: "close_stream" };
  } else if (type === "execute") {
    const result = StmtResult3(object2(obj["result"]));
    return { type: "execute", result };
  } else if (type === "batch") {
    const result = BatchResult3(object2(obj["result"]));
    return { type: "batch", result };
  } else if (type === "open_cursor") {
    return { type: "open_cursor" };
  } else if (type === "close_cursor") {
    return { type: "close_cursor" };
  } else if (type === "fetch_cursor") {
    const entries = arrayObjectsMap2(obj["entries"], CursorEntry3);
    const done = boolean2(obj["done"]);
    return { type: "fetch_cursor", entries, done };
  } else if (type === "sequence") {
    return { type: "sequence" };
  } else if (type === "describe") {
    const result = DescribeResult3(object2(obj["result"]));
    return { type: "describe", result };
  } else if (type === "store_sql") {
    return { type: "store_sql" };
  } else if (type === "close_sql") {
    return { type: "close_sql" };
  } else if (type === "get_autocommit") {
    const isAutocommit = boolean2(obj["is_autocommit"]);
    return { type: "get_autocommit", isAutocommit };
  } else {
    throw new ProtoError2("Unexpected type of Response");
  }
}
__name(Response3, "Response3");
var init_json_decode5 = __esm({
  "../node_modules/@libsql/kysely-libsql/node_modules/@libsql/client/node_modules/@libsql/hrana-client/lib-esm/ws/json_decode.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_errors2();
    init_decode3();
    init_json_decode4();
    __name2(ServerMsg3, "ServerMsg");
    __name2(Response3, "Response");
  }
});
var Error5;
var StmtResult4;
var Col4;
var Row2;
var BatchResult4;
var BatchResultStepResult2;
var BatchResultStepError2;
var CursorEntry4;
var StepBeginEntry2;
var StepEndEntry2;
var StepErrorEntry2;
var DescribeResult4;
var DescribeParam4;
var DescribeCol4;
var Value8;
var init_protobuf_decode4 = __esm({
  "../node_modules/@libsql/kysely-libsql/node_modules/@libsql/client/node_modules/@libsql/hrana-client/lib-esm/shared/protobuf_decode.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    Error5 = {
      default() {
        return { message: "", code: void 0 };
      },
      1(r, msg) {
        msg.message = r.string();
      },
      2(r, msg) {
        msg.code = r.string();
      }
    };
    StmtResult4 = {
      default() {
        return {
          cols: [],
          rows: [],
          affectedRowCount: 0,
          lastInsertRowid: void 0
        };
      },
      1(r, msg) {
        msg.cols.push(r.message(Col4));
      },
      2(r, msg) {
        msg.rows.push(r.message(Row2));
      },
      3(r, msg) {
        msg.affectedRowCount = Number(r.uint64());
      },
      4(r, msg) {
        msg.lastInsertRowid = r.sint64();
      }
    };
    Col4 = {
      default() {
        return { name: void 0, decltype: void 0 };
      },
      1(r, msg) {
        msg.name = r.string();
      },
      2(r, msg) {
        msg.decltype = r.string();
      }
    };
    Row2 = {
      default() {
        return [];
      },
      1(r, msg) {
        msg.push(r.message(Value8));
      }
    };
    BatchResult4 = {
      default() {
        return { stepResults: /* @__PURE__ */ new Map(), stepErrors: /* @__PURE__ */ new Map() };
      },
      1(r, msg) {
        const [key, value] = r.message(BatchResultStepResult2);
        msg.stepResults.set(key, value);
      },
      2(r, msg) {
        const [key, value] = r.message(BatchResultStepError2);
        msg.stepErrors.set(key, value);
      }
    };
    BatchResultStepResult2 = {
      default() {
        return [0, StmtResult4.default()];
      },
      1(r, msg) {
        msg[0] = r.uint32();
      },
      2(r, msg) {
        msg[1] = r.message(StmtResult4);
      }
    };
    BatchResultStepError2 = {
      default() {
        return [0, Error5.default()];
      },
      1(r, msg) {
        msg[0] = r.uint32();
      },
      2(r, msg) {
        msg[1] = r.message(Error5);
      }
    };
    CursorEntry4 = {
      default() {
        return { type: "none" };
      },
      1(r) {
        return r.message(StepBeginEntry2);
      },
      2(r) {
        return r.message(StepEndEntry2);
      },
      3(r) {
        return r.message(StepErrorEntry2);
      },
      4(r) {
        return { type: "row", row: r.message(Row2) };
      },
      5(r) {
        return { type: "error", error: r.message(Error5) };
      }
    };
    StepBeginEntry2 = {
      default() {
        return { type: "step_begin", step: 0, cols: [] };
      },
      1(r, msg) {
        msg.step = r.uint32();
      },
      2(r, msg) {
        msg.cols.push(r.message(Col4));
      }
    };
    StepEndEntry2 = {
      default() {
        return {
          type: "step_end",
          affectedRowCount: 0,
          lastInsertRowid: void 0
        };
      },
      1(r, msg) {
        msg.affectedRowCount = r.uint32();
      },
      2(r, msg) {
        msg.lastInsertRowid = r.uint64();
      }
    };
    StepErrorEntry2 = {
      default() {
        return {
          type: "step_error",
          step: 0,
          error: Error5.default()
        };
      },
      1(r, msg) {
        msg.step = r.uint32();
      },
      2(r, msg) {
        msg.error = r.message(Error5);
      }
    };
    DescribeResult4 = {
      default() {
        return {
          params: [],
          cols: [],
          isExplain: false,
          isReadonly: false
        };
      },
      1(r, msg) {
        msg.params.push(r.message(DescribeParam4));
      },
      2(r, msg) {
        msg.cols.push(r.message(DescribeCol4));
      },
      3(r, msg) {
        msg.isExplain = r.bool();
      },
      4(r, msg) {
        msg.isReadonly = r.bool();
      }
    };
    DescribeParam4 = {
      default() {
        return { name: void 0 };
      },
      1(r, msg) {
        msg.name = r.string();
      }
    };
    DescribeCol4 = {
      default() {
        return { name: "", decltype: void 0 };
      },
      1(r, msg) {
        msg.name = r.string();
      },
      2(r, msg) {
        msg.decltype = r.string();
      }
    };
    Value8 = {
      default() {
        return void 0;
      },
      1(r) {
        return null;
      },
      2(r) {
        return r.sint64();
      },
      3(r) {
        return r.double();
      },
      4(r) {
        return r.string();
      },
      5(r) {
        return r.bytes();
      }
    };
  }
});
var ServerMsg4;
var HelloErrorMsg2;
var ResponseErrorMsg2;
var ResponseOkMsg2;
var ExecuteResp2;
var BatchResp2;
var FetchCursorResp2;
var DescribeResp2;
var GetAutocommitResp2;
var init_protobuf_decode5 = __esm({
  "../node_modules/@libsql/kysely-libsql/node_modules/@libsql/client/node_modules/@libsql/hrana-client/lib-esm/ws/protobuf_decode.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_protobuf_decode4();
    ServerMsg4 = {
      default() {
        return { type: "none" };
      },
      1(r) {
        return { type: "hello_ok" };
      },
      2(r) {
        return r.message(HelloErrorMsg2);
      },
      3(r) {
        return r.message(ResponseOkMsg2);
      },
      4(r) {
        return r.message(ResponseErrorMsg2);
      }
    };
    HelloErrorMsg2 = {
      default() {
        return { type: "hello_error", error: Error5.default() };
      },
      1(r, msg) {
        msg.error = r.message(Error5);
      }
    };
    ResponseErrorMsg2 = {
      default() {
        return { type: "response_error", requestId: 0, error: Error5.default() };
      },
      1(r, msg) {
        msg.requestId = r.int32();
      },
      2(r, msg) {
        msg.error = r.message(Error5);
      }
    };
    ResponseOkMsg2 = {
      default() {
        return {
          type: "response_ok",
          requestId: 0,
          response: { type: "none" }
        };
      },
      1(r, msg) {
        msg.requestId = r.int32();
      },
      2(r, msg) {
        msg.response = { type: "open_stream" };
      },
      3(r, msg) {
        msg.response = { type: "close_stream" };
      },
      4(r, msg) {
        msg.response = r.message(ExecuteResp2);
      },
      5(r, msg) {
        msg.response = r.message(BatchResp2);
      },
      6(r, msg) {
        msg.response = { type: "open_cursor" };
      },
      7(r, msg) {
        msg.response = { type: "close_cursor" };
      },
      8(r, msg) {
        msg.response = r.message(FetchCursorResp2);
      },
      9(r, msg) {
        msg.response = { type: "sequence" };
      },
      10(r, msg) {
        msg.response = r.message(DescribeResp2);
      },
      11(r, msg) {
        msg.response = { type: "store_sql" };
      },
      12(r, msg) {
        msg.response = { type: "close_sql" };
      },
      13(r, msg) {
        msg.response = r.message(GetAutocommitResp2);
      }
    };
    ExecuteResp2 = {
      default() {
        return { type: "execute", result: StmtResult4.default() };
      },
      1(r, msg) {
        msg.result = r.message(StmtResult4);
      }
    };
    BatchResp2 = {
      default() {
        return { type: "batch", result: BatchResult4.default() };
      },
      1(r, msg) {
        msg.result = r.message(BatchResult4);
      }
    };
    FetchCursorResp2 = {
      default() {
        return { type: "fetch_cursor", entries: [], done: false };
      },
      1(r, msg) {
        msg.entries.push(r.message(CursorEntry4));
      },
      2(r, msg) {
        msg.done = r.bool();
      }
    };
    DescribeResp2 = {
      default() {
        return { type: "describe", result: DescribeResult4.default() };
      },
      1(r, msg) {
        msg.result = r.message(DescribeResult4);
      }
    };
    GetAutocommitResp2 = {
      default() {
        return { type: "get_autocommit", isAutocommit: false };
      },
      1(r, msg) {
        msg.isAutocommit = r.bool();
      }
    };
  }
});
var subprotocolsV22;
var subprotocolsV32;
var WsClient3;
var init_client5 = __esm({
  "../node_modules/@libsql/kysely-libsql/node_modules/@libsql/client/node_modules/@libsql/hrana-client/lib-esm/ws/client.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_client4();
    init_encoding2();
    init_errors2();
    init_id_alloc2();
    init_result2();
    init_sql2();
    init_util6();
    init_stream5();
    init_json_encode5();
    init_protobuf_encode5();
    init_json_decode5();
    init_protobuf_decode5();
    subprotocolsV22 = /* @__PURE__ */ new Map([
      ["hrana2", { version: 2, encoding: "json" }],
      ["hrana1", { version: 1, encoding: "json" }]
    ]);
    subprotocolsV32 = /* @__PURE__ */ new Map([
      ["hrana3-protobuf", { version: 3, encoding: "protobuf" }],
      ["hrana3", { version: 3, encoding: "json" }],
      ["hrana2", { version: 2, encoding: "json" }],
      ["hrana1", { version: 1, encoding: "json" }]
    ]);
    WsClient3 = class extends Client2 {
      static {
        __name(this, "WsClient3");
      }
      static {
        __name2(this, "WsClient");
      }
      #socket;
      // List of callbacks that we queue until the socket transitions from the CONNECTING to the OPEN state.
      #openCallbacks;
      // Have we already transitioned from CONNECTING to OPEN and fired the callbacks in #openCallbacks?
      #opened;
      // Stores the error that caused us to close the client (and the socket). If we are not closed, this is
      // `undefined`.
      #closed;
      // Have we received a response to our "hello" from the server?
      #recvdHello;
      // Subprotocol negotiated with the server. It is only available after the socket transitions to the OPEN
      // state.
      #subprotocol;
      // Has the `getVersion()` function been called? This is only used to validate that the API is used
      // correctly.
      #getVersionCalled;
      // A map from request id to the responses that we expect to receive from the server.
      #responseMap;
      // An allocator of request ids.
      #requestIdAlloc;
      // An allocator of stream ids.
      /** @private */
      _streamIdAlloc;
      // An allocator of cursor ids.
      /** @private */
      _cursorIdAlloc;
      // An allocator of SQL text ids.
      #sqlIdAlloc;
      /** @private */
      constructor(socket, jwt) {
        super();
        this.#socket = socket;
        this.#openCallbacks = [];
        this.#opened = false;
        this.#closed = void 0;
        this.#recvdHello = false;
        this.#subprotocol = void 0;
        this.#getVersionCalled = false;
        this.#responseMap = /* @__PURE__ */ new Map();
        this.#requestIdAlloc = new IdAlloc2();
        this._streamIdAlloc = new IdAlloc2();
        this._cursorIdAlloc = new IdAlloc2();
        this.#sqlIdAlloc = new IdAlloc2();
        this.#socket.binaryType = "arraybuffer";
        this.#socket.addEventListener("open", () => this.#onSocketOpen());
        this.#socket.addEventListener("close", (event) => this.#onSocketClose(event));
        this.#socket.addEventListener("error", (event) => this.#onSocketError(event));
        this.#socket.addEventListener("message", (event) => this.#onSocketMessage(event));
        this.#send({ type: "hello", jwt });
      }
      // Send (or enqueue to send) a message to the server.
      #send(msg) {
        if (this.#closed !== void 0) {
          throw new InternalError2("Trying to send a message on a closed client");
        }
        if (this.#opened) {
          this.#sendToSocket(msg);
        } else {
          const openCallback = /* @__PURE__ */ __name2(() => this.#sendToSocket(msg), "openCallback");
          const errorCallback = /* @__PURE__ */ __name2(() => void 0, "errorCallback");
          this.#openCallbacks.push({ openCallback, errorCallback });
        }
      }
      // The socket transitioned from CONNECTING to OPEN
      #onSocketOpen() {
        const protocol = this.#socket.protocol;
        if (protocol === void 0) {
          this.#setClosed(new ClientError2("The `WebSocket.protocol` property is undefined. This most likely means that the WebSocket implementation provided by the environment is broken. If you are using Miniflare 2, please update to Miniflare 3, which fixes this problem."));
          return;
        } else if (protocol === "") {
          this.#subprotocol = { version: 1, encoding: "json" };
        } else {
          this.#subprotocol = subprotocolsV32.get(protocol);
          if (this.#subprotocol === void 0) {
            this.#setClosed(new ProtoError2(`Unrecognized WebSocket subprotocol: ${JSON.stringify(protocol)}`));
            return;
          }
        }
        for (const callbacks of this.#openCallbacks) {
          callbacks.openCallback();
        }
        this.#openCallbacks.length = 0;
        this.#opened = true;
      }
      #sendToSocket(msg) {
        const encoding = this.#subprotocol.encoding;
        if (encoding === "json") {
          const jsonMsg = writeJsonObject2(msg, ClientMsg3);
          this.#socket.send(jsonMsg);
        } else if (encoding === "protobuf") {
          const protobufMsg = writeProtobufMessage2(msg, ClientMsg4);
          this.#socket.send(protobufMsg);
        } else {
          throw impossible2(encoding, "Impossible encoding");
        }
      }
      /** Get the protocol version negotiated with the server, possibly waiting until the socket is open. */
      getVersion() {
        return new Promise((versionCallback, errorCallback) => {
          this.#getVersionCalled = true;
          if (this.#closed !== void 0) {
            errorCallback(this.#closed);
          } else if (!this.#opened) {
            const openCallback = /* @__PURE__ */ __name2(() => versionCallback(this.#subprotocol.version), "openCallback");
            this.#openCallbacks.push({ openCallback, errorCallback });
          } else {
            versionCallback(this.#subprotocol.version);
          }
        });
      }
      // Make sure that the negotiated version is at least `minVersion`.
      /** @private */
      _ensureVersion(minVersion, feature) {
        if (this.#subprotocol === void 0 || !this.#getVersionCalled) {
          throw new ProtocolVersionError2(`${feature} is supported only on protocol version ${minVersion} and higher, but the version supported by the WebSocket server is not yet known. Use Client.getVersion() to wait until the version is available.`);
        } else if (this.#subprotocol.version < minVersion) {
          throw new ProtocolVersionError2(`${feature} is supported on protocol version ${minVersion} and higher, but the WebSocket server only supports version ${this.#subprotocol.version}`);
        }
      }
      // Send a request to the server and invoke a callback when we get the response.
      /** @private */
      _sendRequest(request, callbacks) {
        if (this.#closed !== void 0) {
          callbacks.errorCallback(new ClosedError2("Client is closed", this.#closed));
          return;
        }
        const requestId = this.#requestIdAlloc.alloc();
        this.#responseMap.set(requestId, { ...callbacks, type: request.type });
        this.#send({ type: "request", requestId, request });
      }
      // The socket encountered an error.
      #onSocketError(event) {
        const eventMessage = event.message;
        const message2 = eventMessage ?? "WebSocket was closed due to an error";
        this.#setClosed(new WebSocketError2(message2));
      }
      // The socket was closed.
      #onSocketClose(event) {
        let message2 = `WebSocket was closed with code ${event.code}`;
        if (event.reason) {
          message2 += `: ${event.reason}`;
        }
        this.#setClosed(new WebSocketError2(message2));
      }
      // Close the client with the given error.
      #setClosed(error2) {
        if (this.#closed !== void 0) {
          return;
        }
        this.#closed = error2;
        for (const callbacks of this.#openCallbacks) {
          callbacks.errorCallback(error2);
        }
        this.#openCallbacks.length = 0;
        for (const [requestId, responseState] of this.#responseMap.entries()) {
          responseState.errorCallback(error2);
          this.#requestIdAlloc.free(requestId);
        }
        this.#responseMap.clear();
        this.#socket.close();
      }
      // We received a message from the socket.
      #onSocketMessage(event) {
        if (this.#closed !== void 0) {
          return;
        }
        try {
          let msg;
          const encoding = this.#subprotocol.encoding;
          if (encoding === "json") {
            if (typeof event.data !== "string") {
              this.#socket.close(3003, "Only text messages are accepted with JSON encoding");
              this.#setClosed(new ProtoError2("Received non-text message from server with JSON encoding"));
              return;
            }
            msg = readJsonObject2(JSON.parse(event.data), ServerMsg3);
          } else if (encoding === "protobuf") {
            if (!(event.data instanceof ArrayBuffer)) {
              this.#socket.close(3003, "Only binary messages are accepted with Protobuf encoding");
              this.#setClosed(new ProtoError2("Received non-binary message from server with Protobuf encoding"));
              return;
            }
            msg = readProtobufMessage2(new Uint8Array(event.data), ServerMsg4);
          } else {
            throw impossible2(encoding, "Impossible encoding");
          }
          this.#handleMsg(msg);
        } catch (e) {
          this.#socket.close(3007, "Could not handle message");
          this.#setClosed(e);
        }
      }
      // Handle a message from the server.
      #handleMsg(msg) {
        if (msg.type === "none") {
          throw new ProtoError2("Received an unrecognized ServerMsg");
        } else if (msg.type === "hello_ok" || msg.type === "hello_error") {
          if (this.#recvdHello) {
            throw new ProtoError2("Received a duplicated hello response");
          }
          this.#recvdHello = true;
          if (msg.type === "hello_error") {
            throw errorFromProto2(msg.error);
          }
          return;
        } else if (!this.#recvdHello) {
          throw new ProtoError2("Received a non-hello message before a hello response");
        }
        if (msg.type === "response_ok") {
          const requestId = msg.requestId;
          const responseState = this.#responseMap.get(requestId);
          this.#responseMap.delete(requestId);
          if (responseState === void 0) {
            throw new ProtoError2("Received unexpected OK response");
          }
          this.#requestIdAlloc.free(requestId);
          try {
            if (responseState.type !== msg.response.type) {
              console.dir({ responseState, msg });
              throw new ProtoError2("Received unexpected type of response");
            }
            responseState.responseCallback(msg.response);
          } catch (e) {
            responseState.errorCallback(e);
            throw e;
          }
        } else if (msg.type === "response_error") {
          const requestId = msg.requestId;
          const responseState = this.#responseMap.get(requestId);
          this.#responseMap.delete(requestId);
          if (responseState === void 0) {
            throw new ProtoError2("Received unexpected error response");
          }
          this.#requestIdAlloc.free(requestId);
          responseState.errorCallback(errorFromProto2(msg.error));
        } else {
          throw impossible2(msg, "Impossible ServerMsg type");
        }
      }
      /** Open a {@link WsStream}, a stream for executing SQL statements. */
      openStream() {
        return WsStream2.open(this);
      }
      /** Cache a SQL text on the server. This requires protocol version 2 or higher. */
      storeSql(sql2) {
        this._ensureVersion(2, "storeSql()");
        const sqlId = this.#sqlIdAlloc.alloc();
        const sqlObj = new Sql2(this, sqlId);
        const responseCallback = /* @__PURE__ */ __name2(() => void 0, "responseCallback");
        const errorCallback = /* @__PURE__ */ __name2((e) => sqlObj._setClosed(e), "errorCallback");
        const request = { type: "store_sql", sqlId, sql: sql2 };
        this._sendRequest(request, { responseCallback, errorCallback });
        return sqlObj;
      }
      /** @private */
      _closeSql(sqlId) {
        if (this.#closed !== void 0) {
          return;
        }
        const responseCallback = /* @__PURE__ */ __name2(() => this.#sqlIdAlloc.free(sqlId), "responseCallback");
        const errorCallback = /* @__PURE__ */ __name2((e) => this.#setClosed(e), "errorCallback");
        const request = { type: "close_sql", sqlId };
        this._sendRequest(request, { responseCallback, errorCallback });
      }
      /** Close the client and the WebSocket. */
      close() {
        this.#setClosed(new ClientError2("Client was manually closed"));
      }
      /** True if the client is closed. */
      get closed() {
        return this.#closed !== void 0;
      }
    };
  }
});
var _fetch2;
var _Request2;
var _Headers2;
var init_web4 = __esm({
  "../node_modules/@libsql/kysely-libsql/node_modules/@libsql/client/node_modules/@libsql/hrana-client/node_modules/@libsql/isomorphic-fetch/web.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    _fetch2 = fetch;
    _Request2 = Request;
    _Headers2 = Headers;
  }
});
var _queueMicrotask2;
var init_queue_microtask2 = __esm({
  "../node_modules/@libsql/kysely-libsql/node_modules/@libsql/client/node_modules/@libsql/hrana-client/lib-esm/queue_microtask.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    if (typeof queueMicrotask !== "undefined") {
      _queueMicrotask2 = queueMicrotask;
    } else {
      const resolved = Promise.resolve();
      _queueMicrotask2 = /* @__PURE__ */ __name2((callback) => {
        resolved.then(callback);
      }, "_queueMicrotask");
    }
  }
});
var ByteQueue2;
var init_byte_queue2 = __esm({
  "../node_modules/@libsql/kysely-libsql/node_modules/@libsql/client/node_modules/@libsql/hrana-client/lib-esm/byte_queue.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    ByteQueue2 = class {
      static {
        __name(this, "ByteQueue2");
      }
      static {
        __name2(this, "ByteQueue");
      }
      #array;
      #shiftPos;
      #pushPos;
      constructor(initialCap) {
        this.#array = new Uint8Array(new ArrayBuffer(initialCap));
        this.#shiftPos = 0;
        this.#pushPos = 0;
      }
      get length() {
        return this.#pushPos - this.#shiftPos;
      }
      data() {
        return this.#array.slice(this.#shiftPos, this.#pushPos);
      }
      push(chunk) {
        this.#ensurePush(chunk.byteLength);
        this.#array.set(chunk, this.#pushPos);
        this.#pushPos += chunk.byteLength;
      }
      #ensurePush(pushLength) {
        if (this.#pushPos + pushLength <= this.#array.byteLength) {
          return;
        }
        const filledLength = this.#pushPos - this.#shiftPos;
        if (filledLength + pushLength <= this.#array.byteLength && 2 * this.#pushPos >= this.#array.byteLength) {
          this.#array.copyWithin(0, this.#shiftPos, this.#pushPos);
        } else {
          let newCap = this.#array.byteLength;
          do {
            newCap *= 2;
          } while (filledLength + pushLength > newCap);
          const newArray = new Uint8Array(new ArrayBuffer(newCap));
          newArray.set(this.#array.slice(this.#shiftPos, this.#pushPos), 0);
          this.#array = newArray;
        }
        this.#pushPos = filledLength;
        this.#shiftPos = 0;
      }
      shift(length) {
        this.#shiftPos += length;
      }
    };
  }
});
function PipelineRespBody3(obj) {
  const baton = stringOpt2(obj["baton"]);
  const baseUrl = stringOpt2(obj["base_url"]);
  const results = arrayObjectsMap2(obj["results"], StreamResult3);
  return { baton, baseUrl, results };
}
__name(PipelineRespBody3, "PipelineRespBody3");
function StreamResult3(obj) {
  const type = string2(obj["type"]);
  if (type === "ok") {
    const response = StreamResponse3(object2(obj["response"]));
    return { type: "ok", response };
  } else if (type === "error") {
    const error2 = Error4(object2(obj["error"]));
    return { type: "error", error: error2 };
  } else {
    throw new ProtoError2("Unexpected type of StreamResult");
  }
}
__name(StreamResult3, "StreamResult3");
function StreamResponse3(obj) {
  const type = string2(obj["type"]);
  if (type === "close") {
    return { type: "close" };
  } else if (type === "execute") {
    const result = StmtResult3(object2(obj["result"]));
    return { type: "execute", result };
  } else if (type === "batch") {
    const result = BatchResult3(object2(obj["result"]));
    return { type: "batch", result };
  } else if (type === "sequence") {
    return { type: "sequence" };
  } else if (type === "describe") {
    const result = DescribeResult3(object2(obj["result"]));
    return { type: "describe", result };
  } else if (type === "store_sql") {
    return { type: "store_sql" };
  } else if (type === "close_sql") {
    return { type: "close_sql" };
  } else if (type === "get_autocommit") {
    const isAutocommit = boolean2(obj["is_autocommit"]);
    return { type: "get_autocommit", isAutocommit };
  } else {
    throw new ProtoError2("Unexpected type of StreamResponse");
  }
}
__name(StreamResponse3, "StreamResponse3");
function CursorRespBody3(obj) {
  const baton = stringOpt2(obj["baton"]);
  const baseUrl = stringOpt2(obj["base_url"]);
  return { baton, baseUrl };
}
__name(CursorRespBody3, "CursorRespBody3");
var init_json_decode6 = __esm({
  "../node_modules/@libsql/kysely-libsql/node_modules/@libsql/client/node_modules/@libsql/hrana-client/lib-esm/http/json_decode.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_errors2();
    init_decode3();
    init_json_decode4();
    __name2(PipelineRespBody3, "PipelineRespBody");
    __name2(StreamResult3, "StreamResult");
    __name2(StreamResponse3, "StreamResponse");
    __name2(CursorRespBody3, "CursorRespBody");
  }
});
var PipelineRespBody4;
var StreamResult4;
var StreamResponse4;
var ExecuteStreamResp2;
var BatchStreamResp2;
var DescribeStreamResp2;
var GetAutocommitStreamResp2;
var CursorRespBody4;
var init_protobuf_decode6 = __esm({
  "../node_modules/@libsql/kysely-libsql/node_modules/@libsql/client/node_modules/@libsql/hrana-client/lib-esm/http/protobuf_decode.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_protobuf_decode4();
    PipelineRespBody4 = {
      default() {
        return { baton: void 0, baseUrl: void 0, results: [] };
      },
      1(r, msg) {
        msg.baton = r.string();
      },
      2(r, msg) {
        msg.baseUrl = r.string();
      },
      3(r, msg) {
        msg.results.push(r.message(StreamResult4));
      }
    };
    StreamResult4 = {
      default() {
        return { type: "none" };
      },
      1(r) {
        return { type: "ok", response: r.message(StreamResponse4) };
      },
      2(r) {
        return { type: "error", error: r.message(Error5) };
      }
    };
    StreamResponse4 = {
      default() {
        return { type: "none" };
      },
      1(r) {
        return { type: "close" };
      },
      2(r) {
        return r.message(ExecuteStreamResp2);
      },
      3(r) {
        return r.message(BatchStreamResp2);
      },
      4(r) {
        return { type: "sequence" };
      },
      5(r) {
        return r.message(DescribeStreamResp2);
      },
      6(r) {
        return { type: "store_sql" };
      },
      7(r) {
        return { type: "close_sql" };
      },
      8(r) {
        return r.message(GetAutocommitStreamResp2);
      }
    };
    ExecuteStreamResp2 = {
      default() {
        return { type: "execute", result: StmtResult4.default() };
      },
      1(r, msg) {
        msg.result = r.message(StmtResult4);
      }
    };
    BatchStreamResp2 = {
      default() {
        return { type: "batch", result: BatchResult4.default() };
      },
      1(r, msg) {
        msg.result = r.message(BatchResult4);
      }
    };
    DescribeStreamResp2 = {
      default() {
        return { type: "describe", result: DescribeResult4.default() };
      },
      1(r, msg) {
        msg.result = r.message(DescribeResult4);
      }
    };
    GetAutocommitStreamResp2 = {
      default() {
        return { type: "get_autocommit", isAutocommit: false };
      },
      1(r, msg) {
        msg.isAutocommit = r.bool();
      }
    };
    CursorRespBody4 = {
      default() {
        return { baton: void 0, baseUrl: void 0 };
      },
      1(r, msg) {
        msg.baton = r.string();
      },
      2(r, msg) {
        msg.baseUrl = r.string();
      }
    };
  }
});
var HttpCursor2;
var init_cursor6 = __esm({
  "../node_modules/@libsql/kysely-libsql/node_modules/@libsql/client/node_modules/@libsql/hrana-client/lib-esm/http/cursor.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_byte_queue2();
    init_cursor4();
    init_decode3();
    init_decode4();
    init_errors2();
    init_util6();
    init_json_decode6();
    init_protobuf_decode6();
    init_json_decode4();
    init_protobuf_decode4();
    HttpCursor2 = class extends Cursor2 {
      static {
        __name(this, "HttpCursor2");
      }
      static {
        __name2(this, "HttpCursor");
      }
      #stream;
      #encoding;
      #reader;
      #queue;
      #closed;
      #done;
      /** @private */
      constructor(stream, encoding) {
        super();
        this.#stream = stream;
        this.#encoding = encoding;
        this.#reader = void 0;
        this.#queue = new ByteQueue2(16 * 1024);
        this.#closed = void 0;
        this.#done = false;
      }
      async open(response) {
        if (response.body === null) {
          throw new ProtoError2("No response body for cursor request");
        }
        this.#reader = response.body.getReader();
        const respBody = await this.#nextItem(CursorRespBody3, CursorRespBody4);
        if (respBody === void 0) {
          throw new ProtoError2("Empty response to cursor request");
        }
        return respBody;
      }
      /** Fetch the next entry from the cursor. */
      next() {
        return this.#nextItem(CursorEntry3, CursorEntry4);
      }
      /** Close the cursor. */
      close() {
        this._setClosed(new ClientError2("Cursor was manually closed"));
      }
      /** @private */
      _setClosed(error2) {
        if (this.#closed !== void 0) {
          return;
        }
        this.#closed = error2;
        this.#stream._cursorClosed(this);
        if (this.#reader !== void 0) {
          this.#reader.cancel();
        }
      }
      /** True if the cursor is closed. */
      get closed() {
        return this.#closed !== void 0;
      }
      async #nextItem(jsonFun, protobufDef) {
        for (; ; ) {
          if (this.#done) {
            return void 0;
          } else if (this.#closed !== void 0) {
            throw new ClosedError2("Cursor is closed", this.#closed);
          }
          if (this.#encoding === "json") {
            const jsonData = this.#parseItemJson();
            if (jsonData !== void 0) {
              const jsonText = new TextDecoder().decode(jsonData);
              const jsonValue = JSON.parse(jsonText);
              return readJsonObject2(jsonValue, jsonFun);
            }
          } else if (this.#encoding === "protobuf") {
            const protobufData = this.#parseItemProtobuf();
            if (protobufData !== void 0) {
              return readProtobufMessage2(protobufData, protobufDef);
            }
          } else {
            throw impossible2(this.#encoding, "Impossible encoding");
          }
          if (this.#reader === void 0) {
            throw new InternalError2("Attempted to read from HTTP cursor before it was opened");
          }
          const { value, done } = await this.#reader.read();
          if (done && this.#queue.length === 0) {
            this.#done = true;
          } else if (done) {
            throw new ProtoError2("Unexpected end of cursor stream");
          } else {
            this.#queue.push(value);
          }
        }
      }
      #parseItemJson() {
        const data = this.#queue.data();
        const newlineByte = 10;
        const newlinePos = data.indexOf(newlineByte);
        if (newlinePos < 0) {
          return void 0;
        }
        const jsonData = data.slice(0, newlinePos);
        this.#queue.shift(newlinePos + 1);
        return jsonData;
      }
      #parseItemProtobuf() {
        const data = this.#queue.data();
        let varintValue = 0;
        let varintLength = 0;
        for (; ; ) {
          if (varintLength >= data.byteLength) {
            return void 0;
          }
          const byte = data[varintLength];
          varintValue |= (byte & 127) << 7 * varintLength;
          varintLength += 1;
          if (!(byte & 128)) {
            break;
          }
        }
        if (data.byteLength < varintLength + varintValue) {
          return void 0;
        }
        const protobufData = data.slice(varintLength, varintLength + varintValue);
        this.#queue.shift(varintLength + varintValue);
        return protobufData;
      }
    };
  }
});
function PipelineReqBody3(w, msg) {
  if (msg.baton !== void 0) {
    w.string("baton", msg.baton);
  }
  w.arrayObjects("requests", msg.requests, StreamRequest3);
}
__name(PipelineReqBody3, "PipelineReqBody3");
function StreamRequest3(w, msg) {
  w.stringRaw("type", msg.type);
  if (msg.type === "close") {
  } else if (msg.type === "execute") {
    w.object("stmt", msg.stmt, Stmt5);
  } else if (msg.type === "batch") {
    w.object("batch", msg.batch, Batch5);
  } else if (msg.type === "sequence") {
    if (msg.sql !== void 0) {
      w.string("sql", msg.sql);
    }
    if (msg.sqlId !== void 0) {
      w.number("sql_id", msg.sqlId);
    }
  } else if (msg.type === "describe") {
    if (msg.sql !== void 0) {
      w.string("sql", msg.sql);
    }
    if (msg.sqlId !== void 0) {
      w.number("sql_id", msg.sqlId);
    }
  } else if (msg.type === "store_sql") {
    w.number("sql_id", msg.sqlId);
    w.string("sql", msg.sql);
  } else if (msg.type === "close_sql") {
    w.number("sql_id", msg.sqlId);
  } else if (msg.type === "get_autocommit") {
  } else {
    throw impossible2(msg, "Impossible type of StreamRequest");
  }
}
__name(StreamRequest3, "StreamRequest3");
function CursorReqBody3(w, msg) {
  if (msg.baton !== void 0) {
    w.string("baton", msg.baton);
  }
  w.object("batch", msg.batch, Batch5);
}
__name(CursorReqBody3, "CursorReqBody3");
var init_json_encode6 = __esm({
  "../node_modules/@libsql/kysely-libsql/node_modules/@libsql/client/node_modules/@libsql/hrana-client/lib-esm/http/json_encode.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_json_encode4();
    init_util6();
    __name2(PipelineReqBody3, "PipelineReqBody");
    __name2(StreamRequest3, "StreamRequest");
    __name2(CursorReqBody3, "CursorReqBody");
  }
});
function PipelineReqBody4(w, msg) {
  if (msg.baton !== void 0) {
    w.string(1, msg.baton);
  }
  for (const req of msg.requests) {
    w.message(2, req, StreamRequest4);
  }
}
__name(PipelineReqBody4, "PipelineReqBody4");
function StreamRequest4(w, msg) {
  if (msg.type === "close") {
    w.message(1, msg, CloseStreamReq4);
  } else if (msg.type === "execute") {
    w.message(2, msg, ExecuteStreamReq2);
  } else if (msg.type === "batch") {
    w.message(3, msg, BatchStreamReq2);
  } else if (msg.type === "sequence") {
    w.message(4, msg, SequenceStreamReq2);
  } else if (msg.type === "describe") {
    w.message(5, msg, DescribeStreamReq2);
  } else if (msg.type === "store_sql") {
    w.message(6, msg, StoreSqlStreamReq2);
  } else if (msg.type === "close_sql") {
    w.message(7, msg, CloseSqlStreamReq2);
  } else if (msg.type === "get_autocommit") {
    w.message(8, msg, GetAutocommitStreamReq2);
  } else {
    throw impossible2(msg, "Impossible type of StreamRequest");
  }
}
__name(StreamRequest4, "StreamRequest4");
function CloseStreamReq4(_w, _msg) {
}
__name(CloseStreamReq4, "CloseStreamReq4");
function ExecuteStreamReq2(w, msg) {
  w.message(1, msg.stmt, Stmt6);
}
__name(ExecuteStreamReq2, "ExecuteStreamReq2");
function BatchStreamReq2(w, msg) {
  w.message(1, msg.batch, Batch6);
}
__name(BatchStreamReq2, "BatchStreamReq2");
function SequenceStreamReq2(w, msg) {
  if (msg.sql !== void 0) {
    w.string(1, msg.sql);
  }
  if (msg.sqlId !== void 0) {
    w.int32(2, msg.sqlId);
  }
}
__name(SequenceStreamReq2, "SequenceStreamReq2");
function DescribeStreamReq2(w, msg) {
  if (msg.sql !== void 0) {
    w.string(1, msg.sql);
  }
  if (msg.sqlId !== void 0) {
    w.int32(2, msg.sqlId);
  }
}
__name(DescribeStreamReq2, "DescribeStreamReq2");
function StoreSqlStreamReq2(w, msg) {
  w.int32(1, msg.sqlId);
  w.string(2, msg.sql);
}
__name(StoreSqlStreamReq2, "StoreSqlStreamReq2");
function CloseSqlStreamReq2(w, msg) {
  w.int32(1, msg.sqlId);
}
__name(CloseSqlStreamReq2, "CloseSqlStreamReq2");
function GetAutocommitStreamReq2(_w, _msg) {
}
__name(GetAutocommitStreamReq2, "GetAutocommitStreamReq2");
function CursorReqBody4(w, msg) {
  if (msg.baton !== void 0) {
    w.string(1, msg.baton);
  }
  w.message(2, msg.batch, Batch6);
}
__name(CursorReqBody4, "CursorReqBody4");
var init_protobuf_encode6 = __esm({
  "../node_modules/@libsql/kysely-libsql/node_modules/@libsql/client/node_modules/@libsql/hrana-client/lib-esm/http/protobuf_encode.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_protobuf_encode4();
    init_util6();
    __name2(PipelineReqBody4, "PipelineReqBody");
    __name2(StreamRequest4, "StreamRequest");
    __name2(CloseStreamReq4, "CloseStreamReq");
    __name2(ExecuteStreamReq2, "ExecuteStreamReq");
    __name2(BatchStreamReq2, "BatchStreamReq");
    __name2(SequenceStreamReq2, "SequenceStreamReq");
    __name2(DescribeStreamReq2, "DescribeStreamReq");
    __name2(StoreSqlStreamReq2, "StoreSqlStreamReq");
    __name2(CloseSqlStreamReq2, "CloseSqlStreamReq");
    __name2(GetAutocommitStreamReq2, "GetAutocommitStreamReq");
    __name2(CursorReqBody4, "CursorReqBody");
  }
});
function handlePipelineResponse2(pipeline, respBody) {
  if (respBody.results.length !== pipeline.length) {
    throw new ProtoError2("Server returned unexpected number of pipeline results");
  }
  for (let i = 0; i < pipeline.length; ++i) {
    const result = respBody.results[i];
    const entry = pipeline[i];
    if (result.type === "ok") {
      if (result.response.type !== entry.request.type) {
        throw new ProtoError2("Received unexpected type of response");
      }
      entry.responseCallback(result.response);
    } else if (result.type === "error") {
      entry.errorCallback(errorFromProto2(result.error));
    } else if (result.type === "none") {
      throw new ProtoError2("Received unrecognized type of StreamResult");
    } else {
      throw impossible2(result, "Received impossible type of StreamResult");
    }
  }
}
__name(handlePipelineResponse2, "handlePipelineResponse2");
async function decodePipelineResponse2(resp, encoding) {
  if (encoding === "json") {
    const respJson = await resp.json();
    return readJsonObject2(respJson, PipelineRespBody3);
  } else if (encoding === "protobuf") {
    const respData = await resp.arrayBuffer();
    return readProtobufMessage2(new Uint8Array(respData), PipelineRespBody4);
  } else {
    throw impossible2(encoding, "Impossible encoding");
  }
}
__name(decodePipelineResponse2, "decodePipelineResponse2");
async function errorFromResponse2(resp) {
  const respType = resp.headers.get("content-type") ?? "text/plain";
  if (respType === "application/json") {
    const respBody = await resp.json();
    if ("message" in respBody) {
      return errorFromProto2(respBody);
    }
  }
  let message2 = `Server returned HTTP status ${resp.status}`;
  if (respType === "text/plain") {
    const respBody = (await resp.text()).trim();
    if (respBody !== "") {
      message2 += `: ${respBody}`;
    }
  }
  return new HttpServerError2(message2, resp.status);
}
__name(errorFromResponse2, "errorFromResponse2");
var HttpStream2;
var init_stream6 = __esm({
  "../node_modules/@libsql/kysely-libsql/node_modules/@libsql/client/node_modules/@libsql/hrana-client/lib-esm/http/stream.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_web4();
    init_errors2();
    init_encoding2();
    init_id_alloc2();
    init_queue2();
    init_queue_microtask2();
    init_result2();
    init_sql2();
    init_stream4();
    init_util6();
    init_cursor6();
    init_json_encode6();
    init_protobuf_encode6();
    init_json_encode6();
    init_protobuf_encode6();
    init_json_decode6();
    init_protobuf_decode6();
    HttpStream2 = class extends Stream2 {
      static {
        __name(this, "HttpStream2");
      }
      static {
        __name2(this, "HttpStream");
      }
      #client;
      #baseUrl;
      #jwt;
      #fetch;
      #baton;
      #queue;
      #flushing;
      #cursor;
      #closing;
      #closeQueued;
      #closed;
      #sqlIdAlloc;
      /** @private */
      constructor(client, baseUrl, jwt, customFetch) {
        super(client.intMode);
        this.#client = client;
        this.#baseUrl = baseUrl.toString();
        this.#jwt = jwt;
        this.#fetch = customFetch;
        this.#baton = void 0;
        this.#queue = new Queue2();
        this.#flushing = false;
        this.#closing = false;
        this.#closeQueued = false;
        this.#closed = void 0;
        this.#sqlIdAlloc = new IdAlloc2();
      }
      /** Get the {@link HttpClient} object that this stream belongs to. */
      client() {
        return this.#client;
      }
      /** @private */
      _sqlOwner() {
        return this;
      }
      /** Cache a SQL text on the server. */
      storeSql(sql2) {
        const sqlId = this.#sqlIdAlloc.alloc();
        this.#sendStreamRequest({ type: "store_sql", sqlId, sql: sql2 }).then(() => void 0, (error2) => this._setClosed(error2));
        return new Sql2(this, sqlId);
      }
      /** @private */
      _closeSql(sqlId) {
        if (this.#closed !== void 0) {
          return;
        }
        this.#sendStreamRequest({ type: "close_sql", sqlId }).then(() => this.#sqlIdAlloc.free(sqlId), (error2) => this._setClosed(error2));
      }
      /** @private */
      _execute(stmt) {
        return this.#sendStreamRequest({ type: "execute", stmt }).then((response) => {
          return response.result;
        });
      }
      /** @private */
      _batch(batch) {
        return this.#sendStreamRequest({ type: "batch", batch }).then((response) => {
          return response.result;
        });
      }
      /** @private */
      _describe(protoSql) {
        return this.#sendStreamRequest({
          type: "describe",
          sql: protoSql.sql,
          sqlId: protoSql.sqlId
        }).then((response) => {
          return response.result;
        });
      }
      /** @private */
      _sequence(protoSql) {
        return this.#sendStreamRequest({
          type: "sequence",
          sql: protoSql.sql,
          sqlId: protoSql.sqlId
        }).then((_response) => {
          return void 0;
        });
      }
      /** Check whether the SQL connection underlying this stream is in autocommit state (i.e., outside of an
       * explicit transaction). This requires protocol version 3 or higher.
       */
      getAutocommit() {
        this.#client._ensureVersion(3, "getAutocommit()");
        return this.#sendStreamRequest({
          type: "get_autocommit"
        }).then((response) => {
          return response.isAutocommit;
        });
      }
      #sendStreamRequest(request) {
        return new Promise((responseCallback, errorCallback) => {
          this.#pushToQueue({ type: "pipeline", request, responseCallback, errorCallback });
        });
      }
      /** @private */
      _openCursor(batch) {
        return new Promise((cursorCallback, errorCallback) => {
          this.#pushToQueue({ type: "cursor", batch, cursorCallback, errorCallback });
        });
      }
      /** @private */
      _cursorClosed(cursor) {
        if (cursor !== this.#cursor) {
          throw new InternalError2("Cursor was closed, but it was not associated with the stream");
        }
        this.#cursor = void 0;
        _queueMicrotask2(() => this.#flushQueue());
      }
      /** Immediately close the stream. */
      close() {
        this._setClosed(new ClientError2("Stream was manually closed"));
      }
      /** Gracefully close the stream. */
      closeGracefully() {
        this.#closing = true;
        _queueMicrotask2(() => this.#flushQueue());
      }
      /** True if the stream is closed. */
      get closed() {
        return this.#closed !== void 0 || this.#closing;
      }
      /** @private */
      _setClosed(error2) {
        if (this.#closed !== void 0) {
          return;
        }
        this.#closed = error2;
        if (this.#cursor !== void 0) {
          this.#cursor._setClosed(error2);
        }
        this.#client._streamClosed(this);
        for (; ; ) {
          const entry = this.#queue.shift();
          if (entry !== void 0) {
            entry.errorCallback(error2);
          } else {
            break;
          }
        }
        if ((this.#baton !== void 0 || this.#flushing) && !this.#closeQueued) {
          this.#queue.push({
            type: "pipeline",
            request: { type: "close" },
            responseCallback: /* @__PURE__ */ __name2(() => void 0, "responseCallback"),
            errorCallback: /* @__PURE__ */ __name2(() => void 0, "errorCallback")
          });
          this.#closeQueued = true;
          _queueMicrotask2(() => this.#flushQueue());
        }
      }
      #pushToQueue(entry) {
        if (this.#closed !== void 0) {
          throw new ClosedError2("Stream is closed", this.#closed);
        } else if (this.#closing) {
          throw new ClosedError2("Stream is closing", void 0);
        } else {
          this.#queue.push(entry);
          _queueMicrotask2(() => this.#flushQueue());
        }
      }
      #flushQueue() {
        if (this.#flushing || this.#cursor !== void 0) {
          return;
        }
        if (this.#closing && this.#queue.length === 0) {
          this._setClosed(new ClientError2("Stream was gracefully closed"));
          return;
        }
        const endpoint = this.#client._endpoint;
        if (endpoint === void 0) {
          this.#client._endpointPromise.then(() => this.#flushQueue(), (error2) => this._setClosed(error2));
          return;
        }
        const firstEntry = this.#queue.shift();
        if (firstEntry === void 0) {
          return;
        } else if (firstEntry.type === "pipeline") {
          const pipeline = [firstEntry];
          for (; ; ) {
            const entry = this.#queue.first();
            if (entry !== void 0 && entry.type === "pipeline") {
              pipeline.push(entry);
              this.#queue.shift();
            } else if (entry === void 0 && this.#closing && !this.#closeQueued) {
              pipeline.push({
                type: "pipeline",
                request: { type: "close" },
                responseCallback: /* @__PURE__ */ __name2(() => void 0, "responseCallback"),
                errorCallback: /* @__PURE__ */ __name2(() => void 0, "errorCallback")
              });
              this.#closeQueued = true;
              break;
            } else {
              break;
            }
          }
          this.#flushPipeline(endpoint, pipeline);
        } else if (firstEntry.type === "cursor") {
          this.#flushCursor(endpoint, firstEntry);
        } else {
          throw impossible2(firstEntry, "Impossible type of QueueEntry");
        }
      }
      #flushPipeline(endpoint, pipeline) {
        this.#flush(() => this.#createPipelineRequest(pipeline, endpoint), (resp) => decodePipelineResponse2(resp, endpoint.encoding), (respBody) => respBody.baton, (respBody) => respBody.baseUrl, (respBody) => handlePipelineResponse2(pipeline, respBody), (error2) => pipeline.forEach((entry) => entry.errorCallback(error2)));
      }
      #flushCursor(endpoint, entry) {
        const cursor = new HttpCursor2(this, endpoint.encoding);
        this.#cursor = cursor;
        this.#flush(() => this.#createCursorRequest(entry, endpoint), (resp) => cursor.open(resp), (respBody) => respBody.baton, (respBody) => respBody.baseUrl, (_respBody) => entry.cursorCallback(cursor), (error2) => entry.errorCallback(error2));
      }
      #flush(createRequest, decodeResponse, getBaton, getBaseUrl, handleResponse, handleError) {
        let promise;
        try {
          const request = createRequest();
          const fetch2 = this.#fetch;
          promise = fetch2(request);
        } catch (error2) {
          promise = Promise.reject(error2);
        }
        this.#flushing = true;
        promise.then((resp) => {
          if (!resp.ok) {
            return errorFromResponse2(resp).then((error2) => {
              throw error2;
            });
          }
          return decodeResponse(resp);
        }).then((r) => {
          this.#baton = getBaton(r);
          this.#baseUrl = getBaseUrl(r) ?? this.#baseUrl;
          handleResponse(r);
        }).catch((error2) => {
          this._setClosed(error2);
          handleError(error2);
        }).finally(() => {
          this.#flushing = false;
          this.#flushQueue();
        });
      }
      #createPipelineRequest(pipeline, endpoint) {
        return this.#createRequest(new URL(endpoint.pipelinePath, this.#baseUrl), {
          baton: this.#baton,
          requests: pipeline.map((entry) => entry.request)
        }, endpoint.encoding, PipelineReqBody3, PipelineReqBody4);
      }
      #createCursorRequest(entry, endpoint) {
        if (endpoint.cursorPath === void 0) {
          throw new ProtocolVersionError2(`Cursors are supported only on protocol version 3 and higher, but the HTTP server only supports version ${endpoint.version}.`);
        }
        return this.#createRequest(new URL(endpoint.cursorPath, this.#baseUrl), {
          baton: this.#baton,
          batch: entry.batch
        }, endpoint.encoding, CursorReqBody3, CursorReqBody4);
      }
      #createRequest(url, reqBody, encoding, jsonFun, protobufFun) {
        let bodyData;
        let contentType;
        if (encoding === "json") {
          bodyData = writeJsonObject2(reqBody, jsonFun);
          contentType = "application/json";
        } else if (encoding === "protobuf") {
          bodyData = writeProtobufMessage2(reqBody, protobufFun);
          contentType = "application/x-protobuf";
        } else {
          throw impossible2(encoding, "Impossible encoding");
        }
        const headers = new _Headers2();
        headers.set("content-type", contentType);
        if (this.#jwt !== void 0) {
          headers.set("authorization", `Bearer ${this.#jwt}`);
        }
        return new _Request2(url.toString(), { method: "POST", headers, body: bodyData });
      }
    };
    __name2(handlePipelineResponse2, "handlePipelineResponse");
    __name2(decodePipelineResponse2, "decodePipelineResponse");
    __name2(errorFromResponse2, "errorFromResponse");
  }
});
async function findEndpoint2(customFetch, clientUrl) {
  const fetch2 = customFetch;
  for (const endpoint of checkEndpoints2) {
    const url = new URL(endpoint.versionPath, clientUrl);
    const request = new _Request2(url.toString(), { method: "GET" });
    const response = await fetch2(request);
    await response.arrayBuffer();
    if (response.ok) {
      return endpoint;
    }
  }
  return fallbackEndpoint2;
}
__name(findEndpoint2, "findEndpoint2");
var checkEndpoints2;
var fallbackEndpoint2;
var HttpClient3;
var init_client6 = __esm({
  "../node_modules/@libsql/kysely-libsql/node_modules/@libsql/client/node_modules/@libsql/hrana-client/lib-esm/http/client.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_web4();
    init_client4();
    init_errors2();
    init_stream6();
    checkEndpoints2 = [
      {
        versionPath: "v3-protobuf",
        pipelinePath: "v3-protobuf/pipeline",
        cursorPath: "v3-protobuf/cursor",
        version: 3,
        encoding: "protobuf"
      }
      /*
      {
          versionPath: "v3",
          pipelinePath: "v3/pipeline",
          cursorPath: "v3/cursor",
          version: 3,
          encoding: "json",
      },
      */
    ];
    fallbackEndpoint2 = {
      versionPath: "v2",
      pipelinePath: "v2/pipeline",
      cursorPath: void 0,
      version: 2,
      encoding: "json"
    };
    HttpClient3 = class extends Client2 {
      static {
        __name(this, "HttpClient3");
      }
      static {
        __name2(this, "HttpClient");
      }
      #url;
      #jwt;
      #fetch;
      #closed;
      #streams;
      /** @private */
      _endpointPromise;
      /** @private */
      _endpoint;
      /** @private */
      constructor(url, jwt, customFetch, protocolVersion = 2) {
        super();
        this.#url = url;
        this.#jwt = jwt;
        this.#fetch = customFetch ?? _fetch2;
        this.#closed = void 0;
        this.#streams = /* @__PURE__ */ new Set();
        if (protocolVersion == 3) {
          this._endpointPromise = findEndpoint2(this.#fetch, this.#url);
          this._endpointPromise.then((endpoint) => this._endpoint = endpoint, (error2) => this.#setClosed(error2));
        } else {
          this._endpointPromise = Promise.resolve(fallbackEndpoint2);
          this._endpointPromise.then((endpoint) => this._endpoint = endpoint, (error2) => this.#setClosed(error2));
        }
      }
      /** Get the protocol version supported by the server. */
      async getVersion() {
        if (this._endpoint !== void 0) {
          return this._endpoint.version;
        }
        return (await this._endpointPromise).version;
      }
      // Make sure that the negotiated version is at least `minVersion`.
      /** @private */
      _ensureVersion(minVersion, feature) {
        if (minVersion <= fallbackEndpoint2.version) {
          return;
        } else if (this._endpoint === void 0) {
          throw new ProtocolVersionError2(`${feature} is supported only on protocol version ${minVersion} and higher, but the version supported by the HTTP server is not yet known. Use Client.getVersion() to wait until the version is available.`);
        } else if (this._endpoint.version < minVersion) {
          throw new ProtocolVersionError2(`${feature} is supported only on protocol version ${minVersion} and higher, but the HTTP server only supports version ${this._endpoint.version}.`);
        }
      }
      /** Open a {@link HttpStream}, a stream for executing SQL statements. */
      openStream() {
        if (this.#closed !== void 0) {
          throw new ClosedError2("Client is closed", this.#closed);
        }
        const stream = new HttpStream2(this, this.#url, this.#jwt, this.#fetch);
        this.#streams.add(stream);
        return stream;
      }
      /** @private */
      _streamClosed(stream) {
        this.#streams.delete(stream);
      }
      /** Close the client and all its streams. */
      close() {
        this.#setClosed(new ClientError2("Client was manually closed"));
      }
      /** True if the client is closed. */
      get closed() {
        return this.#closed !== void 0;
      }
      #setClosed(error2) {
        if (this.#closed !== void 0) {
          return;
        }
        this.#closed = error2;
        for (const stream of Array.from(this.#streams)) {
          stream._setClosed(new ClosedError2("Client was closed", error2));
        }
      }
    };
    __name2(findEndpoint2, "findEndpoint");
  }
});
var init_libsql_url2 = __esm({
  "../node_modules/@libsql/kysely-libsql/node_modules/@libsql/client/node_modules/@libsql/hrana-client/lib-esm/libsql_url.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_errors2();
  }
});
function openWs2(url, jwt, protocolVersion = 2) {
  if (typeof _WebSocket === "undefined") {
    throw new WebSocketUnsupportedError2("WebSockets are not supported in this environment");
  }
  var subprotocols = void 0;
  if (protocolVersion == 3) {
    subprotocols = Array.from(subprotocolsV32.keys());
  } else {
    subprotocols = Array.from(subprotocolsV22.keys());
  }
  const socket = new _WebSocket(url, subprotocols);
  return new WsClient3(socket, jwt);
}
__name(openWs2, "openWs2");
function openHttp2(url, jwt, customFetch, protocolVersion = 2) {
  return new HttpClient3(url instanceof URL ? url : new URL(url), jwt, customFetch, protocolVersion);
}
__name(openHttp2, "openHttp2");
var init_lib_esm2 = __esm({
  "../node_modules/@libsql/kysely-libsql/node_modules/@libsql/client/node_modules/@libsql/hrana-client/lib-esm/index.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_web();
    init_client5();
    init_errors2();
    init_client6();
    init_client5();
    init_web();
    init_web4();
    init_client4();
    init_errors2();
    init_batch2();
    init_libsql_url2();
    init_sql2();
    init_stmt2();
    init_stream4();
    init_client6();
    init_stream6();
    init_client5();
    init_stream5();
    __name2(openWs2, "openWs");
    __name2(openHttp2, "openHttp");
  }
});
async function executeHranaBatch2(mode, version2, batch, hranaStmts) {
  const beginStep = batch.step();
  const beginPromise = beginStep.run(transactionModeToBegin2(mode));
  let lastStep = beginStep;
  const stmtPromises = hranaStmts.map((hranaStmt) => {
    const stmtStep = batch.step().condition(BatchCond4.ok(lastStep));
    if (version2 >= 3) {
      stmtStep.condition(BatchCond4.not(BatchCond4.isAutocommit(batch)));
    }
    const stmtPromise = stmtStep.query(hranaStmt);
    lastStep = stmtStep;
    return stmtPromise;
  });
  const commitStep = batch.step().condition(BatchCond4.ok(lastStep));
  if (version2 >= 3) {
    commitStep.condition(BatchCond4.not(BatchCond4.isAutocommit(batch)));
  }
  const commitPromise = commitStep.run("COMMIT");
  const rollbackStep = batch.step().condition(BatchCond4.not(BatchCond4.ok(commitStep)));
  rollbackStep.run("ROLLBACK").catch((_) => void 0);
  await batch.execute();
  const resultSets = [];
  await beginPromise;
  for (const stmtPromise of stmtPromises) {
    const hranaRows = await stmtPromise;
    if (hranaRows === void 0) {
      throw new LibsqlError2("Statement in a batch was not executed, probably because the transaction has been rolled back", "TRANSACTION_CLOSED");
    }
    resultSets.push(resultSetFromHrana2(hranaRows));
  }
  await commitPromise;
  return resultSets;
}
__name(executeHranaBatch2, "executeHranaBatch2");
function stmtToHrana2(stmt) {
  if (typeof stmt === "string") {
    return new Stmt4(stmt);
  }
  const hranaStmt = new Stmt4(stmt.sql);
  if (Array.isArray(stmt.args)) {
    hranaStmt.bindIndexes(stmt.args);
  } else {
    for (const [key, value] of Object.entries(stmt.args)) {
      hranaStmt.bindName(key, value);
    }
  }
  return hranaStmt;
}
__name(stmtToHrana2, "stmtToHrana2");
function resultSetFromHrana2(hranaRows) {
  const columns = hranaRows.columnNames.map((c) => c ?? "");
  const columnTypes = hranaRows.columnDecltypes.map((c) => c ?? "");
  const rows = hranaRows.rows;
  const rowsAffected = hranaRows.affectedRowCount;
  const lastInsertRowid = hranaRows.lastInsertRowid !== void 0 ? hranaRows.lastInsertRowid : void 0;
  return new ResultSetImpl2(columns, columnTypes, rows, rowsAffected, lastInsertRowid);
}
__name(resultSetFromHrana2, "resultSetFromHrana2");
function mapHranaError2(e) {
  if (e instanceof ClientError2) {
    const code = mapHranaErrorCode2(e);
    return new LibsqlError2(e.message, code, void 0, e);
  }
  return e;
}
__name(mapHranaError2, "mapHranaError2");
function mapHranaErrorCode2(e) {
  if (e instanceof ResponseError2 && e.code !== void 0) {
    return e.code;
  } else if (e instanceof ProtoError2) {
    return "HRANA_PROTO_ERROR";
  } else if (e instanceof ClosedError2) {
    return e.cause instanceof ClientError2 ? mapHranaErrorCode2(e.cause) : "HRANA_CLOSED_ERROR";
  } else if (e instanceof WebSocketError2) {
    return "HRANA_WEBSOCKET_ERROR";
  } else if (e instanceof HttpServerError2) {
    return "SERVER_ERROR";
  } else if (e instanceof ProtocolVersionError2) {
    return "PROTOCOL_VERSION_ERROR";
  } else if (e instanceof InternalError2) {
    return "INTERNAL_ERROR";
  } else {
    return "UNKNOWN";
  }
}
__name(mapHranaErrorCode2, "mapHranaErrorCode2");
var HranaTransaction2;
var init_hrana2 = __esm({
  "../node_modules/@libsql/kysely-libsql/node_modules/@libsql/client/lib-esm/hrana.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_lib_esm2();
    init_api2();
    init_util4();
    HranaTransaction2 = class {
      static {
        __name(this, "HranaTransaction2");
      }
      static {
        __name2(this, "HranaTransaction");
      }
      #mode;
      #version;
      // Promise that is resolved when the BEGIN statement completes, or `undefined` if we haven't executed the
      // BEGIN statement yet.
      #started;
      /** @private */
      constructor(mode, version2) {
        this.#mode = mode;
        this.#version = version2;
        this.#started = void 0;
      }
      execute(stmt) {
        return this.batch([stmt]).then((results) => results[0]);
      }
      async batch(stmts) {
        const stream = this._getStream();
        if (stream.closed) {
          throw new LibsqlError2("Cannot execute statements because the transaction is closed", "TRANSACTION_CLOSED");
        }
        try {
          const hranaStmts = stmts.map(stmtToHrana2);
          let rowsPromises;
          if (this.#started === void 0) {
            this._getSqlCache().apply(hranaStmts);
            const batch = stream.batch(this.#version >= 3);
            const beginStep = batch.step();
            const beginPromise = beginStep.run(transactionModeToBegin2(this.#mode));
            let lastStep = beginStep;
            rowsPromises = hranaStmts.map((hranaStmt) => {
              const stmtStep = batch.step().condition(BatchCond4.ok(lastStep));
              if (this.#version >= 3) {
                stmtStep.condition(BatchCond4.not(BatchCond4.isAutocommit(batch)));
              }
              const rowsPromise = stmtStep.query(hranaStmt);
              rowsPromise.catch(() => void 0);
              lastStep = stmtStep;
              return rowsPromise;
            });
            this.#started = batch.execute().then(() => beginPromise).then(() => void 0);
            try {
              await this.#started;
            } catch (e) {
              this.close();
              throw e;
            }
          } else {
            if (this.#version < 3) {
              await this.#started;
            } else {
            }
            this._getSqlCache().apply(hranaStmts);
            const batch = stream.batch(this.#version >= 3);
            let lastStep = void 0;
            rowsPromises = hranaStmts.map((hranaStmt) => {
              const stmtStep = batch.step();
              if (lastStep !== void 0) {
                stmtStep.condition(BatchCond4.ok(lastStep));
              }
              if (this.#version >= 3) {
                stmtStep.condition(BatchCond4.not(BatchCond4.isAutocommit(batch)));
              }
              const rowsPromise = stmtStep.query(hranaStmt);
              rowsPromise.catch(() => void 0);
              lastStep = stmtStep;
              return rowsPromise;
            });
            await batch.execute();
          }
          const resultSets = [];
          for (const rowsPromise of rowsPromises) {
            const rows = await rowsPromise;
            if (rows === void 0) {
              throw new LibsqlError2("Statement in a transaction was not executed, probably because the transaction has been rolled back", "TRANSACTION_CLOSED");
            }
            resultSets.push(resultSetFromHrana2(rows));
          }
          return resultSets;
        } catch (e) {
          throw mapHranaError2(e);
        }
      }
      async executeMultiple(sql2) {
        const stream = this._getStream();
        if (stream.closed) {
          throw new LibsqlError2("Cannot execute statements because the transaction is closed", "TRANSACTION_CLOSED");
        }
        try {
          if (this.#started === void 0) {
            this.#started = stream.run(transactionModeToBegin2(this.#mode)).then(() => void 0);
            try {
              await this.#started;
            } catch (e) {
              this.close();
              throw e;
            }
          } else {
            await this.#started;
          }
          await stream.sequence(sql2);
        } catch (e) {
          throw mapHranaError2(e);
        }
      }
      async rollback() {
        try {
          const stream = this._getStream();
          if (stream.closed) {
            return;
          }
          if (this.#started !== void 0) {
          } else {
            return;
          }
          const promise = stream.run("ROLLBACK").catch((e) => {
            throw mapHranaError2(e);
          });
          stream.closeGracefully();
          await promise;
        } catch (e) {
          throw mapHranaError2(e);
        } finally {
          this.close();
        }
      }
      async commit() {
        try {
          const stream = this._getStream();
          if (stream.closed) {
            throw new LibsqlError2("Cannot commit the transaction because it is already closed", "TRANSACTION_CLOSED");
          }
          if (this.#started !== void 0) {
            await this.#started;
          } else {
            return;
          }
          const promise = stream.run("COMMIT").catch((e) => {
            throw mapHranaError2(e);
          });
          stream.closeGracefully();
          await promise;
        } catch (e) {
          throw mapHranaError2(e);
        } finally {
          this.close();
        }
      }
    };
    __name2(executeHranaBatch2, "executeHranaBatch");
    __name2(stmtToHrana2, "stmtToHrana");
    __name2(resultSetFromHrana2, "resultSetFromHrana");
    __name2(mapHranaError2, "mapHranaError");
    __name2(mapHranaErrorCode2, "mapHranaErrorCode");
  }
});
var SqlCache2;
var Lru2;
var init_sql_cache2 = __esm({
  "../node_modules/@libsql/kysely-libsql/node_modules/@libsql/client/lib-esm/sql_cache.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    SqlCache2 = class {
      static {
        __name(this, "SqlCache2");
      }
      static {
        __name2(this, "SqlCache");
      }
      #owner;
      #sqls;
      capacity;
      constructor(owner, capacity) {
        this.#owner = owner;
        this.#sqls = new Lru2();
        this.capacity = capacity;
      }
      // Replaces SQL strings with cached `hrana.Sql` objects in the statements in `hranaStmts`. After this
      // function returns, we guarantee that all `hranaStmts` refer to valid (not closed) `hrana.Sql` objects,
      // but _we may invalidate any other `hrana.Sql` objects_ (by closing them, thus removing them from the
      // server).
      //
      // In practice, this means that after calling this function, you can use the statements only up to the
      // first `await`, because concurrent code may also use the cache and invalidate those statements.
      apply(hranaStmts) {
        if (this.capacity <= 0) {
          return;
        }
        const usedSqlObjs = /* @__PURE__ */ new Set();
        for (const hranaStmt of hranaStmts) {
          if (typeof hranaStmt.sql !== "string") {
            continue;
          }
          const sqlText = hranaStmt.sql;
          if (sqlText.length >= 5e3) {
            continue;
          }
          let sqlObj = this.#sqls.get(sqlText);
          if (sqlObj === void 0) {
            while (this.#sqls.size + 1 > this.capacity) {
              const [evictSqlText, evictSqlObj] = this.#sqls.peekLru();
              if (usedSqlObjs.has(evictSqlObj)) {
                break;
              }
              evictSqlObj.close();
              this.#sqls.delete(evictSqlText);
            }
            if (this.#sqls.size + 1 <= this.capacity) {
              sqlObj = this.#owner.storeSql(sqlText);
              this.#sqls.set(sqlText, sqlObj);
            }
          }
          if (sqlObj !== void 0) {
            hranaStmt.sql = sqlObj;
            usedSqlObjs.add(sqlObj);
          }
        }
      }
    };
    Lru2 = class {
      static {
        __name(this, "Lru2");
      }
      static {
        __name2(this, "Lru");
      }
      // This maps keys to the cache values. The entries are ordered by their last use (entires that were used
      // most recently are at the end).
      #cache;
      constructor() {
        this.#cache = /* @__PURE__ */ new Map();
      }
      get(key) {
        const value = this.#cache.get(key);
        if (value !== void 0) {
          this.#cache.delete(key);
          this.#cache.set(key, value);
        }
        return value;
      }
      set(key, value) {
        this.#cache.set(key, value);
      }
      peekLru() {
        for (const entry of this.#cache.entries()) {
          return entry;
        }
        return void 0;
      }
      delete(key) {
        this.#cache.delete(key);
      }
      get size() {
        return this.#cache.size;
      }
    };
  }
});
function _createClient4(config2) {
  if (config2.scheme !== "wss" && config2.scheme !== "ws") {
    throw new LibsqlError2(`The WebSocket client supports only "libsql:", "wss:" and "ws:" URLs, got ${JSON.stringify(config2.scheme + ":")}. For more information, please read ${supportedUrlLink2}`, "URL_SCHEME_NOT_SUPPORTED");
  }
  if (config2.encryptionKey !== void 0) {
    throw new LibsqlError2("Encryption key is not supported by the remote client.", "ENCRYPTION_KEY_NOT_SUPPORTED");
  }
  if (config2.scheme === "ws" && config2.tls) {
    throw new LibsqlError2(`A "ws:" URL cannot opt into TLS by using ?tls=1`, "URL_INVALID");
  } else if (config2.scheme === "wss" && !config2.tls) {
    throw new LibsqlError2(`A "wss:" URL cannot opt out of TLS by using ?tls=0`, "URL_INVALID");
  }
  const url = encodeBaseUrl2(config2.scheme, config2.authority, config2.path);
  let client;
  try {
    client = openWs2(url, config2.authToken);
  } catch (e) {
    if (e instanceof WebSocketUnsupportedError2) {
      const suggestedScheme = config2.scheme === "wss" ? "https" : "http";
      const suggestedUrl = encodeBaseUrl2(suggestedScheme, config2.authority, config2.path);
      throw new LibsqlError2(`This environment does not support WebSockets, please switch to the HTTP client by using a "${suggestedScheme}:" URL (${JSON.stringify(suggestedUrl)}). For more information, please read ${supportedUrlLink2}`, "WEBSOCKETS_NOT_SUPPORTED");
    }
    throw mapHranaError2(e);
  }
  return new WsClient4(client, url, config2.authToken, config2.intMode, config2.concurrency);
}
__name(_createClient4, "_createClient4");
var import_promise_limit3;
var maxConnAgeMillis2;
var sqlCacheCapacity3;
var WsClient4;
var WsTransaction2;
var init_ws2 = __esm({
  "../node_modules/@libsql/kysely-libsql/node_modules/@libsql/client/lib-esm/ws.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_lib_esm2();
    init_api2();
    init_config2();
    init_hrana2();
    init_sql_cache2();
    init_uri2();
    init_util4();
    import_promise_limit3 = __toESM(require_promise_limit(), 1);
    init_api2();
    __name2(_createClient4, "_createClient");
    maxConnAgeMillis2 = 60 * 1e3;
    sqlCacheCapacity3 = 100;
    WsClient4 = class {
      static {
        __name(this, "WsClient4");
      }
      static {
        __name2(this, "WsClient");
      }
      #url;
      #authToken;
      #intMode;
      // State of the current connection. The `hrana.WsClient` inside may be closed at any moment due to an
      // asynchronous error.
      #connState;
      // If defined, this is a connection that will be used in the future, once it is ready.
      #futureConnState;
      closed;
      protocol;
      #isSchemaDatabase;
      #promiseLimitFunction;
      /** @private */
      constructor(client, url, authToken, intMode, concurrency) {
        this.#url = url;
        this.#authToken = authToken;
        this.#intMode = intMode;
        this.#connState = this.#openConn(client);
        this.#futureConnState = void 0;
        this.closed = false;
        this.protocol = "ws";
        this.#promiseLimitFunction = (0, import_promise_limit3.default)(concurrency);
      }
      async limit(fn) {
        return this.#promiseLimitFunction(fn);
      }
      async execute(stmtOrSql, args) {
        let stmt;
        if (typeof stmtOrSql === "string") {
          stmt = {
            sql: stmtOrSql,
            args: args || []
          };
        } else {
          stmt = stmtOrSql;
        }
        return this.limit(async () => {
          const streamState = await this.#openStream();
          try {
            const hranaStmt = stmtToHrana2(stmt);
            streamState.conn.sqlCache.apply([hranaStmt]);
            const hranaRowsPromise = streamState.stream.query(hranaStmt);
            streamState.stream.closeGracefully();
            const hranaRowsResult = await hranaRowsPromise;
            return resultSetFromHrana2(hranaRowsResult);
          } catch (e) {
            throw mapHranaError2(e);
          } finally {
            this._closeStream(streamState);
          }
        });
      }
      async batch(stmts, mode = "deferred") {
        return this.limit(async () => {
          const streamState = await this.#openStream();
          try {
            const hranaStmts = stmts.map(stmtToHrana2);
            const version2 = await streamState.conn.client.getVersion();
            streamState.conn.sqlCache.apply(hranaStmts);
            const batch = streamState.stream.batch(version2 >= 3);
            const resultsPromise = executeHranaBatch2(mode, version2, batch, hranaStmts);
            const results = await resultsPromise;
            return results;
          } catch (e) {
            throw mapHranaError2(e);
          } finally {
            this._closeStream(streamState);
          }
        });
      }
      async transaction(mode = "write") {
        return this.limit(async () => {
          const streamState = await this.#openStream();
          try {
            const version2 = await streamState.conn.client.getVersion();
            return new WsTransaction2(this, streamState, mode, version2);
          } catch (e) {
            this._closeStream(streamState);
            throw mapHranaError2(e);
          }
        });
      }
      async executeMultiple(sql2) {
        return this.limit(async () => {
          const streamState = await this.#openStream();
          try {
            const promise = streamState.stream.sequence(sql2);
            streamState.stream.closeGracefully();
            await promise;
          } catch (e) {
            throw mapHranaError2(e);
          } finally {
            this._closeStream(streamState);
          }
        });
      }
      sync() {
        return Promise.resolve();
      }
      async #openStream() {
        if (this.closed) {
          throw new LibsqlError2("The client is closed", "CLIENT_CLOSED");
        }
        const now = /* @__PURE__ */ new Date();
        const ageMillis = now.valueOf() - this.#connState.openTime.valueOf();
        if (ageMillis > maxConnAgeMillis2 && this.#futureConnState === void 0) {
          const futureConnState = this.#openConn();
          this.#futureConnState = futureConnState;
          futureConnState.client.getVersion().then((_version) => {
            if (this.#connState !== futureConnState) {
              if (this.#connState.streamStates.size === 0) {
                this.#connState.client.close();
              } else {
              }
            }
            this.#connState = futureConnState;
            this.#futureConnState = void 0;
          }, (_e) => {
            this.#futureConnState = void 0;
          });
        }
        if (this.#connState.client.closed) {
          try {
            if (this.#futureConnState !== void 0) {
              this.#connState = this.#futureConnState;
            } else {
              this.#connState = this.#openConn();
            }
          } catch (e) {
            throw mapHranaError2(e);
          }
        }
        const connState = this.#connState;
        try {
          if (connState.useSqlCache === void 0) {
            connState.useSqlCache = await connState.client.getVersion() >= 2;
            if (connState.useSqlCache) {
              connState.sqlCache.capacity = sqlCacheCapacity3;
            }
          }
          const stream = connState.client.openStream();
          stream.intMode = this.#intMode;
          const streamState = { conn: connState, stream };
          connState.streamStates.add(streamState);
          return streamState;
        } catch (e) {
          throw mapHranaError2(e);
        }
      }
      #openConn(client) {
        try {
          client ??= openWs2(this.#url, this.#authToken);
          return {
            client,
            useSqlCache: void 0,
            sqlCache: new SqlCache2(client, 0),
            openTime: /* @__PURE__ */ new Date(),
            streamStates: /* @__PURE__ */ new Set()
          };
        } catch (e) {
          throw mapHranaError2(e);
        }
      }
      _closeStream(streamState) {
        streamState.stream.close();
        const connState = streamState.conn;
        connState.streamStates.delete(streamState);
        if (connState.streamStates.size === 0 && connState !== this.#connState) {
          connState.client.close();
        }
      }
      close() {
        this.#connState.client.close();
        this.closed = true;
      }
    };
    WsTransaction2 = class extends HranaTransaction2 {
      static {
        __name(this, "WsTransaction2");
      }
      static {
        __name2(this, "WsTransaction");
      }
      #client;
      #streamState;
      /** @private */
      constructor(client, state, mode, version2) {
        super(mode, version2);
        this.#client = client;
        this.#streamState = state;
      }
      /** @private */
      _getStream() {
        return this.#streamState.stream;
      }
      /** @private */
      _getSqlCache() {
        return this.#streamState.conn.sqlCache;
      }
      close() {
        this.#client._closeStream(this.#streamState);
      }
      get closed() {
        return this.#streamState.stream.closed;
      }
    };
  }
});
function _createClient5(config2) {
  if (config2.scheme !== "https" && config2.scheme !== "http") {
    throw new LibsqlError2(`The HTTP client supports only "libsql:", "https:" and "http:" URLs, got ${JSON.stringify(config2.scheme + ":")}. For more information, please read ${supportedUrlLink2}`, "URL_SCHEME_NOT_SUPPORTED");
  }
  if (config2.encryptionKey !== void 0) {
    throw new LibsqlError2("Encryption key is not supported by the remote client.", "ENCRYPTION_KEY_NOT_SUPPORTED");
  }
  if (config2.scheme === "http" && config2.tls) {
    throw new LibsqlError2(`A "http:" URL cannot opt into TLS by using ?tls=1`, "URL_INVALID");
  } else if (config2.scheme === "https" && !config2.tls) {
    throw new LibsqlError2(`A "https:" URL cannot opt out of TLS by using ?tls=0`, "URL_INVALID");
  }
  const url = encodeBaseUrl2(config2.scheme, config2.authority, config2.path);
  return new HttpClient4(url, config2.authToken, config2.intMode, config2.fetch, config2.concurrency);
}
__name(_createClient5, "_createClient5");
var import_promise_limit4;
var sqlCacheCapacity4;
var HttpClient4;
var HttpTransaction2;
var init_http2 = __esm({
  "../node_modules/@libsql/kysely-libsql/node_modules/@libsql/client/lib-esm/http.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_lib_esm2();
    init_api2();
    init_config2();
    init_hrana2();
    init_sql_cache2();
    init_uri2();
    init_util4();
    import_promise_limit4 = __toESM(require_promise_limit(), 1);
    init_api2();
    __name2(_createClient5, "_createClient");
    sqlCacheCapacity4 = 30;
    HttpClient4 = class {
      static {
        __name(this, "HttpClient4");
      }
      static {
        __name2(this, "HttpClient");
      }
      #client;
      protocol;
      #authToken;
      #promiseLimitFunction;
      /** @private */
      constructor(url, authToken, intMode, customFetch, concurrency) {
        this.#client = openHttp2(url, authToken, customFetch);
        this.#client.intMode = intMode;
        this.protocol = "http";
        this.#authToken = authToken;
        this.#promiseLimitFunction = (0, import_promise_limit4.default)(concurrency);
      }
      async limit(fn) {
        return this.#promiseLimitFunction(fn);
      }
      async execute(stmtOrSql, args) {
        let stmt;
        if (typeof stmtOrSql === "string") {
          stmt = {
            sql: stmtOrSql,
            args: args || []
          };
        } else {
          stmt = stmtOrSql;
        }
        return this.limit(async () => {
          try {
            const hranaStmt = stmtToHrana2(stmt);
            let rowsPromise;
            const stream = this.#client.openStream();
            try {
              rowsPromise = stream.query(hranaStmt);
            } finally {
              stream.closeGracefully();
            }
            const rowsResult = await rowsPromise;
            return resultSetFromHrana2(rowsResult);
          } catch (e) {
            throw mapHranaError2(e);
          }
        });
      }
      async batch(stmts, mode = "deferred") {
        return this.limit(async () => {
          try {
            const hranaStmts = stmts.map(stmtToHrana2);
            const version2 = await this.#client.getVersion();
            let resultsPromise;
            const stream = this.#client.openStream();
            try {
              const sqlCache = new SqlCache2(stream, sqlCacheCapacity4);
              sqlCache.apply(hranaStmts);
              const batch = stream.batch(false);
              resultsPromise = executeHranaBatch2(mode, version2, batch, hranaStmts);
            } finally {
              stream.closeGracefully();
            }
            const results = await resultsPromise;
            return results;
          } catch (e) {
            throw mapHranaError2(e);
          }
        });
      }
      async transaction(mode = "write") {
        return this.limit(async () => {
          try {
            const version2 = await this.#client.getVersion();
            return new HttpTransaction2(this.#client.openStream(), mode, version2);
          } catch (e) {
            throw mapHranaError2(e);
          }
        });
      }
      async executeMultiple(sql2) {
        return this.limit(async () => {
          try {
            let promise;
            const stream = this.#client.openStream();
            try {
              promise = stream.sequence(sql2);
            } finally {
              stream.closeGracefully();
            }
            await promise;
          } catch (e) {
            throw mapHranaError2(e);
          }
        });
      }
      sync() {
        throw new LibsqlError2("sync not supported in http mode", "SYNC_NOT_SUPPORTED");
      }
      close() {
        this.#client.close();
      }
      get closed() {
        return this.#client.closed;
      }
    };
    HttpTransaction2 = class extends HranaTransaction2 {
      static {
        __name(this, "HttpTransaction2");
      }
      static {
        __name2(this, "HttpTransaction");
      }
      #stream;
      #sqlCache;
      /** @private */
      constructor(stream, mode, version2) {
        super(mode, version2);
        this.#stream = stream;
        this.#sqlCache = new SqlCache2(stream, sqlCacheCapacity4);
      }
      /** @private */
      _getStream() {
        return this.#stream;
      }
      /** @private */
      _getSqlCache() {
        return this.#sqlCache;
      }
      close() {
        this.#stream.close();
      }
      get closed() {
        return this.#stream.closed;
      }
    };
  }
});
function createClient2(config2) {
  return _createClient6(expandConfig2(config2, true));
}
__name(createClient2, "createClient2");
function _createClient6(config2) {
  if (config2.scheme === "ws" || config2.scheme === "wss") {
    return _createClient4(config2);
  } else if (config2.scheme === "http" || config2.scheme === "https") {
    return _createClient5(config2);
  } else {
    throw new LibsqlError2(`The client that uses Web standard APIs supports only "libsql:", "wss:", "ws:", "https:" and "http:" URLs, got ${JSON.stringify(config2.scheme + ":")}. For more information, please read ${supportedUrlLink2}`, "URL_SCHEME_NOT_SUPPORTED");
  }
}
__name(_createClient6, "_createClient6");
var init_web5 = __esm({
  "../node_modules/@libsql/kysely-libsql/node_modules/@libsql/client/lib-esm/web.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_api2();
    init_config2();
    init_util4();
    init_ws2();
    init_http2();
    init_api2();
    __name2(createClient2, "createClient");
    __name2(_createClient6, "_createClient");
  }
});
function isUndefined(obj) {
  return typeof obj === "undefined" || obj === void 0;
}
__name(isUndefined, "isUndefined");
function isString(obj) {
  return typeof obj === "string";
}
__name(isString, "isString");
function isNumber(obj) {
  return typeof obj === "number";
}
__name(isNumber, "isNumber");
function isBoolean(obj) {
  return typeof obj === "boolean";
}
__name(isBoolean, "isBoolean");
function isNull(obj) {
  return obj === null;
}
__name(isNull, "isNull");
function isDate(obj) {
  return obj instanceof Date;
}
__name(isDate, "isDate");
function isBigInt(obj) {
  return typeof obj === "bigint";
}
__name(isBigInt, "isBigInt");
function isBuffer(obj) {
  return typeof Buffer !== "undefined" && Buffer.isBuffer(obj);
}
__name(isBuffer, "isBuffer");
function isFunction(obj) {
  return typeof obj === "function";
}
__name(isFunction, "isFunction");
function isObject(obj) {
  return typeof obj === "object" && obj !== null;
}
__name(isObject, "isObject");
function freeze(obj) {
  return Object.freeze(obj);
}
__name(freeze, "freeze");
function asArray(arg) {
  if (isReadonlyArray(arg)) {
    return arg;
  } else {
    return [arg];
  }
}
__name(asArray, "asArray");
function isReadonlyArray(arg) {
  return Array.isArray(arg);
}
__name(isReadonlyArray, "isReadonlyArray");
function noop(obj) {
  return obj;
}
__name(noop, "noop");
var init_object_utils = __esm({
  "../node_modules/kysely/dist/esm/util/object-utils.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    __name2(isUndefined, "isUndefined");
    __name2(isString, "isString");
    __name2(isNumber, "isNumber");
    __name2(isBoolean, "isBoolean");
    __name2(isNull, "isNull");
    __name2(isDate, "isDate");
    __name2(isBigInt, "isBigInt");
    __name2(isBuffer, "isBuffer");
    __name2(isFunction, "isFunction");
    __name2(isObject, "isObject");
    __name2(freeze, "freeze");
    __name2(asArray, "asArray");
    __name2(isReadonlyArray, "isReadonlyArray");
    __name2(noop, "noop");
  }
});
var AlterTableNode;
var init_alter_table_node = __esm({
  "../node_modules/kysely/dist/esm/operation-node/alter-table-node.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    AlterTableNode = freeze({
      is(node) {
        return node.kind === "AlterTableNode";
      },
      create(table) {
        return freeze({
          kind: "AlterTableNode",
          table
        });
      },
      cloneWithTableProps(node, props) {
        return freeze({
          ...node,
          ...props
        });
      },
      cloneWithColumnAlteration(node, columnAlteration) {
        return freeze({
          ...node,
          columnAlterations: node.columnAlterations ? [...node.columnAlterations, columnAlteration] : [columnAlteration]
        });
      }
    });
  }
});
var IdentifierNode;
var init_identifier_node = __esm({
  "../node_modules/kysely/dist/esm/operation-node/identifier-node.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    IdentifierNode = freeze({
      is(node) {
        return node.kind === "IdentifierNode";
      },
      create(name) {
        return freeze({
          kind: "IdentifierNode",
          name
        });
      }
    });
  }
});
var CreateIndexNode;
var init_create_index_node = __esm({
  "../node_modules/kysely/dist/esm/operation-node/create-index-node.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    init_identifier_node();
    CreateIndexNode = freeze({
      is(node) {
        return node.kind === "CreateIndexNode";
      },
      create(name) {
        return freeze({
          kind: "CreateIndexNode",
          name: IdentifierNode.create(name)
        });
      },
      cloneWith(node, props) {
        return freeze({
          ...node,
          ...props
        });
      },
      cloneWithColumns(node, columns) {
        return freeze({
          ...node,
          columns: [...node.columns || [], ...columns]
        });
      }
    });
  }
});
var CreateSchemaNode;
var init_create_schema_node = __esm({
  "../node_modules/kysely/dist/esm/operation-node/create-schema-node.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    init_identifier_node();
    CreateSchemaNode = freeze({
      is(node) {
        return node.kind === "CreateSchemaNode";
      },
      create(schema2, params) {
        return freeze({
          kind: "CreateSchemaNode",
          schema: IdentifierNode.create(schema2),
          ...params
        });
      },
      cloneWith(createSchema, params) {
        return freeze({
          ...createSchema,
          ...params
        });
      }
    });
  }
});
var ON_COMMIT_ACTIONS;
var CreateTableNode;
var init_create_table_node = __esm({
  "../node_modules/kysely/dist/esm/operation-node/create-table-node.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    ON_COMMIT_ACTIONS = ["preserve rows", "delete rows", "drop"];
    CreateTableNode = freeze({
      is(node) {
        return node.kind === "CreateTableNode";
      },
      create(table) {
        return freeze({
          kind: "CreateTableNode",
          table,
          columns: freeze([])
        });
      },
      cloneWithColumn(createTable, column) {
        return freeze({
          ...createTable,
          columns: freeze([...createTable.columns, column])
        });
      },
      cloneWithConstraint(createTable, constraint) {
        return freeze({
          ...createTable,
          constraints: createTable.constraints ? freeze([...createTable.constraints, constraint]) : freeze([constraint])
        });
      },
      cloneWithFrontModifier(createTable, modifier) {
        return freeze({
          ...createTable,
          frontModifiers: createTable.frontModifiers ? freeze([...createTable.frontModifiers, modifier]) : freeze([modifier])
        });
      },
      cloneWithEndModifier(createTable, modifier) {
        return freeze({
          ...createTable,
          endModifiers: createTable.endModifiers ? freeze([...createTable.endModifiers, modifier]) : freeze([modifier])
        });
      },
      cloneWith(createTable, params) {
        return freeze({
          ...createTable,
          ...params
        });
      }
    });
  }
});
var SchemableIdentifierNode;
var init_schemable_identifier_node = __esm({
  "../node_modules/kysely/dist/esm/operation-node/schemable-identifier-node.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    init_identifier_node();
    SchemableIdentifierNode = freeze({
      is(node) {
        return node.kind === "SchemableIdentifierNode";
      },
      create(identifier) {
        return freeze({
          kind: "SchemableIdentifierNode",
          identifier: IdentifierNode.create(identifier)
        });
      },
      createWithSchema(schema2, identifier) {
        return freeze({
          kind: "SchemableIdentifierNode",
          schema: IdentifierNode.create(schema2),
          identifier: IdentifierNode.create(identifier)
        });
      }
    });
  }
});
var DropIndexNode;
var init_drop_index_node = __esm({
  "../node_modules/kysely/dist/esm/operation-node/drop-index-node.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    init_schemable_identifier_node();
    DropIndexNode = freeze({
      is(node) {
        return node.kind === "DropIndexNode";
      },
      create(name, params) {
        return freeze({
          kind: "DropIndexNode",
          name: SchemableIdentifierNode.create(name),
          ...params
        });
      },
      cloneWith(dropIndex, props) {
        return freeze({
          ...dropIndex,
          ...props
        });
      }
    });
  }
});
var DropSchemaNode;
var init_drop_schema_node = __esm({
  "../node_modules/kysely/dist/esm/operation-node/drop-schema-node.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    init_identifier_node();
    DropSchemaNode = freeze({
      is(node) {
        return node.kind === "DropSchemaNode";
      },
      create(schema2, params) {
        return freeze({
          kind: "DropSchemaNode",
          schema: IdentifierNode.create(schema2),
          ...params
        });
      },
      cloneWith(dropSchema, params) {
        return freeze({
          ...dropSchema,
          ...params
        });
      }
    });
  }
});
var DropTableNode;
var init_drop_table_node = __esm({
  "../node_modules/kysely/dist/esm/operation-node/drop-table-node.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    DropTableNode = freeze({
      is(node) {
        return node.kind === "DropTableNode";
      },
      create(table, params) {
        return freeze({
          kind: "DropTableNode",
          table,
          ...params
        });
      },
      cloneWith(dropIndex, params) {
        return freeze({
          ...dropIndex,
          ...params
        });
      }
    });
  }
});
var AliasNode;
var init_alias_node = __esm({
  "../node_modules/kysely/dist/esm/operation-node/alias-node.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    AliasNode = freeze({
      is(node) {
        return node.kind === "AliasNode";
      },
      create(node, alias) {
        return freeze({
          kind: "AliasNode",
          node,
          alias
        });
      }
    });
  }
});
var TableNode;
var init_table_node = __esm({
  "../node_modules/kysely/dist/esm/operation-node/table-node.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    init_schemable_identifier_node();
    TableNode = freeze({
      is(node) {
        return node.kind === "TableNode";
      },
      create(table) {
        return freeze({
          kind: "TableNode",
          table: SchemableIdentifierNode.create(table)
        });
      },
      createWithSchema(schema2, table) {
        return freeze({
          kind: "TableNode",
          table: SchemableIdentifierNode.createWithSchema(schema2, table)
        });
      }
    });
  }
});
function isOperationNodeSource(obj) {
  return isObject(obj) && isFunction(obj.toOperationNode);
}
__name(isOperationNodeSource, "isOperationNodeSource");
var init_operation_node_source = __esm({
  "../node_modules/kysely/dist/esm/operation-node/operation-node-source.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    __name2(isOperationNodeSource, "isOperationNodeSource");
  }
});
function isExpression(obj) {
  return isObject(obj) && "expressionType" in obj && isOperationNodeSource(obj);
}
__name(isExpression, "isExpression");
function isAliasedExpression(obj) {
  return isObject(obj) && "expression" in obj && isString(obj.alias) && isOperationNodeSource(obj);
}
__name(isAliasedExpression, "isAliasedExpression");
var init_expression = __esm({
  "../node_modules/kysely/dist/esm/expression/expression.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_operation_node_source();
    init_object_utils();
    __name2(isExpression, "isExpression");
    __name2(isAliasedExpression, "isAliasedExpression");
  }
});
var SelectModifierNode;
var init_select_modifier_node = __esm({
  "../node_modules/kysely/dist/esm/operation-node/select-modifier-node.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    SelectModifierNode = freeze({
      is(node) {
        return node.kind === "SelectModifierNode";
      },
      create(modifier, of) {
        return freeze({
          kind: "SelectModifierNode",
          modifier,
          of
        });
      },
      createWithExpression(modifier) {
        return freeze({
          kind: "SelectModifierNode",
          rawModifier: modifier
        });
      }
    });
  }
});
var AndNode;
var init_and_node = __esm({
  "../node_modules/kysely/dist/esm/operation-node/and-node.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    AndNode = freeze({
      is(node) {
        return node.kind === "AndNode";
      },
      create(left, right) {
        return freeze({
          kind: "AndNode",
          left,
          right
        });
      }
    });
  }
});
var OrNode;
var init_or_node = __esm({
  "../node_modules/kysely/dist/esm/operation-node/or-node.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    OrNode = freeze({
      is(node) {
        return node.kind === "OrNode";
      },
      create(left, right) {
        return freeze({
          kind: "OrNode",
          left,
          right
        });
      }
    });
  }
});
var OnNode;
var init_on_node = __esm({
  "../node_modules/kysely/dist/esm/operation-node/on-node.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    init_and_node();
    init_or_node();
    OnNode = freeze({
      is(node) {
        return node.kind === "OnNode";
      },
      create(filter) {
        return freeze({
          kind: "OnNode",
          on: filter
        });
      },
      cloneWithOperation(onNode, operator, operation) {
        return freeze({
          ...onNode,
          on: operator === "And" ? AndNode.create(onNode.on, operation) : OrNode.create(onNode.on, operation)
        });
      }
    });
  }
});
var JoinNode;
var init_join_node = __esm({
  "../node_modules/kysely/dist/esm/operation-node/join-node.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    init_on_node();
    JoinNode = freeze({
      is(node) {
        return node.kind === "JoinNode";
      },
      create(joinType, table) {
        return freeze({
          kind: "JoinNode",
          joinType,
          table,
          on: void 0
        });
      },
      createWithOn(joinType, table, on) {
        return freeze({
          kind: "JoinNode",
          joinType,
          table,
          on: OnNode.create(on)
        });
      },
      cloneWithOn(joinNode, operation) {
        return freeze({
          ...joinNode,
          on: joinNode.on ? OnNode.cloneWithOperation(joinNode.on, "And", operation) : OnNode.create(operation)
        });
      }
    });
  }
});
var BinaryOperationNode;
var init_binary_operation_node = __esm({
  "../node_modules/kysely/dist/esm/operation-node/binary-operation-node.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    BinaryOperationNode = freeze({
      is(node) {
        return node.kind === "BinaryOperationNode";
      },
      create(leftOperand, operator, rightOperand) {
        return freeze({
          kind: "BinaryOperationNode",
          leftOperand,
          operator,
          rightOperand
        });
      }
    });
  }
});
function isJSONOperator(op) {
  return isString(op) && JSON_OPERATORS.includes(op);
}
__name(isJSONOperator, "isJSONOperator");
var COMPARISON_OPERATORS;
var ARITHMETIC_OPERATORS;
var JSON_OPERATORS;
var BINARY_OPERATORS;
var UNARY_FILTER_OPERATORS;
var UNARY_OPERATORS;
var OPERATORS;
var OperatorNode;
var init_operator_node = __esm({
  "../node_modules/kysely/dist/esm/operation-node/operator-node.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    COMPARISON_OPERATORS = [
      "=",
      "==",
      "!=",
      "<>",
      ">",
      ">=",
      "<",
      "<=",
      "in",
      "not in",
      "is",
      "is not",
      "like",
      "not like",
      "match",
      "ilike",
      "not ilike",
      "@>",
      "<@",
      "^@",
      "&&",
      "?",
      "?&",
      "?|",
      "!<",
      "!>",
      "<=>",
      "!~",
      "~",
      "~*",
      "!~*",
      "@@",
      "@@@",
      "!!",
      "<->",
      "regexp",
      "is distinct from",
      "is not distinct from"
    ];
    ARITHMETIC_OPERATORS = [
      "+",
      "-",
      "*",
      "/",
      "%",
      "^",
      "&",
      "|",
      "#",
      "<<",
      ">>"
    ];
    JSON_OPERATORS = ["->", "->>"];
    BINARY_OPERATORS = [
      ...COMPARISON_OPERATORS,
      ...ARITHMETIC_OPERATORS,
      "&&",
      "||"
    ];
    UNARY_FILTER_OPERATORS = ["exists", "not exists"];
    UNARY_OPERATORS = ["not", "-", ...UNARY_FILTER_OPERATORS];
    OPERATORS = [
      ...BINARY_OPERATORS,
      ...JSON_OPERATORS,
      ...UNARY_OPERATORS,
      "between",
      "between symmetric"
    ];
    OperatorNode = freeze({
      is(node) {
        return node.kind === "OperatorNode";
      },
      create(operator) {
        return freeze({
          kind: "OperatorNode",
          operator
        });
      }
    });
    __name2(isJSONOperator, "isJSONOperator");
  }
});
var ColumnNode;
var init_column_node = __esm({
  "../node_modules/kysely/dist/esm/operation-node/column-node.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    init_identifier_node();
    ColumnNode = freeze({
      is(node) {
        return node.kind === "ColumnNode";
      },
      create(column) {
        return freeze({
          kind: "ColumnNode",
          column: IdentifierNode.create(column)
        });
      }
    });
  }
});
var SelectAllNode;
var init_select_all_node = __esm({
  "../node_modules/kysely/dist/esm/operation-node/select-all-node.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    SelectAllNode = freeze({
      is(node) {
        return node.kind === "SelectAllNode";
      },
      create() {
        return freeze({
          kind: "SelectAllNode"
        });
      }
    });
  }
});
var ReferenceNode;
var init_reference_node = __esm({
  "../node_modules/kysely/dist/esm/operation-node/reference-node.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_select_all_node();
    init_object_utils();
    ReferenceNode = freeze({
      is(node) {
        return node.kind === "ReferenceNode";
      },
      create(column, table) {
        return freeze({
          kind: "ReferenceNode",
          table,
          column
        });
      },
      createSelectAll(table) {
        return freeze({
          kind: "ReferenceNode",
          table,
          column: SelectAllNode.create()
        });
      }
    });
  }
});
function isDynamicReferenceBuilder(obj) {
  return isObject(obj) && isOperationNodeSource(obj) && isString(obj.dynamicReference);
}
__name(isDynamicReferenceBuilder, "isDynamicReferenceBuilder");
var DynamicReferenceBuilder;
var init_dynamic_reference_builder = __esm({
  "../node_modules/kysely/dist/esm/dynamic/dynamic-reference-builder.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_operation_node_source();
    init_reference_parser();
    init_object_utils();
    DynamicReferenceBuilder = class {
      static {
        __name(this, "DynamicReferenceBuilder");
      }
      static {
        __name2(this, "DynamicReferenceBuilder");
      }
      #dynamicReference;
      get dynamicReference() {
        return this.#dynamicReference;
      }
      /**
       * @private
       *
       * This needs to be here just so that the typings work. Without this
       * the generated .d.ts file contains no reference to the type param R
       * which causes this type to be equal to DynamicReferenceBuilder with
       * any R.
       */
      get refType() {
        return void 0;
      }
      constructor(reference) {
        this.#dynamicReference = reference;
      }
      toOperationNode() {
        return parseSimpleReferenceExpression(this.#dynamicReference);
      }
    };
    __name2(isDynamicReferenceBuilder, "isDynamicReferenceBuilder");
  }
});
var OrderByItemNode;
var init_order_by_item_node = __esm({
  "../node_modules/kysely/dist/esm/operation-node/order-by-item-node.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    OrderByItemNode = freeze({
      is(node) {
        return node.kind === "OrderByItemNode";
      },
      create(orderBy, direction) {
        return freeze({
          kind: "OrderByItemNode",
          orderBy,
          direction
        });
      },
      cloneWith(node, props) {
        return freeze({
          ...node,
          ...props
        });
      }
    });
  }
});
var RawNode;
var init_raw_node = __esm({
  "../node_modules/kysely/dist/esm/operation-node/raw-node.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    RawNode = freeze({
      is(node) {
        return node.kind === "RawNode";
      },
      create(sqlFragments, parameters) {
        return freeze({
          kind: "RawNode",
          sqlFragments: freeze(sqlFragments),
          parameters: freeze(parameters)
        });
      },
      createWithSql(sql2) {
        return RawNode.create([sql2], []);
      },
      createWithChild(child) {
        return RawNode.create(["", ""], [child]);
      },
      createWithChildren(children) {
        return RawNode.create(new Array(children.length + 1).fill(""), children);
      }
    });
  }
});
var CollateNode;
var init_collate_node = __esm({
  "../node_modules/kysely/dist/esm/operation-node/collate-node.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    init_identifier_node();
    CollateNode = {
      is(node) {
        return node.kind === "CollateNode";
      },
      create(collation) {
        return freeze({
          kind: "CollateNode",
          collation: IdentifierNode.create(collation)
        });
      }
    };
  }
});
var OrderByItemBuilder;
var init_order_by_item_builder = __esm({
  "../node_modules/kysely/dist/esm/query-builder/order-by-item-builder.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_collate_node();
    init_order_by_item_node();
    init_raw_node();
    init_object_utils();
    OrderByItemBuilder = class _OrderByItemBuilder {
      static {
        __name(this, "_OrderByItemBuilder");
      }
      static {
        __name2(this, "OrderByItemBuilder");
      }
      #props;
      constructor(props) {
        this.#props = freeze(props);
      }
      /**
       * Adds `desc` to the `order by` item.
       *
       * See {@link asc} for the opposite.
       */
      desc() {
        return new _OrderByItemBuilder({
          node: OrderByItemNode.cloneWith(this.#props.node, {
            direction: RawNode.createWithSql("desc")
          })
        });
      }
      /**
       * Adds `asc` to the `order by` item.
       *
       * See {@link desc} for the opposite.
       */
      asc() {
        return new _OrderByItemBuilder({
          node: OrderByItemNode.cloneWith(this.#props.node, {
            direction: RawNode.createWithSql("asc")
          })
        });
      }
      /**
       * Adds `nulls last` to the `order by` item.
       *
       * This is only supported by some dialects like PostgreSQL and SQLite.
       *
       * See {@link nullsFirst} for the opposite.
       */
      nullsLast() {
        return new _OrderByItemBuilder({
          node: OrderByItemNode.cloneWith(this.#props.node, { nulls: "last" })
        });
      }
      /**
       * Adds `nulls first` to the `order by` item.
       *
       * This is only supported by some dialects like PostgreSQL and SQLite.
       *
       * See {@link nullsLast} for the opposite.
       */
      nullsFirst() {
        return new _OrderByItemBuilder({
          node: OrderByItemNode.cloneWith(this.#props.node, { nulls: "first" })
        });
      }
      /**
       * Adds `collate <collationName>` to the `order by` item.
       */
      collate(collation) {
        return new _OrderByItemBuilder({
          node: OrderByItemNode.cloneWith(this.#props.node, {
            collation: CollateNode.create(collation)
          })
        });
      }
      toOperationNode() {
        return this.#props.node;
      }
    };
  }
});
function logOnce(message2) {
  if (LOGGED_MESSAGES.has(message2)) {
    return;
  }
  LOGGED_MESSAGES.add(message2);
  console.log(message2);
}
__name(logOnce, "logOnce");
var LOGGED_MESSAGES;
var init_log_once = __esm({
  "../node_modules/kysely/dist/esm/util/log-once.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    LOGGED_MESSAGES = /* @__PURE__ */ new Set();
    __name2(logOnce, "logOnce");
  }
});
function isOrderByDirection(thing) {
  return thing === "asc" || thing === "desc";
}
__name(isOrderByDirection, "isOrderByDirection");
function parseOrderBy(args) {
  if (args.length === 2) {
    return [parseOrderByItem(args[0], args[1])];
  }
  if (args.length === 1) {
    const [orderBy] = args;
    if (Array.isArray(orderBy)) {
      logOnce("orderBy(array) is deprecated, use multiple orderBy calls instead.");
      return orderBy.map((item) => parseOrderByItem(item));
    }
    return [parseOrderByItem(orderBy)];
  }
  throw new Error(`Invalid number of arguments at order by! expected 1-2, received ${args.length}`);
}
__name(parseOrderBy, "parseOrderBy");
function parseOrderByItem(expr, modifiers) {
  const parsedRef = parseOrderByExpression(expr);
  if (OrderByItemNode.is(parsedRef)) {
    if (modifiers) {
      throw new Error("Cannot specify direction twice!");
    }
    return parsedRef;
  }
  return parseOrderByWithModifiers(parsedRef, modifiers);
}
__name(parseOrderByItem, "parseOrderByItem");
function parseOrderByExpression(expr) {
  if (isExpressionOrFactory(expr)) {
    return parseExpression(expr);
  }
  if (isDynamicReferenceBuilder(expr)) {
    return expr.toOperationNode();
  }
  const [ref, direction] = expr.split(" ");
  if (direction) {
    logOnce("`orderBy('column asc')` is deprecated. Use `orderBy('column', 'asc')` instead.");
    return parseOrderByWithModifiers(parseStringReference(ref), direction);
  }
  return parseStringReference(expr);
}
__name(parseOrderByExpression, "parseOrderByExpression");
function parseOrderByWithModifiers(expr, modifiers) {
  if (typeof modifiers === "string") {
    if (!isOrderByDirection(modifiers)) {
      throw new Error(`Invalid order by direction: ${modifiers}`);
    }
    return OrderByItemNode.create(expr, RawNode.createWithSql(modifiers));
  }
  if (isExpression(modifiers)) {
    logOnce("`orderBy(..., expr)` is deprecated. Use `orderBy(..., 'asc')` or `orderBy(..., (ob) => ...)` instead.");
    return OrderByItemNode.create(expr, modifiers.toOperationNode());
  }
  const node = OrderByItemNode.create(expr);
  if (!modifiers) {
    return node;
  }
  return modifiers(new OrderByItemBuilder({ node })).toOperationNode();
}
__name(parseOrderByWithModifiers, "parseOrderByWithModifiers");
var init_order_by_parser = __esm({
  "../node_modules/kysely/dist/esm/parser/order-by-parser.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_dynamic_reference_builder();
    init_expression();
    init_order_by_item_node();
    init_raw_node();
    init_order_by_item_builder();
    init_log_once();
    init_expression_parser();
    init_reference_parser();
    __name2(isOrderByDirection, "isOrderByDirection");
    __name2(parseOrderBy, "parseOrderBy");
    __name2(parseOrderByItem, "parseOrderByItem");
    __name2(parseOrderByExpression, "parseOrderByExpression");
    __name2(parseOrderByWithModifiers, "parseOrderByWithModifiers");
  }
});
var JSONReferenceNode;
var init_json_reference_node = __esm({
  "../node_modules/kysely/dist/esm/operation-node/json-reference-node.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    JSONReferenceNode = freeze({
      is(node) {
        return node.kind === "JSONReferenceNode";
      },
      create(reference, traversal) {
        return freeze({
          kind: "JSONReferenceNode",
          reference,
          traversal
        });
      },
      cloneWithTraversal(node, traversal) {
        return freeze({
          ...node,
          traversal
        });
      }
    });
  }
});
var JSONOperatorChainNode;
var init_json_operator_chain_node = __esm({
  "../node_modules/kysely/dist/esm/operation-node/json-operator-chain-node.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    JSONOperatorChainNode = freeze({
      is(node) {
        return node.kind === "JSONOperatorChainNode";
      },
      create(operator) {
        return freeze({
          kind: "JSONOperatorChainNode",
          operator,
          values: freeze([])
        });
      },
      cloneWithValue(node, value) {
        return freeze({
          ...node,
          values: freeze([...node.values, value])
        });
      }
    });
  }
});
var JSONPathNode;
var init_json_path_node = __esm({
  "../node_modules/kysely/dist/esm/operation-node/json-path-node.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    JSONPathNode = freeze({
      is(node) {
        return node.kind === "JSONPathNode";
      },
      create(inOperator) {
        return freeze({
          kind: "JSONPathNode",
          inOperator,
          pathLegs: freeze([])
        });
      },
      cloneWithLeg(jsonPathNode, pathLeg) {
        return freeze({
          ...jsonPathNode,
          pathLegs: freeze([...jsonPathNode.pathLegs, pathLeg])
        });
      }
    });
  }
});
function parseSimpleReferenceExpression(exp) {
  if (isString(exp)) {
    return parseStringReference(exp);
  }
  return exp.toOperationNode();
}
__name(parseSimpleReferenceExpression, "parseSimpleReferenceExpression");
function parseReferenceExpressionOrList(arg) {
  if (isReadonlyArray(arg)) {
    return arg.map((it) => parseReferenceExpression(it));
  } else {
    return [parseReferenceExpression(arg)];
  }
}
__name(parseReferenceExpressionOrList, "parseReferenceExpressionOrList");
function parseReferenceExpression(exp) {
  if (isExpressionOrFactory(exp)) {
    return parseExpression(exp);
  }
  return parseSimpleReferenceExpression(exp);
}
__name(parseReferenceExpression, "parseReferenceExpression");
function parseJSONReference(ref, op) {
  const referenceNode = parseStringReference(ref);
  if (isJSONOperator(op)) {
    return JSONReferenceNode.create(referenceNode, JSONOperatorChainNode.create(OperatorNode.create(op)));
  }
  const opWithoutLastChar = op.slice(0, -1);
  if (isJSONOperator(opWithoutLastChar)) {
    return JSONReferenceNode.create(referenceNode, JSONPathNode.create(OperatorNode.create(opWithoutLastChar)));
  }
  throw new Error(`Invalid JSON operator: ${op}`);
}
__name(parseJSONReference, "parseJSONReference");
function parseStringReference(ref) {
  const COLUMN_SEPARATOR = ".";
  if (!ref.includes(COLUMN_SEPARATOR)) {
    return ReferenceNode.create(ColumnNode.create(ref));
  }
  const parts = ref.split(COLUMN_SEPARATOR).map(trim);
  if (parts.length === 3) {
    return parseStringReferenceWithTableAndSchema(parts);
  }
  if (parts.length === 2) {
    return parseStringReferenceWithTable(parts);
  }
  throw new Error(`invalid column reference ${ref}`);
}
__name(parseStringReference, "parseStringReference");
function parseAliasedStringReference(ref) {
  const ALIAS_SEPARATOR = " as ";
  if (ref.includes(ALIAS_SEPARATOR)) {
    const [columnRef, alias] = ref.split(ALIAS_SEPARATOR).map(trim);
    return AliasNode.create(parseStringReference(columnRef), IdentifierNode.create(alias));
  } else {
    return parseStringReference(ref);
  }
}
__name(parseAliasedStringReference, "parseAliasedStringReference");
function parseColumnName(column) {
  return ColumnNode.create(column);
}
__name(parseColumnName, "parseColumnName");
function parseOrderedColumnName(column) {
  const ORDER_SEPARATOR = " ";
  if (column.includes(ORDER_SEPARATOR)) {
    const [columnName, order] = column.split(ORDER_SEPARATOR).map(trim);
    if (!isOrderByDirection(order)) {
      throw new Error(`invalid order direction "${order}" next to "${columnName}"`);
    }
    return parseOrderBy([columnName, order])[0];
  } else {
    return parseColumnName(column);
  }
}
__name(parseOrderedColumnName, "parseOrderedColumnName");
function parseStringReferenceWithTableAndSchema(parts) {
  const [schema2, table, column] = parts;
  return ReferenceNode.create(ColumnNode.create(column), TableNode.createWithSchema(schema2, table));
}
__name(parseStringReferenceWithTableAndSchema, "parseStringReferenceWithTableAndSchema");
function parseStringReferenceWithTable(parts) {
  const [table, column] = parts;
  return ReferenceNode.create(ColumnNode.create(column), TableNode.create(table));
}
__name(parseStringReferenceWithTable, "parseStringReferenceWithTable");
function trim(str) {
  return str.trim();
}
__name(trim, "trim");
var init_reference_parser = __esm({
  "../node_modules/kysely/dist/esm/parser/reference-parser.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_alias_node();
    init_column_node();
    init_reference_node();
    init_table_node();
    init_object_utils();
    init_expression_parser();
    init_identifier_node();
    init_order_by_parser();
    init_operator_node();
    init_json_reference_node();
    init_json_operator_chain_node();
    init_json_path_node();
    __name2(parseSimpleReferenceExpression, "parseSimpleReferenceExpression");
    __name2(parseReferenceExpressionOrList, "parseReferenceExpressionOrList");
    __name2(parseReferenceExpression, "parseReferenceExpression");
    __name2(parseJSONReference, "parseJSONReference");
    __name2(parseStringReference, "parseStringReference");
    __name2(parseAliasedStringReference, "parseAliasedStringReference");
    __name2(parseColumnName, "parseColumnName");
    __name2(parseOrderedColumnName, "parseOrderedColumnName");
    __name2(parseStringReferenceWithTableAndSchema, "parseStringReferenceWithTableAndSchema");
    __name2(parseStringReferenceWithTable, "parseStringReferenceWithTable");
    __name2(trim, "trim");
  }
});
var PrimitiveValueListNode;
var init_primitive_value_list_node = __esm({
  "../node_modules/kysely/dist/esm/operation-node/primitive-value-list-node.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    PrimitiveValueListNode = freeze({
      is(node) {
        return node.kind === "PrimitiveValueListNode";
      },
      create(values) {
        return freeze({
          kind: "PrimitiveValueListNode",
          values: freeze([...values])
        });
      }
    });
  }
});
var ValueListNode;
var init_value_list_node = __esm({
  "../node_modules/kysely/dist/esm/operation-node/value-list-node.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    ValueListNode = freeze({
      is(node) {
        return node.kind === "ValueListNode";
      },
      create(values) {
        return freeze({
          kind: "ValueListNode",
          values: freeze(values)
        });
      }
    });
  }
});
var ValueNode;
var init_value_node = __esm({
  "../node_modules/kysely/dist/esm/operation-node/value-node.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    ValueNode = freeze({
      is(node) {
        return node.kind === "ValueNode";
      },
      create(value) {
        return freeze({
          kind: "ValueNode",
          value
        });
      },
      createImmediate(value) {
        return freeze({
          kind: "ValueNode",
          value,
          immediate: true
        });
      }
    });
  }
});
function parseValueExpressionOrList(arg) {
  if (isReadonlyArray(arg)) {
    return parseValueExpressionList(arg);
  }
  return parseValueExpression(arg);
}
__name(parseValueExpressionOrList, "parseValueExpressionOrList");
function parseValueExpression(exp) {
  if (isExpressionOrFactory(exp)) {
    return parseExpression(exp);
  }
  return ValueNode.create(exp);
}
__name(parseValueExpression, "parseValueExpression");
function isSafeImmediateValue(value) {
  return isNumber(value) || isBoolean(value) || isNull(value);
}
__name(isSafeImmediateValue, "isSafeImmediateValue");
function parseSafeImmediateValue(value) {
  if (!isSafeImmediateValue(value)) {
    throw new Error(`unsafe immediate value ${JSON.stringify(value)}`);
  }
  return ValueNode.createImmediate(value);
}
__name(parseSafeImmediateValue, "parseSafeImmediateValue");
function parseValueExpressionList(arg) {
  if (arg.some(isExpressionOrFactory)) {
    return ValueListNode.create(arg.map((it) => parseValueExpression(it)));
  }
  return PrimitiveValueListNode.create(arg);
}
__name(parseValueExpressionList, "parseValueExpressionList");
var init_value_parser = __esm({
  "../node_modules/kysely/dist/esm/parser/value-parser.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_primitive_value_list_node();
    init_value_list_node();
    init_value_node();
    init_object_utils();
    init_expression_parser();
    __name2(parseValueExpressionOrList, "parseValueExpressionOrList");
    __name2(parseValueExpression, "parseValueExpression");
    __name2(isSafeImmediateValue, "isSafeImmediateValue");
    __name2(parseSafeImmediateValue, "parseSafeImmediateValue");
    __name2(parseValueExpressionList, "parseValueExpressionList");
  }
});
var ParensNode;
var init_parens_node = __esm({
  "../node_modules/kysely/dist/esm/operation-node/parens-node.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    ParensNode = freeze({
      is(node) {
        return node.kind === "ParensNode";
      },
      create(node) {
        return freeze({
          kind: "ParensNode",
          node
        });
      }
    });
  }
});
function parseValueBinaryOperationOrExpression(args) {
  if (args.length === 3) {
    return parseValueBinaryOperation(args[0], args[1], args[2]);
  } else if (args.length === 1) {
    return parseValueExpression(args[0]);
  }
  throw new Error(`invalid arguments: ${JSON.stringify(args)}`);
}
__name(parseValueBinaryOperationOrExpression, "parseValueBinaryOperationOrExpression");
function parseValueBinaryOperation(left, operator, right) {
  if (isIsOperator(operator) && needsIsOperator(right)) {
    return BinaryOperationNode.create(parseReferenceExpression(left), parseOperator(operator), ValueNode.createImmediate(right));
  }
  return BinaryOperationNode.create(parseReferenceExpression(left), parseOperator(operator), parseValueExpressionOrList(right));
}
__name(parseValueBinaryOperation, "parseValueBinaryOperation");
function parseReferentialBinaryOperation(left, operator, right) {
  return BinaryOperationNode.create(parseReferenceExpression(left), parseOperator(operator), parseReferenceExpression(right));
}
__name(parseReferentialBinaryOperation, "parseReferentialBinaryOperation");
function parseFilterObject(obj, combinator) {
  return parseFilterList(Object.entries(obj).filter(([, v]) => !isUndefined(v)).map(([k, v]) => parseValueBinaryOperation(k, needsIsOperator(v) ? "is" : "=", v)), combinator);
}
__name(parseFilterObject, "parseFilterObject");
function parseFilterList(list, combinator, withParens = true) {
  const combine = combinator === "and" ? AndNode.create : OrNode.create;
  if (list.length === 0) {
    return BinaryOperationNode.create(ValueNode.createImmediate(1), OperatorNode.create("="), ValueNode.createImmediate(combinator === "and" ? 1 : 0));
  }
  let node = toOperationNode(list[0]);
  for (let i = 1; i < list.length; ++i) {
    node = combine(node, toOperationNode(list[i]));
  }
  if (list.length > 1 && withParens) {
    return ParensNode.create(node);
  }
  return node;
}
__name(parseFilterList, "parseFilterList");
function isIsOperator(operator) {
  return operator === "is" || operator === "is not";
}
__name(isIsOperator, "isIsOperator");
function needsIsOperator(value) {
  return isNull(value) || isBoolean(value);
}
__name(needsIsOperator, "needsIsOperator");
function parseOperator(operator) {
  if (isString(operator) && OPERATORS.includes(operator)) {
    return OperatorNode.create(operator);
  }
  if (isOperationNodeSource(operator)) {
    return operator.toOperationNode();
  }
  throw new Error(`invalid operator ${JSON.stringify(operator)}`);
}
__name(parseOperator, "parseOperator");
function toOperationNode(nodeOrSource) {
  return isOperationNodeSource(nodeOrSource) ? nodeOrSource.toOperationNode() : nodeOrSource;
}
__name(toOperationNode, "toOperationNode");
var init_binary_operation_parser = __esm({
  "../node_modules/kysely/dist/esm/parser/binary-operation-parser.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_binary_operation_node();
    init_object_utils();
    init_operation_node_source();
    init_operator_node();
    init_reference_parser();
    init_value_parser();
    init_value_node();
    init_and_node();
    init_parens_node();
    init_or_node();
    __name2(parseValueBinaryOperationOrExpression, "parseValueBinaryOperationOrExpression");
    __name2(parseValueBinaryOperation, "parseValueBinaryOperation");
    __name2(parseReferentialBinaryOperation, "parseReferentialBinaryOperation");
    __name2(parseFilterObject, "parseFilterObject");
    __name2(parseFilterList, "parseFilterList");
    __name2(isIsOperator, "isIsOperator");
    __name2(needsIsOperator, "needsIsOperator");
    __name2(parseOperator, "parseOperator");
    __name2(toOperationNode, "toOperationNode");
  }
});
var OrderByNode;
var init_order_by_node = __esm({
  "../node_modules/kysely/dist/esm/operation-node/order-by-node.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    OrderByNode = freeze({
      is(node) {
        return node.kind === "OrderByNode";
      },
      create(items) {
        return freeze({
          kind: "OrderByNode",
          items: freeze([...items])
        });
      },
      cloneWithItems(orderBy, items) {
        return freeze({
          ...orderBy,
          items: freeze([...orderBy.items, ...items])
        });
      }
    });
  }
});
var PartitionByNode;
var init_partition_by_node = __esm({
  "../node_modules/kysely/dist/esm/operation-node/partition-by-node.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    PartitionByNode = freeze({
      is(node) {
        return node.kind === "PartitionByNode";
      },
      create(items) {
        return freeze({
          kind: "PartitionByNode",
          items: freeze(items)
        });
      },
      cloneWithItems(partitionBy, items) {
        return freeze({
          ...partitionBy,
          items: freeze([...partitionBy.items, ...items])
        });
      }
    });
  }
});
var OverNode;
var init_over_node = __esm({
  "../node_modules/kysely/dist/esm/operation-node/over-node.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    init_order_by_node();
    init_partition_by_node();
    OverNode = freeze({
      is(node) {
        return node.kind === "OverNode";
      },
      create() {
        return freeze({
          kind: "OverNode"
        });
      },
      cloneWithOrderByItems(overNode, items) {
        return freeze({
          ...overNode,
          orderBy: overNode.orderBy ? OrderByNode.cloneWithItems(overNode.orderBy, items) : OrderByNode.create(items)
        });
      },
      cloneWithPartitionByItems(overNode, items) {
        return freeze({
          ...overNode,
          partitionBy: overNode.partitionBy ? PartitionByNode.cloneWithItems(overNode.partitionBy, items) : PartitionByNode.create(items)
        });
      }
    });
  }
});
var FromNode;
var init_from_node = __esm({
  "../node_modules/kysely/dist/esm/operation-node/from-node.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    FromNode = freeze({
      is(node) {
        return node.kind === "FromNode";
      },
      create(froms) {
        return freeze({
          kind: "FromNode",
          froms: freeze(froms)
        });
      },
      cloneWithFroms(from, froms) {
        return freeze({
          ...from,
          froms: freeze([...from.froms, ...froms])
        });
      }
    });
  }
});
var GroupByNode;
var init_group_by_node = __esm({
  "../node_modules/kysely/dist/esm/operation-node/group-by-node.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    GroupByNode = freeze({
      is(node) {
        return node.kind === "GroupByNode";
      },
      create(items) {
        return freeze({
          kind: "GroupByNode",
          items: freeze(items)
        });
      },
      cloneWithItems(groupBy, items) {
        return freeze({
          ...groupBy,
          items: freeze([...groupBy.items, ...items])
        });
      }
    });
  }
});
var HavingNode;
var init_having_node = __esm({
  "../node_modules/kysely/dist/esm/operation-node/having-node.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    init_and_node();
    init_or_node();
    HavingNode = freeze({
      is(node) {
        return node.kind === "HavingNode";
      },
      create(filter) {
        return freeze({
          kind: "HavingNode",
          having: filter
        });
      },
      cloneWithOperation(havingNode, operator, operation) {
        return freeze({
          ...havingNode,
          having: operator === "And" ? AndNode.create(havingNode.having, operation) : OrNode.create(havingNode.having, operation)
        });
      }
    });
  }
});
var InsertQueryNode;
var init_insert_query_node = __esm({
  "../node_modules/kysely/dist/esm/operation-node/insert-query-node.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    InsertQueryNode = freeze({
      is(node) {
        return node.kind === "InsertQueryNode";
      },
      create(into, withNode, replace) {
        return freeze({
          kind: "InsertQueryNode",
          into,
          ...withNode && { with: withNode },
          replace
        });
      },
      createWithoutInto() {
        return freeze({
          kind: "InsertQueryNode"
        });
      },
      cloneWith(insertQuery, props) {
        return freeze({
          ...insertQuery,
          ...props
        });
      }
    });
  }
});
var ListNode;
var init_list_node = __esm({
  "../node_modules/kysely/dist/esm/operation-node/list-node.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    ListNode = freeze({
      is(node) {
        return node.kind === "ListNode";
      },
      create(items) {
        return freeze({
          kind: "ListNode",
          items: freeze(items)
        });
      }
    });
  }
});
var UpdateQueryNode;
var init_update_query_node = __esm({
  "../node_modules/kysely/dist/esm/operation-node/update-query-node.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    init_from_node();
    init_list_node();
    UpdateQueryNode = freeze({
      is(node) {
        return node.kind === "UpdateQueryNode";
      },
      create(tables, withNode) {
        return freeze({
          kind: "UpdateQueryNode",
          // For backwards compatibility, use the raw table node when there's only one table
          // and don't rename the property to something like `tables`.
          table: tables.length === 1 ? tables[0] : ListNode.create(tables),
          ...withNode && { with: withNode }
        });
      },
      createWithoutTable() {
        return freeze({
          kind: "UpdateQueryNode"
        });
      },
      cloneWithFromItems(updateQuery, fromItems) {
        return freeze({
          ...updateQuery,
          from: updateQuery.from ? FromNode.cloneWithFroms(updateQuery.from, fromItems) : FromNode.create(fromItems)
        });
      },
      cloneWithUpdates(updateQuery, updates) {
        return freeze({
          ...updateQuery,
          updates: updateQuery.updates ? freeze([...updateQuery.updates, ...updates]) : updates
        });
      },
      cloneWithLimit(updateQuery, limit) {
        return freeze({
          ...updateQuery,
          limit
        });
      }
    });
  }
});
var UsingNode;
var init_using_node = __esm({
  "../node_modules/kysely/dist/esm/operation-node/using-node.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    UsingNode = freeze({
      is(node) {
        return node.kind === "UsingNode";
      },
      create(tables) {
        return freeze({
          kind: "UsingNode",
          tables: freeze(tables)
        });
      },
      cloneWithTables(using, tables) {
        return freeze({
          ...using,
          tables: freeze([...using.tables, ...tables])
        });
      }
    });
  }
});
var DeleteQueryNode;
var init_delete_query_node = __esm({
  "../node_modules/kysely/dist/esm/operation-node/delete-query-node.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    init_from_node();
    init_using_node();
    init_query_node();
    DeleteQueryNode = freeze({
      is(node) {
        return node.kind === "DeleteQueryNode";
      },
      create(fromItems, withNode) {
        return freeze({
          kind: "DeleteQueryNode",
          from: FromNode.create(fromItems),
          ...withNode && { with: withNode }
        });
      },
      // TODO: remove in v0.29
      /**
       * @deprecated Use `QueryNode.cloneWithoutOrderBy` instead.
       */
      cloneWithOrderByItems: /* @__PURE__ */ __name2((node, items) => QueryNode.cloneWithOrderByItems(node, items), "cloneWithOrderByItems"),
      // TODO: remove in v0.29
      /**
       * @deprecated Use `QueryNode.cloneWithoutOrderBy` instead.
       */
      cloneWithoutOrderBy: /* @__PURE__ */ __name2((node) => QueryNode.cloneWithoutOrderBy(node), "cloneWithoutOrderBy"),
      cloneWithLimit(deleteNode, limit) {
        return freeze({
          ...deleteNode,
          limit
        });
      },
      cloneWithoutLimit(deleteNode) {
        return freeze({
          ...deleteNode,
          limit: void 0
        });
      },
      cloneWithUsing(deleteNode, tables) {
        return freeze({
          ...deleteNode,
          using: deleteNode.using !== void 0 ? UsingNode.cloneWithTables(deleteNode.using, tables) : UsingNode.create(tables)
        });
      }
    });
  }
});
var WhereNode;
var init_where_node = __esm({
  "../node_modules/kysely/dist/esm/operation-node/where-node.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    init_and_node();
    init_or_node();
    WhereNode = freeze({
      is(node) {
        return node.kind === "WhereNode";
      },
      create(filter) {
        return freeze({
          kind: "WhereNode",
          where: filter
        });
      },
      cloneWithOperation(whereNode, operator, operation) {
        return freeze({
          ...whereNode,
          where: operator === "And" ? AndNode.create(whereNode.where, operation) : OrNode.create(whereNode.where, operation)
        });
      }
    });
  }
});
var ReturningNode;
var init_returning_node = __esm({
  "../node_modules/kysely/dist/esm/operation-node/returning-node.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    ReturningNode = freeze({
      is(node) {
        return node.kind === "ReturningNode";
      },
      create(selections) {
        return freeze({
          kind: "ReturningNode",
          selections: freeze(selections)
        });
      },
      cloneWithSelections(returning, selections) {
        return freeze({
          ...returning,
          selections: returning.selections ? freeze([...returning.selections, ...selections]) : freeze(selections)
        });
      }
    });
  }
});
var ExplainNode;
var init_explain_node = __esm({
  "../node_modules/kysely/dist/esm/operation-node/explain-node.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    ExplainNode = freeze({
      is(node) {
        return node.kind === "ExplainNode";
      },
      create(format, options) {
        return freeze({
          kind: "ExplainNode",
          format,
          options
        });
      }
    });
  }
});
var WhenNode;
var init_when_node = __esm({
  "../node_modules/kysely/dist/esm/operation-node/when-node.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    WhenNode = freeze({
      is(node) {
        return node.kind === "WhenNode";
      },
      create(condition) {
        return freeze({
          kind: "WhenNode",
          condition
        });
      },
      cloneWithResult(whenNode, result) {
        return freeze({
          ...whenNode,
          result
        });
      }
    });
  }
});
var MergeQueryNode;
var init_merge_query_node = __esm({
  "../node_modules/kysely/dist/esm/operation-node/merge-query-node.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    init_when_node();
    MergeQueryNode = freeze({
      is(node) {
        return node.kind === "MergeQueryNode";
      },
      create(into, withNode) {
        return freeze({
          kind: "MergeQueryNode",
          into,
          ...withNode && { with: withNode }
        });
      },
      cloneWithUsing(mergeNode, using) {
        return freeze({
          ...mergeNode,
          using
        });
      },
      cloneWithWhen(mergeNode, when) {
        return freeze({
          ...mergeNode,
          whens: mergeNode.whens ? freeze([...mergeNode.whens, when]) : freeze([when])
        });
      },
      cloneWithThen(mergeNode, then) {
        return freeze({
          ...mergeNode,
          whens: mergeNode.whens ? freeze([
            ...mergeNode.whens.slice(0, -1),
            WhenNode.cloneWithResult(mergeNode.whens[mergeNode.whens.length - 1], then)
          ]) : void 0
        });
      }
    });
  }
});
var OutputNode;
var init_output_node = __esm({
  "../node_modules/kysely/dist/esm/operation-node/output-node.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    OutputNode = freeze({
      is(node) {
        return node.kind === "OutputNode";
      },
      create(selections) {
        return freeze({
          kind: "OutputNode",
          selections: freeze(selections)
        });
      },
      cloneWithSelections(output, selections) {
        return freeze({
          ...output,
          selections: output.selections ? freeze([...output.selections, ...selections]) : freeze(selections)
        });
      }
    });
  }
});
var QueryNode;
var init_query_node = __esm({
  "../node_modules/kysely/dist/esm/operation-node/query-node.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_insert_query_node();
    init_select_query_node();
    init_update_query_node();
    init_delete_query_node();
    init_where_node();
    init_object_utils();
    init_returning_node();
    init_explain_node();
    init_merge_query_node();
    init_output_node();
    init_order_by_node();
    QueryNode = freeze({
      is(node) {
        return SelectQueryNode.is(node) || InsertQueryNode.is(node) || UpdateQueryNode.is(node) || DeleteQueryNode.is(node) || MergeQueryNode.is(node);
      },
      cloneWithEndModifier(node, modifier) {
        return freeze({
          ...node,
          endModifiers: node.endModifiers ? freeze([...node.endModifiers, modifier]) : freeze([modifier])
        });
      },
      cloneWithWhere(node, operation) {
        return freeze({
          ...node,
          where: node.where ? WhereNode.cloneWithOperation(node.where, "And", operation) : WhereNode.create(operation)
        });
      },
      cloneWithJoin(node, join) {
        return freeze({
          ...node,
          joins: node.joins ? freeze([...node.joins, join]) : freeze([join])
        });
      },
      cloneWithReturning(node, selections) {
        return freeze({
          ...node,
          returning: node.returning ? ReturningNode.cloneWithSelections(node.returning, selections) : ReturningNode.create(selections)
        });
      },
      cloneWithoutReturning(node) {
        return freeze({
          ...node,
          returning: void 0
        });
      },
      cloneWithoutWhere(node) {
        return freeze({
          ...node,
          where: void 0
        });
      },
      cloneWithExplain(node, format, options) {
        return freeze({
          ...node,
          explain: ExplainNode.create(format, options?.toOperationNode())
        });
      },
      cloneWithTop(node, top) {
        return freeze({
          ...node,
          top
        });
      },
      cloneWithOutput(node, selections) {
        return freeze({
          ...node,
          output: node.output ? OutputNode.cloneWithSelections(node.output, selections) : OutputNode.create(selections)
        });
      },
      cloneWithOrderByItems(node, items) {
        return freeze({
          ...node,
          orderBy: node.orderBy ? OrderByNode.cloneWithItems(node.orderBy, items) : OrderByNode.create(items)
        });
      },
      cloneWithoutOrderBy(node) {
        return freeze({
          ...node,
          orderBy: void 0
        });
      }
    });
  }
});
var SelectQueryNode;
var init_select_query_node = __esm({
  "../node_modules/kysely/dist/esm/operation-node/select-query-node.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    init_from_node();
    init_group_by_node();
    init_having_node();
    init_query_node();
    SelectQueryNode = freeze({
      is(node) {
        return node.kind === "SelectQueryNode";
      },
      create(withNode) {
        return freeze({
          kind: "SelectQueryNode",
          ...withNode && { with: withNode }
        });
      },
      createFrom(fromItems, withNode) {
        return freeze({
          kind: "SelectQueryNode",
          from: FromNode.create(fromItems),
          ...withNode && { with: withNode }
        });
      },
      cloneWithSelections(select, selections) {
        return freeze({
          ...select,
          selections: select.selections ? freeze([...select.selections, ...selections]) : freeze(selections)
        });
      },
      cloneWithDistinctOn(select, expressions) {
        return freeze({
          ...select,
          distinctOn: select.distinctOn ? freeze([...select.distinctOn, ...expressions]) : freeze(expressions)
        });
      },
      cloneWithFrontModifier(select, modifier) {
        return freeze({
          ...select,
          frontModifiers: select.frontModifiers ? freeze([...select.frontModifiers, modifier]) : freeze([modifier])
        });
      },
      // TODO: remove in v0.29
      /**
       * @deprecated Use `QueryNode.cloneWithoutOrderBy` instead.
       */
      cloneWithOrderByItems: /* @__PURE__ */ __name2((node, items) => QueryNode.cloneWithOrderByItems(node, items), "cloneWithOrderByItems"),
      cloneWithGroupByItems(selectNode, items) {
        return freeze({
          ...selectNode,
          groupBy: selectNode.groupBy ? GroupByNode.cloneWithItems(selectNode.groupBy, items) : GroupByNode.create(items)
        });
      },
      cloneWithLimit(selectNode, limit) {
        return freeze({
          ...selectNode,
          limit
        });
      },
      cloneWithOffset(selectNode, offset) {
        return freeze({
          ...selectNode,
          offset
        });
      },
      cloneWithFetch(selectNode, fetch2) {
        return freeze({
          ...selectNode,
          fetch: fetch2
        });
      },
      cloneWithHaving(selectNode, operation) {
        return freeze({
          ...selectNode,
          having: selectNode.having ? HavingNode.cloneWithOperation(selectNode.having, "And", operation) : HavingNode.create(operation)
        });
      },
      cloneWithSetOperations(selectNode, setOperations) {
        return freeze({
          ...selectNode,
          setOperations: selectNode.setOperations ? freeze([...selectNode.setOperations, ...setOperations]) : freeze([...setOperations])
        });
      },
      cloneWithoutSelections(select) {
        return freeze({
          ...select,
          selections: []
        });
      },
      cloneWithoutLimit(select) {
        return freeze({
          ...select,
          limit: void 0
        });
      },
      cloneWithoutOffset(select) {
        return freeze({
          ...select,
          offset: void 0
        });
      },
      // TODO: remove in v0.29
      /**
       * @deprecated Use `QueryNode.cloneWithoutOrderBy` instead.
       */
      cloneWithoutOrderBy: /* @__PURE__ */ __name2((node) => QueryNode.cloneWithoutOrderBy(node), "cloneWithoutOrderBy"),
      cloneWithoutGroupBy(select) {
        return freeze({
          ...select,
          groupBy: void 0
        });
      }
    });
  }
});
var JoinBuilder;
var init_join_builder = __esm({
  "../node_modules/kysely/dist/esm/query-builder/join-builder.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_join_node();
    init_raw_node();
    init_binary_operation_parser();
    init_object_utils();
    JoinBuilder = class _JoinBuilder {
      static {
        __name(this, "_JoinBuilder");
      }
      static {
        __name2(this, "JoinBuilder");
      }
      #props;
      constructor(props) {
        this.#props = freeze(props);
      }
      on(...args) {
        return new _JoinBuilder({
          ...this.#props,
          joinNode: JoinNode.cloneWithOn(this.#props.joinNode, parseValueBinaryOperationOrExpression(args))
        });
      }
      /**
       * Just like {@link WhereInterface.whereRef} but adds an item to the join's
       * `on` clause instead.
       *
       * See {@link WhereInterface.whereRef} for documentation and examples.
       */
      onRef(lhs, op, rhs) {
        return new _JoinBuilder({
          ...this.#props,
          joinNode: JoinNode.cloneWithOn(this.#props.joinNode, parseReferentialBinaryOperation(lhs, op, rhs))
        });
      }
      /**
       * Adds `on true`.
       */
      onTrue() {
        return new _JoinBuilder({
          ...this.#props,
          joinNode: JoinNode.cloneWithOn(this.#props.joinNode, RawNode.createWithSql("true"))
        });
      }
      /**
       * Simply calls the provided function passing `this` as the only argument. `$call` returns
       * what the provided function returns.
       */
      $call(func) {
        return func(this);
      }
      toOperationNode() {
        return this.#props.joinNode;
      }
    };
  }
});
var PartitionByItemNode;
var init_partition_by_item_node = __esm({
  "../node_modules/kysely/dist/esm/operation-node/partition-by-item-node.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    PartitionByItemNode = freeze({
      is(node) {
        return node.kind === "PartitionByItemNode";
      },
      create(partitionBy) {
        return freeze({
          kind: "PartitionByItemNode",
          partitionBy
        });
      }
    });
  }
});
function parsePartitionBy(partitionBy) {
  return parseReferenceExpressionOrList(partitionBy).map(PartitionByItemNode.create);
}
__name(parsePartitionBy, "parsePartitionBy");
var init_partition_by_parser = __esm({
  "../node_modules/kysely/dist/esm/parser/partition-by-parser.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_partition_by_item_node();
    init_reference_parser();
    __name2(parsePartitionBy, "parsePartitionBy");
  }
});
var OverBuilder;
var init_over_builder = __esm({
  "../node_modules/kysely/dist/esm/query-builder/over-builder.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_over_node();
    init_query_node();
    init_order_by_parser();
    init_partition_by_parser();
    init_object_utils();
    OverBuilder = class _OverBuilder {
      static {
        __name(this, "_OverBuilder");
      }
      static {
        __name2(this, "OverBuilder");
      }
      #props;
      constructor(props) {
        this.#props = freeze(props);
      }
      orderBy(...args) {
        return new _OverBuilder({
          overNode: OverNode.cloneWithOrderByItems(this.#props.overNode, parseOrderBy(args))
        });
      }
      clearOrderBy() {
        return new _OverBuilder({
          overNode: QueryNode.cloneWithoutOrderBy(this.#props.overNode)
        });
      }
      partitionBy(partitionBy) {
        return new _OverBuilder({
          overNode: OverNode.cloneWithPartitionByItems(this.#props.overNode, parsePartitionBy(partitionBy))
        });
      }
      /**
       * Simply calls the provided function passing `this` as the only argument. `$call` returns
       * what the provided function returns.
       */
      $call(func) {
        return func(this);
      }
      toOperationNode() {
        return this.#props.overNode;
      }
    };
  }
});
var SelectionNode;
var init_selection_node = __esm({
  "../node_modules/kysely/dist/esm/operation-node/selection-node.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    init_reference_node();
    init_select_all_node();
    SelectionNode = freeze({
      is(node) {
        return node.kind === "SelectionNode";
      },
      create(selection) {
        return freeze({
          kind: "SelectionNode",
          selection
        });
      },
      createSelectAll() {
        return freeze({
          kind: "SelectionNode",
          selection: SelectAllNode.create()
        });
      },
      createSelectAllFromTable(table) {
        return freeze({
          kind: "SelectionNode",
          selection: ReferenceNode.createSelectAll(table)
        });
      }
    });
  }
});
function parseSelectArg(selection) {
  if (isFunction(selection)) {
    return parseSelectArg(selection(expressionBuilder()));
  } else if (isReadonlyArray(selection)) {
    return selection.map((it) => parseSelectExpression(it));
  } else {
    return [parseSelectExpression(selection)];
  }
}
__name(parseSelectArg, "parseSelectArg");
function parseSelectExpression(selection) {
  if (isString(selection)) {
    return SelectionNode.create(parseAliasedStringReference(selection));
  } else if (isDynamicReferenceBuilder(selection)) {
    return SelectionNode.create(selection.toOperationNode());
  } else {
    return SelectionNode.create(parseAliasedExpression(selection));
  }
}
__name(parseSelectExpression, "parseSelectExpression");
function parseSelectAll(table) {
  if (!table) {
    return [SelectionNode.createSelectAll()];
  } else if (Array.isArray(table)) {
    return table.map(parseSelectAllArg);
  } else {
    return [parseSelectAllArg(table)];
  }
}
__name(parseSelectAll, "parseSelectAll");
function parseSelectAllArg(table) {
  if (isString(table)) {
    return SelectionNode.createSelectAllFromTable(parseTable(table));
  }
  throw new Error(`invalid value selectAll expression: ${JSON.stringify(table)}`);
}
__name(parseSelectAllArg, "parseSelectAllArg");
var init_select_parser = __esm({
  "../node_modules/kysely/dist/esm/parser/select-parser.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    init_selection_node();
    init_reference_parser();
    init_dynamic_reference_builder();
    init_expression_parser();
    init_table_parser();
    init_expression_builder();
    __name2(parseSelectArg, "parseSelectArg");
    __name2(parseSelectExpression, "parseSelectExpression");
    __name2(parseSelectAll, "parseSelectAll");
    __name2(parseSelectAllArg, "parseSelectAllArg");
  }
});
var ValuesNode;
var init_values_node = __esm({
  "../node_modules/kysely/dist/esm/operation-node/values-node.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    ValuesNode = freeze({
      is(node) {
        return node.kind === "ValuesNode";
      },
      create(values) {
        return freeze({
          kind: "ValuesNode",
          values: freeze(values)
        });
      }
    });
  }
});
var DefaultInsertValueNode;
var init_default_insert_value_node = __esm({
  "../node_modules/kysely/dist/esm/operation-node/default-insert-value-node.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    DefaultInsertValueNode = freeze({
      is(node) {
        return node.kind === "DefaultInsertValueNode";
      },
      create() {
        return freeze({
          kind: "DefaultInsertValueNode"
        });
      }
    });
  }
});
function parseInsertExpression(arg) {
  const objectOrList = isFunction(arg) ? arg(expressionBuilder()) : arg;
  const list = isReadonlyArray(objectOrList) ? objectOrList : freeze([objectOrList]);
  return parseInsertColumnsAndValues(list);
}
__name(parseInsertExpression, "parseInsertExpression");
function parseInsertColumnsAndValues(rows) {
  const columns = parseColumnNamesAndIndexes(rows);
  return [
    freeze([...columns.keys()].map(ColumnNode.create)),
    ValuesNode.create(rows.map((row) => parseRowValues(row, columns)))
  ];
}
__name(parseInsertColumnsAndValues, "parseInsertColumnsAndValues");
function parseColumnNamesAndIndexes(rows) {
  const columns = /* @__PURE__ */ new Map();
  for (const row of rows) {
    const cols = Object.keys(row);
    for (const col of cols) {
      if (!columns.has(col) && row[col] !== void 0) {
        columns.set(col, columns.size);
      }
    }
  }
  return columns;
}
__name(parseColumnNamesAndIndexes, "parseColumnNamesAndIndexes");
function parseRowValues(row, columns) {
  const rowColumns = Object.keys(row);
  const rowValues = Array.from({
    length: columns.size
  });
  let hasUndefinedOrComplexColumns = false;
  let indexedRowColumns = rowColumns.length;
  for (const col of rowColumns) {
    const columnIdx = columns.get(col);
    if (isUndefined(columnIdx)) {
      indexedRowColumns--;
      continue;
    }
    const value = row[col];
    if (isUndefined(value) || isExpressionOrFactory(value)) {
      hasUndefinedOrComplexColumns = true;
    }
    rowValues[columnIdx] = value;
  }
  const hasMissingColumns = indexedRowColumns < columns.size;
  if (hasMissingColumns || hasUndefinedOrComplexColumns) {
    const defaultValue = DefaultInsertValueNode.create();
    return ValueListNode.create(rowValues.map((it) => isUndefined(it) ? defaultValue : parseValueExpression(it)));
  }
  return PrimitiveValueListNode.create(rowValues);
}
__name(parseRowValues, "parseRowValues");
var init_insert_values_parser = __esm({
  "../node_modules/kysely/dist/esm/parser/insert-values-parser.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_column_node();
    init_primitive_value_list_node();
    init_value_list_node();
    init_object_utils();
    init_value_parser();
    init_values_node();
    init_expression_parser();
    init_default_insert_value_node();
    init_expression_builder();
    __name2(parseInsertExpression, "parseInsertExpression");
    __name2(parseInsertColumnsAndValues, "parseInsertColumnsAndValues");
    __name2(parseColumnNamesAndIndexes, "parseColumnNamesAndIndexes");
    __name2(parseRowValues, "parseRowValues");
  }
});
var ColumnUpdateNode;
var init_column_update_node = __esm({
  "../node_modules/kysely/dist/esm/operation-node/column-update-node.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    ColumnUpdateNode = freeze({
      is(node) {
        return node.kind === "ColumnUpdateNode";
      },
      create(column, value) {
        return freeze({
          kind: "ColumnUpdateNode",
          column,
          value
        });
      }
    });
  }
});
function parseUpdate(...args) {
  if (args.length === 2) {
    return [
      ColumnUpdateNode.create(parseReferenceExpression(args[0]), parseValueExpression(args[1]))
    ];
  }
  return parseUpdateObjectExpression(args[0]);
}
__name(parseUpdate, "parseUpdate");
function parseUpdateObjectExpression(update) {
  const updateObj = isFunction(update) ? update(expressionBuilder()) : update;
  return Object.entries(updateObj).filter(([_, value]) => value !== void 0).map(([key, value]) => {
    return ColumnUpdateNode.create(ColumnNode.create(key), parseValueExpression(value));
  });
}
__name(parseUpdateObjectExpression, "parseUpdateObjectExpression");
var init_update_set_parser = __esm({
  "../node_modules/kysely/dist/esm/parser/update-set-parser.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_column_node();
    init_column_update_node();
    init_expression_builder();
    init_object_utils();
    init_value_parser();
    init_reference_parser();
    __name2(parseUpdate, "parseUpdate");
    __name2(parseUpdateObjectExpression, "parseUpdateObjectExpression");
  }
});
var OnDuplicateKeyNode;
var init_on_duplicate_key_node = __esm({
  "../node_modules/kysely/dist/esm/operation-node/on-duplicate-key-node.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    OnDuplicateKeyNode = freeze({
      is(node) {
        return node.kind === "OnDuplicateKeyNode";
      },
      create(updates) {
        return freeze({
          kind: "OnDuplicateKeyNode",
          updates
        });
      }
    });
  }
});
var InsertResult;
var init_insert_result = __esm({
  "../node_modules/kysely/dist/esm/query-builder/insert-result.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    InsertResult = class {
      static {
        __name(this, "InsertResult");
      }
      static {
        __name2(this, "InsertResult");
      }
      /**
       * The auto incrementing primary key of the inserted row.
       *
       * This property can be undefined when the query contains an `on conflict`
       * clause that makes the query succeed even when nothing gets inserted.
       *
       * This property is always undefined on dialects like PostgreSQL that
       * don't return the inserted id by default. On those dialects you need
       * to use the {@link ReturningInterface.returning | returning} method.
       */
      insertId;
      /**
       * Affected rows count.
       */
      numInsertedOrUpdatedRows;
      constructor(insertId, numInsertedOrUpdatedRows) {
        this.insertId = insertId;
        this.numInsertedOrUpdatedRows = numInsertedOrUpdatedRows;
      }
    };
  }
});
function isNoResultErrorConstructor(fn) {
  return Object.prototype.hasOwnProperty.call(fn, "prototype");
}
__name(isNoResultErrorConstructor, "isNoResultErrorConstructor");
var NoResultError;
var init_no_result_error = __esm({
  "../node_modules/kysely/dist/esm/query-builder/no-result-error.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    NoResultError = class extends Error {
      static {
        __name(this, "NoResultError");
      }
      static {
        __name2(this, "NoResultError");
      }
      /**
       * The operation node tree of the query that was executed.
       */
      node;
      constructor(node) {
        super("no result");
        this.node = node;
      }
    };
    __name2(isNoResultErrorConstructor, "isNoResultErrorConstructor");
  }
});
var OnConflictNode;
var init_on_conflict_node = __esm({
  "../node_modules/kysely/dist/esm/operation-node/on-conflict-node.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    init_where_node();
    OnConflictNode = freeze({
      is(node) {
        return node.kind === "OnConflictNode";
      },
      create() {
        return freeze({
          kind: "OnConflictNode"
        });
      },
      cloneWith(node, props) {
        return freeze({
          ...node,
          ...props
        });
      },
      cloneWithIndexWhere(node, operation) {
        return freeze({
          ...node,
          indexWhere: node.indexWhere ? WhereNode.cloneWithOperation(node.indexWhere, "And", operation) : WhereNode.create(operation)
        });
      },
      cloneWithIndexOrWhere(node, operation) {
        return freeze({
          ...node,
          indexWhere: node.indexWhere ? WhereNode.cloneWithOperation(node.indexWhere, "Or", operation) : WhereNode.create(operation)
        });
      },
      cloneWithUpdateWhere(node, operation) {
        return freeze({
          ...node,
          updateWhere: node.updateWhere ? WhereNode.cloneWithOperation(node.updateWhere, "And", operation) : WhereNode.create(operation)
        });
      },
      cloneWithUpdateOrWhere(node, operation) {
        return freeze({
          ...node,
          updateWhere: node.updateWhere ? WhereNode.cloneWithOperation(node.updateWhere, "Or", operation) : WhereNode.create(operation)
        });
      },
      cloneWithoutIndexWhere(node) {
        return freeze({
          ...node,
          indexWhere: void 0
        });
      },
      cloneWithoutUpdateWhere(node) {
        return freeze({
          ...node,
          updateWhere: void 0
        });
      }
    });
  }
});
var OnConflictBuilder;
var OnConflictDoNothingBuilder;
var OnConflictUpdateBuilder;
var init_on_conflict_builder = __esm({
  "../node_modules/kysely/dist/esm/query-builder/on-conflict-builder.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_column_node();
    init_identifier_node();
    init_on_conflict_node();
    init_binary_operation_parser();
    init_update_set_parser();
    init_object_utils();
    OnConflictBuilder = class _OnConflictBuilder {
      static {
        __name(this, "_OnConflictBuilder");
      }
      static {
        __name2(this, "OnConflictBuilder");
      }
      #props;
      constructor(props) {
        this.#props = freeze(props);
      }
      /**
       * Specify a single column as the conflict target.
       *
       * Also see the {@link columns}, {@link constraint} and {@link expression}
       * methods for alternative ways to specify the conflict target.
       */
      column(column) {
        const columnNode = ColumnNode.create(column);
        return new _OnConflictBuilder({
          ...this.#props,
          onConflictNode: OnConflictNode.cloneWith(this.#props.onConflictNode, {
            columns: this.#props.onConflictNode.columns ? freeze([...this.#props.onConflictNode.columns, columnNode]) : freeze([columnNode])
          })
        });
      }
      /**
       * Specify a list of columns as the conflict target.
       *
       * Also see the {@link column}, {@link constraint} and {@link expression}
       * methods for alternative ways to specify the conflict target.
       */
      columns(columns) {
        const columnNodes = columns.map(ColumnNode.create);
        return new _OnConflictBuilder({
          ...this.#props,
          onConflictNode: OnConflictNode.cloneWith(this.#props.onConflictNode, {
            columns: this.#props.onConflictNode.columns ? freeze([...this.#props.onConflictNode.columns, ...columnNodes]) : freeze(columnNodes)
          })
        });
      }
      /**
       * Specify a specific constraint by name as the conflict target.
       *
       * Also see the {@link column}, {@link columns} and {@link expression}
       * methods for alternative ways to specify the conflict target.
       */
      constraint(constraintName) {
        return new _OnConflictBuilder({
          ...this.#props,
          onConflictNode: OnConflictNode.cloneWith(this.#props.onConflictNode, {
            constraint: IdentifierNode.create(constraintName)
          })
        });
      }
      /**
       * Specify an expression as the conflict target.
       *
       * This can be used if the unique index is an expression index.
       *
       * Also see the {@link column}, {@link columns} and {@link constraint}
       * methods for alternative ways to specify the conflict target.
       */
      expression(expression) {
        return new _OnConflictBuilder({
          ...this.#props,
          onConflictNode: OnConflictNode.cloneWith(this.#props.onConflictNode, {
            indexExpression: expression.toOperationNode()
          })
        });
      }
      where(...args) {
        return new _OnConflictBuilder({
          ...this.#props,
          onConflictNode: OnConflictNode.cloneWithIndexWhere(this.#props.onConflictNode, parseValueBinaryOperationOrExpression(args))
        });
      }
      whereRef(lhs, op, rhs) {
        return new _OnConflictBuilder({
          ...this.#props,
          onConflictNode: OnConflictNode.cloneWithIndexWhere(this.#props.onConflictNode, parseReferentialBinaryOperation(lhs, op, rhs))
        });
      }
      clearWhere() {
        return new _OnConflictBuilder({
          ...this.#props,
          onConflictNode: OnConflictNode.cloneWithoutIndexWhere(this.#props.onConflictNode)
        });
      }
      /**
       * Adds the "do nothing" conflict action.
       *
       * ### Examples
       *
       * ```ts
       * const id = 1
       * const first_name = 'John'
       *
       * await db
       *   .insertInto('person')
       *   .values({ first_name, id })
       *   .onConflict((oc) => oc
       *     .column('id')
       *     .doNothing()
       *   )
       *   .execute()
       * ```
       *
       * The generated SQL (PostgreSQL):
       *
       * ```sql
       * insert into "person" ("first_name", "id")
       * values ($1, $2)
       * on conflict ("id") do nothing
       * ```
       */
      doNothing() {
        return new OnConflictDoNothingBuilder({
          ...this.#props,
          onConflictNode: OnConflictNode.cloneWith(this.#props.onConflictNode, {
            doNothing: true
          })
        });
      }
      /**
       * Adds the "do update set" conflict action.
       *
       * ### Examples
       *
       * ```ts
       * const id = 1
       * const first_name = 'John'
       *
       * await db
       *   .insertInto('person')
       *   .values({ first_name, id })
       *   .onConflict((oc) => oc
       *     .column('id')
       *     .doUpdateSet({ first_name })
       *   )
       *   .execute()
       * ```
       *
       * The generated SQL (PostgreSQL):
       *
       * ```sql
       * insert into "person" ("first_name", "id")
       * values ($1, $2)
       * on conflict ("id")
       * do update set "first_name" = $3
       * ```
       *
       * In the next example we use the `ref` method to reference
       * columns of the virtual table `excluded` in a type-safe way
       * to create an upsert operation:
       *
       * ```ts
       * import type { NewPerson } from 'type-editor' // imaginary module
       *
       * async function upsertPerson(person: NewPerson): Promise<void> {
       *   await db.insertInto('person')
       *     .values(person)
       *     .onConflict((oc) => oc
       *       .column('id')
       *       .doUpdateSet((eb) => ({
       *         first_name: eb.ref('excluded.first_name'),
       *         last_name: eb.ref('excluded.last_name')
       *       })
       *     )
       *   )
       *   .execute()
       * }
       * ```
       *
       * The generated SQL (PostgreSQL):
       *
       * ```sql
       * insert into "person" ("first_name", "last_name")
       * values ($1, $2)
       * on conflict ("id")
       * do update set
       *  "first_name" = excluded."first_name",
       *  "last_name" = excluded."last_name"
       * ```
       */
      doUpdateSet(update) {
        return new OnConflictUpdateBuilder({
          ...this.#props,
          onConflictNode: OnConflictNode.cloneWith(this.#props.onConflictNode, {
            updates: parseUpdateObjectExpression(update)
          })
        });
      }
      /**
       * Simply calls the provided function passing `this` as the only argument. `$call` returns
       * what the provided function returns.
       */
      $call(func) {
        return func(this);
      }
    };
    OnConflictDoNothingBuilder = class {
      static {
        __name(this, "OnConflictDoNothingBuilder");
      }
      static {
        __name2(this, "OnConflictDoNothingBuilder");
      }
      #props;
      constructor(props) {
        this.#props = freeze(props);
      }
      toOperationNode() {
        return this.#props.onConflictNode;
      }
    };
    OnConflictUpdateBuilder = class _OnConflictUpdateBuilder {
      static {
        __name(this, "_OnConflictUpdateBuilder");
      }
      static {
        __name2(this, "OnConflictUpdateBuilder");
      }
      #props;
      constructor(props) {
        this.#props = freeze(props);
      }
      where(...args) {
        return new _OnConflictUpdateBuilder({
          ...this.#props,
          onConflictNode: OnConflictNode.cloneWithUpdateWhere(this.#props.onConflictNode, parseValueBinaryOperationOrExpression(args))
        });
      }
      /**
       * Specify a where condition for the update operation.
       *
       * See {@link WhereInterface.whereRef} for more info.
       */
      whereRef(lhs, op, rhs) {
        return new _OnConflictUpdateBuilder({
          ...this.#props,
          onConflictNode: OnConflictNode.cloneWithUpdateWhere(this.#props.onConflictNode, parseReferentialBinaryOperation(lhs, op, rhs))
        });
      }
      clearWhere() {
        return new _OnConflictUpdateBuilder({
          ...this.#props,
          onConflictNode: OnConflictNode.cloneWithoutUpdateWhere(this.#props.onConflictNode)
        });
      }
      /**
       * Simply calls the provided function passing `this` as the only argument. `$call` returns
       * what the provided function returns.
       */
      $call(func) {
        return func(this);
      }
      toOperationNode() {
        return this.#props.onConflictNode;
      }
    };
  }
});
var TopNode;
var init_top_node = __esm({
  "../node_modules/kysely/dist/esm/operation-node/top-node.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    TopNode = freeze({
      is(node) {
        return node.kind === "TopNode";
      },
      create(expression, modifiers) {
        return freeze({
          kind: "TopNode",
          expression,
          modifiers
        });
      }
    });
  }
});
function parseTop(expression, modifiers) {
  if (!isNumber(expression) && !isBigInt(expression)) {
    throw new Error(`Invalid top expression: ${expression}`);
  }
  if (!isUndefined(modifiers) && !isTopModifiers(modifiers)) {
    throw new Error(`Invalid top modifiers: ${modifiers}`);
  }
  return TopNode.create(expression, modifiers);
}
__name(parseTop, "parseTop");
function isTopModifiers(modifiers) {
  return modifiers === "percent" || modifiers === "with ties" || modifiers === "percent with ties";
}
__name(isTopModifiers, "isTopModifiers");
var init_top_parser = __esm({
  "../node_modules/kysely/dist/esm/parser/top-parser.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_top_node();
    init_object_utils();
    __name2(parseTop, "parseTop");
    __name2(isTopModifiers, "isTopModifiers");
  }
});
var OrActionNode;
var init_or_action_node = __esm({
  "../node_modules/kysely/dist/esm/operation-node/or-action-node.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    OrActionNode = freeze({
      is(node) {
        return node.kind === "OrActionNode";
      },
      create(action) {
        return freeze({
          kind: "OrActionNode",
          action
        });
      }
    });
  }
});
var InsertQueryBuilder;
var init_insert_query_builder = __esm({
  "../node_modules/kysely/dist/esm/query-builder/insert-query-builder.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_select_parser();
    init_insert_values_parser();
    init_insert_query_node();
    init_query_node();
    init_update_set_parser();
    init_object_utils();
    init_on_duplicate_key_node();
    init_insert_result();
    init_no_result_error();
    init_expression_parser();
    init_column_node();
    init_on_conflict_builder();
    init_on_conflict_node();
    init_top_parser();
    init_or_action_node();
    InsertQueryBuilder = class _InsertQueryBuilder {
      static {
        __name(this, "_InsertQueryBuilder");
      }
      static {
        __name2(this, "InsertQueryBuilder");
      }
      #props;
      constructor(props) {
        this.#props = freeze(props);
      }
      /**
       * Sets the values to insert for an {@link Kysely.insertInto | insert} query.
       *
       * This method takes an object whose keys are column names and values are
       * values to insert. In addition to the column's type, the values can be
       * raw {@link sql} snippets or select queries.
       *
       * You must provide all fields you haven't explicitly marked as nullable
       * or optional using {@link Generated} or {@link ColumnType}.
       *
       * The return value of an `insert` query is an instance of {@link InsertResult}. The
       * {@link InsertResult.insertId | insertId} field holds the auto incremented primary
       * key if the database returned one.
       *
       * On PostgreSQL and some other dialects, you need to call `returning` to get
       * something out of the query.
       *
       * Also see the {@link expression} method for inserting the result of a select
       * query or any other expression.
       *
       * ### Examples
       *
       * <!-- siteExample("insert", "Single row", 10) -->
       *
       * Insert a single row:
       *
       * ```ts
       * const result = await db
       *   .insertInto('person')
       *   .values({
       *     first_name: 'Jennifer',
       *     last_name: 'Aniston',
       *     age: 40
       *   })
       *   .executeTakeFirst()
       *
       * // `insertId` is only available on dialects that
       * // automatically return the id of the inserted row
       * // such as MySQL and SQLite. On PostgreSQL, for example,
       * // you need to add a `returning` clause to the query to
       * // get anything out. See the "returning data" example.
       * console.log(result.insertId)
       * ```
       *
       * The generated SQL (MySQL):
       *
       * ```sql
       * insert into `person` (`first_name`, `last_name`, `age`) values (?, ?, ?)
       * ```
       *
       * <!-- siteExample("insert", "Multiple rows", 20) -->
       *
       * On dialects that support it (for example PostgreSQL) you can insert multiple
       * rows by providing an array. Note that the return value is once again very
       * dialect-specific. Some databases may only return the id of the *last* inserted
       * row and some return nothing at all unless you call `returning`.
       *
       * ```ts
       * await db
       *   .insertInto('person')
       *   .values([{
       *     first_name: 'Jennifer',
       *     last_name: 'Aniston',
       *     age: 40,
       *   }, {
       *     first_name: 'Arnold',
       *     last_name: 'Schwarzenegger',
       *     age: 70,
       *   }])
       *   .execute()
       * ```
       *
       * The generated SQL (PostgreSQL):
       *
       * ```sql
       * insert into "person" ("first_name", "last_name", "age") values (($1, $2, $3), ($4, $5, $6))
       * ```
       *
       * <!-- siteExample("insert", "Returning data", 30) -->
       *
       * On supported dialects like PostgreSQL you need to chain `returning` to the query to get
       * the inserted row's columns (or any other expression) as the return value. `returning`
       * works just like `select`. Refer to `select` method's examples and documentation for
       * more info.
       *
       * ```ts
       * const result = await db
       *   .insertInto('person')
       *   .values({
       *     first_name: 'Jennifer',
       *     last_name: 'Aniston',
       *     age: 40,
       *   })
       *   .returning(['id', 'first_name as name'])
       *   .executeTakeFirstOrThrow()
       * ```
       *
       * The generated SQL (PostgreSQL):
       *
       * ```sql
       * insert into "person" ("first_name", "last_name", "age") values ($1, $2, $3) returning "id", "first_name" as "name"
       * ```
       *
       * <!-- siteExample("insert", "Complex values", 40) -->
       *
       * In addition to primitives, the values can also be arbitrary expressions.
       * You can build the expressions by using a callback and calling the methods
       * on the expression builder passed to it:
       *
       * ```ts
       * import { sql } from 'kysely'
       *
       * const ani = "Ani"
       * const ston = "ston"
       *
       * const result = await db
       *   .insertInto('person')
       *   .values(({ ref, selectFrom, fn }) => ({
       *     first_name: 'Jennifer',
       *     last_name: sql<string>`concat(${ani}, ${ston})`,
       *     middle_name: ref('first_name'),
       *     age: selectFrom('person')
       *       .select(fn.avg<number>('age').as('avg_age')),
       *   }))
       *   .executeTakeFirst()
       * ```
       *
       * The generated SQL (PostgreSQL):
       *
       * ```sql
       * insert into "person" (
       *   "first_name",
       *   "last_name",
       *   "middle_name",
       *   "age"
       * )
       * values (
       *   $1,
       *   concat($2, $3),
       *   "first_name",
       *   (select avg("age") as "avg_age" from "person")
       * )
       * ```
       *
       * You can also use the callback version of subqueries or raw expressions:
       *
       * ```ts
       * await db.with('jennifer', (db) => db
       *   .selectFrom('person')
       *   .where('first_name', '=', 'Jennifer')
       *   .select(['id', 'first_name', 'gender'])
       *   .limit(1)
       * ).insertInto('pet').values((eb) => ({
       *   owner_id: eb.selectFrom('jennifer').select('id'),
       *   name: eb.selectFrom('jennifer').select('first_name'),
       *   species: 'cat',
       * }))
       * .execute()
       * ```
       *
       * The generated SQL (PostgreSQL):
       *
       * ```sql
       * with "jennifer" as (
       *   select "id", "first_name", "gender"
       *   from "person"
       *   where "first_name" = $1
       *   limit $2
       * )
       * insert into "pet" ("owner_id", "name", "species")
       * values (
       *  (select "id" from "jennifer"),
       *  (select "first_name" from "jennifer"),
       *  $3
       * )
       * ```
       */
      values(insert) {
        const [columns, values] = parseInsertExpression(insert);
        return new _InsertQueryBuilder({
          ...this.#props,
          queryNode: InsertQueryNode.cloneWith(this.#props.queryNode, {
            columns,
            values
          })
        });
      }
      /**
       * Sets the columns to insert.
       *
       * The {@link values} method sets both the columns and the values and this method
       * is not needed. But if you are using the {@link expression} method, you can use
       * this method to set the columns to insert.
       *
       * ### Examples
       *
       * ```ts
       * await db.insertInto('person')
       *   .columns(['first_name'])
       *   .expression((eb) => eb.selectFrom('pet').select('pet.name'))
       *   .execute()
       * ```
       *
       * The generated SQL (PostgreSQL):
       *
       * ```sql
       * insert into "person" ("first_name")
       * select "pet"."name" from "pet"
       * ```
       */
      columns(columns) {
        return new _InsertQueryBuilder({
          ...this.#props,
          queryNode: InsertQueryNode.cloneWith(this.#props.queryNode, {
            columns: freeze(columns.map(ColumnNode.create))
          })
        });
      }
      /**
       * Insert an arbitrary expression. For example the result of a select query.
       *
       * ### Examples
       *
       * <!-- siteExample("insert", "Insert subquery", 50) -->
       *
       * You can create an `INSERT INTO SELECT FROM` query using the `expression` method.
       * This API doesn't follow our WYSIWYG principles and might be a bit difficult to
       * remember. The reasons for this design stem from implementation difficulties.
       *
       * ```ts
       * const result = await db.insertInto('person')
       *   .columns(['first_name', 'last_name', 'age'])
       *   .expression((eb) => eb
       *     .selectFrom('pet')
       *     .select((eb) => [
       *       'pet.name',
       *       eb.val('Petson').as('last_name'),
       *       eb.lit(7).as('age'),
       *     ])
       *   )
       *   .execute()
       * ```
       *
       * The generated SQL (PostgreSQL):
       *
       * ```sql
       * insert into "person" ("first_name", "last_name", "age")
       * select "pet"."name", $1 as "last_name", 7 as "age from "pet"
       * ```
       */
      expression(expression) {
        return new _InsertQueryBuilder({
          ...this.#props,
          queryNode: InsertQueryNode.cloneWith(this.#props.queryNode, {
            values: parseExpression(expression)
          })
        });
      }
      /**
       * Creates an `insert into "person" default values` query.
       *
       * ### Examples
       *
       * ```ts
       * await db.insertInto('person')
       *   .defaultValues()
       *   .execute()
       * ```
       *
       * The generated SQL (PostgreSQL):
       *
       * ```sql
       * insert into "person" default values
       * ```
       */
      defaultValues() {
        return new _InsertQueryBuilder({
          ...this.#props,
          queryNode: InsertQueryNode.cloneWith(this.#props.queryNode, {
            defaultValues: true
          })
        });
      }
      /**
       * This can be used to add any additional SQL to the end of the query.
       *
       * ### Examples
       *
       * ```ts
       * import { sql } from 'kysely'
       *
       * await db.insertInto('person')
       *   .values({
       *     first_name: 'John',
       *     last_name: 'Doe',
       *     gender: 'male',
       *   })
       *   .modifyEnd(sql`-- This is a comment`)
       *   .execute()
       * ```
       *
       * The generated SQL (MySQL):
       *
       * ```sql
       * insert into `person` ("first_name", "last_name", "gender")
       * values (?, ?, ?) -- This is a comment
       * ```
       */
      modifyEnd(modifier) {
        return new _InsertQueryBuilder({
          ...this.#props,
          queryNode: QueryNode.cloneWithEndModifier(this.#props.queryNode, modifier.toOperationNode())
        });
      }
      /**
       * Changes an `insert into` query to an `insert ignore into` query.
       *
       * This is only supported by some dialects like MySQL.
       *
       * To avoid a footgun, when invoked with the SQLite dialect, this method will
       * be handled like {@link orIgnore}. See also, {@link orAbort}, {@link orFail},
       * {@link orReplace}, and {@link orRollback}.
       *
       * If you use the ignore modifier, ignorable errors that occur while executing the
       * insert statement are ignored. For example, without ignore, a row that duplicates
       * an existing unique index or primary key value in the table causes a duplicate-key
       * error and the statement is aborted. With ignore, the row is discarded and no error
       * occurs.
       *
       * ### Examples
       *
       * ```ts
       * await db.insertInto('person')
       *   .ignore()
       *   .values({
       *     first_name: 'John',
       *     last_name: 'Doe',
       *     gender: 'female',
       *   })
       *   .execute()
       * ```
       *
       * The generated SQL (MySQL):
       *
       * ```sql
       * insert ignore into `person` (`first_name`, `last_name`, `gender`) values (?, ?, ?)
       * ```
       *
       * The generated SQL (SQLite):
       *
       * ```sql
       * insert or ignore into "person" ("first_name", "last_name", "gender") values (?, ?, ?)
       * ```
       */
      ignore() {
        return new _InsertQueryBuilder({
          ...this.#props,
          queryNode: InsertQueryNode.cloneWith(this.#props.queryNode, {
            orAction: OrActionNode.create("ignore")
          })
        });
      }
      /**
       * Changes an `insert into` query to an `insert or ignore into` query.
       *
       * This is only supported by some dialects like SQLite.
       *
       * To avoid a footgun, when invoked with the MySQL dialect, this method will
       * be handled like {@link ignore}.
       *
       * See also, {@link orAbort}, {@link orFail}, {@link orReplace}, and {@link orRollback}.
       *
       * ### Examples
       *
       * ```ts
       * await db.insertInto('person')
       *   .orIgnore()
       *   .values({
       *     first_name: 'John',
       *     last_name: 'Doe',
       *     gender: 'female',
       *   })
       *   .execute()
       * ```
       *
       * The generated SQL (SQLite):
       *
       * ```sql
       * insert or ignore into "person" ("first_name", "last_name", "gender") values (?, ?, ?)
       * ```
       *
       * The generated SQL (MySQL):
       *
       * ```sql
       * insert ignore into `person` (`first_name`, `last_name`, `gender`) values (?, ?, ?)
       * ```
       */
      orIgnore() {
        return new _InsertQueryBuilder({
          ...this.#props,
          queryNode: InsertQueryNode.cloneWith(this.#props.queryNode, {
            orAction: OrActionNode.create("ignore")
          })
        });
      }
      /**
       * Changes an `insert into` query to an `insert or abort into` query.
       *
       * This is only supported by some dialects like SQLite.
       *
       * See also, {@link orIgnore}, {@link orFail}, {@link orReplace}, and {@link orRollback}.
       *
       * ### Examples
       *
       * ```ts
       * await db.insertInto('person')
       *   .orAbort()
       *   .values({
       *     first_name: 'John',
       *     last_name: 'Doe',
       *     gender: 'female',
       *   })
       *   .execute()
       * ```
       *
       * The generated SQL (SQLite):
       *
       * ```sql
       * insert or abort into "person" ("first_name", "last_name", "gender") values (?, ?, ?)
       * ```
       */
      orAbort() {
        return new _InsertQueryBuilder({
          ...this.#props,
          queryNode: InsertQueryNode.cloneWith(this.#props.queryNode, {
            orAction: OrActionNode.create("abort")
          })
        });
      }
      /**
       * Changes an `insert into` query to an `insert or fail into` query.
       *
       * This is only supported by some dialects like SQLite.
       *
       * See also, {@link orIgnore}, {@link orAbort}, {@link orReplace}, and {@link orRollback}.
       *
       * ### Examples
       *
       * ```ts
       * await db.insertInto('person')
       *   .orFail()
       *   .values({
       *     first_name: 'John',
       *     last_name: 'Doe',
       *     gender: 'female',
       *   })
       *   .execute()
       * ```
       *
       * The generated SQL (SQLite):
       *
       * ```sql
       * insert or fail into "person" ("first_name", "last_name", "gender") values (?, ?, ?)
       * ```
       */
      orFail() {
        return new _InsertQueryBuilder({
          ...this.#props,
          queryNode: InsertQueryNode.cloneWith(this.#props.queryNode, {
            orAction: OrActionNode.create("fail")
          })
        });
      }
      /**
       * Changes an `insert into` query to an `insert or replace into` query.
       *
       * This is only supported by some dialects like SQLite.
       *
       * You can also use {@link Kysely.replaceInto} to achieve the same result.
       *
       * See also, {@link orIgnore}, {@link orAbort}, {@link orFail}, and {@link orRollback}.
       *
       * ### Examples
       *
       * ```ts
       * await db.insertInto('person')
       *   .orReplace()
       *   .values({
       *     first_name: 'John',
       *     last_name: 'Doe',
       *     gender: 'female',
       *   })
       *   .execute()
       * ```
       *
       * The generated SQL (SQLite):
       *
       * ```sql
       * insert or replace into "person" ("first_name", "last_name", "gender") values (?, ?, ?)
       * ```
       */
      orReplace() {
        return new _InsertQueryBuilder({
          ...this.#props,
          queryNode: InsertQueryNode.cloneWith(this.#props.queryNode, {
            orAction: OrActionNode.create("replace")
          })
        });
      }
      /**
       * Changes an `insert into` query to an `insert or rollback into` query.
       *
       * This is only supported by some dialects like SQLite.
       *
       * See also, {@link orIgnore}, {@link orAbort}, {@link orFail}, and {@link orReplace}.
       *
       * ### Examples
       *
       * ```ts
       * await db.insertInto('person')
       *   .orRollback()
       *   .values({
       *     first_name: 'John',
       *     last_name: 'Doe',
       *     gender: 'female',
       *   })
       *   .execute()
       * ```
       *
       * The generated SQL (SQLite):
       *
       * ```sql
       * insert or rollback into "person" ("first_name", "last_name", "gender") values (?, ?, ?)
       * ```
       */
      orRollback() {
        return new _InsertQueryBuilder({
          ...this.#props,
          queryNode: InsertQueryNode.cloneWith(this.#props.queryNode, {
            orAction: OrActionNode.create("rollback")
          })
        });
      }
      /**
       * Changes an `insert into` query to an `insert top into` query.
       *
       * `top` clause is only supported by some dialects like MS SQL Server.
       *
       * ### Examples
       *
       * Insert the first 5 rows:
       *
       * ```ts
       * import { sql } from 'kysely'
       *
       * await db.insertInto('person')
       *   .top(5)
       *   .columns(['first_name', 'gender'])
       *   .expression(
       *     (eb) => eb.selectFrom('pet').select(['name', sql.lit('other').as('gender')])
       *   )
       *   .execute()
       * ```
       *
       * The generated SQL (MS SQL Server):
       *
       * ```sql
       * insert top(5) into "person" ("first_name", "gender") select "name", 'other' as "gender" from "pet"
       * ```
       *
       * Insert the first 50 percent of rows:
       *
       * ```ts
       * import { sql } from 'kysely'
       *
       * await db.insertInto('person')
       *   .top(50, 'percent')
       *   .columns(['first_name', 'gender'])
       *   .expression(
       *     (eb) => eb.selectFrom('pet').select(['name', sql.lit('other').as('gender')])
       *   )
       *   .execute()
       * ```
       *
       * The generated SQL (MS SQL Server):
       *
       * ```sql
       * insert top(50) percent into "person" ("first_name", "gender") select "name", 'other' as "gender" from "pet"
       * ```
       */
      top(expression, modifiers) {
        return new _InsertQueryBuilder({
          ...this.#props,
          queryNode: QueryNode.cloneWithTop(this.#props.queryNode, parseTop(expression, modifiers))
        });
      }
      /**
       * Adds an `on conflict` clause to the query.
       *
       * `on conflict` is only supported by some dialects like PostgreSQL and SQLite. On MySQL
       * you can use {@link ignore} and {@link onDuplicateKeyUpdate} to achieve similar results.
       *
       * ### Examples
       *
       * ```ts
       * await db
       *   .insertInto('pet')
       *   .values({
       *     name: 'Catto',
       *     species: 'cat',
       *     owner_id: 3,
       *   })
       *   .onConflict((oc) => oc
       *     .column('name')
       *     .doUpdateSet({ species: 'hamster' })
       *   )
       *   .execute()
       * ```
       *
       * The generated SQL (PostgreSQL):
       *
       * ```sql
       * insert into "pet" ("name", "species", "owner_id")
       * values ($1, $2, $3)
       * on conflict ("name")
       * do update set "species" = $4
       * ```
       *
       * You can provide the name of the constraint instead of a column name:
       *
       * ```ts
       * await db
       *   .insertInto('pet')
       *   .values({
       *     name: 'Catto',
       *     species: 'cat',
       *     owner_id: 3,
       *   })
       *   .onConflict((oc) => oc
       *     .constraint('pet_name_key')
       *     .doUpdateSet({ species: 'hamster' })
       *   )
       *   .execute()
       * ```
       *
       * The generated SQL (PostgreSQL):
       *
       * ```sql
       * insert into "pet" ("name", "species", "owner_id")
       * values ($1, $2, $3)
       * on conflict on constraint "pet_name_key"
       * do update set "species" = $4
       * ```
       *
       * You can also specify an expression as the conflict target in case
       * the unique index is an expression index:
       *
       * ```ts
       * import { sql } from 'kysely'
       *
       * await db
       *   .insertInto('pet')
       *   .values({
       *     name: 'Catto',
       *     species: 'cat',
       *     owner_id: 3,
       *   })
       *   .onConflict((oc) => oc
       *     .expression(sql<string>`lower(name)`)
       *     .doUpdateSet({ species: 'hamster' })
       *   )
       *   .execute()
       * ```
       *
       * The generated SQL (PostgreSQL):
       *
       * ```sql
       * insert into "pet" ("name", "species", "owner_id")
       * values ($1, $2, $3)
       * on conflict (lower(name))
       * do update set "species" = $4
       * ```
       *
       * You can add a filter for the update statement like this:
       *
       * ```ts
       * await db
       *   .insertInto('pet')
       *   .values({
       *     name: 'Catto',
       *     species: 'cat',
       *     owner_id: 3,
       *   })
       *   .onConflict((oc) => oc
       *     .column('name')
       *     .doUpdateSet({ species: 'hamster' })
       *     .where('excluded.name', '!=', 'Catto')
       *   )
       *   .execute()
       * ```
       *
       * The generated SQL (PostgreSQL):
       *
       * ```sql
       * insert into "pet" ("name", "species", "owner_id")
       * values ($1, $2, $3)
       * on conflict ("name")
       * do update set "species" = $4
       * where "excluded"."name" != $5
       * ```
       *
       * You can create an `on conflict do nothing` clauses like this:
       *
       * ```ts
       * await db
       *   .insertInto('pet')
       *   .values({
       *     name: 'Catto',
       *     species: 'cat',
       *     owner_id: 3,
       *   })
       *   .onConflict((oc) => oc
       *     .column('name')
       *     .doNothing()
       *   )
       *   .execute()
       * ```
       *
       * The generated SQL (PostgreSQL):
       *
       * ```sql
       * insert into "pet" ("name", "species", "owner_id")
       * values ($1, $2, $3)
       * on conflict ("name") do nothing
       * ```
       *
       * You can refer to the columns of the virtual `excluded` table
       * in a type-safe way using a callback and the `ref` method of
       * `ExpressionBuilder`:
       *
       * ```ts
       * await db.insertInto('person')
       *   .values({
       *     id: 1,
       *     first_name: 'John',
       *     last_name: 'Doe',
       *     gender: 'male',
       *   })
       *   .onConflict(oc => oc
       *     .column('id')
       *     .doUpdateSet({
       *       first_name: (eb) => eb.ref('excluded.first_name'),
       *       last_name: (eb) => eb.ref('excluded.last_name')
       *     })
       *   )
       *   .execute()
       * ```
       *
       * The generated SQL (PostgreSQL):
       *
       * ```sql
       * insert into "person" ("id", "first_name", "last_name", "gender")
       * values ($1, $2, $3, $4)
       * on conflict ("id")
       * do update set
       *  "first_name" = "excluded"."first_name",
       *  "last_name" = "excluded"."last_name"
       * ```
       */
      onConflict(callback) {
        return new _InsertQueryBuilder({
          ...this.#props,
          queryNode: InsertQueryNode.cloneWith(this.#props.queryNode, {
            onConflict: callback(new OnConflictBuilder({
              onConflictNode: OnConflictNode.create()
            })).toOperationNode()
          })
        });
      }
      /**
       * Adds `on duplicate key update` to the query.
       *
       * If you specify `on duplicate key update`, and a row is inserted that would cause
       * a duplicate value in a unique index or primary key, an update of the old row occurs.
       *
       * This is only implemented by some dialects like MySQL. On most dialects you should
       * use {@link onConflict} instead.
       *
       * ### Examples
       *
       * ```ts
       * await db
       *   .insertInto('person')
       *   .values({
       *     id: 1,
       *     first_name: 'John',
       *     last_name: 'Doe',
       *     gender: 'male',
       *   })
       *   .onDuplicateKeyUpdate({ updated_at: new Date().toISOString() })
       *   .execute()
       * ```
       *
       * The generated SQL (MySQL):
       *
       * ```sql
       * insert into `person` (`id`, `first_name`, `last_name`, `gender`)
       * values (?, ?, ?, ?)
       * on duplicate key update `updated_at` = ?
       * ```
       */
      onDuplicateKeyUpdate(update) {
        return new _InsertQueryBuilder({
          ...this.#props,
          queryNode: InsertQueryNode.cloneWith(this.#props.queryNode, {
            onDuplicateKey: OnDuplicateKeyNode.create(parseUpdateObjectExpression(update))
          })
        });
      }
      returning(selection) {
        return new _InsertQueryBuilder({
          ...this.#props,
          queryNode: QueryNode.cloneWithReturning(this.#props.queryNode, parseSelectArg(selection))
        });
      }
      returningAll() {
        return new _InsertQueryBuilder({
          ...this.#props,
          queryNode: QueryNode.cloneWithReturning(this.#props.queryNode, parseSelectAll())
        });
      }
      output(args) {
        return new _InsertQueryBuilder({
          ...this.#props,
          queryNode: QueryNode.cloneWithOutput(this.#props.queryNode, parseSelectArg(args))
        });
      }
      outputAll(table) {
        return new _InsertQueryBuilder({
          ...this.#props,
          queryNode: QueryNode.cloneWithOutput(this.#props.queryNode, parseSelectAll(table))
        });
      }
      /**
       * Clears all `returning` clauses from the query.
       *
       * ### Examples
       *
       * ```ts
       * await db.insertInto('person')
       *   .values({ first_name: 'James', last_name: 'Smith', gender: 'male' })
       *   .returning(['first_name'])
       *   .clearReturning()
       *   .execute()
       * ```
       *
       * The generated SQL(PostgreSQL):
       *
       * ```sql
       * insert into "person" ("first_name", "last_name", "gender") values ($1, $2, $3)
       * ```
       */
      clearReturning() {
        return new _InsertQueryBuilder({
          ...this.#props,
          queryNode: QueryNode.cloneWithoutReturning(this.#props.queryNode)
        });
      }
      /**
       * Simply calls the provided function passing `this` as the only argument. `$call` returns
       * what the provided function returns.
       *
       * If you want to conditionally call a method on `this`, see
       * the {@link $if} method.
       *
       * ### Examples
       *
       * The next example uses a helper function `log` to log a query:
       *
       * ```ts
       * import type { Compilable } from 'kysely'
       *
       * function log<T extends Compilable>(qb: T): T {
       *   console.log(qb.compile())
       *   return qb
       * }
       *
       * await db.insertInto('person')
       *   .values({ first_name: 'John', last_name: 'Doe', gender: 'male' })
       *   .$call(log)
       *   .execute()
       * ```
       */
      $call(func) {
        return func(this);
      }
      /**
       * Call `func(this)` if `condition` is true.
       *
       * This method is especially handy with optional selects. Any `returning` or `returningAll`
       * method calls add columns as optional fields to the output type when called inside
       * the `func` callback. This is because we can't know if those selections were actually
       * made before running the code.
       *
       * You can also call any other methods inside the callback.
       *
       * ### Examples
       *
       * ```ts
       * import type { NewPerson } from 'type-editor' // imaginary module
       *
       * async function insertPerson(values: NewPerson, returnLastName: boolean) {
       *   return await db
       *     .insertInto('person')
       *     .values(values)
       *     .returning(['id', 'first_name'])
       *     .$if(returnLastName, (qb) => qb.returning('last_name'))
       *     .executeTakeFirstOrThrow()
       * }
       * ```
       *
       * Any selections added inside the `if` callback will be added as optional fields to the
       * output type since we can't know if the selections were actually made before running
       * the code. In the example above the return type of the `insertPerson` function is:
       *
       * ```ts
       * Promise<{
       *   id: number
       *   first_name: string
       *   last_name?: string
       * }>
       * ```
       */
      $if(condition, func) {
        if (condition) {
          return func(this);
        }
        return new _InsertQueryBuilder({
          ...this.#props
        });
      }
      /**
       * Change the output type of the query.
       *
       * This method call doesn't change the SQL in any way. This methods simply
       * returns a copy of this `InsertQueryBuilder` with a new output type.
       */
      $castTo() {
        return new _InsertQueryBuilder(this.#props);
      }
      /**
       * Narrows (parts of) the output type of the query.
       *
       * Kysely tries to be as type-safe as possible, but in some cases we have to make
       * compromises for better maintainability and compilation performance. At present,
       * Kysely doesn't narrow the output type of the query based on {@link values} input
       * when using {@link returning} or {@link returningAll}.
       *
       * This utility method is very useful for these situations, as it removes unncessary
       * runtime assertion/guard code. Its input type is limited to the output type
       * of the query, so you can't add a column that doesn't exist, or change a column's
       * type to something that doesn't exist in its union type.
       *
       * ### Examples
       *
       * Turn this code:
       *
       * ```ts
       * import type { Person } from 'type-editor' // imaginary module
       *
       * const person = await db.insertInto('person')
       *   .values({
       *     first_name: 'John',
       *     last_name: 'Doe',
       *     gender: 'male',
       *     nullable_column: 'hell yeah!'
       *   })
       *   .returningAll()
       *   .executeTakeFirstOrThrow()
       *
       * if (isWithNoNullValue(person)) {
       *   functionThatExpectsPersonWithNonNullValue(person)
       * }
       *
       * function isWithNoNullValue(person: Person): person is Person & { nullable_column: string } {
       *   return person.nullable_column != null
       * }
       * ```
       *
       * Into this:
       *
       * ```ts
       * import type { NotNull } from 'kysely'
       *
       * const person = await db.insertInto('person')
       *   .values({
       *     first_name: 'John',
       *     last_name: 'Doe',
       *     gender: 'male',
       *     nullable_column: 'hell yeah!'
       *   })
       *   .returningAll()
       *   .$narrowType<{ nullable_column: NotNull }>()
       *   .executeTakeFirstOrThrow()
       *
       * functionThatExpectsPersonWithNonNullValue(person)
       * ```
       */
      $narrowType() {
        return new _InsertQueryBuilder(this.#props);
      }
      /**
       * Asserts that query's output row type equals the given type `T`.
       *
       * This method can be used to simplify excessively complex types to make TypeScript happy
       * and much faster.
       *
       * Kysely uses complex type magic to achieve its type safety. This complexity is sometimes too much
       * for TypeScript and you get errors like this:
       *
       * ```
       * error TS2589: Type instantiation is excessively deep and possibly infinite.
       * ```
       *
       * In these case you can often use this method to help TypeScript a little bit. When you use this
       * method to assert the output type of a query, Kysely can drop the complex output type that
       * consists of multiple nested helper types and replace it with the simple asserted type.
       *
       * Using this method doesn't reduce type safety at all. You have to pass in a type that is
       * structurally equal to the current type.
       *
       * ### Examples
       *
       * ```ts
       * import type { NewPerson, NewPet, Species } from 'type-editor' // imaginary module
       *
       * async function insertPersonAndPet(person: NewPerson, pet: Omit<NewPet, 'owner_id'>) {
       *   return await db
       *     .with('new_person', (qb) => qb
       *       .insertInto('person')
       *       .values(person)
       *       .returning('id')
       *       .$assertType<{ id: number }>()
       *     )
       *     .with('new_pet', (qb) => qb
       *       .insertInto('pet')
       *       .values((eb) => ({
       *         owner_id: eb.selectFrom('new_person').select('id'),
       *         ...pet
       *       }))
       *       .returning(['name as pet_name', 'species'])
       *       .$assertType<{ pet_name: string, species: Species }>()
       *     )
       *     .selectFrom(['new_person', 'new_pet'])
       *     .selectAll()
       *     .executeTakeFirstOrThrow()
       * }
       * ```
       */
      $assertType() {
        return new _InsertQueryBuilder(this.#props);
      }
      /**
       * Returns a copy of this InsertQueryBuilder instance with the given plugin installed.
       */
      withPlugin(plugin) {
        return new _InsertQueryBuilder({
          ...this.#props,
          executor: this.#props.executor.withPlugin(plugin)
        });
      }
      toOperationNode() {
        return this.#props.executor.transformQuery(this.#props.queryNode, this.#props.queryId);
      }
      compile() {
        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);
      }
      /**
       * Executes the query and returns an array of rows.
       *
       * Also see the {@link executeTakeFirst} and {@link executeTakeFirstOrThrow} methods.
       */
      async execute() {
        const compiledQuery = this.compile();
        const result = await this.#props.executor.executeQuery(compiledQuery, this.#props.queryId);
        const { adapter } = this.#props.executor;
        const query = compiledQuery.query;
        if (query.returning && adapter.supportsReturning || query.output && adapter.supportsOutput) {
          return result.rows;
        }
        return [
          new InsertResult(result.insertId, result.numAffectedRows ?? BigInt(0))
        ];
      }
      /**
       * Executes the query and returns the first result or undefined if
       * the query returned no result.
       */
      async executeTakeFirst() {
        const [result] = await this.execute();
        return result;
      }
      /**
       * Executes the query and returns the first result or throws if
       * the query returned no result.
       *
       * By default an instance of {@link NoResultError} is thrown, but you can
       * provide a custom error class, or callback as the only argument to throw a different
       * error.
       */
      async executeTakeFirstOrThrow(errorConstructor = NoResultError) {
        const result = await this.executeTakeFirst();
        if (result === void 0) {
          const error2 = isNoResultErrorConstructor(errorConstructor) ? new errorConstructor(this.toOperationNode()) : errorConstructor(this.toOperationNode());
          throw error2;
        }
        return result;
      }
      async *stream(chunkSize = 100) {
        const compiledQuery = this.compile();
        const stream = this.#props.executor.stream(compiledQuery, chunkSize, this.#props.queryId);
        for await (const item of stream) {
          yield* item.rows;
        }
      }
      async explain(format, options) {
        const builder = new _InsertQueryBuilder({
          ...this.#props,
          queryNode: QueryNode.cloneWithExplain(this.#props.queryNode, format, options)
        });
        return await builder.execute();
      }
    };
  }
});
var DeleteResult;
var init_delete_result = __esm({
  "../node_modules/kysely/dist/esm/query-builder/delete-result.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    DeleteResult = class {
      static {
        __name(this, "DeleteResult");
      }
      static {
        __name2(this, "DeleteResult");
      }
      numDeletedRows;
      constructor(numDeletedRows) {
        this.numDeletedRows = numDeletedRows;
      }
    };
  }
});
var LimitNode;
var init_limit_node = __esm({
  "../node_modules/kysely/dist/esm/operation-node/limit-node.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    LimitNode = freeze({
      is(node) {
        return node.kind === "LimitNode";
      },
      create(limit) {
        return freeze({
          kind: "LimitNode",
          limit
        });
      }
    });
  }
});
var DeleteQueryBuilder;
var init_delete_query_builder = __esm({
  "../node_modules/kysely/dist/esm/query-builder/delete-query-builder.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_join_parser();
    init_table_parser();
    init_select_parser();
    init_query_node();
    init_object_utils();
    init_no_result_error();
    init_delete_result();
    init_delete_query_node();
    init_limit_node();
    init_order_by_parser();
    init_binary_operation_parser();
    init_value_parser();
    init_top_parser();
    DeleteQueryBuilder = class _DeleteQueryBuilder {
      static {
        __name(this, "_DeleteQueryBuilder");
      }
      static {
        __name2(this, "DeleteQueryBuilder");
      }
      #props;
      constructor(props) {
        this.#props = freeze(props);
      }
      where(...args) {
        return new _DeleteQueryBuilder({
          ...this.#props,
          queryNode: QueryNode.cloneWithWhere(this.#props.queryNode, parseValueBinaryOperationOrExpression(args))
        });
      }
      whereRef(lhs, op, rhs) {
        return new _DeleteQueryBuilder({
          ...this.#props,
          queryNode: QueryNode.cloneWithWhere(this.#props.queryNode, parseReferentialBinaryOperation(lhs, op, rhs))
        });
      }
      clearWhere() {
        return new _DeleteQueryBuilder({
          ...this.#props,
          queryNode: QueryNode.cloneWithoutWhere(this.#props.queryNode)
        });
      }
      /**
       * Changes a `delete from` query into a `delete top from` query.
       *
       * `top` clause is only supported by some dialects like MS SQL Server.
       *
       * ### Examples
       *
       * Delete the first 5 rows:
       *
       * ```ts
       * await db
       *   .deleteFrom('person')
       *   .top(5)
       *   .where('age', '>', 18)
       *   .executeTakeFirstOrThrow()
       * ```
       *
       * The generated SQL (MS SQL Server):
       *
       * ```sql
       * delete top(5) from "person" where "age" > @1
       * ```
       *
       * Delete the first 50% of rows:
       *
       * ```ts
       * await db
       *   .deleteFrom('person')
       *   .top(50, 'percent')
       *   .where('age', '>', 18)
       *   .executeTakeFirstOrThrow()
       * ```
       *
       * The generated SQL (MS SQL Server):
       *
       * ```sql
       * delete top(50) percent from "person" where "age" > @1
       * ```
       */
      top(expression, modifiers) {
        return new _DeleteQueryBuilder({
          ...this.#props,
          queryNode: QueryNode.cloneWithTop(this.#props.queryNode, parseTop(expression, modifiers))
        });
      }
      using(tables) {
        return new _DeleteQueryBuilder({
          ...this.#props,
          queryNode: DeleteQueryNode.cloneWithUsing(this.#props.queryNode, parseTableExpressionOrList(tables))
        });
      }
      innerJoin(...args) {
        return this.#join("InnerJoin", args);
      }
      leftJoin(...args) {
        return this.#join("LeftJoin", args);
      }
      rightJoin(...args) {
        return this.#join("RightJoin", args);
      }
      fullJoin(...args) {
        return this.#join("FullJoin", args);
      }
      #join(joinType, args) {
        return new _DeleteQueryBuilder({
          ...this.#props,
          queryNode: QueryNode.cloneWithJoin(this.#props.queryNode, parseJoin(joinType, args))
        });
      }
      returning(selection) {
        return new _DeleteQueryBuilder({
          ...this.#props,
          queryNode: QueryNode.cloneWithReturning(this.#props.queryNode, parseSelectArg(selection))
        });
      }
      returningAll(table) {
        return new _DeleteQueryBuilder({
          ...this.#props,
          queryNode: QueryNode.cloneWithReturning(this.#props.queryNode, parseSelectAll(table))
        });
      }
      output(args) {
        return new _DeleteQueryBuilder({
          ...this.#props,
          queryNode: QueryNode.cloneWithOutput(this.#props.queryNode, parseSelectArg(args))
        });
      }
      outputAll(table) {
        return new _DeleteQueryBuilder({
          ...this.#props,
          queryNode: QueryNode.cloneWithOutput(this.#props.queryNode, parseSelectAll(table))
        });
      }
      /**
       * Clears all `returning` clauses from the query.
       *
       * ### Examples
       *
       * ```ts
       * await db.deleteFrom('pet')
       *   .returningAll()
       *   .where('name', '=', 'Max')
       *   .clearReturning()
       *   .execute()
       * ```
       *
       * The generated SQL(PostgreSQL):
       *
       * ```sql
       * delete from "pet" where "name" = "Max"
       * ```
       */
      clearReturning() {
        return new _DeleteQueryBuilder({
          ...this.#props,
          queryNode: QueryNode.cloneWithoutReturning(this.#props.queryNode)
        });
      }
      /**
       * Clears the `limit` clause from the query.
       *
       * ### Examples
       *
       * ```ts
       * await db.deleteFrom('pet')
       *   .returningAll()
       *   .where('name', '=', 'Max')
       *   .limit(5)
       *   .clearLimit()
       *   .execute()
       * ```
       *
       * The generated SQL(PostgreSQL):
       *
       * ```sql
       * delete from "pet" where "name" = "Max" returning *
       * ```
       */
      clearLimit() {
        return new _DeleteQueryBuilder({
          ...this.#props,
          queryNode: DeleteQueryNode.cloneWithoutLimit(this.#props.queryNode)
        });
      }
      orderBy(...args) {
        return new _DeleteQueryBuilder({
          ...this.#props,
          queryNode: QueryNode.cloneWithOrderByItems(this.#props.queryNode, parseOrderBy(args))
        });
      }
      clearOrderBy() {
        return new _DeleteQueryBuilder({
          ...this.#props,
          queryNode: QueryNode.cloneWithoutOrderBy(this.#props.queryNode)
        });
      }
      /**
       * Adds a limit clause to the query.
       *
       * A limit clause in a delete query is only supported by some dialects
       * like MySQL.
       *
       * ### Examples
       *
       * Delete 5 oldest items in a table:
       *
       * ```ts
       * await db
       *   .deleteFrom('pet')
       *   .orderBy('created_at')
       *   .limit(5)
       *   .execute()
       * ```
       *
       * The generated SQL (MySQL):
       *
       * ```sql
       * delete from `pet` order by `created_at` limit ?
       * ```
       */
      limit(limit) {
        return new _DeleteQueryBuilder({
          ...this.#props,
          queryNode: DeleteQueryNode.cloneWithLimit(this.#props.queryNode, LimitNode.create(parseValueExpression(limit)))
        });
      }
      /**
       * This can be used to add any additional SQL to the end of the query.
       *
       * ### Examples
       *
       * ```ts
       * import { sql } from 'kysely'
       *
       * await db.deleteFrom('person')
       *   .where('first_name', '=', 'John')
       *   .modifyEnd(sql`-- This is a comment`)
       *   .execute()
       * ```
       *
       * The generated SQL (MySQL):
       *
       * ```sql
       * delete from `person`
       * where `first_name` = "John" -- This is a comment
       * ```
       */
      modifyEnd(modifier) {
        return new _DeleteQueryBuilder({
          ...this.#props,
          queryNode: QueryNode.cloneWithEndModifier(this.#props.queryNode, modifier.toOperationNode())
        });
      }
      /**
       * Simply calls the provided function passing `this` as the only argument. `$call` returns
       * what the provided function returns.
       *
       * If you want to conditionally call a method on `this`, see
       * the {@link $if} method.
       *
       * ### Examples
       *
       * The next example uses a helper function `log` to log a query:
       *
       * ```ts
       * import type { Compilable } from 'kysely'
       *
       * function log<T extends Compilable>(qb: T): T {
       *   console.log(qb.compile())
       *   return qb
       * }
       *
       * await db.deleteFrom('person')
       *   .$call(log)
       *   .execute()
       * ```
       */
      $call(func) {
        return func(this);
      }
      /**
       * Call `func(this)` if `condition` is true.
       *
       * This method is especially handy with optional selects. Any `returning` or `returningAll`
       * method calls add columns as optional fields to the output type when called inside
       * the `func` callback. This is because we can't know if those selections were actually
       * made before running the code.
       *
       * You can also call any other methods inside the callback.
       *
       * ### Examples
       *
       * ```ts
       * async function deletePerson(id: number, returnLastName: boolean) {
       *   return await db
       *     .deleteFrom('person')
       *     .where('id', '=', id)
       *     .returning(['id', 'first_name'])
       *     .$if(returnLastName, (qb) => qb.returning('last_name'))
       *     .executeTakeFirstOrThrow()
       * }
       * ```
       *
       * Any selections added inside the `if` callback will be added as optional fields to the
       * output type since we can't know if the selections were actually made before running
       * the code. In the example above the return type of the `deletePerson` function is:
       *
       * ```ts
       * Promise<{
       *   id: number
       *   first_name: string
       *   last_name?: string
       * }>
       * ```
       */
      $if(condition, func) {
        if (condition) {
          return func(this);
        }
        return new _DeleteQueryBuilder({
          ...this.#props
        });
      }
      /**
       * Change the output type of the query.
       *
       * This method call doesn't change the SQL in any way. This methods simply
       * returns a copy of this `DeleteQueryBuilder` with a new output type.
       */
      $castTo() {
        return new _DeleteQueryBuilder(this.#props);
      }
      /**
       * Narrows (parts of) the output type of the query.
       *
       * Kysely tries to be as type-safe as possible, but in some cases we have to make
       * compromises for better maintainability and compilation performance. At present,
       * Kysely doesn't narrow the output type of the query when using {@link where} and {@link returning} or {@link returningAll}.
       *
       * This utility method is very useful for these situations, as it removes unncessary
       * runtime assertion/guard code. Its input type is limited to the output type
       * of the query, so you can't add a column that doesn't exist, or change a column's
       * type to something that doesn't exist in its union type.
       *
       * ### Examples
       *
       * Turn this code:
       *
       * ```ts
       * import type { Person } from 'type-editor' // imaginary module
       *
       * const person = await db.deleteFrom('person')
       *   .where('id', '=', 3)
       *   .where('nullable_column', 'is not', null)
       *   .returningAll()
       *   .executeTakeFirstOrThrow()
       *
       * if (isWithNoNullValue(person)) {
       *   functionThatExpectsPersonWithNonNullValue(person)
       * }
       *
       * function isWithNoNullValue(person: Person): person is Person & { nullable_column: string } {
       *   return person.nullable_column != null
       * }
       * ```
       *
       * Into this:
       *
       * ```ts
       * import type { NotNull } from 'kysely'
       *
       * const person = await db.deleteFrom('person')
       *   .where('id', '=', 3)
       *   .where('nullable_column', 'is not', null)
       *   .returningAll()
       *   .$narrowType<{ nullable_column: NotNull }>()
       *   .executeTakeFirstOrThrow()
       *
       * functionThatExpectsPersonWithNonNullValue(person)
       * ```
       */
      $narrowType() {
        return new _DeleteQueryBuilder(this.#props);
      }
      /**
       * Asserts that query's output row type equals the given type `T`.
       *
       * This method can be used to simplify excessively complex types to make TypeScript happy
       * and much faster.
       *
       * Kysely uses complex type magic to achieve its type safety. This complexity is sometimes too much
       * for TypeScript and you get errors like this:
       *
       * ```
       * error TS2589: Type instantiation is excessively deep and possibly infinite.
       * ```
       *
       * In these case you can often use this method to help TypeScript a little bit. When you use this
       * method to assert the output type of a query, Kysely can drop the complex output type that
       * consists of multiple nested helper types and replace it with the simple asserted type.
       *
       * Using this method doesn't reduce type safety at all. You have to pass in a type that is
       * structurally equal to the current type.
       *
       * ### Examples
       *
       * ```ts
       * import type { Species } from 'type-editor' // imaginary module
       *
       * async function deletePersonAndPets(personId: number) {
       *   return await db
       *     .with('deleted_person', (qb) => qb
       *        .deleteFrom('person')
       *        .where('id', '=', personId)
       *        .returning('first_name')
       *        .$assertType<{ first_name: string }>()
       *     )
       *     .with('deleted_pets', (qb) => qb
       *       .deleteFrom('pet')
       *       .where('owner_id', '=', personId)
       *       .returning(['name as pet_name', 'species'])
       *       .$assertType<{ pet_name: string, species: Species }>()
       *     )
       *     .selectFrom(['deleted_person', 'deleted_pets'])
       *     .selectAll()
       *     .execute()
       * }
       * ```
       */
      $assertType() {
        return new _DeleteQueryBuilder(this.#props);
      }
      /**
       * Returns a copy of this DeleteQueryBuilder instance with the given plugin installed.
       */
      withPlugin(plugin) {
        return new _DeleteQueryBuilder({
          ...this.#props,
          executor: this.#props.executor.withPlugin(plugin)
        });
      }
      toOperationNode() {
        return this.#props.executor.transformQuery(this.#props.queryNode, this.#props.queryId);
      }
      compile() {
        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);
      }
      /**
       * Executes the query and returns an array of rows.
       *
       * Also see the {@link executeTakeFirst} and {@link executeTakeFirstOrThrow} methods.
       */
      async execute() {
        const compiledQuery = this.compile();
        const result = await this.#props.executor.executeQuery(compiledQuery, this.#props.queryId);
        const { adapter } = this.#props.executor;
        const query = compiledQuery.query;
        if (query.returning && adapter.supportsReturning || query.output && adapter.supportsOutput) {
          return result.rows;
        }
        return [new DeleteResult(result.numAffectedRows ?? BigInt(0))];
      }
      /**
       * Executes the query and returns the first result or undefined if
       * the query returned no result.
       */
      async executeTakeFirst() {
        const [result] = await this.execute();
        return result;
      }
      /**
       * Executes the query and returns the first result or throws if
       * the query returned no result.
       *
       * By default an instance of {@link NoResultError} is thrown, but you can
       * provide a custom error class, or callback as the only argument to throw a different
       * error.
       */
      async executeTakeFirstOrThrow(errorConstructor = NoResultError) {
        const result = await this.executeTakeFirst();
        if (result === void 0) {
          const error2 = isNoResultErrorConstructor(errorConstructor) ? new errorConstructor(this.toOperationNode()) : errorConstructor(this.toOperationNode());
          throw error2;
        }
        return result;
      }
      async *stream(chunkSize = 100) {
        const compiledQuery = this.compile();
        const stream = this.#props.executor.stream(compiledQuery, chunkSize, this.#props.queryId);
        for await (const item of stream) {
          yield* item.rows;
        }
      }
      async explain(format, options) {
        const builder = new _DeleteQueryBuilder({
          ...this.#props,
          queryNode: QueryNode.cloneWithExplain(this.#props.queryNode, format, options)
        });
        return await builder.execute();
      }
    };
  }
});
var UpdateResult;
var init_update_result = __esm({
  "../node_modules/kysely/dist/esm/query-builder/update-result.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    UpdateResult = class {
      static {
        __name(this, "UpdateResult");
      }
      static {
        __name2(this, "UpdateResult");
      }
      /**
       * The number of rows the update query updated (even if not changed).
       */
      numUpdatedRows;
      /**
       * The number of rows the update query changed.
       *
       * This is **optional** and only supported in dialects such as MySQL.
       * You would probably use {@link numUpdatedRows} in most cases.
       */
      numChangedRows;
      constructor(numUpdatedRows, numChangedRows) {
        this.numUpdatedRows = numUpdatedRows;
        this.numChangedRows = numChangedRows;
      }
    };
  }
});
var UpdateQueryBuilder;
var init_update_query_builder = __esm({
  "../node_modules/kysely/dist/esm/query-builder/update-query-builder.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_join_parser();
    init_table_parser();
    init_select_parser();
    init_query_node();
    init_update_query_node();
    init_update_set_parser();
    init_object_utils();
    init_update_result();
    init_no_result_error();
    init_binary_operation_parser();
    init_value_parser();
    init_limit_node();
    init_top_parser();
    init_order_by_parser();
    UpdateQueryBuilder = class _UpdateQueryBuilder {
      static {
        __name(this, "_UpdateQueryBuilder");
      }
      static {
        __name2(this, "UpdateQueryBuilder");
      }
      #props;
      constructor(props) {
        this.#props = freeze(props);
      }
      where(...args) {
        return new _UpdateQueryBuilder({
          ...this.#props,
          queryNode: QueryNode.cloneWithWhere(this.#props.queryNode, parseValueBinaryOperationOrExpression(args))
        });
      }
      whereRef(lhs, op, rhs) {
        return new _UpdateQueryBuilder({
          ...this.#props,
          queryNode: QueryNode.cloneWithWhere(this.#props.queryNode, parseReferentialBinaryOperation(lhs, op, rhs))
        });
      }
      clearWhere() {
        return new _UpdateQueryBuilder({
          ...this.#props,
          queryNode: QueryNode.cloneWithoutWhere(this.#props.queryNode)
        });
      }
      /**
       * Changes an `update` query into a `update top` query.
       *
       * `top` clause is only supported by some dialects like MS SQL Server.
       *
       * ### Examples
       *
       * Update the first row:
       *
       * ```ts
       * await db.updateTable('person')
       *   .top(1)
       *   .set({ first_name: 'Foo' })
       *   .where('age', '>', 18)
       *   .executeTakeFirstOrThrow()
       * ```
       *
       * The generated SQL (MS SQL Server):
       *
       * ```sql
       * update top(1) "person" set "first_name" = @1 where "age" > @2
       * ```
       *
       * Update the 50% first rows:
       *
       * ```ts
       * await db.updateTable('person')
       *   .top(50, 'percent')
       *   .set({ first_name: 'Foo' })
       *   .where('age', '>', 18)
       *   .executeTakeFirstOrThrow()
       * ```
       *
       * The generated SQL (MS SQL Server):
       *
       * ```sql
       * update top(50) percent "person" set "first_name" = @1 where "age" > @2
       * ```
       */
      top(expression, modifiers) {
        return new _UpdateQueryBuilder({
          ...this.#props,
          queryNode: QueryNode.cloneWithTop(this.#props.queryNode, parseTop(expression, modifiers))
        });
      }
      from(from) {
        return new _UpdateQueryBuilder({
          ...this.#props,
          queryNode: UpdateQueryNode.cloneWithFromItems(this.#props.queryNode, parseTableExpressionOrList(from))
        });
      }
      innerJoin(...args) {
        return this.#join("InnerJoin", args);
      }
      leftJoin(...args) {
        return this.#join("LeftJoin", args);
      }
      rightJoin(...args) {
        return this.#join("RightJoin", args);
      }
      fullJoin(...args) {
        return this.#join("FullJoin", args);
      }
      #join(joinType, args) {
        return new _UpdateQueryBuilder({
          ...this.#props,
          queryNode: QueryNode.cloneWithJoin(this.#props.queryNode, parseJoin(joinType, args))
        });
      }
      orderBy(...args) {
        return new _UpdateQueryBuilder({
          ...this.#props,
          queryNode: QueryNode.cloneWithOrderByItems(this.#props.queryNode, parseOrderBy(args))
        });
      }
      clearOrderBy() {
        return new _UpdateQueryBuilder({
          ...this.#props,
          queryNode: QueryNode.cloneWithoutOrderBy(this.#props.queryNode)
        });
      }
      /**
       * Adds a limit clause to the update query for supported databases, such as MySQL.
       *
       * ### Examples
       *
       * Update the first 2 rows in the 'person' table:
       *
       * ```ts
       * await db
       *   .updateTable('person')
       *   .set({ first_name: 'Foo' })
       *   .limit(2)
       *   .execute()
       * ```
       *
       * The generated SQL (MySQL):
       *
       * ```sql
       * update `person` set `first_name` = ? limit ?
       * ```
       */
      limit(limit) {
        return new _UpdateQueryBuilder({
          ...this.#props,
          queryNode: UpdateQueryNode.cloneWithLimit(this.#props.queryNode, LimitNode.create(parseValueExpression(limit)))
        });
      }
      set(...args) {
        return new _UpdateQueryBuilder({
          ...this.#props,
          queryNode: UpdateQueryNode.cloneWithUpdates(this.#props.queryNode, parseUpdate(...args))
        });
      }
      returning(selection) {
        return new _UpdateQueryBuilder({
          ...this.#props,
          queryNode: QueryNode.cloneWithReturning(this.#props.queryNode, parseSelectArg(selection))
        });
      }
      returningAll(table) {
        return new _UpdateQueryBuilder({
          ...this.#props,
          queryNode: QueryNode.cloneWithReturning(this.#props.queryNode, parseSelectAll(table))
        });
      }
      output(args) {
        return new _UpdateQueryBuilder({
          ...this.#props,
          queryNode: QueryNode.cloneWithOutput(this.#props.queryNode, parseSelectArg(args))
        });
      }
      outputAll(table) {
        return new _UpdateQueryBuilder({
          ...this.#props,
          queryNode: QueryNode.cloneWithOutput(this.#props.queryNode, parseSelectAll(table))
        });
      }
      /**
       * This can be used to add any additional SQL to the end of the query.
       *
       * ### Examples
       *
       * ```ts
       * import { sql } from 'kysely'
       *
       * await db.updateTable('person')
       *   .set({ age: 39 })
       *   .where('first_name', '=', 'John')
       *   .modifyEnd(sql.raw('-- This is a comment'))
       *   .execute()
       * ```
       *
       * The generated SQL (MySQL):
       *
       * ```sql
       * update `person`
       * set `age` = 39
       * where `first_name` = "John" -- This is a comment
       * ```
       */
      modifyEnd(modifier) {
        return new _UpdateQueryBuilder({
          ...this.#props,
          queryNode: QueryNode.cloneWithEndModifier(this.#props.queryNode, modifier.toOperationNode())
        });
      }
      /**
       * Clears all `returning` clauses from the query.
       *
       * ### Examples
       *
       * ```ts
       * db.updateTable('person')
       *   .returningAll()
       *   .set({ age: 39 })
       *   .where('first_name', '=', 'John')
       *   .clearReturning()
       * ```
       *
       * The generated SQL(PostgreSQL):
       *
       * ```sql
       * update "person" set "age" = 39 where "first_name" = "John"
       * ```
       */
      clearReturning() {
        return new _UpdateQueryBuilder({
          ...this.#props,
          queryNode: QueryNode.cloneWithoutReturning(this.#props.queryNode)
        });
      }
      /**
       * Simply calls the provided function passing `this` as the only argument. `$call` returns
       * what the provided function returns.
       *
       * If you want to conditionally call a method on `this`, see
       * the {@link $if} method.
       *
       * ### Examples
       *
       * The next example uses a helper function `log` to log a query:
       *
       * ```ts
       * import type { Compilable } from 'kysely'
       * import type { PersonUpdate } from 'type-editor' // imaginary module
       *
       * function log<T extends Compilable>(qb: T): T {
       *   console.log(qb.compile())
       *   return qb
       * }
       *
       * const values = {
       *   first_name: 'John',
       * } satisfies PersonUpdate
       *
       * db.updateTable('person')
       *   .set(values)
       *   .$call(log)
       *   .execute()
       * ```
       */
      $call(func) {
        return func(this);
      }
      /**
       * Call `func(this)` if `condition` is true.
       *
       * This method is especially handy with optional selects. Any `returning` or `returningAll`
       * method calls add columns as optional fields to the output type when called inside
       * the `func` callback. This is because we can't know if those selections were actually
       * made before running the code.
       *
       * You can also call any other methods inside the callback.
       *
       * ### Examples
       *
       * ```ts
       * import type { PersonUpdate } from 'type-editor' // imaginary module
       *
       * async function updatePerson(id: number, updates: PersonUpdate, returnLastName: boolean) {
       *   return await db
       *     .updateTable('person')
       *     .set(updates)
       *     .where('id', '=', id)
       *     .returning(['id', 'first_name'])
       *     .$if(returnLastName, (qb) => qb.returning('last_name'))
       *     .executeTakeFirstOrThrow()
       * }
       * ```
       *
       * Any selections added inside the `if` callback will be added as optional fields to the
       * output type since we can't know if the selections were actually made before running
       * the code. In the example above the return type of the `updatePerson` function is:
       *
       * ```ts
       * Promise<{
       *   id: number
       *   first_name: string
       *   last_name?: string
       * }>
       * ```
       */
      $if(condition, func) {
        if (condition) {
          return func(this);
        }
        return new _UpdateQueryBuilder({
          ...this.#props
        });
      }
      /**
       * Change the output type of the query.
       *
       * This method call doesn't change the SQL in any way. This methods simply
       * returns a copy of this `UpdateQueryBuilder` with a new output type.
       */
      $castTo() {
        return new _UpdateQueryBuilder(this.#props);
      }
      /**
       * Narrows (parts of) the output type of the query.
       *
       * Kysely tries to be as type-safe as possible, but in some cases we have to make
       * compromises for better maintainability and compilation performance. At present,
       * Kysely doesn't narrow the output type of the query based on {@link set} input
       * when using {@link where} and/or {@link returning} or {@link returningAll}.
       *
       * This utility method is very useful for these situations, as it removes unncessary
       * runtime assertion/guard code. Its input type is limited to the output type
       * of the query, so you can't add a column that doesn't exist, or change a column's
       * type to something that doesn't exist in its union type.
       *
       * ### Examples
       *
       * Turn this code:
       *
       * ```ts
       * import type { Person } from 'type-editor' // imaginary module
       *
       * const id = 1
       * const now = new Date().toISOString()
       *
       * const person = await db.updateTable('person')
       *   .set({ deleted_at: now })
       *   .where('id', '=', id)
       *   .where('nullable_column', 'is not', null)
       *   .returningAll()
       *   .executeTakeFirstOrThrow()
       *
       * if (isWithNoNullValue(person)) {
       *   functionThatExpectsPersonWithNonNullValue(person)
       * }
       *
       * function isWithNoNullValue(person: Person): person is Person & { nullable_column: string } {
       *   return person.nullable_column != null
       * }
       * ```
       *
       * Into this:
       *
       * ```ts
       * import type { NotNull } from 'kysely'
       *
       * const id = 1
       * const now = new Date().toISOString()
       *
       * const person = await db.updateTable('person')
       *   .set({ deleted_at: now })
       *   .where('id', '=', id)
       *   .where('nullable_column', 'is not', null)
       *   .returningAll()
       *   .$narrowType<{ deleted_at: Date; nullable_column: NotNull }>()
       *   .executeTakeFirstOrThrow()
       *
       * functionThatExpectsPersonWithNonNullValue(person)
       * ```
       */
      $narrowType() {
        return new _UpdateQueryBuilder(this.#props);
      }
      /**
       * Asserts that query's output row type equals the given type `T`.
       *
       * This method can be used to simplify excessively complex types to make TypeScript happy
       * and much faster.
       *
       * Kysely uses complex type magic to achieve its type safety. This complexity is sometimes too much
       * for TypeScript and you get errors like this:
       *
       * ```
       * error TS2589: Type instantiation is excessively deep and possibly infinite.
       * ```
       *
       * In these case you can often use this method to help TypeScript a little bit. When you use this
       * method to assert the output type of a query, Kysely can drop the complex output type that
       * consists of multiple nested helper types and replace it with the simple asserted type.
       *
       * Using this method doesn't reduce type safety at all. You have to pass in a type that is
       * structurally equal to the current type.
       *
       * ### Examples
       *
       * ```ts
       * import type { PersonUpdate, PetUpdate, Species } from 'type-editor' // imaginary module
       *
       * const person = {
       *   id: 1,
       *   gender: 'other',
       * } satisfies PersonUpdate
       *
       * const pet = {
       *   name: 'Fluffy',
       * } satisfies PetUpdate
       *
       * const result = await db
       *   .with('updated_person', (qb) => qb
       *     .updateTable('person')
       *     .set(person)
       *     .where('id', '=', person.id)
       *     .returning('first_name')
       *     .$assertType<{ first_name: string }>()
       *   )
       *   .with('updated_pet', (qb) => qb
       *     .updateTable('pet')
       *     .set(pet)
       *     .where('owner_id', '=', person.id)
       *     .returning(['name as pet_name', 'species'])
       *     .$assertType<{ pet_name: string, species: Species }>()
       *   )
       *   .selectFrom(['updated_person', 'updated_pet'])
       *   .selectAll()
       *   .executeTakeFirstOrThrow()
       * ```
       */
      $assertType() {
        return new _UpdateQueryBuilder(this.#props);
      }
      /**
       * Returns a copy of this UpdateQueryBuilder instance with the given plugin installed.
       */
      withPlugin(plugin) {
        return new _UpdateQueryBuilder({
          ...this.#props,
          executor: this.#props.executor.withPlugin(plugin)
        });
      }
      toOperationNode() {
        return this.#props.executor.transformQuery(this.#props.queryNode, this.#props.queryId);
      }
      compile() {
        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);
      }
      /**
       * Executes the query and returns an array of rows.
       *
       * Also see the {@link executeTakeFirst} and {@link executeTakeFirstOrThrow} methods.
       */
      async execute() {
        const compiledQuery = this.compile();
        const result = await this.#props.executor.executeQuery(compiledQuery, this.#props.queryId);
        const { adapter } = this.#props.executor;
        const query = compiledQuery.query;
        if (query.returning && adapter.supportsReturning || query.output && adapter.supportsOutput) {
          return result.rows;
        }
        return [
          new UpdateResult(result.numAffectedRows ?? BigInt(0), result.numChangedRows)
        ];
      }
      /**
       * Executes the query and returns the first result or undefined if
       * the query returned no result.
       */
      async executeTakeFirst() {
        const [result] = await this.execute();
        return result;
      }
      /**
       * Executes the query and returns the first result or throws if
       * the query returned no result.
       *
       * By default an instance of {@link NoResultError} is thrown, but you can
       * provide a custom error class, or callback as the only argument to throw a different
       * error.
       */
      async executeTakeFirstOrThrow(errorConstructor = NoResultError) {
        const result = await this.executeTakeFirst();
        if (result === void 0) {
          const error2 = isNoResultErrorConstructor(errorConstructor) ? new errorConstructor(this.toOperationNode()) : errorConstructor(this.toOperationNode());
          throw error2;
        }
        return result;
      }
      async *stream(chunkSize = 100) {
        const compiledQuery = this.compile();
        const stream = this.#props.executor.stream(compiledQuery, chunkSize, this.#props.queryId);
        for await (const item of stream) {
          yield* item.rows;
        }
      }
      async explain(format, options) {
        const builder = new _UpdateQueryBuilder({
          ...this.#props,
          queryNode: QueryNode.cloneWithExplain(this.#props.queryNode, format, options)
        });
        return await builder.execute();
      }
    };
  }
});
var CommonTableExpressionNameNode;
var init_common_table_expression_name_node = __esm({
  "../node_modules/kysely/dist/esm/operation-node/common-table-expression-name-node.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    init_column_node();
    init_table_node();
    CommonTableExpressionNameNode = freeze({
      is(node) {
        return node.kind === "CommonTableExpressionNameNode";
      },
      create(tableName, columnNames) {
        return freeze({
          kind: "CommonTableExpressionNameNode",
          table: TableNode.create(tableName),
          columns: columnNames ? freeze(columnNames.map(ColumnNode.create)) : void 0
        });
      }
    });
  }
});
var CommonTableExpressionNode;
var init_common_table_expression_node = __esm({
  "../node_modules/kysely/dist/esm/operation-node/common-table-expression-node.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    CommonTableExpressionNode = freeze({
      is(node) {
        return node.kind === "CommonTableExpressionNode";
      },
      create(name, expression) {
        return freeze({
          kind: "CommonTableExpressionNode",
          name,
          expression
        });
      },
      cloneWith(node, props) {
        return freeze({
          ...node,
          ...props
        });
      }
    });
  }
});
var CTEBuilder;
var init_cte_builder = __esm({
  "../node_modules/kysely/dist/esm/query-builder/cte-builder.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_common_table_expression_node();
    init_object_utils();
    CTEBuilder = class _CTEBuilder {
      static {
        __name(this, "_CTEBuilder");
      }
      static {
        __name2(this, "CTEBuilder");
      }
      #props;
      constructor(props) {
        this.#props = freeze(props);
      }
      /**
       * Makes the common table expression materialized.
       */
      materialized() {
        return new _CTEBuilder({
          ...this.#props,
          node: CommonTableExpressionNode.cloneWith(this.#props.node, {
            materialized: true
          })
        });
      }
      /**
       * Makes the common table expression not materialized.
       */
      notMaterialized() {
        return new _CTEBuilder({
          ...this.#props,
          node: CommonTableExpressionNode.cloneWith(this.#props.node, {
            materialized: false
          })
        });
      }
      toOperationNode() {
        return this.#props.node;
      }
    };
  }
});
function parseCommonTableExpression(nameOrBuilderCallback, expression) {
  const expressionNode = expression(createQueryCreator()).toOperationNode();
  if (isFunction(nameOrBuilderCallback)) {
    return nameOrBuilderCallback(cteBuilderFactory(expressionNode)).toOperationNode();
  }
  return CommonTableExpressionNode.create(parseCommonTableExpressionName(nameOrBuilderCallback), expressionNode);
}
__name(parseCommonTableExpression, "parseCommonTableExpression");
function cteBuilderFactory(expressionNode) {
  return (name) => {
    return new CTEBuilder({
      node: CommonTableExpressionNode.create(parseCommonTableExpressionName(name), expressionNode)
    });
  };
}
__name(cteBuilderFactory, "cteBuilderFactory");
function parseCommonTableExpressionName(name) {
  if (name.includes("(")) {
    const parts = name.split(/[\(\)]/);
    const table = parts[0];
    const columns = parts[1].split(",").map((it) => it.trim());
    return CommonTableExpressionNameNode.create(table, columns);
  } else {
    return CommonTableExpressionNameNode.create(name);
  }
}
__name(parseCommonTableExpressionName, "parseCommonTableExpressionName");
var init_with_parser = __esm({
  "../node_modules/kysely/dist/esm/parser/with-parser.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_common_table_expression_name_node();
    init_parse_utils();
    init_object_utils();
    init_cte_builder();
    init_common_table_expression_node();
    __name2(parseCommonTableExpression, "parseCommonTableExpression");
    __name2(cteBuilderFactory, "cteBuilderFactory");
    __name2(parseCommonTableExpressionName, "parseCommonTableExpressionName");
  }
});
var WithNode;
var init_with_node = __esm({
  "../node_modules/kysely/dist/esm/operation-node/with-node.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    WithNode = freeze({
      is(node) {
        return node.kind === "WithNode";
      },
      create(expression, params) {
        return freeze({
          kind: "WithNode",
          expressions: freeze([expression]),
          ...params
        });
      },
      cloneWithExpression(withNode, expression) {
        return freeze({
          ...withNode,
          expressions: freeze([...withNode.expressions, expression])
        });
      }
    });
  }
});
function randomString(length) {
  let chars = "";
  for (let i = 0; i < length; ++i) {
    chars += randomChar();
  }
  return chars;
}
__name(randomString, "randomString");
function randomChar() {
  return CHARS[~~(Math.random() * CHARS.length)];
}
__name(randomChar, "randomChar");
var CHARS;
var init_random_string = __esm({
  "../node_modules/kysely/dist/esm/util/random-string.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    CHARS = [
      "A",
      "B",
      "C",
      "D",
      "E",
      "F",
      "G",
      "H",
      "I",
      "J",
      "K",
      "L",
      "M",
      "N",
      "O",
      "P",
      "Q",
      "R",
      "S",
      "T",
      "U",
      "V",
      "W",
      "X",
      "Y",
      "Z",
      "a",
      "b",
      "c",
      "d",
      "e",
      "f",
      "g",
      "h",
      "i",
      "j",
      "k",
      "l",
      "m",
      "n",
      "o",
      "p",
      "q",
      "r",
      "s",
      "t",
      "u",
      "v",
      "w",
      "x",
      "y",
      "z",
      "0",
      "1",
      "2",
      "3",
      "4",
      "5",
      "6",
      "7",
      "8",
      "9"
    ];
    __name2(randomString, "randomString");
    __name2(randomChar, "randomChar");
  }
});
function createQueryId() {
  return new LazyQueryId();
}
__name(createQueryId, "createQueryId");
var LazyQueryId;
var init_query_id = __esm({
  "../node_modules/kysely/dist/esm/util/query-id.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_random_string();
    __name2(createQueryId, "createQueryId");
    LazyQueryId = class {
      static {
        __name(this, "LazyQueryId");
      }
      static {
        __name2(this, "LazyQueryId");
      }
      #queryId;
      get queryId() {
        if (this.#queryId === void 0) {
          this.#queryId = randomString(8);
        }
        return this.#queryId;
      }
    };
  }
});
function requireAllProps(obj) {
  return obj;
}
__name(requireAllProps, "requireAllProps");
var init_require_all_props = __esm({
  "../node_modules/kysely/dist/esm/util/require-all-props.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    __name2(requireAllProps, "requireAllProps");
  }
});
var OperationNodeTransformer;
var init_operation_node_transformer = __esm({
  "../node_modules/kysely/dist/esm/operation-node/operation-node-transformer.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    init_require_all_props();
    OperationNodeTransformer = class {
      static {
        __name(this, "OperationNodeTransformer");
      }
      static {
        __name2(this, "OperationNodeTransformer");
      }
      nodeStack = [];
      #transformers = freeze({
        AliasNode: this.transformAlias.bind(this),
        ColumnNode: this.transformColumn.bind(this),
        IdentifierNode: this.transformIdentifier.bind(this),
        SchemableIdentifierNode: this.transformSchemableIdentifier.bind(this),
        RawNode: this.transformRaw.bind(this),
        ReferenceNode: this.transformReference.bind(this),
        SelectQueryNode: this.transformSelectQuery.bind(this),
        SelectionNode: this.transformSelection.bind(this),
        TableNode: this.transformTable.bind(this),
        FromNode: this.transformFrom.bind(this),
        SelectAllNode: this.transformSelectAll.bind(this),
        AndNode: this.transformAnd.bind(this),
        OrNode: this.transformOr.bind(this),
        ValueNode: this.transformValue.bind(this),
        ValueListNode: this.transformValueList.bind(this),
        PrimitiveValueListNode: this.transformPrimitiveValueList.bind(this),
        ParensNode: this.transformParens.bind(this),
        JoinNode: this.transformJoin.bind(this),
        OperatorNode: this.transformOperator.bind(this),
        WhereNode: this.transformWhere.bind(this),
        InsertQueryNode: this.transformInsertQuery.bind(this),
        DeleteQueryNode: this.transformDeleteQuery.bind(this),
        ReturningNode: this.transformReturning.bind(this),
        CreateTableNode: this.transformCreateTable.bind(this),
        AddColumnNode: this.transformAddColumn.bind(this),
        ColumnDefinitionNode: this.transformColumnDefinition.bind(this),
        DropTableNode: this.transformDropTable.bind(this),
        DataTypeNode: this.transformDataType.bind(this),
        OrderByNode: this.transformOrderBy.bind(this),
        OrderByItemNode: this.transformOrderByItem.bind(this),
        GroupByNode: this.transformGroupBy.bind(this),
        GroupByItemNode: this.transformGroupByItem.bind(this),
        UpdateQueryNode: this.transformUpdateQuery.bind(this),
        ColumnUpdateNode: this.transformColumnUpdate.bind(this),
        LimitNode: this.transformLimit.bind(this),
        OffsetNode: this.transformOffset.bind(this),
        OnConflictNode: this.transformOnConflict.bind(this),
        OnDuplicateKeyNode: this.transformOnDuplicateKey.bind(this),
        CreateIndexNode: this.transformCreateIndex.bind(this),
        DropIndexNode: this.transformDropIndex.bind(this),
        ListNode: this.transformList.bind(this),
        PrimaryKeyConstraintNode: this.transformPrimaryKeyConstraint.bind(this),
        UniqueConstraintNode: this.transformUniqueConstraint.bind(this),
        ReferencesNode: this.transformReferences.bind(this),
        CheckConstraintNode: this.transformCheckConstraint.bind(this),
        WithNode: this.transformWith.bind(this),
        CommonTableExpressionNode: this.transformCommonTableExpression.bind(this),
        CommonTableExpressionNameNode: this.transformCommonTableExpressionName.bind(this),
        HavingNode: this.transformHaving.bind(this),
        CreateSchemaNode: this.transformCreateSchema.bind(this),
        DropSchemaNode: this.transformDropSchema.bind(this),
        AlterTableNode: this.transformAlterTable.bind(this),
        DropColumnNode: this.transformDropColumn.bind(this),
        RenameColumnNode: this.transformRenameColumn.bind(this),
        AlterColumnNode: this.transformAlterColumn.bind(this),
        ModifyColumnNode: this.transformModifyColumn.bind(this),
        AddConstraintNode: this.transformAddConstraint.bind(this),
        DropConstraintNode: this.transformDropConstraint.bind(this),
        RenameConstraintNode: this.transformRenameConstraint.bind(this),
        ForeignKeyConstraintNode: this.transformForeignKeyConstraint.bind(this),
        CreateViewNode: this.transformCreateView.bind(this),
        RefreshMaterializedViewNode: this.transformRefreshMaterializedView.bind(this),
        DropViewNode: this.transformDropView.bind(this),
        GeneratedNode: this.transformGenerated.bind(this),
        DefaultValueNode: this.transformDefaultValue.bind(this),
        OnNode: this.transformOn.bind(this),
        ValuesNode: this.transformValues.bind(this),
        SelectModifierNode: this.transformSelectModifier.bind(this),
        CreateTypeNode: this.transformCreateType.bind(this),
        DropTypeNode: this.transformDropType.bind(this),
        ExplainNode: this.transformExplain.bind(this),
        DefaultInsertValueNode: this.transformDefaultInsertValue.bind(this),
        AggregateFunctionNode: this.transformAggregateFunction.bind(this),
        OverNode: this.transformOver.bind(this),
        PartitionByNode: this.transformPartitionBy.bind(this),
        PartitionByItemNode: this.transformPartitionByItem.bind(this),
        SetOperationNode: this.transformSetOperation.bind(this),
        BinaryOperationNode: this.transformBinaryOperation.bind(this),
        UnaryOperationNode: this.transformUnaryOperation.bind(this),
        UsingNode: this.transformUsing.bind(this),
        FunctionNode: this.transformFunction.bind(this),
        CaseNode: this.transformCase.bind(this),
        WhenNode: this.transformWhen.bind(this),
        JSONReferenceNode: this.transformJSONReference.bind(this),
        JSONPathNode: this.transformJSONPath.bind(this),
        JSONPathLegNode: this.transformJSONPathLeg.bind(this),
        JSONOperatorChainNode: this.transformJSONOperatorChain.bind(this),
        TupleNode: this.transformTuple.bind(this),
        MergeQueryNode: this.transformMergeQuery.bind(this),
        MatchedNode: this.transformMatched.bind(this),
        AddIndexNode: this.transformAddIndex.bind(this),
        CastNode: this.transformCast.bind(this),
        FetchNode: this.transformFetch.bind(this),
        TopNode: this.transformTop.bind(this),
        OutputNode: this.transformOutput.bind(this),
        OrActionNode: this.transformOrAction.bind(this),
        CollateNode: this.transformCollate.bind(this)
      });
      transformNode(node, queryId) {
        if (!node) {
          return node;
        }
        this.nodeStack.push(node);
        const out = this.transformNodeImpl(node, queryId);
        this.nodeStack.pop();
        return freeze(out);
      }
      transformNodeImpl(node, queryId) {
        return this.#transformers[node.kind](node, queryId);
      }
      transformNodeList(list, queryId) {
        if (!list) {
          return list;
        }
        return freeze(list.map((node) => this.transformNode(node, queryId)));
      }
      transformSelectQuery(node, queryId) {
        return requireAllProps({
          kind: "SelectQueryNode",
          from: this.transformNode(node.from, queryId),
          selections: this.transformNodeList(node.selections, queryId),
          distinctOn: this.transformNodeList(node.distinctOn, queryId),
          joins: this.transformNodeList(node.joins, queryId),
          groupBy: this.transformNode(node.groupBy, queryId),
          orderBy: this.transformNode(node.orderBy, queryId),
          where: this.transformNode(node.where, queryId),
          frontModifiers: this.transformNodeList(node.frontModifiers, queryId),
          endModifiers: this.transformNodeList(node.endModifiers, queryId),
          limit: this.transformNode(node.limit, queryId),
          offset: this.transformNode(node.offset, queryId),
          with: this.transformNode(node.with, queryId),
          having: this.transformNode(node.having, queryId),
          explain: this.transformNode(node.explain, queryId),
          setOperations: this.transformNodeList(node.setOperations, queryId),
          fetch: this.transformNode(node.fetch, queryId),
          top: this.transformNode(node.top, queryId)
        });
      }
      transformSelection(node, queryId) {
        return requireAllProps({
          kind: "SelectionNode",
          selection: this.transformNode(node.selection, queryId)
        });
      }
      transformColumn(node, queryId) {
        return requireAllProps({
          kind: "ColumnNode",
          column: this.transformNode(node.column, queryId)
        });
      }
      transformAlias(node, queryId) {
        return requireAllProps({
          kind: "AliasNode",
          node: this.transformNode(node.node, queryId),
          alias: this.transformNode(node.alias, queryId)
        });
      }
      transformTable(node, queryId) {
        return requireAllProps({
          kind: "TableNode",
          table: this.transformNode(node.table, queryId)
        });
      }
      transformFrom(node, queryId) {
        return requireAllProps({
          kind: "FromNode",
          froms: this.transformNodeList(node.froms, queryId)
        });
      }
      transformReference(node, queryId) {
        return requireAllProps({
          kind: "ReferenceNode",
          column: this.transformNode(node.column, queryId),
          table: this.transformNode(node.table, queryId)
        });
      }
      transformAnd(node, queryId) {
        return requireAllProps({
          kind: "AndNode",
          left: this.transformNode(node.left, queryId),
          right: this.transformNode(node.right, queryId)
        });
      }
      transformOr(node, queryId) {
        return requireAllProps({
          kind: "OrNode",
          left: this.transformNode(node.left, queryId),
          right: this.transformNode(node.right, queryId)
        });
      }
      transformValueList(node, queryId) {
        return requireAllProps({
          kind: "ValueListNode",
          values: this.transformNodeList(node.values, queryId)
        });
      }
      transformParens(node, queryId) {
        return requireAllProps({
          kind: "ParensNode",
          node: this.transformNode(node.node, queryId)
        });
      }
      transformJoin(node, queryId) {
        return requireAllProps({
          kind: "JoinNode",
          joinType: node.joinType,
          table: this.transformNode(node.table, queryId),
          on: this.transformNode(node.on, queryId)
        });
      }
      transformRaw(node, queryId) {
        return requireAllProps({
          kind: "RawNode",
          sqlFragments: freeze([...node.sqlFragments]),
          parameters: this.transformNodeList(node.parameters, queryId)
        });
      }
      transformWhere(node, queryId) {
        return requireAllProps({
          kind: "WhereNode",
          where: this.transformNode(node.where, queryId)
        });
      }
      transformInsertQuery(node, queryId) {
        return requireAllProps({
          kind: "InsertQueryNode",
          into: this.transformNode(node.into, queryId),
          columns: this.transformNodeList(node.columns, queryId),
          values: this.transformNode(node.values, queryId),
          returning: this.transformNode(node.returning, queryId),
          onConflict: this.transformNode(node.onConflict, queryId),
          onDuplicateKey: this.transformNode(node.onDuplicateKey, queryId),
          endModifiers: this.transformNodeList(node.endModifiers, queryId),
          with: this.transformNode(node.with, queryId),
          ignore: node.ignore,
          orAction: this.transformNode(node.orAction, queryId),
          replace: node.replace,
          explain: this.transformNode(node.explain, queryId),
          defaultValues: node.defaultValues,
          top: this.transformNode(node.top, queryId),
          output: this.transformNode(node.output, queryId)
        });
      }
      transformValues(node, queryId) {
        return requireAllProps({
          kind: "ValuesNode",
          values: this.transformNodeList(node.values, queryId)
        });
      }
      transformDeleteQuery(node, queryId) {
        return requireAllProps({
          kind: "DeleteQueryNode",
          from: this.transformNode(node.from, queryId),
          using: this.transformNode(node.using, queryId),
          joins: this.transformNodeList(node.joins, queryId),
          where: this.transformNode(node.where, queryId),
          returning: this.transformNode(node.returning, queryId),
          endModifiers: this.transformNodeList(node.endModifiers, queryId),
          with: this.transformNode(node.with, queryId),
          orderBy: this.transformNode(node.orderBy, queryId),
          limit: this.transformNode(node.limit, queryId),
          explain: this.transformNode(node.explain, queryId),
          top: this.transformNode(node.top, queryId),
          output: this.transformNode(node.output, queryId)
        });
      }
      transformReturning(node, queryId) {
        return requireAllProps({
          kind: "ReturningNode",
          selections: this.transformNodeList(node.selections, queryId)
        });
      }
      transformCreateTable(node, queryId) {
        return requireAllProps({
          kind: "CreateTableNode",
          table: this.transformNode(node.table, queryId),
          columns: this.transformNodeList(node.columns, queryId),
          constraints: this.transformNodeList(node.constraints, queryId),
          temporary: node.temporary,
          ifNotExists: node.ifNotExists,
          onCommit: node.onCommit,
          frontModifiers: this.transformNodeList(node.frontModifiers, queryId),
          endModifiers: this.transformNodeList(node.endModifiers, queryId),
          selectQuery: this.transformNode(node.selectQuery, queryId)
        });
      }
      transformColumnDefinition(node, queryId) {
        return requireAllProps({
          kind: "ColumnDefinitionNode",
          column: this.transformNode(node.column, queryId),
          dataType: this.transformNode(node.dataType, queryId),
          references: this.transformNode(node.references, queryId),
          primaryKey: node.primaryKey,
          autoIncrement: node.autoIncrement,
          unique: node.unique,
          notNull: node.notNull,
          unsigned: node.unsigned,
          defaultTo: this.transformNode(node.defaultTo, queryId),
          check: this.transformNode(node.check, queryId),
          generated: this.transformNode(node.generated, queryId),
          frontModifiers: this.transformNodeList(node.frontModifiers, queryId),
          endModifiers: this.transformNodeList(node.endModifiers, queryId),
          nullsNotDistinct: node.nullsNotDistinct,
          identity: node.identity,
          ifNotExists: node.ifNotExists
        });
      }
      transformAddColumn(node, queryId) {
        return requireAllProps({
          kind: "AddColumnNode",
          column: this.transformNode(node.column, queryId)
        });
      }
      transformDropTable(node, queryId) {
        return requireAllProps({
          kind: "DropTableNode",
          table: this.transformNode(node.table, queryId),
          ifExists: node.ifExists,
          cascade: node.cascade
        });
      }
      transformOrderBy(node, queryId) {
        return requireAllProps({
          kind: "OrderByNode",
          items: this.transformNodeList(node.items, queryId)
        });
      }
      transformOrderByItem(node, queryId) {
        return requireAllProps({
          kind: "OrderByItemNode",
          orderBy: this.transformNode(node.orderBy, queryId),
          direction: this.transformNode(node.direction, queryId),
          collation: this.transformNode(node.collation, queryId),
          nulls: node.nulls
        });
      }
      transformGroupBy(node, queryId) {
        return requireAllProps({
          kind: "GroupByNode",
          items: this.transformNodeList(node.items, queryId)
        });
      }
      transformGroupByItem(node, queryId) {
        return requireAllProps({
          kind: "GroupByItemNode",
          groupBy: this.transformNode(node.groupBy, queryId)
        });
      }
      transformUpdateQuery(node, queryId) {
        return requireAllProps({
          kind: "UpdateQueryNode",
          table: this.transformNode(node.table, queryId),
          from: this.transformNode(node.from, queryId),
          joins: this.transformNodeList(node.joins, queryId),
          where: this.transformNode(node.where, queryId),
          updates: this.transformNodeList(node.updates, queryId),
          returning: this.transformNode(node.returning, queryId),
          endModifiers: this.transformNodeList(node.endModifiers, queryId),
          with: this.transformNode(node.with, queryId),
          explain: this.transformNode(node.explain, queryId),
          limit: this.transformNode(node.limit, queryId),
          top: this.transformNode(node.top, queryId),
          output: this.transformNode(node.output, queryId),
          orderBy: this.transformNode(node.orderBy, queryId)
        });
      }
      transformColumnUpdate(node, queryId) {
        return requireAllProps({
          kind: "ColumnUpdateNode",
          column: this.transformNode(node.column, queryId),
          value: this.transformNode(node.value, queryId)
        });
      }
      transformLimit(node, queryId) {
        return requireAllProps({
          kind: "LimitNode",
          limit: this.transformNode(node.limit, queryId)
        });
      }
      transformOffset(node, queryId) {
        return requireAllProps({
          kind: "OffsetNode",
          offset: this.transformNode(node.offset, queryId)
        });
      }
      transformOnConflict(node, queryId) {
        return requireAllProps({
          kind: "OnConflictNode",
          columns: this.transformNodeList(node.columns, queryId),
          constraint: this.transformNode(node.constraint, queryId),
          indexExpression: this.transformNode(node.indexExpression, queryId),
          indexWhere: this.transformNode(node.indexWhere, queryId),
          updates: this.transformNodeList(node.updates, queryId),
          updateWhere: this.transformNode(node.updateWhere, queryId),
          doNothing: node.doNothing
        });
      }
      transformOnDuplicateKey(node, queryId) {
        return requireAllProps({
          kind: "OnDuplicateKeyNode",
          updates: this.transformNodeList(node.updates, queryId)
        });
      }
      transformCreateIndex(node, queryId) {
        return requireAllProps({
          kind: "CreateIndexNode",
          name: this.transformNode(node.name, queryId),
          table: this.transformNode(node.table, queryId),
          columns: this.transformNodeList(node.columns, queryId),
          unique: node.unique,
          using: this.transformNode(node.using, queryId),
          ifNotExists: node.ifNotExists,
          where: this.transformNode(node.where, queryId),
          nullsNotDistinct: node.nullsNotDistinct
        });
      }
      transformList(node, queryId) {
        return requireAllProps({
          kind: "ListNode",
          items: this.transformNodeList(node.items, queryId)
        });
      }
      transformDropIndex(node, queryId) {
        return requireAllProps({
          kind: "DropIndexNode",
          name: this.transformNode(node.name, queryId),
          table: this.transformNode(node.table, queryId),
          ifExists: node.ifExists,
          cascade: node.cascade
        });
      }
      transformPrimaryKeyConstraint(node, queryId) {
        return requireAllProps({
          kind: "PrimaryKeyConstraintNode",
          columns: this.transformNodeList(node.columns, queryId),
          name: this.transformNode(node.name, queryId),
          deferrable: node.deferrable,
          initiallyDeferred: node.initiallyDeferred
        });
      }
      transformUniqueConstraint(node, queryId) {
        return requireAllProps({
          kind: "UniqueConstraintNode",
          columns: this.transformNodeList(node.columns, queryId),
          name: this.transformNode(node.name, queryId),
          nullsNotDistinct: node.nullsNotDistinct,
          deferrable: node.deferrable,
          initiallyDeferred: node.initiallyDeferred
        });
      }
      transformForeignKeyConstraint(node, queryId) {
        return requireAllProps({
          kind: "ForeignKeyConstraintNode",
          columns: this.transformNodeList(node.columns, queryId),
          references: this.transformNode(node.references, queryId),
          name: this.transformNode(node.name, queryId),
          onDelete: node.onDelete,
          onUpdate: node.onUpdate,
          deferrable: node.deferrable,
          initiallyDeferred: node.initiallyDeferred
        });
      }
      transformSetOperation(node, queryId) {
        return requireAllProps({
          kind: "SetOperationNode",
          operator: node.operator,
          expression: this.transformNode(node.expression, queryId),
          all: node.all
        });
      }
      transformReferences(node, queryId) {
        return requireAllProps({
          kind: "ReferencesNode",
          table: this.transformNode(node.table, queryId),
          columns: this.transformNodeList(node.columns, queryId),
          onDelete: node.onDelete,
          onUpdate: node.onUpdate
        });
      }
      transformCheckConstraint(node, queryId) {
        return requireAllProps({
          kind: "CheckConstraintNode",
          expression: this.transformNode(node.expression, queryId),
          name: this.transformNode(node.name, queryId)
        });
      }
      transformWith(node, queryId) {
        return requireAllProps({
          kind: "WithNode",
          expressions: this.transformNodeList(node.expressions, queryId),
          recursive: node.recursive
        });
      }
      transformCommonTableExpression(node, queryId) {
        return requireAllProps({
          kind: "CommonTableExpressionNode",
          name: this.transformNode(node.name, queryId),
          materialized: node.materialized,
          expression: this.transformNode(node.expression, queryId)
        });
      }
      transformCommonTableExpressionName(node, queryId) {
        return requireAllProps({
          kind: "CommonTableExpressionNameNode",
          table: this.transformNode(node.table, queryId),
          columns: this.transformNodeList(node.columns, queryId)
        });
      }
      transformHaving(node, queryId) {
        return requireAllProps({
          kind: "HavingNode",
          having: this.transformNode(node.having, queryId)
        });
      }
      transformCreateSchema(node, queryId) {
        return requireAllProps({
          kind: "CreateSchemaNode",
          schema: this.transformNode(node.schema, queryId),
          ifNotExists: node.ifNotExists
        });
      }
      transformDropSchema(node, queryId) {
        return requireAllProps({
          kind: "DropSchemaNode",
          schema: this.transformNode(node.schema, queryId),
          ifExists: node.ifExists,
          cascade: node.cascade
        });
      }
      transformAlterTable(node, queryId) {
        return requireAllProps({
          kind: "AlterTableNode",
          table: this.transformNode(node.table, queryId),
          renameTo: this.transformNode(node.renameTo, queryId),
          setSchema: this.transformNode(node.setSchema, queryId),
          columnAlterations: this.transformNodeList(node.columnAlterations, queryId),
          addConstraint: this.transformNode(node.addConstraint, queryId),
          dropConstraint: this.transformNode(node.dropConstraint, queryId),
          renameConstraint: this.transformNode(node.renameConstraint, queryId),
          addIndex: this.transformNode(node.addIndex, queryId),
          dropIndex: this.transformNode(node.dropIndex, queryId)
        });
      }
      transformDropColumn(node, queryId) {
        return requireAllProps({
          kind: "DropColumnNode",
          column: this.transformNode(node.column, queryId)
        });
      }
      transformRenameColumn(node, queryId) {
        return requireAllProps({
          kind: "RenameColumnNode",
          column: this.transformNode(node.column, queryId),
          renameTo: this.transformNode(node.renameTo, queryId)
        });
      }
      transformAlterColumn(node, queryId) {
        return requireAllProps({
          kind: "AlterColumnNode",
          column: this.transformNode(node.column, queryId),
          dataType: this.transformNode(node.dataType, queryId),
          dataTypeExpression: this.transformNode(node.dataTypeExpression, queryId),
          setDefault: this.transformNode(node.setDefault, queryId),
          dropDefault: node.dropDefault,
          setNotNull: node.setNotNull,
          dropNotNull: node.dropNotNull
        });
      }
      transformModifyColumn(node, queryId) {
        return requireAllProps({
          kind: "ModifyColumnNode",
          column: this.transformNode(node.column, queryId)
        });
      }
      transformAddConstraint(node, queryId) {
        return requireAllProps({
          kind: "AddConstraintNode",
          constraint: this.transformNode(node.constraint, queryId)
        });
      }
      transformDropConstraint(node, queryId) {
        return requireAllProps({
          kind: "DropConstraintNode",
          constraintName: this.transformNode(node.constraintName, queryId),
          ifExists: node.ifExists,
          modifier: node.modifier
        });
      }
      transformRenameConstraint(node, queryId) {
        return requireAllProps({
          kind: "RenameConstraintNode",
          oldName: this.transformNode(node.oldName, queryId),
          newName: this.transformNode(node.newName, queryId)
        });
      }
      transformCreateView(node, queryId) {
        return requireAllProps({
          kind: "CreateViewNode",
          name: this.transformNode(node.name, queryId),
          temporary: node.temporary,
          orReplace: node.orReplace,
          ifNotExists: node.ifNotExists,
          materialized: node.materialized,
          columns: this.transformNodeList(node.columns, queryId),
          as: this.transformNode(node.as, queryId)
        });
      }
      transformRefreshMaterializedView(node, queryId) {
        return requireAllProps({
          kind: "RefreshMaterializedViewNode",
          name: this.transformNode(node.name, queryId),
          concurrently: node.concurrently,
          withNoData: node.withNoData
        });
      }
      transformDropView(node, queryId) {
        return requireAllProps({
          kind: "DropViewNode",
          name: this.transformNode(node.name, queryId),
          ifExists: node.ifExists,
          materialized: node.materialized,
          cascade: node.cascade
        });
      }
      transformGenerated(node, queryId) {
        return requireAllProps({
          kind: "GeneratedNode",
          byDefault: node.byDefault,
          always: node.always,
          identity: node.identity,
          stored: node.stored,
          expression: this.transformNode(node.expression, queryId)
        });
      }
      transformDefaultValue(node, queryId) {
        return requireAllProps({
          kind: "DefaultValueNode",
          defaultValue: this.transformNode(node.defaultValue, queryId)
        });
      }
      transformOn(node, queryId) {
        return requireAllProps({
          kind: "OnNode",
          on: this.transformNode(node.on, queryId)
        });
      }
      transformSelectModifier(node, queryId) {
        return requireAllProps({
          kind: "SelectModifierNode",
          modifier: node.modifier,
          rawModifier: this.transformNode(node.rawModifier, queryId),
          of: this.transformNodeList(node.of, queryId)
        });
      }
      transformCreateType(node, queryId) {
        return requireAllProps({
          kind: "CreateTypeNode",
          name: this.transformNode(node.name, queryId),
          enum: this.transformNode(node.enum, queryId)
        });
      }
      transformDropType(node, queryId) {
        return requireAllProps({
          kind: "DropTypeNode",
          name: this.transformNode(node.name, queryId),
          ifExists: node.ifExists
        });
      }
      transformExplain(node, queryId) {
        return requireAllProps({
          kind: "ExplainNode",
          format: node.format,
          options: this.transformNode(node.options, queryId)
        });
      }
      transformSchemableIdentifier(node, queryId) {
        return requireAllProps({
          kind: "SchemableIdentifierNode",
          schema: this.transformNode(node.schema, queryId),
          identifier: this.transformNode(node.identifier, queryId)
        });
      }
      transformAggregateFunction(node, queryId) {
        return requireAllProps({
          kind: "AggregateFunctionNode",
          func: node.func,
          aggregated: this.transformNodeList(node.aggregated, queryId),
          distinct: node.distinct,
          orderBy: this.transformNode(node.orderBy, queryId),
          withinGroup: this.transformNode(node.withinGroup, queryId),
          filter: this.transformNode(node.filter, queryId),
          over: this.transformNode(node.over, queryId)
        });
      }
      transformOver(node, queryId) {
        return requireAllProps({
          kind: "OverNode",
          orderBy: this.transformNode(node.orderBy, queryId),
          partitionBy: this.transformNode(node.partitionBy, queryId)
        });
      }
      transformPartitionBy(node, queryId) {
        return requireAllProps({
          kind: "PartitionByNode",
          items: this.transformNodeList(node.items, queryId)
        });
      }
      transformPartitionByItem(node, queryId) {
        return requireAllProps({
          kind: "PartitionByItemNode",
          partitionBy: this.transformNode(node.partitionBy, queryId)
        });
      }
      transformBinaryOperation(node, queryId) {
        return requireAllProps({
          kind: "BinaryOperationNode",
          leftOperand: this.transformNode(node.leftOperand, queryId),
          operator: this.transformNode(node.operator, queryId),
          rightOperand: this.transformNode(node.rightOperand, queryId)
        });
      }
      transformUnaryOperation(node, queryId) {
        return requireAllProps({
          kind: "UnaryOperationNode",
          operator: this.transformNode(node.operator, queryId),
          operand: this.transformNode(node.operand, queryId)
        });
      }
      transformUsing(node, queryId) {
        return requireAllProps({
          kind: "UsingNode",
          tables: this.transformNodeList(node.tables, queryId)
        });
      }
      transformFunction(node, queryId) {
        return requireAllProps({
          kind: "FunctionNode",
          func: node.func,
          arguments: this.transformNodeList(node.arguments, queryId)
        });
      }
      transformCase(node, queryId) {
        return requireAllProps({
          kind: "CaseNode",
          value: this.transformNode(node.value, queryId),
          when: this.transformNodeList(node.when, queryId),
          else: this.transformNode(node.else, queryId),
          isStatement: node.isStatement
        });
      }
      transformWhen(node, queryId) {
        return requireAllProps({
          kind: "WhenNode",
          condition: this.transformNode(node.condition, queryId),
          result: this.transformNode(node.result, queryId)
        });
      }
      transformJSONReference(node, queryId) {
        return requireAllProps({
          kind: "JSONReferenceNode",
          reference: this.transformNode(node.reference, queryId),
          traversal: this.transformNode(node.traversal, queryId)
        });
      }
      transformJSONPath(node, queryId) {
        return requireAllProps({
          kind: "JSONPathNode",
          inOperator: this.transformNode(node.inOperator, queryId),
          pathLegs: this.transformNodeList(node.pathLegs, queryId)
        });
      }
      transformJSONPathLeg(node, _queryId) {
        return requireAllProps({
          kind: "JSONPathLegNode",
          type: node.type,
          value: node.value
        });
      }
      transformJSONOperatorChain(node, queryId) {
        return requireAllProps({
          kind: "JSONOperatorChainNode",
          operator: this.transformNode(node.operator, queryId),
          values: this.transformNodeList(node.values, queryId)
        });
      }
      transformTuple(node, queryId) {
        return requireAllProps({
          kind: "TupleNode",
          values: this.transformNodeList(node.values, queryId)
        });
      }
      transformMergeQuery(node, queryId) {
        return requireAllProps({
          kind: "MergeQueryNode",
          into: this.transformNode(node.into, queryId),
          using: this.transformNode(node.using, queryId),
          whens: this.transformNodeList(node.whens, queryId),
          with: this.transformNode(node.with, queryId),
          top: this.transformNode(node.top, queryId),
          endModifiers: this.transformNodeList(node.endModifiers, queryId),
          output: this.transformNode(node.output, queryId),
          returning: this.transformNode(node.returning, queryId)
        });
      }
      transformMatched(node, _queryId) {
        return requireAllProps({
          kind: "MatchedNode",
          not: node.not,
          bySource: node.bySource
        });
      }
      transformAddIndex(node, queryId) {
        return requireAllProps({
          kind: "AddIndexNode",
          name: this.transformNode(node.name, queryId),
          columns: this.transformNodeList(node.columns, queryId),
          unique: node.unique,
          using: this.transformNode(node.using, queryId),
          ifNotExists: node.ifNotExists
        });
      }
      transformCast(node, queryId) {
        return requireAllProps({
          kind: "CastNode",
          expression: this.transformNode(node.expression, queryId),
          dataType: this.transformNode(node.dataType, queryId)
        });
      }
      transformFetch(node, queryId) {
        return requireAllProps({
          kind: "FetchNode",
          rowCount: this.transformNode(node.rowCount, queryId),
          modifier: node.modifier
        });
      }
      transformTop(node, _queryId) {
        return requireAllProps({
          kind: "TopNode",
          expression: node.expression,
          modifiers: node.modifiers
        });
      }
      transformOutput(node, queryId) {
        return requireAllProps({
          kind: "OutputNode",
          selections: this.transformNodeList(node.selections, queryId)
        });
      }
      transformDataType(node, _queryId) {
        return node;
      }
      transformSelectAll(node, _queryId) {
        return node;
      }
      transformIdentifier(node, _queryId) {
        return node;
      }
      transformValue(node, _queryId) {
        return node;
      }
      transformPrimitiveValueList(node, _queryId) {
        return node;
      }
      transformOperator(node, _queryId) {
        return node;
      }
      transformDefaultInsertValue(node, _queryId) {
        return node;
      }
      transformOrAction(node, _queryId) {
        return node;
      }
      transformCollate(node, _queryId) {
        return node;
      }
    };
  }
});
var ROOT_OPERATION_NODES;
var SCHEMALESS_FUNCTIONS;
var WithSchemaTransformer;
var init_with_schema_transformer = __esm({
  "../node_modules/kysely/dist/esm/plugin/with-schema/with-schema-transformer.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_alias_node();
    init_identifier_node();
    init_list_node();
    init_operation_node_transformer();
    init_schemable_identifier_node();
    init_table_node();
    init_object_utils();
    ROOT_OPERATION_NODES = freeze({
      AlterTableNode: true,
      CreateIndexNode: true,
      CreateSchemaNode: true,
      CreateTableNode: true,
      CreateTypeNode: true,
      CreateViewNode: true,
      RefreshMaterializedViewNode: true,
      DeleteQueryNode: true,
      DropIndexNode: true,
      DropSchemaNode: true,
      DropTableNode: true,
      DropTypeNode: true,
      DropViewNode: true,
      InsertQueryNode: true,
      RawNode: true,
      SelectQueryNode: true,
      UpdateQueryNode: true,
      MergeQueryNode: true
    });
    SCHEMALESS_FUNCTIONS = {
      json_agg: true,
      to_json: true
    };
    WithSchemaTransformer = class extends OperationNodeTransformer {
      static {
        __name(this, "WithSchemaTransformer");
      }
      static {
        __name2(this, "WithSchemaTransformer");
      }
      #schema;
      #schemableIds = /* @__PURE__ */ new Set();
      #ctes = /* @__PURE__ */ new Set();
      constructor(schema2) {
        super();
        this.#schema = schema2;
      }
      transformNodeImpl(node, queryId) {
        if (!this.#isRootOperationNode(node)) {
          return super.transformNodeImpl(node, queryId);
        }
        const ctes = this.#collectCTEs(node);
        for (const cte of ctes) {
          this.#ctes.add(cte);
        }
        const tables = this.#collectSchemableIds(node);
        for (const table of tables) {
          this.#schemableIds.add(table);
        }
        const transformed = super.transformNodeImpl(node, queryId);
        for (const table of tables) {
          this.#schemableIds.delete(table);
        }
        for (const cte of ctes) {
          this.#ctes.delete(cte);
        }
        return transformed;
      }
      transformSchemableIdentifier(node, queryId) {
        const transformed = super.transformSchemableIdentifier(node, queryId);
        if (transformed.schema || !this.#schemableIds.has(node.identifier.name)) {
          return transformed;
        }
        return {
          ...transformed,
          schema: IdentifierNode.create(this.#schema)
        };
      }
      transformReferences(node, queryId) {
        const transformed = super.transformReferences(node, queryId);
        if (transformed.table.table.schema) {
          return transformed;
        }
        return {
          ...transformed,
          table: TableNode.createWithSchema(this.#schema, transformed.table.table.identifier.name)
        };
      }
      transformAggregateFunction(node, queryId) {
        return {
          ...super.transformAggregateFunction({ ...node, aggregated: [] }, queryId),
          aggregated: this.#transformTableArgsWithoutSchemas(node, queryId, "aggregated")
        };
      }
      transformFunction(node, queryId) {
        return {
          ...super.transformFunction({ ...node, arguments: [] }, queryId),
          arguments: this.#transformTableArgsWithoutSchemas(node, queryId, "arguments")
        };
      }
      #transformTableArgsWithoutSchemas(node, queryId, argsKey) {
        return SCHEMALESS_FUNCTIONS[node.func] ? node[argsKey].map((arg) => !TableNode.is(arg) || arg.table.schema ? this.transformNode(arg, queryId) : {
          ...arg,
          table: this.transformIdentifier(arg.table.identifier, queryId)
        }) : this.transformNodeList(node[argsKey], queryId);
      }
      #isRootOperationNode(node) {
        return node.kind in ROOT_OPERATION_NODES;
      }
      #collectSchemableIds(node) {
        const schemableIds = /* @__PURE__ */ new Set();
        if ("name" in node && node.name && SchemableIdentifierNode.is(node.name)) {
          this.#collectSchemableId(node.name, schemableIds);
        }
        if ("from" in node && node.from) {
          for (const from of node.from.froms) {
            this.#collectSchemableIdsFromTableExpr(from, schemableIds);
          }
        }
        if ("into" in node && node.into) {
          this.#collectSchemableIdsFromTableExpr(node.into, schemableIds);
        }
        if ("table" in node && node.table) {
          this.#collectSchemableIdsFromTableExpr(node.table, schemableIds);
        }
        if ("joins" in node && node.joins) {
          for (const join of node.joins) {
            this.#collectSchemableIdsFromTableExpr(join.table, schemableIds);
          }
        }
        if ("using" in node && node.using) {
          this.#collectSchemableIdsFromTableExpr(node.using, schemableIds);
        }
        return schemableIds;
      }
      #collectCTEs(node) {
        const ctes = /* @__PURE__ */ new Set();
        if ("with" in node && node.with) {
          this.#collectCTEIds(node.with, ctes);
        }
        return ctes;
      }
      #collectSchemableIdsFromTableExpr(node, schemableIds) {
        if (TableNode.is(node)) {
          this.#collectSchemableId(node.table, schemableIds);
        } else if (AliasNode.is(node) && TableNode.is(node.node)) {
          this.#collectSchemableId(node.node.table, schemableIds);
        } else if (ListNode.is(node)) {
          for (const table of node.items) {
            this.#collectSchemableIdsFromTableExpr(table, schemableIds);
          }
        }
      }
      #collectSchemableId(node, schemableIds) {
        const id = node.identifier.name;
        if (!this.#schemableIds.has(id) && !this.#ctes.has(id)) {
          schemableIds.add(id);
        }
      }
      #collectCTEIds(node, ctes) {
        for (const expr of node.expressions) {
          const cteId = expr.name.table.table.identifier.name;
          if (!this.#ctes.has(cteId)) {
            ctes.add(cteId);
          }
        }
      }
    };
  }
});
var WithSchemaPlugin;
var init_with_schema_plugin = __esm({
  "../node_modules/kysely/dist/esm/plugin/with-schema/with-schema-plugin.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_with_schema_transformer();
    WithSchemaPlugin = class {
      static {
        __name(this, "WithSchemaPlugin");
      }
      static {
        __name2(this, "WithSchemaPlugin");
      }
      #transformer;
      constructor(schema2) {
        this.#transformer = new WithSchemaTransformer(schema2);
      }
      transformQuery(args) {
        return this.#transformer.transformNode(args.node, args.queryId);
      }
      async transformResult(args) {
        return args.result;
      }
    };
  }
});
var MatchedNode;
var init_matched_node = __esm({
  "../node_modules/kysely/dist/esm/operation-node/matched-node.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    MatchedNode = freeze({
      is(node) {
        return node.kind === "MatchedNode";
      },
      create(not, bySource = false) {
        return freeze({
          kind: "MatchedNode",
          not,
          bySource
        });
      }
    });
  }
});
function parseMergeWhen(type, args, refRight) {
  return WhenNode.create(parseFilterList([
    MatchedNode.create(!type.isMatched, type.bySource),
    ...args && args.length > 0 ? [
      args.length === 3 && refRight ? parseReferentialBinaryOperation(args[0], args[1], args[2]) : parseValueBinaryOperationOrExpression(args)
    ] : []
  ], "and", false));
}
__name(parseMergeWhen, "parseMergeWhen");
function parseMergeThen(result) {
  if (isString(result)) {
    return RawNode.create([result], []);
  }
  if (isOperationNodeSource(result)) {
    return result.toOperationNode();
  }
  return result;
}
__name(parseMergeThen, "parseMergeThen");
var init_merge_parser = __esm({
  "../node_modules/kysely/dist/esm/parser/merge-parser.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_matched_node();
    init_operation_node_source();
    init_raw_node();
    init_when_node();
    init_object_utils();
    init_binary_operation_parser();
    __name2(parseMergeWhen, "parseMergeWhen");
    __name2(parseMergeThen, "parseMergeThen");
  }
});
var Deferred;
var init_deferred = __esm({
  "../node_modules/kysely/dist/esm/util/deferred.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    Deferred = class {
      static {
        __name(this, "Deferred");
      }
      static {
        __name2(this, "Deferred");
      }
      #promise;
      #resolve;
      #reject;
      constructor() {
        this.#promise = new Promise((resolve, reject) => {
          this.#reject = reject;
          this.#resolve = resolve;
        });
      }
      get promise() {
        return this.#promise;
      }
      resolve = /* @__PURE__ */ __name2((value) => {
        if (this.#resolve) {
          this.#resolve(value);
        }
      }, "resolve");
      reject = /* @__PURE__ */ __name2((reason) => {
        if (this.#reject) {
          this.#reject(reason);
        }
      }, "reject");
    };
  }
});
async function provideControlledConnection(connectionProvider) {
  const connectionDefer = new Deferred();
  const connectionReleaseDefer = new Deferred();
  connectionProvider.provideConnection(async (connection) => {
    connectionDefer.resolve(connection);
    return await connectionReleaseDefer.promise;
  }).catch((ex) => connectionDefer.reject(ex));
  return freeze({
    connection: await connectionDefer.promise,
    release: connectionReleaseDefer.resolve
  });
}
__name(provideControlledConnection, "provideControlledConnection");
var init_provide_controlled_connection = __esm({
  "../node_modules/kysely/dist/esm/util/provide-controlled-connection.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_deferred();
    init_object_utils();
    __name2(provideControlledConnection, "provideControlledConnection");
  }
});
var NO_PLUGINS;
var QueryExecutorBase;
var init_query_executor_base = __esm({
  "../node_modules/kysely/dist/esm/query-executor/query-executor-base.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    init_provide_controlled_connection();
    init_log_once();
    NO_PLUGINS = freeze([]);
    QueryExecutorBase = class {
      static {
        __name(this, "QueryExecutorBase");
      }
      static {
        __name2(this, "QueryExecutorBase");
      }
      #plugins;
      constructor(plugins = NO_PLUGINS) {
        this.#plugins = plugins;
      }
      get plugins() {
        return this.#plugins;
      }
      transformQuery(node, queryId) {
        for (const plugin of this.#plugins) {
          const transformedNode = plugin.transformQuery({ node, queryId });
          if (transformedNode.kind === node.kind) {
            node = transformedNode;
          } else {
            throw new Error([
              `KyselyPlugin.transformQuery must return a node`,
              `of the same kind that was given to it.`,
              `The plugin was given a ${node.kind}`,
              `but it returned a ${transformedNode.kind}`
            ].join(" "));
          }
        }
        return node;
      }
      async executeQuery(compiledQuery, queryId) {
        return await this.provideConnection(async (connection) => {
          const result = await connection.executeQuery(compiledQuery);
          if ("numUpdatedOrDeletedRows" in result) {
            logOnce("kysely:warning: outdated driver/plugin detected! `QueryResult.numUpdatedOrDeletedRows` has been replaced with `QueryResult.numAffectedRows`.");
          }
          return await this.#transformResult(result, queryId);
        });
      }
      async *stream(compiledQuery, chunkSize, queryId) {
        const { connection, release } = await provideControlledConnection(this);
        try {
          for await (const result of connection.streamQuery(compiledQuery, chunkSize)) {
            yield await this.#transformResult(result, queryId);
          }
        } finally {
          release();
        }
      }
      async #transformResult(result, queryId) {
        for (const plugin of this.#plugins) {
          result = await plugin.transformResult({ result, queryId });
        }
        return result;
      }
    };
  }
});
var NoopQueryExecutor;
var NOOP_QUERY_EXECUTOR;
var init_noop_query_executor = __esm({
  "../node_modules/kysely/dist/esm/query-executor/noop-query-executor.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_query_executor_base();
    NoopQueryExecutor = class _NoopQueryExecutor extends QueryExecutorBase {
      static {
        __name(this, "_NoopQueryExecutor");
      }
      static {
        __name2(this, "NoopQueryExecutor");
      }
      get adapter() {
        throw new Error("this query cannot be compiled to SQL");
      }
      compileQuery() {
        throw new Error("this query cannot be compiled to SQL");
      }
      provideConnection() {
        throw new Error("this query cannot be executed");
      }
      withConnectionProvider() {
        throw new Error("this query cannot have a connection provider");
      }
      withPlugin(plugin) {
        return new _NoopQueryExecutor([...this.plugins, plugin]);
      }
      withPlugins(plugins) {
        return new _NoopQueryExecutor([...this.plugins, ...plugins]);
      }
      withPluginAtFront(plugin) {
        return new _NoopQueryExecutor([plugin, ...this.plugins]);
      }
      withoutPlugins() {
        return new _NoopQueryExecutor([]);
      }
    };
    NOOP_QUERY_EXECUTOR = new NoopQueryExecutor();
  }
});
var MergeResult;
var init_merge_result = __esm({
  "../node_modules/kysely/dist/esm/query-builder/merge-result.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    MergeResult = class {
      static {
        __name(this, "MergeResult");
      }
      static {
        __name2(this, "MergeResult");
      }
      numChangedRows;
      constructor(numChangedRows) {
        this.numChangedRows = numChangedRows;
      }
    };
  }
});
var MergeQueryBuilder;
var WheneableMergeQueryBuilder;
var MatchedThenableMergeQueryBuilder;
var NotMatchedThenableMergeQueryBuilder;
var init_merge_query_builder = __esm({
  "../node_modules/kysely/dist/esm/query-builder/merge-query-builder.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_insert_query_node();
    init_merge_query_node();
    init_query_node();
    init_update_query_node();
    init_insert_values_parser();
    init_join_parser();
    init_merge_parser();
    init_select_parser();
    init_top_parser();
    init_noop_query_executor();
    init_object_utils();
    init_merge_result();
    init_no_result_error();
    init_update_query_builder();
    MergeQueryBuilder = class _MergeQueryBuilder {
      static {
        __name(this, "_MergeQueryBuilder");
      }
      static {
        __name2(this, "MergeQueryBuilder");
      }
      #props;
      constructor(props) {
        this.#props = freeze(props);
      }
      /**
       * This can be used to add any additional SQL to the end of the query.
       *
       * ### Examples
       *
       * ```ts
       * import { sql } from 'kysely'
       *
       * await db
       *   .mergeInto('person')
       *   .using('pet', 'pet.owner_id', 'person.id')
       *   .whenMatched()
       *   .thenDelete()
       *   .modifyEnd(sql.raw('-- this is a comment'))
       *   .execute()
       * ```
       *
       * The generated SQL (PostgreSQL):
       *
       * ```sql
       * merge into "person" using "pet" on "pet"."owner_id" = "person"."id" when matched then delete -- this is a comment
       * ```
       */
      modifyEnd(modifier) {
        return new _MergeQueryBuilder({
          ...this.#props,
          queryNode: QueryNode.cloneWithEndModifier(this.#props.queryNode, modifier.toOperationNode())
        });
      }
      /**
       * Changes a `merge into` query to an `merge top into` query.
       *
       * `top` clause is only supported by some dialects like MS SQL Server.
       *
       * ### Examples
       *
       * Affect 5 matched rows at most:
       *
       * ```ts
       * await db.mergeInto('person')
       *   .top(5)
       *   .using('pet', 'person.id', 'pet.owner_id')
       *   .whenMatched()
       *   .thenDelete()
       *   .execute()
       * ```
       *
       * The generated SQL (MS SQL Server):
       *
       * ```sql
       * merge top(5) into "person"
       * using "pet" on "person"."id" = "pet"."owner_id"
       * when matched then
       *   delete
       * ```
       *
       * Affect 50% of matched rows:
       *
       * ```ts
       * await db.mergeInto('person')
       *   .top(50, 'percent')
       *   .using('pet', 'person.id', 'pet.owner_id')
       *   .whenMatched()
       *   .thenDelete()
       *   .execute()
       * ```
       *
       * The generated SQL (MS SQL Server):
       *
       * ```sql
       * merge top(50) percent into "person"
       * using "pet" on "person"."id" = "pet"."owner_id"
       * when matched then
       *   delete
       * ```
       */
      top(expression, modifiers) {
        return new _MergeQueryBuilder({
          ...this.#props,
          queryNode: QueryNode.cloneWithTop(this.#props.queryNode, parseTop(expression, modifiers))
        });
      }
      using(...args) {
        return new WheneableMergeQueryBuilder({
          ...this.#props,
          queryNode: MergeQueryNode.cloneWithUsing(this.#props.queryNode, parseJoin("Using", args))
        });
      }
      returning(args) {
        return new _MergeQueryBuilder({
          ...this.#props,
          queryNode: QueryNode.cloneWithReturning(this.#props.queryNode, parseSelectArg(args))
        });
      }
      returningAll(table) {
        return new _MergeQueryBuilder({
          ...this.#props,
          queryNode: QueryNode.cloneWithReturning(this.#props.queryNode, parseSelectAll(table))
        });
      }
      output(args) {
        return new _MergeQueryBuilder({
          ...this.#props,
          queryNode: QueryNode.cloneWithOutput(this.#props.queryNode, parseSelectArg(args))
        });
      }
      outputAll(table) {
        return new _MergeQueryBuilder({
          ...this.#props,
          queryNode: QueryNode.cloneWithOutput(this.#props.queryNode, parseSelectAll(table))
        });
      }
    };
    WheneableMergeQueryBuilder = class _WheneableMergeQueryBuilder {
      static {
        __name(this, "_WheneableMergeQueryBuilder");
      }
      static {
        __name2(this, "WheneableMergeQueryBuilder");
      }
      #props;
      constructor(props) {
        this.#props = freeze(props);
      }
      /**
       * This can be used to add any additional SQL to the end of the query.
       *
       * ### Examples
       *
       * ```ts
       * import { sql } from 'kysely'
       *
       * await db
       *   .mergeInto('person')
       *   .using('pet', 'pet.owner_id', 'person.id')
       *   .whenMatched()
       *   .thenDelete()
       *   .modifyEnd(sql.raw('-- this is a comment'))
       *   .execute()
       * ```
       *
       * The generated SQL (PostgreSQL):
       *
       * ```sql
       * merge into "person" using "pet" on "pet"."owner_id" = "person"."id" when matched then delete -- this is a comment
       * ```
       */
      modifyEnd(modifier) {
        return new _WheneableMergeQueryBuilder({
          ...this.#props,
          queryNode: QueryNode.cloneWithEndModifier(this.#props.queryNode, modifier.toOperationNode())
        });
      }
      /**
       * See {@link MergeQueryBuilder.top}.
       */
      top(expression, modifiers) {
        return new _WheneableMergeQueryBuilder({
          ...this.#props,
          queryNode: QueryNode.cloneWithTop(this.#props.queryNode, parseTop(expression, modifiers))
        });
      }
      /**
       * Adds a simple `when matched` clause to the query.
       *
       * For a `when matched` clause with an `and` condition, see {@link whenMatchedAnd}.
       *
       * For a simple `when not matched` clause, see {@link whenNotMatched}.
       *
       * For a `when not matched` clause with an `and` condition, see {@link whenNotMatchedAnd}.
       *
       * ### Examples
       *
       * ```ts
       * const result = await db.mergeInto('person')
       *   .using('pet', 'person.id', 'pet.owner_id')
       *   .whenMatched()
       *   .thenDelete()
       *   .execute()
       * ```
       *
       * The generated SQL (PostgreSQL):
       *
       * ```sql
       * merge into "person"
       * using "pet" on "person"."id" = "pet"."owner_id"
       * when matched then
       *   delete
       * ```
       */
      whenMatched() {
        return this.#whenMatched([]);
      }
      whenMatchedAnd(...args) {
        return this.#whenMatched(args);
      }
      /**
       * Adds the `when matched` clause to the query with an `and` condition. But unlike
       * {@link whenMatchedAnd}, this method accepts a column reference as the 3rd argument.
       *
       * This method is similar to {@link SelectQueryBuilder.whereRef}, so see the documentation
       * for that method for more examples.
       */
      whenMatchedAndRef(lhs, op, rhs) {
        return this.#whenMatched([lhs, op, rhs], true);
      }
      #whenMatched(args, refRight) {
        return new MatchedThenableMergeQueryBuilder({
          ...this.#props,
          queryNode: MergeQueryNode.cloneWithWhen(this.#props.queryNode, parseMergeWhen({ isMatched: true }, args, refRight))
        });
      }
      /**
       * Adds a simple `when not matched` clause to the query.
       *
       * For a `when not matched` clause with an `and` condition, see {@link whenNotMatchedAnd}.
       *
       * For a simple `when matched` clause, see {@link whenMatched}.
       *
       * For a `when matched` clause with an `and` condition, see {@link whenMatchedAnd}.
       *
       * ### Examples
       *
       * ```ts
       * const result = await db.mergeInto('person')
       *   .using('pet', 'person.id', 'pet.owner_id')
       *   .whenNotMatched()
       *   .thenInsertValues({
       *     first_name: 'John',
       *     last_name: 'Doe',
       *   })
       *   .execute()
       * ```
       *
       * The generated SQL (PostgreSQL):
       *
       * ```sql
       * merge into "person"
       * using "pet" on "person"."id" = "pet"."owner_id"
       * when not matched then
       *   insert ("first_name", "last_name") values ($1, $2)
       * ```
       */
      whenNotMatched() {
        return this.#whenNotMatched([]);
      }
      whenNotMatchedAnd(...args) {
        return this.#whenNotMatched(args);
      }
      /**
       * Adds the `when not matched` clause to the query with an `and` condition. But unlike
       * {@link whenNotMatchedAnd}, this method accepts a column reference as the 3rd argument.
       *
       * Unlike {@link whenMatchedAndRef}, you cannot reference columns from the target table.
       *
       * This method is similar to {@link SelectQueryBuilder.whereRef}, so see the documentation
       * for that method for more examples.
       */
      whenNotMatchedAndRef(lhs, op, rhs) {
        return this.#whenNotMatched([lhs, op, rhs], true);
      }
      /**
       * Adds a simple `when not matched by source` clause to the query.
       *
       * Supported in MS SQL Server.
       *
       * Similar to {@link whenNotMatched}, but returns a {@link MatchedThenableMergeQueryBuilder}.
       */
      whenNotMatchedBySource() {
        return this.#whenNotMatched([], false, true);
      }
      whenNotMatchedBySourceAnd(...args) {
        return this.#whenNotMatched(args, false, true);
      }
      /**
       * Adds the `when not matched by source` clause to the query with an `and` condition.
       *
       * Similar to {@link whenNotMatchedAndRef}, but you can reference columns from
       * the target table, and not from source table and returns a {@link MatchedThenableMergeQueryBuilder}.
       */
      whenNotMatchedBySourceAndRef(lhs, op, rhs) {
        return this.#whenNotMatched([lhs, op, rhs], true, true);
      }
      returning(args) {
        return new _WheneableMergeQueryBuilder({
          ...this.#props,
          queryNode: QueryNode.cloneWithReturning(this.#props.queryNode, parseSelectArg(args))
        });
      }
      returningAll(table) {
        return new _WheneableMergeQueryBuilder({
          ...this.#props,
          queryNode: QueryNode.cloneWithReturning(this.#props.queryNode, parseSelectAll(table))
        });
      }
      output(args) {
        return new _WheneableMergeQueryBuilder({
          ...this.#props,
          queryNode: QueryNode.cloneWithOutput(this.#props.queryNode, parseSelectArg(args))
        });
      }
      outputAll(table) {
        return new _WheneableMergeQueryBuilder({
          ...this.#props,
          queryNode: QueryNode.cloneWithOutput(this.#props.queryNode, parseSelectAll(table))
        });
      }
      #whenNotMatched(args, refRight = false, bySource = false) {
        const props = {
          ...this.#props,
          queryNode: MergeQueryNode.cloneWithWhen(this.#props.queryNode, parseMergeWhen({ isMatched: false, bySource }, args, refRight))
        };
        const Builder = bySource ? MatchedThenableMergeQueryBuilder : NotMatchedThenableMergeQueryBuilder;
        return new Builder(props);
      }
      /**
       * Simply calls the provided function passing `this` as the only argument. `$call` returns
       * what the provided function returns.
       *
       * If you want to conditionally call a method on `this`, see
       * the {@link $if} method.
       *
       * ### Examples
       *
       * The next example uses a helper function `log` to log a query:
       *
       * ```ts
       * import type { Compilable } from 'kysely'
       *
       * function log<T extends Compilable>(qb: T): T {
       *   console.log(qb.compile())
       *   return qb
       * }
       *
       * await db.updateTable('person')
       *   .set({ first_name: 'John' })
       *   .$call(log)
       *   .execute()
       * ```
       */
      $call(func) {
        return func(this);
      }
      /**
       * Call `func(this)` if `condition` is true.
       *
       * This method is especially handy with optional selects. Any `returning` or `returningAll`
       * method calls add columns as optional fields to the output type when called inside
       * the `func` callback. This is because we can't know if those selections were actually
       * made before running the code.
       *
       * You can also call any other methods inside the callback.
       *
       * ### Examples
       *
       * ```ts
       * import type { PersonUpdate } from 'type-editor' // imaginary module
       *
       * async function updatePerson(id: number, updates: PersonUpdate, returnLastName: boolean) {
       *   return await db
       *     .updateTable('person')
       *     .set(updates)
       *     .where('id', '=', id)
       *     .returning(['id', 'first_name'])
       *     .$if(returnLastName, (qb) => qb.returning('last_name'))
       *     .executeTakeFirstOrThrow()
       * }
       * ```
       *
       * Any selections added inside the `if` callback will be added as optional fields to the
       * output type since we can't know if the selections were actually made before running
       * the code. In the example above the return type of the `updatePerson` function is:
       *
       * ```ts
       * Promise<{
       *   id: number
       *   first_name: string
       *   last_name?: string
       * }>
       * ```
       */
      $if(condition, func) {
        if (condition) {
          return func(this);
        }
        return new _WheneableMergeQueryBuilder({
          ...this.#props
        });
      }
      toOperationNode() {
        return this.#props.executor.transformQuery(this.#props.queryNode, this.#props.queryId);
      }
      compile() {
        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);
      }
      /**
       * Executes the query and returns an array of rows.
       *
       * Also see the {@link executeTakeFirst} and {@link executeTakeFirstOrThrow} methods.
       */
      async execute() {
        const compiledQuery = this.compile();
        const result = await this.#props.executor.executeQuery(compiledQuery, this.#props.queryId);
        const { adapter } = this.#props.executor;
        const query = compiledQuery.query;
        if (query.returning && adapter.supportsReturning || query.output && adapter.supportsOutput) {
          return result.rows;
        }
        return [new MergeResult(result.numAffectedRows)];
      }
      /**
       * Executes the query and returns the first result or undefined if
       * the query returned no result.
       */
      async executeTakeFirst() {
        const [result] = await this.execute();
        return result;
      }
      /**
       * Executes the query and returns the first result or throws if
       * the query returned no result.
       *
       * By default an instance of {@link NoResultError} is thrown, but you can
       * provide a custom error class, or callback as the only argument to throw a different
       * error.
       */
      async executeTakeFirstOrThrow(errorConstructor = NoResultError) {
        const result = await this.executeTakeFirst();
        if (result === void 0) {
          const error2 = isNoResultErrorConstructor(errorConstructor) ? new errorConstructor(this.toOperationNode()) : errorConstructor(this.toOperationNode());
          throw error2;
        }
        return result;
      }
    };
    MatchedThenableMergeQueryBuilder = class {
      static {
        __name(this, "MatchedThenableMergeQueryBuilder");
      }
      static {
        __name2(this, "MatchedThenableMergeQueryBuilder");
      }
      #props;
      constructor(props) {
        this.#props = freeze(props);
      }
      /**
       * Performs the `delete` action.
       *
       * To perform the `do nothing` action, see {@link thenDoNothing}.
       *
       * To perform the `update` action, see {@link thenUpdate} or {@link thenUpdateSet}.
       *
       * ### Examples
       *
       * ```ts
       * const result = await db.mergeInto('person')
       *   .using('pet', 'person.id', 'pet.owner_id')
       *   .whenMatched()
       *   .thenDelete()
       *   .execute()
       * ```
       *
       * The generated SQL (PostgreSQL):
       *
       * ```sql
       * merge into "person"
       * using "pet" on "person"."id" = "pet"."owner_id"
       * when matched then
       *   delete
       * ```
       */
      thenDelete() {
        return new WheneableMergeQueryBuilder({
          ...this.#props,
          queryNode: MergeQueryNode.cloneWithThen(this.#props.queryNode, parseMergeThen("delete"))
        });
      }
      /**
       * Performs the `do nothing` action.
       *
       * This is supported in PostgreSQL.
       *
       * To perform the `delete` action, see {@link thenDelete}.
       *
       * To perform the `update` action, see {@link thenUpdate} or {@link thenUpdateSet}.
       *
       * ### Examples
       *
       * ```ts
       * const result = await db.mergeInto('person')
       *   .using('pet', 'person.id', 'pet.owner_id')
       *   .whenMatched()
       *   .thenDoNothing()
       *   .execute()
       * ```
       *
       * The generated SQL (PostgreSQL):
       *
       * ```sql
       * merge into "person"
       * using "pet" on "person"."id" = "pet"."owner_id"
       * when matched then
       *   do nothing
       * ```
       */
      thenDoNothing() {
        return new WheneableMergeQueryBuilder({
          ...this.#props,
          queryNode: MergeQueryNode.cloneWithThen(this.#props.queryNode, parseMergeThen("do nothing"))
        });
      }
      /**
       * Perform an `update` operation with a full-fledged {@link UpdateQueryBuilder}.
       * This is handy when multiple `set` invocations are needed.
       *
       * For a shorthand version of this method, see {@link thenUpdateSet}.
       *
       * To perform the `delete` action, see {@link thenDelete}.
       *
       * To perform the `do nothing` action, see {@link thenDoNothing}.
       *
       * ### Examples
       *
       * ```ts
       * import { sql } from 'kysely'
       *
       * const result = await db.mergeInto('person')
       *   .using('pet', 'person.id', 'pet.owner_id')
       *   .whenMatched()
       *   .thenUpdate((ub) => ub
       *     .set(sql`metadata['has_pets']`, 'Y')
       *     .set({
       *       updated_at: new Date().toISOString(),
       *     })
       *   )
       *   .execute()
       * ```
       *
       * The generated SQL (PostgreSQL):
       *
       * ```sql
       * merge into "person"
       * using "pet" on "person"."id" = "pet"."owner_id"
       * when matched then
       *   update set metadata['has_pets'] = $1, "updated_at" = $2
       * ```
       */
      thenUpdate(set) {
        return new WheneableMergeQueryBuilder({
          ...this.#props,
          queryNode: MergeQueryNode.cloneWithThen(this.#props.queryNode, parseMergeThen(set(new UpdateQueryBuilder({
            queryId: this.#props.queryId,
            executor: NOOP_QUERY_EXECUTOR,
            queryNode: UpdateQueryNode.createWithoutTable()
          }))))
        });
      }
      thenUpdateSet(...args) {
        return this.thenUpdate((ub) => ub.set(...args));
      }
    };
    NotMatchedThenableMergeQueryBuilder = class {
      static {
        __name(this, "NotMatchedThenableMergeQueryBuilder");
      }
      static {
        __name2(this, "NotMatchedThenableMergeQueryBuilder");
      }
      #props;
      constructor(props) {
        this.#props = freeze(props);
      }
      /**
       * Performs the `do nothing` action.
       *
       * This is supported in PostgreSQL.
       *
       * To perform the `insert` action, see {@link thenInsertValues}.
       *
       * ### Examples
       *
       * ```ts
       * const result = await db.mergeInto('person')
       *   .using('pet', 'person.id', 'pet.owner_id')
       *   .whenNotMatched()
       *   .thenDoNothing()
       *   .execute()
       * ```
       *
       * The generated SQL (PostgreSQL):
       *
       * ```sql
       * merge into "person"
       * using "pet" on "person"."id" = "pet"."owner_id"
       * when not matched then
       *   do nothing
       * ```
       */
      thenDoNothing() {
        return new WheneableMergeQueryBuilder({
          ...this.#props,
          queryNode: MergeQueryNode.cloneWithThen(this.#props.queryNode, parseMergeThen("do nothing"))
        });
      }
      thenInsertValues(insert) {
        const [columns, values] = parseInsertExpression(insert);
        return new WheneableMergeQueryBuilder({
          ...this.#props,
          queryNode: MergeQueryNode.cloneWithThen(this.#props.queryNode, parseMergeThen(InsertQueryNode.cloneWith(InsertQueryNode.createWithoutInto(), {
            columns,
            values
          })))
        });
      }
    };
  }
});
var QueryCreator;
var init_query_creator = __esm({
  "../node_modules/kysely/dist/esm/query-creator.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_select_query_builder();
    init_insert_query_builder();
    init_delete_query_builder();
    init_update_query_builder();
    init_delete_query_node();
    init_insert_query_node();
    init_select_query_node();
    init_update_query_node();
    init_table_parser();
    init_with_parser();
    init_with_node();
    init_query_id();
    init_with_schema_plugin();
    init_object_utils();
    init_select_parser();
    init_merge_query_builder();
    init_merge_query_node();
    QueryCreator = class _QueryCreator {
      static {
        __name(this, "_QueryCreator");
      }
      static {
        __name2(this, "QueryCreator");
      }
      #props;
      constructor(props) {
        this.#props = freeze(props);
      }
      /**
       * Creates a `select` query builder for the given table or tables.
       *
       * The tables passed to this method are built as the query's `from` clause.
       *
       * ### Examples
       *
       * Create a select query for one table:
       *
       * ```ts
       * db.selectFrom('person').selectAll()
       * ```
       *
       * The generated SQL (PostgreSQL):
       *
       * ```sql
       * select * from "person"
       * ```
       *
       * Create a select query for one table with an alias:
       *
       * ```ts
       * const persons = await db.selectFrom('person as p')
       *   .select(['p.id', 'first_name'])
       *   .execute()
       *
       * console.log(persons[0].id)
       * ```
       *
       * The generated SQL (PostgreSQL):
       *
       * ```sql
       * select "p"."id", "first_name" from "person" as "p"
       * ```
       *
       * Create a select query from a subquery:
       *
       * ```ts
       * const persons = await db.selectFrom(
       *     (eb) => eb.selectFrom('person').select('person.id as identifier').as('p')
       *   )
       *   .select('p.identifier')
       *   .execute()
       *
       * console.log(persons[0].identifier)
       * ```
       *
       * The generated SQL (PostgreSQL):
       *
       * ```sql
       * select "p"."identifier",
       * from (
       *   select "person"."id" as "identifier" from "person"
       * ) as p
       * ```
       *
       * Create a select query from raw sql:
       *
       * ```ts
       * import { sql } from 'kysely'
       *
       * const items = await db
       *   .selectFrom(sql<{ one: number }>`(select 1 as one)`.as('q'))
       *   .select('q.one')
       *   .execute()
       *
       * console.log(items[0].one)
       * ```
       *
       * The generated SQL (PostgreSQL):
       *
       * ```sql
       * select "q"."one",
       * from (
       *   select 1 as one
       * ) as q
       * ```
       *
       * When you use the `sql` tag you need to also provide the result type of the
       * raw snippet / query so that Kysely can figure out what columns are
       * available for the rest of the query.
       *
       * The `selectFrom` method also accepts an array for multiple tables. All
       * the above examples can also be used in an array.
       *
       * ```ts
       * import { sql } from 'kysely'
       *
       * const items = await db.selectFrom([
       *     'person as p',
       *     db.selectFrom('pet').select('pet.species').as('a'),
       *     sql<{ one: number }>`(select 1 as one)`.as('q')
       *   ])
       *   .select(['p.id', 'a.species', 'q.one'])
       *   .execute()
       * ```
       *
       * The generated SQL (PostgreSQL):
       *
       * ```sql
       * select "p".id, "a"."species", "q"."one"
       * from
       *   "person" as "p",
       *   (select "pet"."species" from "pet") as a,
       *   (select 1 as one) as "q"
       * ```
       */
      selectFrom(from) {
        return createSelectQueryBuilder({
          queryId: createQueryId(),
          executor: this.#props.executor,
          queryNode: SelectQueryNode.createFrom(parseTableExpressionOrList(from), this.#props.withNode)
        });
      }
      selectNoFrom(selection) {
        return createSelectQueryBuilder({
          queryId: createQueryId(),
          executor: this.#props.executor,
          queryNode: SelectQueryNode.cloneWithSelections(SelectQueryNode.create(this.#props.withNode), parseSelectArg(selection))
        });
      }
      /**
       * Creates an insert query.
       *
       * The return value of this query is an instance of {@link InsertResult}. {@link InsertResult}
       * has the {@link InsertResult.insertId | insertId} field that holds the auto incremented id of
       * the inserted row if the db returned one.
       *
       * See the {@link InsertQueryBuilder.values | values} method for more info and examples. Also see
       * the {@link ReturningInterface.returning | returning} method for a way to return columns
       * on supported databases like PostgreSQL.
       *
       * ### Examples
       *
       * ```ts
       * const result = await db
       *   .insertInto('person')
       *   .values({
       *     first_name: 'Jennifer',
       *     last_name: 'Aniston'
       *   })
       *   .executeTakeFirst()
       *
       * console.log(result.insertId)
       * ```
       *
       * Some databases like PostgreSQL support the `returning` method:
       *
       * ```ts
       * const { id } = await db
       *   .insertInto('person')
       *   .values({
       *     first_name: 'Jennifer',
       *     last_name: 'Aniston'
       *   })
       *   .returning('id')
       *   .executeTakeFirstOrThrow()
       * ```
       */
      insertInto(table) {
        return new InsertQueryBuilder({
          queryId: createQueryId(),
          executor: this.#props.executor,
          queryNode: InsertQueryNode.create(parseTable(table), this.#props.withNode)
        });
      }
      /**
       * Creates a "replace into" query.
       *
       * This is only supported by some dialects like MySQL or SQLite.
       *
       * Similar to MySQL's {@link InsertQueryBuilder.onDuplicateKeyUpdate} that deletes
       * and inserts values on collision instead of updating existing rows.
       *
       * An alias of SQLite's {@link InsertQueryBuilder.orReplace}.
       *
       * The return value of this query is an instance of {@link InsertResult}. {@link InsertResult}
       * has the {@link InsertResult.insertId | insertId} field that holds the auto incremented id of
       * the inserted row if the db returned one.
       *
       * See the {@link InsertQueryBuilder.values | values} method for more info and examples.
       *
       * ### Examples
       *
       * ```ts
       * const result = await db
       *   .replaceInto('person')
       *   .values({
       *     first_name: 'Jennifer',
       *     last_name: 'Aniston'
       *   })
       *   .executeTakeFirstOrThrow()
       *
       * console.log(result.insertId)
       * ```
       *
       * The generated SQL (MySQL):
       *
       * ```sql
       * replace into `person` (`first_name`, `last_name`) values (?, ?)
       * ```
       */
      replaceInto(table) {
        return new InsertQueryBuilder({
          queryId: createQueryId(),
          executor: this.#props.executor,
          queryNode: InsertQueryNode.create(parseTable(table), this.#props.withNode, true)
        });
      }
      /**
       * Creates a delete query.
       *
       * See the {@link DeleteQueryBuilder.where} method for examples on how to specify
       * a where clause for the delete operation.
       *
       * The return value of the query is an instance of {@link DeleteResult}.
       *
       * ### Examples
       *
       * <!-- siteExample("delete", "Single row", 10) -->
       *
       * Delete a single row:
       *
       * ```ts
       * const result = await db
       *   .deleteFrom('person')
       *   .where('person.id', '=', 1)
       *   .executeTakeFirst()
       *
       * console.log(result.numDeletedRows)
       * ```
       *
       * The generated SQL (PostgreSQL):
       *
       * ```sql
       * delete from "person" where "person"."id" = $1
       * ```
       *
       * Some databases such as MySQL support deleting from multiple tables:
       *
       * ```ts
       * const result = await db
       *   .deleteFrom(['person', 'pet'])
       *   .using('person')
       *   .innerJoin('pet', 'pet.owner_id', 'person.id')
       *   .where('person.id', '=', 1)
       *   .executeTakeFirst()
       * ```
       *
       * The generated SQL (MySQL):
       *
       * ```sql
       * delete from `person`, `pet`
       * using `person`
       * inner join `pet` on `pet`.`owner_id` = `person`.`id`
       * where `person`.`id` = ?
       * ```
       */
      deleteFrom(from) {
        return new DeleteQueryBuilder({
          queryId: createQueryId(),
          executor: this.#props.executor,
          queryNode: DeleteQueryNode.create(parseTableExpressionOrList(from), this.#props.withNode)
        });
      }
      /**
       * Creates an update query.
       *
       * See the {@link UpdateQueryBuilder.where} method for examples on how to specify
       * a where clause for the update operation.
       *
       * See the {@link UpdateQueryBuilder.set} method for examples on how to
       * specify the updates.
       *
       * The return value of the query is an {@link UpdateResult}.
       *
       * ### Examples
       *
       * ```ts
       * const result = await db
       *   .updateTable('person')
       *   .set({ first_name: 'Jennifer' })
       *   .where('person.id', '=', 1)
       *   .executeTakeFirst()
       *
       * console.log(result.numUpdatedRows)
       * ```
       */
      updateTable(tables) {
        return new UpdateQueryBuilder({
          queryId: createQueryId(),
          executor: this.#props.executor,
          queryNode: UpdateQueryNode.create(parseTableExpressionOrList(tables), this.#props.withNode)
        });
      }
      /**
       * Creates a merge query.
       *
       * The return value of the query is a {@link MergeResult}.
       *
       * See the {@link MergeQueryBuilder.using} method for examples on how to specify
       * the other table.
       *
       * ### Examples
       *
       * <!-- siteExample("merge", "Source row existence", 10) -->
       *
       * Update a target column based on the existence of a source row:
       *
       * ```ts
       * const result = await db
       *   .mergeInto('person as target')
       *   .using('pet as source', 'source.owner_id', 'target.id')
       *   .whenMatchedAnd('target.has_pets', '!=', 'Y')
       *   .thenUpdateSet({ has_pets: 'Y' })
       *   .whenNotMatchedBySourceAnd('target.has_pets', '=', 'Y')
       *   .thenUpdateSet({ has_pets: 'N' })
       *   .executeTakeFirstOrThrow()
       *
       * console.log(result.numChangedRows)
       * ```
       *
       * The generated SQL (PostgreSQL):
       *
       * ```sql
       * merge into "person"
       * using "pet"
       * on "pet"."owner_id" = "person"."id"
       * when matched and "has_pets" != $1
       * then update set "has_pets" = $2
       * when not matched by source and "has_pets" = $3
       * then update set "has_pets" = $4
       * ```
       *
       * <!-- siteExample("merge", "Temporary changes table", 20) -->
       *
       * Merge new entries from a temporary changes table:
       *
       * ```ts
       * const result = await db
       *   .mergeInto('wine as target')
       *   .using(
       *     'wine_stock_change as source',
       *     'source.wine_name',
       *     'target.name',
       *   )
       *   .whenNotMatchedAnd('source.stock_delta', '>', 0)
       *   .thenInsertValues(({ ref }) => ({
       *     name: ref('source.wine_name'),
       *     stock: ref('source.stock_delta'),
       *   }))
       *   .whenMatchedAnd(
       *     (eb) => eb('target.stock', '+', eb.ref('source.stock_delta')),
       *     '>',
       *     0,
       *   )
       *   .thenUpdateSet('stock', (eb) =>
       *     eb('target.stock', '+', eb.ref('source.stock_delta')),
       *   )
       *   .whenMatched()
       *   .thenDelete()
       *   .executeTakeFirstOrThrow()
       * ```
       *
       * The generated SQL (PostgreSQL):
       *
       * ```sql
       * merge into "wine" as "target"
       * using "wine_stock_change" as "source"
       * on "source"."wine_name" = "target"."name"
       * when not matched and "source"."stock_delta" > $1
       * then insert ("name", "stock") values ("source"."wine_name", "source"."stock_delta")
       * when matched and "target"."stock" + "source"."stock_delta" > $2
       * then update set "stock" = "target"."stock" + "source"."stock_delta"
       * when matched
       * then delete
       * ```
       */
      mergeInto(targetTable) {
        return new MergeQueryBuilder({
          queryId: createQueryId(),
          executor: this.#props.executor,
          queryNode: MergeQueryNode.create(parseAliasedTable(targetTable), this.#props.withNode)
        });
      }
      /**
       * Creates a `with` query (Common Table Expression).
       *
       * ### Examples
       *
       * <!-- siteExample("cte", "Simple selects", 10) -->
       *
       * Common table expressions (CTE) are a great way to modularize complex queries.
       * Essentially they allow you to run multiple separate queries within a
       * single roundtrip to the DB.
       *
       * Since CTEs are a part of the main query, query optimizers inside DB
       * engines are able to optimize the overall query. For example, postgres
       * is able to inline the CTEs inside the using queries if it decides it's
       * faster.
       *
       * ```ts
       * const result = await db
       *   // Create a CTE called `jennifers` that selects all
       *   // persons named 'Jennifer'.
       *   .with('jennifers', (db) => db
       *     .selectFrom('person')
       *     .where('first_name', '=', 'Jennifer')
       *     .select(['id', 'age'])
       *   )
       *   // Select all rows from the `jennifers` CTE and
       *   // further filter it.
       *   .with('adult_jennifers', (db) => db
       *     .selectFrom('jennifers')
       *     .where('age', '>', 18)
       *     .select(['id', 'age'])
       *   )
       *   // Finally select all adult jennifers that are
       *   // also younger than 60.
       *   .selectFrom('adult_jennifers')
       *   .where('age', '<', 60)
       *   .selectAll()
       *   .execute()
       * ```
       *
       * <!-- siteExample("cte", "Inserts, updates and deletions", 20) -->
       *
       * Some databases like postgres also allow you to run other queries than selects
       * in CTEs. On these databases CTEs are extremely powerful:
       *
       * ```ts
       * const result = await db
       *   .with('new_person', (db) => db
       *     .insertInto('person')
       *     .values({
       *       first_name: 'Jennifer',
       *       age: 35,
       *     })
       *     .returning('id')
       *   )
       *   .with('new_pet', (db) => db
       *     .insertInto('pet')
       *     .values({
       *       name: 'Doggo',
       *       species: 'dog',
       *       is_favorite: true,
       *       // Use the id of the person we just inserted.
       *       owner_id: db
       *         .selectFrom('new_person')
       *         .select('id')
       *     })
       *     .returning('id')
       *   )
       *   .selectFrom(['new_person', 'new_pet'])
       *   .select([
       *     'new_person.id as person_id',
       *     'new_pet.id as pet_id'
       *   ])
       *   .execute()
       * ```
       *
       * The CTE name can optionally specify column names in addition to
       * a name. In that case Kysely requires the expression to retun
       * rows with the same columns.
       *
       * ```ts
       * await db
       *   .with('jennifers(id, age)', (db) => db
       *     .selectFrom('person')
       *     .where('first_name', '=', 'Jennifer')
       *     // This is ok since we return columns with the same
       *     // names as specified by `jennifers(id, age)`.
       *     .select(['id', 'age'])
       *   )
       *   .selectFrom('jennifers')
       *   .selectAll()
       *   .execute()
       * ```
       *
       * The first argument can also be a callback. The callback is passed
       * a `CTEBuilder` instance that can be used to configure the CTE:
       *
       * ```ts
       * await db
       *   .with(
       *     (cte) => cte('jennifers').materialized(),
       *     (db) => db
       *       .selectFrom('person')
       *       .where('first_name', '=', 'Jennifer')
       *       .select(['id', 'age'])
       *   )
       *   .selectFrom('jennifers')
       *   .selectAll()
       *   .execute()
       * ```
       */
      with(nameOrBuilder, expression) {
        const cte = parseCommonTableExpression(nameOrBuilder, expression);
        return new _QueryCreator({
          ...this.#props,
          withNode: this.#props.withNode ? WithNode.cloneWithExpression(this.#props.withNode, cte) : WithNode.create(cte)
        });
      }
      /**
       * Creates a recursive `with` query (Common Table Expression).
       *
       * Note that recursiveness is a property of the whole `with` statement.
       * You cannot have recursive and non-recursive CTEs in a same `with` statement.
       * Therefore the recursiveness is determined by the **first** `with` or
       * `withRecusive` call you make.
       *
       * See the {@link with} method for examples and more documentation.
       */
      withRecursive(nameOrBuilder, expression) {
        const cte = parseCommonTableExpression(nameOrBuilder, expression);
        return new _QueryCreator({
          ...this.#props,
          withNode: this.#props.withNode ? WithNode.cloneWithExpression(this.#props.withNode, cte) : WithNode.create(cte, { recursive: true })
        });
      }
      /**
       * Returns a copy of this query creator instance with the given plugin installed.
       */
      withPlugin(plugin) {
        return new _QueryCreator({
          ...this.#props,
          executor: this.#props.executor.withPlugin(plugin)
        });
      }
      /**
       * Returns a copy of this query creator instance without any plugins.
       */
      withoutPlugins() {
        return new _QueryCreator({
          ...this.#props,
          executor: this.#props.executor.withoutPlugins()
        });
      }
      /**
       * Sets the schema to be used for all table references that don't explicitly
       * specify a schema.
       *
       * This only affects the query created through the builder returned from
       * this method and doesn't modify the `db` instance.
       *
       * See [this recipe](https://github.com/kysely-org/kysely/blob/master/site/docs/recipes/0007-schemas.md)
       * for a more detailed explanation.
       *
       * ### Examples
       *
       * ```
       * await db
       *   .withSchema('mammals')
       *   .selectFrom('pet')
       *   .selectAll()
       *   .innerJoin('public.person', 'public.person.id', 'pet.owner_id')
       *   .execute()
       * ```
       *
       * The generated SQL (PostgreSQL):
       *
       * ```sql
       * select * from "mammals"."pet"
       * inner join "public"."person"
       * on "public"."person"."id" = "mammals"."pet"."owner_id"
       * ```
       *
       * `withSchema` is smart enough to not add schema for aliases,
       * common table expressions or other places where the schema
       * doesn't belong to:
       *
       * ```
       * await db
       *   .withSchema('mammals')
       *   .selectFrom('pet as p')
       *   .select('p.name')
       *   .execute()
       * ```
       *
       * The generated SQL (PostgreSQL):
       *
       * ```sql
       * select "p"."name" from "mammals"."pet" as "p"
       * ```
       */
      withSchema(schema2) {
        return new _QueryCreator({
          ...this.#props,
          executor: this.#props.executor.withPluginAtFront(new WithSchemaPlugin(schema2))
        });
      }
    };
  }
});
function createQueryCreator() {
  return new QueryCreator({
    executor: NOOP_QUERY_EXECUTOR
  });
}
__name(createQueryCreator, "createQueryCreator");
function createJoinBuilder(joinType, table) {
  return new JoinBuilder({
    joinNode: JoinNode.create(joinType, parseTableExpression(table))
  });
}
__name(createJoinBuilder, "createJoinBuilder");
function createOverBuilder() {
  return new OverBuilder({
    overNode: OverNode.create()
  });
}
__name(createOverBuilder, "createOverBuilder");
var init_parse_utils = __esm({
  "../node_modules/kysely/dist/esm/parser/parse-utils.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_join_node();
    init_over_node();
    init_join_builder();
    init_over_builder();
    init_query_creator();
    init_noop_query_executor();
    init_table_parser();
    __name2(createQueryCreator, "createQueryCreator");
    __name2(createJoinBuilder, "createJoinBuilder");
    __name2(createOverBuilder, "createOverBuilder");
  }
});
function parseJoin(joinType, args) {
  if (args.length === 3) {
    return parseSingleOnJoin(joinType, args[0], args[1], args[2]);
  } else if (args.length === 2) {
    return parseCallbackJoin(joinType, args[0], args[1]);
  } else if (args.length === 1) {
    return parseOnlessJoin(joinType, args[0]);
  } else {
    throw new Error("not implemented");
  }
}
__name(parseJoin, "parseJoin");
function parseCallbackJoin(joinType, from, callback) {
  return callback(createJoinBuilder(joinType, from)).toOperationNode();
}
__name(parseCallbackJoin, "parseCallbackJoin");
function parseSingleOnJoin(joinType, from, lhsColumn, rhsColumn) {
  return JoinNode.createWithOn(joinType, parseTableExpression(from), parseReferentialBinaryOperation(lhsColumn, "=", rhsColumn));
}
__name(parseSingleOnJoin, "parseSingleOnJoin");
function parseOnlessJoin(joinType, from) {
  return JoinNode.create(joinType, parseTableExpression(from));
}
__name(parseOnlessJoin, "parseOnlessJoin");
var init_join_parser = __esm({
  "../node_modules/kysely/dist/esm/parser/join-parser.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_join_node();
    init_binary_operation_parser();
    init_parse_utils();
    init_table_parser();
    __name2(parseJoin, "parseJoin");
    __name2(parseCallbackJoin, "parseCallbackJoin");
    __name2(parseSingleOnJoin, "parseSingleOnJoin");
    __name2(parseOnlessJoin, "parseOnlessJoin");
  }
});
var OffsetNode;
var init_offset_node = __esm({
  "../node_modules/kysely/dist/esm/operation-node/offset-node.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    OffsetNode = freeze({
      is(node) {
        return node.kind === "OffsetNode";
      },
      create(offset) {
        return freeze({
          kind: "OffsetNode",
          offset
        });
      }
    });
  }
});
var GroupByItemNode;
var init_group_by_item_node = __esm({
  "../node_modules/kysely/dist/esm/operation-node/group-by-item-node.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    GroupByItemNode = freeze({
      is(node) {
        return node.kind === "GroupByItemNode";
      },
      create(groupBy) {
        return freeze({
          kind: "GroupByItemNode",
          groupBy
        });
      }
    });
  }
});
function parseGroupBy(groupBy) {
  groupBy = isFunction(groupBy) ? groupBy(expressionBuilder()) : groupBy;
  return parseReferenceExpressionOrList(groupBy).map(GroupByItemNode.create);
}
__name(parseGroupBy, "parseGroupBy");
var init_group_by_parser = __esm({
  "../node_modules/kysely/dist/esm/parser/group-by-parser.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_group_by_item_node();
    init_expression_builder();
    init_object_utils();
    init_reference_parser();
    __name2(parseGroupBy, "parseGroupBy");
  }
});
var SetOperationNode;
var init_set_operation_node = __esm({
  "../node_modules/kysely/dist/esm/operation-node/set-operation-node.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    SetOperationNode = freeze({
      is(node) {
        return node.kind === "SetOperationNode";
      },
      create(operator, expression, all) {
        return freeze({
          kind: "SetOperationNode",
          operator,
          expression,
          all
        });
      }
    });
  }
});
function parseSetOperations(operator, expression, all) {
  if (isFunction(expression)) {
    expression = expression(createExpressionBuilder());
  }
  if (!isReadonlyArray(expression)) {
    expression = [expression];
  }
  return expression.map((expr) => SetOperationNode.create(operator, parseExpression(expr), all));
}
__name(parseSetOperations, "parseSetOperations");
var init_set_operation_parser = __esm({
  "../node_modules/kysely/dist/esm/parser/set-operation-parser.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_expression_builder();
    init_set_operation_node();
    init_object_utils();
    init_expression_parser();
    __name2(parseSetOperations, "parseSetOperations");
  }
});
var ExpressionWrapper;
var AliasedExpressionWrapper;
var OrWrapper;
var AndWrapper;
var init_expression_wrapper = __esm({
  "../node_modules/kysely/dist/esm/expression/expression-wrapper.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_alias_node();
    init_and_node();
    init_identifier_node();
    init_operation_node_source();
    init_or_node();
    init_parens_node();
    init_binary_operation_parser();
    ExpressionWrapper = class _ExpressionWrapper {
      static {
        __name(this, "_ExpressionWrapper");
      }
      static {
        __name2(this, "ExpressionWrapper");
      }
      #node;
      constructor(node) {
        this.#node = node;
      }
      /** @private */
      get expressionType() {
        return void 0;
      }
      as(alias) {
        return new AliasedExpressionWrapper(this, alias);
      }
      or(...args) {
        return new OrWrapper(OrNode.create(this.#node, parseValueBinaryOperationOrExpression(args)));
      }
      and(...args) {
        return new AndWrapper(AndNode.create(this.#node, parseValueBinaryOperationOrExpression(args)));
      }
      /**
       * Change the output type of the expression.
       *
       * This method call doesn't change the SQL in any way. This methods simply
       * returns a copy of this `ExpressionWrapper` with a new output type.
       */
      $castTo() {
        return new _ExpressionWrapper(this.#node);
      }
      /**
       * Omit null from the expression's type.
       *
       * This function can be useful in cases where you know an expression can't be
       * null, but Kysely is unable to infer it.
       *
       * This method call doesn't change the SQL in any way. This methods simply
       * returns a copy of `this` with a new output type.
       */
      $notNull() {
        return new _ExpressionWrapper(this.#node);
      }
      toOperationNode() {
        return this.#node;
      }
    };
    AliasedExpressionWrapper = class {
      static {
        __name(this, "AliasedExpressionWrapper");
      }
      static {
        __name2(this, "AliasedExpressionWrapper");
      }
      #expr;
      #alias;
      constructor(expr, alias) {
        this.#expr = expr;
        this.#alias = alias;
      }
      /** @private */
      get expression() {
        return this.#expr;
      }
      /** @private */
      get alias() {
        return this.#alias;
      }
      toOperationNode() {
        return AliasNode.create(this.#expr.toOperationNode(), isOperationNodeSource(this.#alias) ? this.#alias.toOperationNode() : IdentifierNode.create(this.#alias));
      }
    };
    OrWrapper = class _OrWrapper {
      static {
        __name(this, "_OrWrapper");
      }
      static {
        __name2(this, "OrWrapper");
      }
      #node;
      constructor(node) {
        this.#node = node;
      }
      /** @private */
      get expressionType() {
        return void 0;
      }
      as(alias) {
        return new AliasedExpressionWrapper(this, alias);
      }
      or(...args) {
        return new _OrWrapper(OrNode.create(this.#node, parseValueBinaryOperationOrExpression(args)));
      }
      /**
       * Change the output type of the expression.
       *
       * This method call doesn't change the SQL in any way. This methods simply
       * returns a copy of this `OrWrapper` with a new output type.
       */
      $castTo() {
        return new _OrWrapper(this.#node);
      }
      toOperationNode() {
        return ParensNode.create(this.#node);
      }
    };
    AndWrapper = class _AndWrapper {
      static {
        __name(this, "_AndWrapper");
      }
      static {
        __name2(this, "AndWrapper");
      }
      #node;
      constructor(node) {
        this.#node = node;
      }
      /** @private */
      get expressionType() {
        return void 0;
      }
      as(alias) {
        return new AliasedExpressionWrapper(this, alias);
      }
      and(...args) {
        return new _AndWrapper(AndNode.create(this.#node, parseValueBinaryOperationOrExpression(args)));
      }
      /**
       * Change the output type of the expression.
       *
       * This method call doesn't change the SQL in any way. This methods simply
       * returns a copy of this `AndWrapper` with a new output type.
       */
      $castTo() {
        return new _AndWrapper(this.#node);
      }
      toOperationNode() {
        return ParensNode.create(this.#node);
      }
    };
  }
});
var FetchNode;
var init_fetch_node = __esm({
  "../node_modules/kysely/dist/esm/operation-node/fetch-node.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_value_node();
    FetchNode = {
      is(node) {
        return node.kind === "FetchNode";
      },
      create(rowCount, modifier) {
        return {
          kind: "FetchNode",
          rowCount: ValueNode.create(rowCount),
          modifier
        };
      }
    };
  }
});
function parseFetch(rowCount, modifier) {
  if (!isNumber(rowCount) && !isBigInt(rowCount)) {
    throw new Error(`Invalid fetch row count: ${rowCount}`);
  }
  if (!isFetchModifier(modifier)) {
    throw new Error(`Invalid fetch modifier: ${modifier}`);
  }
  return FetchNode.create(rowCount, modifier);
}
__name(parseFetch, "parseFetch");
function isFetchModifier(value) {
  return value === "only" || value === "with ties";
}
__name(isFetchModifier, "isFetchModifier");
var init_fetch_parser = __esm({
  "../node_modules/kysely/dist/esm/parser/fetch-parser.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_fetch_node();
    init_object_utils();
    __name2(parseFetch, "parseFetch");
    __name2(isFetchModifier, "isFetchModifier");
  }
});
function createSelectQueryBuilder(props) {
  return new SelectQueryBuilderImpl(props);
}
__name(createSelectQueryBuilder, "createSelectQueryBuilder");
var SelectQueryBuilderImpl;
var AliasedSelectQueryBuilderImpl;
var init_select_query_builder = __esm({
  "../node_modules/kysely/dist/esm/query-builder/select-query-builder.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_alias_node();
    init_select_modifier_node();
    init_join_parser();
    init_table_parser();
    init_select_parser();
    init_reference_parser();
    init_select_query_node();
    init_query_node();
    init_order_by_parser();
    init_limit_node();
    init_offset_node();
    init_object_utils();
    init_group_by_parser();
    init_no_result_error();
    init_identifier_node();
    init_set_operation_parser();
    init_binary_operation_parser();
    init_expression_wrapper();
    init_value_parser();
    init_fetch_parser();
    init_top_parser();
    SelectQueryBuilderImpl = class _SelectQueryBuilderImpl {
      static {
        __name(this, "_SelectQueryBuilderImpl");
      }
      static {
        __name2(this, "SelectQueryBuilderImpl");
      }
      #props;
      constructor(props) {
        this.#props = freeze(props);
      }
      get expressionType() {
        return void 0;
      }
      get isSelectQueryBuilder() {
        return true;
      }
      where(...args) {
        return new _SelectQueryBuilderImpl({
          ...this.#props,
          queryNode: QueryNode.cloneWithWhere(this.#props.queryNode, parseValueBinaryOperationOrExpression(args))
        });
      }
      whereRef(lhs, op, rhs) {
        return new _SelectQueryBuilderImpl({
          ...this.#props,
          queryNode: QueryNode.cloneWithWhere(this.#props.queryNode, parseReferentialBinaryOperation(lhs, op, rhs))
        });
      }
      having(...args) {
        return new _SelectQueryBuilderImpl({
          ...this.#props,
          queryNode: SelectQueryNode.cloneWithHaving(this.#props.queryNode, parseValueBinaryOperationOrExpression(args))
        });
      }
      havingRef(lhs, op, rhs) {
        return new _SelectQueryBuilderImpl({
          ...this.#props,
          queryNode: SelectQueryNode.cloneWithHaving(this.#props.queryNode, parseReferentialBinaryOperation(lhs, op, rhs))
        });
      }
      select(selection) {
        return new _SelectQueryBuilderImpl({
          ...this.#props,
          queryNode: SelectQueryNode.cloneWithSelections(this.#props.queryNode, parseSelectArg(selection))
        });
      }
      distinctOn(selection) {
        return new _SelectQueryBuilderImpl({
          ...this.#props,
          queryNode: SelectQueryNode.cloneWithDistinctOn(this.#props.queryNode, parseReferenceExpressionOrList(selection))
        });
      }
      modifyFront(modifier) {
        return new _SelectQueryBuilderImpl({
          ...this.#props,
          queryNode: SelectQueryNode.cloneWithFrontModifier(this.#props.queryNode, SelectModifierNode.createWithExpression(modifier.toOperationNode()))
        });
      }
      modifyEnd(modifier) {
        return new _SelectQueryBuilderImpl({
          ...this.#props,
          queryNode: QueryNode.cloneWithEndModifier(this.#props.queryNode, SelectModifierNode.createWithExpression(modifier.toOperationNode()))
        });
      }
      distinct() {
        return new _SelectQueryBuilderImpl({
          ...this.#props,
          queryNode: SelectQueryNode.cloneWithFrontModifier(this.#props.queryNode, SelectModifierNode.create("Distinct"))
        });
      }
      forUpdate(of) {
        return new _SelectQueryBuilderImpl({
          ...this.#props,
          queryNode: QueryNode.cloneWithEndModifier(this.#props.queryNode, SelectModifierNode.create("ForUpdate", of ? asArray(of).map(parseTable) : void 0))
        });
      }
      forShare(of) {
        return new _SelectQueryBuilderImpl({
          ...this.#props,
          queryNode: QueryNode.cloneWithEndModifier(this.#props.queryNode, SelectModifierNode.create("ForShare", of ? asArray(of).map(parseTable) : void 0))
        });
      }
      forKeyShare(of) {
        return new _SelectQueryBuilderImpl({
          ...this.#props,
          queryNode: QueryNode.cloneWithEndModifier(this.#props.queryNode, SelectModifierNode.create("ForKeyShare", of ? asArray(of).map(parseTable) : void 0))
        });
      }
      forNoKeyUpdate(of) {
        return new _SelectQueryBuilderImpl({
          ...this.#props,
          queryNode: QueryNode.cloneWithEndModifier(this.#props.queryNode, SelectModifierNode.create("ForNoKeyUpdate", of ? asArray(of).map(parseTable) : void 0))
        });
      }
      skipLocked() {
        return new _SelectQueryBuilderImpl({
          ...this.#props,
          queryNode: QueryNode.cloneWithEndModifier(this.#props.queryNode, SelectModifierNode.create("SkipLocked"))
        });
      }
      noWait() {
        return new _SelectQueryBuilderImpl({
          ...this.#props,
          queryNode: QueryNode.cloneWithEndModifier(this.#props.queryNode, SelectModifierNode.create("NoWait"))
        });
      }
      selectAll(table) {
        return new _SelectQueryBuilderImpl({
          ...this.#props,
          queryNode: SelectQueryNode.cloneWithSelections(this.#props.queryNode, parseSelectAll(table))
        });
      }
      innerJoin(...args) {
        return this.#join("InnerJoin", args);
      }
      leftJoin(...args) {
        return this.#join("LeftJoin", args);
      }
      rightJoin(...args) {
        return this.#join("RightJoin", args);
      }
      fullJoin(...args) {
        return this.#join("FullJoin", args);
      }
      crossJoin(...args) {
        return this.#join("CrossJoin", args);
      }
      innerJoinLateral(...args) {
        return this.#join("LateralInnerJoin", args);
      }
      leftJoinLateral(...args) {
        return this.#join("LateralLeftJoin", args);
      }
      crossJoinLateral(...args) {
        return this.#join("LateralCrossJoin", args);
      }
      crossApply(...args) {
        return this.#join("CrossApply", args);
      }
      outerApply(...args) {
        return this.#join("OuterApply", args);
      }
      #join(joinType, args) {
        return new _SelectQueryBuilderImpl({
          ...this.#props,
          queryNode: QueryNode.cloneWithJoin(this.#props.queryNode, parseJoin(joinType, args))
        });
      }
      orderBy(...args) {
        return new _SelectQueryBuilderImpl({
          ...this.#props,
          queryNode: QueryNode.cloneWithOrderByItems(this.#props.queryNode, parseOrderBy(args))
        });
      }
      groupBy(groupBy) {
        return new _SelectQueryBuilderImpl({
          ...this.#props,
          queryNode: SelectQueryNode.cloneWithGroupByItems(this.#props.queryNode, parseGroupBy(groupBy))
        });
      }
      limit(limit) {
        return new _SelectQueryBuilderImpl({
          ...this.#props,
          queryNode: SelectQueryNode.cloneWithLimit(this.#props.queryNode, LimitNode.create(parseValueExpression(limit)))
        });
      }
      offset(offset) {
        return new _SelectQueryBuilderImpl({
          ...this.#props,
          queryNode: SelectQueryNode.cloneWithOffset(this.#props.queryNode, OffsetNode.create(parseValueExpression(offset)))
        });
      }
      fetch(rowCount, modifier = "only") {
        return new _SelectQueryBuilderImpl({
          ...this.#props,
          queryNode: SelectQueryNode.cloneWithFetch(this.#props.queryNode, parseFetch(rowCount, modifier))
        });
      }
      top(expression, modifiers) {
        return new _SelectQueryBuilderImpl({
          ...this.#props,
          queryNode: QueryNode.cloneWithTop(this.#props.queryNode, parseTop(expression, modifiers))
        });
      }
      union(expression) {
        return new _SelectQueryBuilderImpl({
          ...this.#props,
          queryNode: SelectQueryNode.cloneWithSetOperations(this.#props.queryNode, parseSetOperations("union", expression, false))
        });
      }
      unionAll(expression) {
        return new _SelectQueryBuilderImpl({
          ...this.#props,
          queryNode: SelectQueryNode.cloneWithSetOperations(this.#props.queryNode, parseSetOperations("union", expression, true))
        });
      }
      intersect(expression) {
        return new _SelectQueryBuilderImpl({
          ...this.#props,
          queryNode: SelectQueryNode.cloneWithSetOperations(this.#props.queryNode, parseSetOperations("intersect", expression, false))
        });
      }
      intersectAll(expression) {
        return new _SelectQueryBuilderImpl({
          ...this.#props,
          queryNode: SelectQueryNode.cloneWithSetOperations(this.#props.queryNode, parseSetOperations("intersect", expression, true))
        });
      }
      except(expression) {
        return new _SelectQueryBuilderImpl({
          ...this.#props,
          queryNode: SelectQueryNode.cloneWithSetOperations(this.#props.queryNode, parseSetOperations("except", expression, false))
        });
      }
      exceptAll(expression) {
        return new _SelectQueryBuilderImpl({
          ...this.#props,
          queryNode: SelectQueryNode.cloneWithSetOperations(this.#props.queryNode, parseSetOperations("except", expression, true))
        });
      }
      as(alias) {
        return new AliasedSelectQueryBuilderImpl(this, alias);
      }
      clearSelect() {
        return new _SelectQueryBuilderImpl({
          ...this.#props,
          queryNode: SelectQueryNode.cloneWithoutSelections(this.#props.queryNode)
        });
      }
      clearWhere() {
        return new _SelectQueryBuilderImpl({
          ...this.#props,
          queryNode: QueryNode.cloneWithoutWhere(this.#props.queryNode)
        });
      }
      clearLimit() {
        return new _SelectQueryBuilderImpl({
          ...this.#props,
          queryNode: SelectQueryNode.cloneWithoutLimit(this.#props.queryNode)
        });
      }
      clearOffset() {
        return new _SelectQueryBuilderImpl({
          ...this.#props,
          queryNode: SelectQueryNode.cloneWithoutOffset(this.#props.queryNode)
        });
      }
      clearOrderBy() {
        return new _SelectQueryBuilderImpl({
          ...this.#props,
          queryNode: QueryNode.cloneWithoutOrderBy(this.#props.queryNode)
        });
      }
      clearGroupBy() {
        return new _SelectQueryBuilderImpl({
          ...this.#props,
          queryNode: SelectQueryNode.cloneWithoutGroupBy(this.#props.queryNode)
        });
      }
      $call(func) {
        return func(this);
      }
      $if(condition, func) {
        if (condition) {
          return func(this);
        }
        return new _SelectQueryBuilderImpl({
          ...this.#props
        });
      }
      $castTo() {
        return new _SelectQueryBuilderImpl(this.#props);
      }
      $narrowType() {
        return new _SelectQueryBuilderImpl(this.#props);
      }
      $assertType() {
        return new _SelectQueryBuilderImpl(this.#props);
      }
      $asTuple() {
        return new ExpressionWrapper(this.toOperationNode());
      }
      $asScalar() {
        return new ExpressionWrapper(this.toOperationNode());
      }
      withPlugin(plugin) {
        return new _SelectQueryBuilderImpl({
          ...this.#props,
          executor: this.#props.executor.withPlugin(plugin)
        });
      }
      toOperationNode() {
        return this.#props.executor.transformQuery(this.#props.queryNode, this.#props.queryId);
      }
      compile() {
        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);
      }
      async execute() {
        const compiledQuery = this.compile();
        const result = await this.#props.executor.executeQuery(compiledQuery, this.#props.queryId);
        return result.rows;
      }
      async executeTakeFirst() {
        const [result] = await this.execute();
        return result;
      }
      async executeTakeFirstOrThrow(errorConstructor = NoResultError) {
        const result = await this.executeTakeFirst();
        if (result === void 0) {
          const error2 = isNoResultErrorConstructor(errorConstructor) ? new errorConstructor(this.toOperationNode()) : errorConstructor(this.toOperationNode());
          throw error2;
        }
        return result;
      }
      async *stream(chunkSize = 100) {
        const compiledQuery = this.compile();
        const stream = this.#props.executor.stream(compiledQuery, chunkSize, this.#props.queryId);
        for await (const item of stream) {
          yield* item.rows;
        }
      }
      async explain(format, options) {
        const builder = new _SelectQueryBuilderImpl({
          ...this.#props,
          queryNode: QueryNode.cloneWithExplain(this.#props.queryNode, format, options)
        });
        return await builder.execute();
      }
    };
    __name2(createSelectQueryBuilder, "createSelectQueryBuilder");
    AliasedSelectQueryBuilderImpl = class {
      static {
        __name(this, "AliasedSelectQueryBuilderImpl");
      }
      static {
        __name2(this, "AliasedSelectQueryBuilderImpl");
      }
      #queryBuilder;
      #alias;
      constructor(queryBuilder, alias) {
        this.#queryBuilder = queryBuilder;
        this.#alias = alias;
      }
      get expression() {
        return this.#queryBuilder;
      }
      get alias() {
        return this.#alias;
      }
      get isAliasedSelectQueryBuilder() {
        return true;
      }
      toOperationNode() {
        return AliasNode.create(this.#queryBuilder.toOperationNode(), IdentifierNode.create(this.#alias));
      }
    };
  }
});
var AggregateFunctionNode;
var init_aggregate_function_node = __esm({
  "../node_modules/kysely/dist/esm/operation-node/aggregate-function-node.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    init_where_node();
    init_order_by_node();
    AggregateFunctionNode = freeze({
      is(node) {
        return node.kind === "AggregateFunctionNode";
      },
      create(aggregateFunction, aggregated = []) {
        return freeze({
          kind: "AggregateFunctionNode",
          func: aggregateFunction,
          aggregated
        });
      },
      cloneWithDistinct(aggregateFunctionNode) {
        return freeze({
          ...aggregateFunctionNode,
          distinct: true
        });
      },
      cloneWithOrderBy(aggregateFunctionNode, orderItems, withinGroup = false) {
        const prop = withinGroup ? "withinGroup" : "orderBy";
        return freeze({
          ...aggregateFunctionNode,
          [prop]: aggregateFunctionNode[prop] ? OrderByNode.cloneWithItems(aggregateFunctionNode[prop], orderItems) : OrderByNode.create(orderItems)
        });
      },
      cloneWithFilter(aggregateFunctionNode, filter) {
        return freeze({
          ...aggregateFunctionNode,
          filter: aggregateFunctionNode.filter ? WhereNode.cloneWithOperation(aggregateFunctionNode.filter, "And", filter) : WhereNode.create(filter)
        });
      },
      cloneWithOrFilter(aggregateFunctionNode, filter) {
        return freeze({
          ...aggregateFunctionNode,
          filter: aggregateFunctionNode.filter ? WhereNode.cloneWithOperation(aggregateFunctionNode.filter, "Or", filter) : WhereNode.create(filter)
        });
      },
      cloneWithOver(aggregateFunctionNode, over) {
        return freeze({
          ...aggregateFunctionNode,
          over
        });
      }
    });
  }
});
var FunctionNode;
var init_function_node = __esm({
  "../node_modules/kysely/dist/esm/operation-node/function-node.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    FunctionNode = freeze({
      is(node) {
        return node.kind === "FunctionNode";
      },
      create(func, args) {
        return freeze({
          kind: "FunctionNode",
          func,
          arguments: args
        });
      }
    });
  }
});
var AggregateFunctionBuilder;
var AliasedAggregateFunctionBuilder;
var init_aggregate_function_builder = __esm({
  "../node_modules/kysely/dist/esm/query-builder/aggregate-function-builder.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    init_aggregate_function_node();
    init_alias_node();
    init_identifier_node();
    init_parse_utils();
    init_binary_operation_parser();
    init_order_by_parser();
    init_query_node();
    AggregateFunctionBuilder = class _AggregateFunctionBuilder {
      static {
        __name(this, "_AggregateFunctionBuilder");
      }
      static {
        __name2(this, "AggregateFunctionBuilder");
      }
      #props;
      constructor(props) {
        this.#props = freeze(props);
      }
      /** @private */
      get expressionType() {
        return void 0;
      }
      /**
       * Returns an aliased version of the function.
       *
       * In addition to slapping `as "the_alias"` to the end of the SQL,
       * this method also provides strict typing:
       *
       * ```ts
       * const result = await db
       *   .selectFrom('person')
       *   .select(
       *     (eb) => eb.fn.count<number>('id').as('person_count')
       *   )
       *   .executeTakeFirstOrThrow()
       *
       * // `person_count: number` field exists in the result type.
       * console.log(result.person_count)
       * ```
       *
       * The generated SQL (PostgreSQL):
       *
       * ```sql
       * select count("id") as "person_count"
       * from "person"
       * ```
       */
      as(alias) {
        return new AliasedAggregateFunctionBuilder(this, alias);
      }
      /**
       * Adds a `distinct` clause inside the function.
       *
       * ### Examples
       *
       * ```ts
       * const result = await db
       *   .selectFrom('person')
       *   .select((eb) =>
       *     eb.fn.count<number>('first_name').distinct().as('first_name_count')
       *   )
       *   .executeTakeFirstOrThrow()
       * ```
       *
       * The generated SQL (PostgreSQL):
       *
       * ```sql
       * select count(distinct "first_name") as "first_name_count"
       * from "person"
       * ```
       */
      distinct() {
        return new _AggregateFunctionBuilder({
          ...this.#props,
          aggregateFunctionNode: AggregateFunctionNode.cloneWithDistinct(this.#props.aggregateFunctionNode)
        });
      }
      orderBy(...args) {
        return new _AggregateFunctionBuilder({
          ...this.#props,
          aggregateFunctionNode: QueryNode.cloneWithOrderByItems(this.#props.aggregateFunctionNode, parseOrderBy(args))
        });
      }
      clearOrderBy() {
        return new _AggregateFunctionBuilder({
          ...this.#props,
          aggregateFunctionNode: QueryNode.cloneWithoutOrderBy(this.#props.aggregateFunctionNode)
        });
      }
      withinGroupOrderBy(...args) {
        return new _AggregateFunctionBuilder({
          ...this.#props,
          aggregateFunctionNode: AggregateFunctionNode.cloneWithOrderBy(this.#props.aggregateFunctionNode, parseOrderBy(args), true)
        });
      }
      filterWhere(...args) {
        return new _AggregateFunctionBuilder({
          ...this.#props,
          aggregateFunctionNode: AggregateFunctionNode.cloneWithFilter(this.#props.aggregateFunctionNode, parseValueBinaryOperationOrExpression(args))
        });
      }
      /**
       * Adds a `filter` clause with a nested `where` clause after the function, where
       * both sides of the operator are references to columns.
       *
       * Similar to {@link WhereInterface}'s `whereRef` method.
       *
       * ### Examples
       *
       * Count people with same first and last names versus general public:
       *
       * ```ts
       * const result = await db
       *   .selectFrom('person')
       *   .select((eb) => [
       *     eb.fn
       *       .count<number>('id')
       *       .filterWhereRef('first_name', '=', 'last_name')
       *       .as('repeat_name_count'),
       *     eb.fn.count<number>('id').as('total_count'),
       *   ])
       *   .executeTakeFirstOrThrow()
       * ```
       *
       * The generated SQL (PostgreSQL):
       *
       * ```sql
       * select
       *   count("id") filter(where "first_name" = "last_name") as "repeat_name_count",
       *   count("id") as "total_count"
       * from "person"
       * ```
       */
      filterWhereRef(lhs, op, rhs) {
        return new _AggregateFunctionBuilder({
          ...this.#props,
          aggregateFunctionNode: AggregateFunctionNode.cloneWithFilter(this.#props.aggregateFunctionNode, parseReferentialBinaryOperation(lhs, op, rhs))
        });
      }
      /**
       * Adds an `over` clause (window functions) after the function.
       *
       * ### Examples
       *
       * ```ts
       * const result = await db
       *   .selectFrom('person')
       *   .select(
       *     (eb) => eb.fn.avg<number>('age').over().as('average_age')
       *   )
       *   .execute()
       * ```
       *
       * The generated SQL (PostgreSQL):
       *
       * ```sql
       * select avg("age") over() as "average_age"
       * from "person"
       * ```
       *
       * Also supports passing a callback that returns an over builder,
       * allowing to add partition by and sort by clauses inside over.
       *
       * ```ts
       * const result = await db
       *   .selectFrom('person')
       *   .select(
       *     (eb) => eb.fn.avg<number>('age').over(
       *       ob => ob.partitionBy('last_name').orderBy('first_name', 'asc')
       *     ).as('average_age')
       *   )
       *   .execute()
       * ```
       *
       * The generated SQL (PostgreSQL):
       *
       * ```sql
       * select avg("age") over(partition by "last_name" order by "first_name" asc) as "average_age"
       * from "person"
       * ```
       */
      over(over) {
        const builder = createOverBuilder();
        return new _AggregateFunctionBuilder({
          ...this.#props,
          aggregateFunctionNode: AggregateFunctionNode.cloneWithOver(this.#props.aggregateFunctionNode, (over ? over(builder) : builder).toOperationNode())
        });
      }
      /**
       * Simply calls the provided function passing `this` as the only argument. `$call` returns
       * what the provided function returns.
       */
      $call(func) {
        return func(this);
      }
      /**
       * Casts the expression to the given type.
       *
       * This method call doesn't change the SQL in any way. This methods simply
       * returns a copy of this `AggregateFunctionBuilder` with a new output type.
       */
      $castTo() {
        return new _AggregateFunctionBuilder(this.#props);
      }
      /**
       * Omit null from the expression's type.
       *
       * This function can be useful in cases where you know an expression can't be
       * null, but Kysely is unable to infer it.
       *
       * This method call doesn't change the SQL in any way. This methods simply
       * returns a copy of `this` with a new output type.
       */
      $notNull() {
        return new _AggregateFunctionBuilder(this.#props);
      }
      toOperationNode() {
        return this.#props.aggregateFunctionNode;
      }
    };
    AliasedAggregateFunctionBuilder = class {
      static {
        __name(this, "AliasedAggregateFunctionBuilder");
      }
      static {
        __name2(this, "AliasedAggregateFunctionBuilder");
      }
      #aggregateFunctionBuilder;
      #alias;
      constructor(aggregateFunctionBuilder, alias) {
        this.#aggregateFunctionBuilder = aggregateFunctionBuilder;
        this.#alias = alias;
      }
      /** @private */
      get expression() {
        return this.#aggregateFunctionBuilder;
      }
      /** @private */
      get alias() {
        return this.#alias;
      }
      toOperationNode() {
        return AliasNode.create(this.#aggregateFunctionBuilder.toOperationNode(), IdentifierNode.create(this.#alias));
      }
    };
  }
});
function createFunctionModule() {
  const fn = /* @__PURE__ */ __name2((name, args) => {
    return new ExpressionWrapper(FunctionNode.create(name, parseReferenceExpressionOrList(args ?? [])));
  }, "fn");
  const agg = /* @__PURE__ */ __name2((name, args) => {
    return new AggregateFunctionBuilder({
      aggregateFunctionNode: AggregateFunctionNode.create(name, args ? parseReferenceExpressionOrList(args) : void 0)
    });
  }, "agg");
  return Object.assign(fn, {
    agg,
    avg(column) {
      return agg("avg", [column]);
    },
    coalesce(...values) {
      return fn("coalesce", values);
    },
    count(column) {
      return agg("count", [column]);
    },
    countAll(table) {
      return new AggregateFunctionBuilder({
        aggregateFunctionNode: AggregateFunctionNode.create("count", parseSelectAll(table))
      });
    },
    max(column) {
      return agg("max", [column]);
    },
    min(column) {
      return agg("min", [column]);
    },
    sum(column) {
      return agg("sum", [column]);
    },
    any(column) {
      return fn("any", [column]);
    },
    jsonAgg(table) {
      return new AggregateFunctionBuilder({
        aggregateFunctionNode: AggregateFunctionNode.create("json_agg", [
          isString(table) ? parseTable(table) : table.toOperationNode()
        ])
      });
    },
    toJson(table) {
      return new ExpressionWrapper(FunctionNode.create("to_json", [
        isString(table) ? parseTable(table) : table.toOperationNode()
      ]));
    }
  });
}
__name(createFunctionModule, "createFunctionModule");
var init_function_module = __esm({
  "../node_modules/kysely/dist/esm/query-builder/function-module.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_expression_wrapper();
    init_aggregate_function_node();
    init_function_node();
    init_reference_parser();
    init_select_parser();
    init_aggregate_function_builder();
    init_object_utils();
    init_table_parser();
    __name2(createFunctionModule, "createFunctionModule");
  }
});
var UnaryOperationNode;
var init_unary_operation_node = __esm({
  "../node_modules/kysely/dist/esm/operation-node/unary-operation-node.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    UnaryOperationNode = freeze({
      is(node) {
        return node.kind === "UnaryOperationNode";
      },
      create(operator, operand) {
        return freeze({
          kind: "UnaryOperationNode",
          operator,
          operand
        });
      }
    });
  }
});
function parseUnaryOperation(operator, operand) {
  return UnaryOperationNode.create(OperatorNode.create(operator), parseReferenceExpression(operand));
}
__name(parseUnaryOperation, "parseUnaryOperation");
var init_unary_operation_parser = __esm({
  "../node_modules/kysely/dist/esm/parser/unary-operation-parser.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_operator_node();
    init_unary_operation_node();
    init_reference_parser();
    __name2(parseUnaryOperation, "parseUnaryOperation");
  }
});
var CaseNode;
var init_case_node = __esm({
  "../node_modules/kysely/dist/esm/operation-node/case-node.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    init_when_node();
    CaseNode = freeze({
      is(node) {
        return node.kind === "CaseNode";
      },
      create(value) {
        return freeze({
          kind: "CaseNode",
          value
        });
      },
      cloneWithWhen(caseNode, when) {
        return freeze({
          ...caseNode,
          when: freeze(caseNode.when ? [...caseNode.when, when] : [when])
        });
      },
      cloneWithThen(caseNode, then) {
        return freeze({
          ...caseNode,
          when: caseNode.when ? freeze([
            ...caseNode.when.slice(0, -1),
            WhenNode.cloneWithResult(caseNode.when[caseNode.when.length - 1], then)
          ]) : void 0
        });
      },
      cloneWith(caseNode, props) {
        return freeze({
          ...caseNode,
          ...props
        });
      }
    });
  }
});
var CaseBuilder;
var CaseThenBuilder;
var CaseWhenBuilder;
var CaseEndBuilder;
var init_case_builder = __esm({
  "../node_modules/kysely/dist/esm/query-builder/case-builder.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_expression_wrapper();
    init_object_utils();
    init_case_node();
    init_when_node();
    init_binary_operation_parser();
    init_value_parser();
    CaseBuilder = class {
      static {
        __name(this, "CaseBuilder");
      }
      static {
        __name2(this, "CaseBuilder");
      }
      #props;
      constructor(props) {
        this.#props = freeze(props);
      }
      when(...args) {
        return new CaseThenBuilder({
          ...this.#props,
          node: CaseNode.cloneWithWhen(this.#props.node, WhenNode.create(parseValueBinaryOperationOrExpression(args)))
        });
      }
    };
    CaseThenBuilder = class {
      static {
        __name(this, "CaseThenBuilder");
      }
      static {
        __name2(this, "CaseThenBuilder");
      }
      #props;
      constructor(props) {
        this.#props = freeze(props);
      }
      then(valueExpression) {
        return new CaseWhenBuilder({
          ...this.#props,
          node: CaseNode.cloneWithThen(this.#props.node, isSafeImmediateValue(valueExpression) ? parseSafeImmediateValue(valueExpression) : parseValueExpression(valueExpression))
        });
      }
    };
    CaseWhenBuilder = class {
      static {
        __name(this, "CaseWhenBuilder");
      }
      static {
        __name2(this, "CaseWhenBuilder");
      }
      #props;
      constructor(props) {
        this.#props = freeze(props);
      }
      when(...args) {
        return new CaseThenBuilder({
          ...this.#props,
          node: CaseNode.cloneWithWhen(this.#props.node, WhenNode.create(parseValueBinaryOperationOrExpression(args)))
        });
      }
      else(valueExpression) {
        return new CaseEndBuilder({
          ...this.#props,
          node: CaseNode.cloneWith(this.#props.node, {
            else: isSafeImmediateValue(valueExpression) ? parseSafeImmediateValue(valueExpression) : parseValueExpression(valueExpression)
          })
        });
      }
      end() {
        return new ExpressionWrapper(CaseNode.cloneWith(this.#props.node, { isStatement: false }));
      }
      endCase() {
        return new ExpressionWrapper(CaseNode.cloneWith(this.#props.node, { isStatement: true }));
      }
    };
    CaseEndBuilder = class {
      static {
        __name(this, "CaseEndBuilder");
      }
      static {
        __name2(this, "CaseEndBuilder");
      }
      #props;
      constructor(props) {
        this.#props = freeze(props);
      }
      end() {
        return new ExpressionWrapper(CaseNode.cloneWith(this.#props.node, { isStatement: false }));
      }
      endCase() {
        return new ExpressionWrapper(CaseNode.cloneWith(this.#props.node, { isStatement: true }));
      }
    };
  }
});
var JSONPathLegNode;
var init_json_path_leg_node = __esm({
  "../node_modules/kysely/dist/esm/operation-node/json-path-leg-node.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    JSONPathLegNode = freeze({
      is(node) {
        return node.kind === "JSONPathLegNode";
      },
      create(type, value) {
        return freeze({
          kind: "JSONPathLegNode",
          type,
          value
        });
      }
    });
  }
});
var JSONPathBuilder;
var TraversedJSONPathBuilder;
var AliasedJSONPathBuilder;
var init_json_path_builder = __esm({
  "../node_modules/kysely/dist/esm/query-builder/json-path-builder.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_alias_node();
    init_identifier_node();
    init_json_operator_chain_node();
    init_json_path_leg_node();
    init_json_path_node();
    init_json_reference_node();
    init_operation_node_source();
    init_value_node();
    JSONPathBuilder = class {
      static {
        __name(this, "JSONPathBuilder");
      }
      static {
        __name2(this, "JSONPathBuilder");
      }
      #node;
      constructor(node) {
        this.#node = node;
      }
      /**
       * Access an element of a JSON array in a specific location.
       *
       * Since there's no guarantee an element exists in the given array location, the
       * resulting type is always nullable. If you're sure the element exists, you
       * should use {@link SelectQueryBuilder.$assertType} to narrow the type safely.
       *
       * See also {@link key} to access properties of JSON objects.
       *
       * ### Examples
       *
       * ```ts
       * await db.selectFrom('person')
       *   .select(eb =>
       *     eb.ref('nicknames', '->').at(0).as('primary_nickname')
       *   )
       *   .execute()
       * ```
       *
       * The generated SQL (PostgreSQL):
       *
       * ```sql
       * select "nicknames"->0 as "primary_nickname" from "person"
       *```
       *
       * Combined with {@link key}:
       *
       * ```ts
       * db.selectFrom('person').select(eb =>
       *   eb.ref('experience', '->').at(0).key('role').as('first_role')
       * )
       * ```
       *
       * The generated SQL (PostgreSQL):
       *
       * ```sql
       * select "experience"->0->'role' as "first_role" from "person"
       * ```
       *
       * You can use `'last'` to access the last element of the array in MySQL:
       *
       * ```ts
       * db.selectFrom('person').select(eb =>
       *   eb.ref('nicknames', '->$').at('last').as('last_nickname')
       * )
       * ```
       *
       * The generated SQL (MySQL):
       *
       * ```sql
       * select `nicknames`->'$[last]' as `last_nickname` from `person`
       * ```
       *
       * Or `'#-1'` in SQLite:
       *
       * ```ts
       * db.selectFrom('person').select(eb =>
       *   eb.ref('nicknames', '->>$').at('#-1').as('last_nickname')
       * )
       * ```
       *
       * The generated SQL (SQLite):
       *
       * ```sql
       * select "nicknames"->>'$[#-1]' as `last_nickname` from `person`
       * ```
       */
      at(index) {
        return this.#createBuilderWithPathLeg("ArrayLocation", index);
      }
      /**
       * Access a property of a JSON object.
       *
       * If a field is optional, the resulting type will be nullable.
       *
       * See also {@link at} to access elements of JSON arrays.
       *
       * ### Examples
       *
       * ```ts
       * db.selectFrom('person').select(eb =>
       *   eb.ref('address', '->').key('city').as('city')
       * )
       * ```
       *
       * The generated SQL (PostgreSQL):
       *
       * ```sql
       * select "address"->'city' as "city" from "person"
       * ```
       *
       * Going deeper:
       *
       * ```ts
       * db.selectFrom('person').select(eb =>
       *   eb.ref('profile', '->$').key('website').key('url').as('website_url')
       * )
       * ```
       *
       * The generated SQL (MySQL):
       *
       * ```sql
       * select `profile`->'$.website.url' as `website_url` from `person`
       * ```
       *
       * Combined with {@link at}:
       *
       * ```ts
       * db.selectFrom('person').select(eb =>
       *   eb.ref('profile', '->').key('addresses').at(0).key('city').as('city')
       * )
       * ```
       *
       * The generated SQL (PostgreSQL):
       *
       * ```sql
       * select "profile"->'addresses'->0->'city' as "city" from "person"
       * ```
       */
      key(key) {
        return this.#createBuilderWithPathLeg("Member", key);
      }
      #createBuilderWithPathLeg(legType, value) {
        if (JSONReferenceNode.is(this.#node)) {
          return new TraversedJSONPathBuilder(JSONReferenceNode.cloneWithTraversal(this.#node, JSONPathNode.is(this.#node.traversal) ? JSONPathNode.cloneWithLeg(this.#node.traversal, JSONPathLegNode.create(legType, value)) : JSONOperatorChainNode.cloneWithValue(this.#node.traversal, ValueNode.createImmediate(value))));
        }
        return new TraversedJSONPathBuilder(JSONPathNode.cloneWithLeg(this.#node, JSONPathLegNode.create(legType, value)));
      }
    };
    TraversedJSONPathBuilder = class _TraversedJSONPathBuilder extends JSONPathBuilder {
      static {
        __name(this, "_TraversedJSONPathBuilder");
      }
      static {
        __name2(this, "TraversedJSONPathBuilder");
      }
      #node;
      constructor(node) {
        super(node);
        this.#node = node;
      }
      /** @private */
      get expressionType() {
        return void 0;
      }
      as(alias) {
        return new AliasedJSONPathBuilder(this, alias);
      }
      /**
       * Change the output type of the json path.
       *
       * This method call doesn't change the SQL in any way. This methods simply
       * returns a copy of this `JSONPathBuilder` with a new output type.
       */
      $castTo() {
        return new _TraversedJSONPathBuilder(this.#node);
      }
      $notNull() {
        return new _TraversedJSONPathBuilder(this.#node);
      }
      toOperationNode() {
        return this.#node;
      }
    };
    AliasedJSONPathBuilder = class {
      static {
        __name(this, "AliasedJSONPathBuilder");
      }
      static {
        __name2(this, "AliasedJSONPathBuilder");
      }
      #jsonPath;
      #alias;
      constructor(jsonPath, alias) {
        this.#jsonPath = jsonPath;
        this.#alias = alias;
      }
      /** @private */
      get expression() {
        return this.#jsonPath;
      }
      /** @private */
      get alias() {
        return this.#alias;
      }
      toOperationNode() {
        return AliasNode.create(this.#jsonPath.toOperationNode(), isOperationNodeSource(this.#alias) ? this.#alias.toOperationNode() : IdentifierNode.create(this.#alias));
      }
    };
  }
});
var TupleNode;
var init_tuple_node = __esm({
  "../node_modules/kysely/dist/esm/operation-node/tuple-node.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    TupleNode = freeze({
      is(node) {
        return node.kind === "TupleNode";
      },
      create(values) {
        return freeze({
          kind: "TupleNode",
          values: freeze(values)
        });
      }
    });
  }
});
function isColumnDataType(dataType) {
  if (SIMPLE_COLUMN_DATA_TYPES.includes(dataType)) {
    return true;
  }
  if (COLUMN_DATA_TYPE_REGEX.some((r) => r.test(dataType))) {
    return true;
  }
  return false;
}
__name(isColumnDataType, "isColumnDataType");
var SIMPLE_COLUMN_DATA_TYPES;
var COLUMN_DATA_TYPE_REGEX;
var DataTypeNode;
var init_data_type_node = __esm({
  "../node_modules/kysely/dist/esm/operation-node/data-type-node.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    SIMPLE_COLUMN_DATA_TYPES = [
      "varchar",
      "char",
      "text",
      "integer",
      "int2",
      "int4",
      "int8",
      "smallint",
      "bigint",
      "boolean",
      "real",
      "double precision",
      "float4",
      "float8",
      "decimal",
      "numeric",
      "binary",
      "bytea",
      "date",
      "datetime",
      "time",
      "timetz",
      "timestamp",
      "timestamptz",
      "serial",
      "bigserial",
      "uuid",
      "json",
      "jsonb",
      "blob",
      "varbinary",
      "int4range",
      "int4multirange",
      "int8range",
      "int8multirange",
      "numrange",
      "nummultirange",
      "tsrange",
      "tsmultirange",
      "tstzrange",
      "tstzmultirange",
      "daterange",
      "datemultirange"
    ];
    COLUMN_DATA_TYPE_REGEX = [
      /^varchar\(\d+\)$/,
      /^char\(\d+\)$/,
      /^decimal\(\d+, \d+\)$/,
      /^numeric\(\d+, \d+\)$/,
      /^binary\(\d+\)$/,
      /^datetime\(\d+\)$/,
      /^time\(\d+\)$/,
      /^timetz\(\d+\)$/,
      /^timestamp\(\d+\)$/,
      /^timestamptz\(\d+\)$/,
      /^varbinary\(\d+\)$/
    ];
    DataTypeNode = freeze({
      is(node) {
        return node.kind === "DataTypeNode";
      },
      create(dataType) {
        return freeze({
          kind: "DataTypeNode",
          dataType
        });
      }
    });
    __name2(isColumnDataType, "isColumnDataType");
  }
});
function parseDataTypeExpression(dataType) {
  if (isOperationNodeSource(dataType)) {
    return dataType.toOperationNode();
  }
  if (isColumnDataType(dataType)) {
    return DataTypeNode.create(dataType);
  }
  throw new Error(`invalid column data type ${JSON.stringify(dataType)}`);
}
__name(parseDataTypeExpression, "parseDataTypeExpression");
var init_data_type_parser = __esm({
  "../node_modules/kysely/dist/esm/parser/data-type-parser.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_data_type_node();
    init_operation_node_source();
    __name2(parseDataTypeExpression, "parseDataTypeExpression");
  }
});
var CastNode;
var init_cast_node = __esm({
  "../node_modules/kysely/dist/esm/operation-node/cast-node.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    CastNode = freeze({
      is(node) {
        return node.kind === "CastNode";
      },
      create(expression, dataType) {
        return freeze({
          kind: "CastNode",
          expression,
          dataType
        });
      }
    });
  }
});
function createExpressionBuilder(executor = NOOP_QUERY_EXECUTOR) {
  function binary2(lhs, op, rhs) {
    return new ExpressionWrapper(parseValueBinaryOperation(lhs, op, rhs));
  }
  __name(binary2, "binary2");
  __name2(binary2, "binary");
  function unary(op, expr) {
    return new ExpressionWrapper(parseUnaryOperation(op, expr));
  }
  __name(unary, "unary");
  __name2(unary, "unary");
  const eb = Object.assign(binary2, {
    fn: void 0,
    eb: void 0,
    selectFrom(table) {
      return createSelectQueryBuilder({
        queryId: createQueryId(),
        executor,
        queryNode: SelectQueryNode.createFrom(parseTableExpressionOrList(table))
      });
    },
    case(reference) {
      return new CaseBuilder({
        node: CaseNode.create(isUndefined(reference) ? void 0 : parseReferenceExpression(reference))
      });
    },
    ref(reference, op) {
      if (isUndefined(op)) {
        return new ExpressionWrapper(parseStringReference(reference));
      }
      return new JSONPathBuilder(parseJSONReference(reference, op));
    },
    jsonPath() {
      return new JSONPathBuilder(JSONPathNode.create());
    },
    table(table) {
      return new ExpressionWrapper(parseTable(table));
    },
    val(value) {
      return new ExpressionWrapper(parseValueExpression(value));
    },
    refTuple(...values) {
      return new ExpressionWrapper(TupleNode.create(values.map(parseReferenceExpression)));
    },
    tuple(...values) {
      return new ExpressionWrapper(TupleNode.create(values.map(parseValueExpression)));
    },
    lit(value) {
      return new ExpressionWrapper(parseSafeImmediateValue(value));
    },
    unary,
    not(expr) {
      return unary("not", expr);
    },
    exists(expr) {
      return unary("exists", expr);
    },
    neg(expr) {
      return unary("-", expr);
    },
    between(expr, start, end) {
      return new ExpressionWrapper(BinaryOperationNode.create(parseReferenceExpression(expr), OperatorNode.create("between"), AndNode.create(parseValueExpression(start), parseValueExpression(end))));
    },
    betweenSymmetric(expr, start, end) {
      return new ExpressionWrapper(BinaryOperationNode.create(parseReferenceExpression(expr), OperatorNode.create("between symmetric"), AndNode.create(parseValueExpression(start), parseValueExpression(end))));
    },
    and(exprs) {
      if (isReadonlyArray(exprs)) {
        return new ExpressionWrapper(parseFilterList(exprs, "and"));
      }
      return new ExpressionWrapper(parseFilterObject(exprs, "and"));
    },
    or(exprs) {
      if (isReadonlyArray(exprs)) {
        return new ExpressionWrapper(parseFilterList(exprs, "or"));
      }
      return new ExpressionWrapper(parseFilterObject(exprs, "or"));
    },
    parens(...args) {
      const node = parseValueBinaryOperationOrExpression(args);
      if (ParensNode.is(node)) {
        return new ExpressionWrapper(node);
      } else {
        return new ExpressionWrapper(ParensNode.create(node));
      }
    },
    cast(expr, dataType) {
      return new ExpressionWrapper(CastNode.create(parseReferenceExpression(expr), parseDataTypeExpression(dataType)));
    },
    withSchema(schema2) {
      return createExpressionBuilder(executor.withPluginAtFront(new WithSchemaPlugin(schema2)));
    }
  });
  eb.fn = createFunctionModule();
  eb.eb = eb;
  return eb;
}
__name(createExpressionBuilder, "createExpressionBuilder");
function expressionBuilder(_) {
  return createExpressionBuilder();
}
__name(expressionBuilder, "expressionBuilder");
var init_expression_builder = __esm({
  "../node_modules/kysely/dist/esm/expression/expression-builder.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_select_query_builder();
    init_select_query_node();
    init_table_parser();
    init_with_schema_plugin();
    init_query_id();
    init_function_module();
    init_reference_parser();
    init_binary_operation_parser();
    init_parens_node();
    init_expression_wrapper();
    init_operator_node();
    init_unary_operation_parser();
    init_value_parser();
    init_noop_query_executor();
    init_case_builder();
    init_case_node();
    init_object_utils();
    init_json_path_builder();
    init_binary_operation_node();
    init_and_node();
    init_tuple_node();
    init_json_path_node();
    init_data_type_parser();
    init_cast_node();
    __name2(createExpressionBuilder, "createExpressionBuilder");
    __name2(expressionBuilder, "expressionBuilder");
  }
});
function parseExpression(exp) {
  if (isOperationNodeSource(exp)) {
    return exp.toOperationNode();
  } else if (isFunction(exp)) {
    return exp(expressionBuilder()).toOperationNode();
  }
  throw new Error(`invalid expression: ${JSON.stringify(exp)}`);
}
__name(parseExpression, "parseExpression");
function parseAliasedExpression(exp) {
  if (isOperationNodeSource(exp)) {
    return exp.toOperationNode();
  } else if (isFunction(exp)) {
    return exp(expressionBuilder()).toOperationNode();
  }
  throw new Error(`invalid aliased expression: ${JSON.stringify(exp)}`);
}
__name(parseAliasedExpression, "parseAliasedExpression");
function isExpressionOrFactory(obj) {
  return isExpression(obj) || isAliasedExpression(obj) || isFunction(obj);
}
__name(isExpressionOrFactory, "isExpressionOrFactory");
var init_expression_parser = __esm({
  "../node_modules/kysely/dist/esm/parser/expression-parser.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_expression();
    init_operation_node_source();
    init_expression_builder();
    init_object_utils();
    __name2(parseExpression, "parseExpression");
    __name2(parseAliasedExpression, "parseAliasedExpression");
    __name2(isExpressionOrFactory, "isExpressionOrFactory");
  }
});
function isAliasedDynamicTableBuilder(obj) {
  return isObject(obj) && isOperationNodeSource(obj) && isString(obj.table) && isString(obj.alias);
}
__name(isAliasedDynamicTableBuilder, "isAliasedDynamicTableBuilder");
var DynamicTableBuilder;
var AliasedDynamicTableBuilder;
var init_dynamic_table_builder = __esm({
  "../node_modules/kysely/dist/esm/dynamic/dynamic-table-builder.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_alias_node();
    init_identifier_node();
    init_operation_node_source();
    init_table_parser();
    init_object_utils();
    DynamicTableBuilder = class {
      static {
        __name(this, "DynamicTableBuilder");
      }
      static {
        __name2(this, "DynamicTableBuilder");
      }
      #table;
      get table() {
        return this.#table;
      }
      constructor(table) {
        this.#table = table;
      }
      as(alias) {
        return new AliasedDynamicTableBuilder(this.#table, alias);
      }
    };
    AliasedDynamicTableBuilder = class {
      static {
        __name(this, "AliasedDynamicTableBuilder");
      }
      static {
        __name2(this, "AliasedDynamicTableBuilder");
      }
      #table;
      #alias;
      get table() {
        return this.#table;
      }
      get alias() {
        return this.#alias;
      }
      constructor(table, alias) {
        this.#table = table;
        this.#alias = alias;
      }
      toOperationNode() {
        return AliasNode.create(parseTable(this.#table), IdentifierNode.create(this.#alias));
      }
    };
    __name2(isAliasedDynamicTableBuilder, "isAliasedDynamicTableBuilder");
  }
});
function parseTableExpressionOrList(table) {
  if (isReadonlyArray(table)) {
    return table.map((it) => parseTableExpression(it));
  } else {
    return [parseTableExpression(table)];
  }
}
__name(parseTableExpressionOrList, "parseTableExpressionOrList");
function parseTableExpression(table) {
  if (isString(table)) {
    return parseAliasedTable(table);
  } else if (isAliasedDynamicTableBuilder(table)) {
    return table.toOperationNode();
  } else {
    return parseAliasedExpression(table);
  }
}
__name(parseTableExpression, "parseTableExpression");
function parseAliasedTable(from) {
  const ALIAS_SEPARATOR = " as ";
  if (from.includes(ALIAS_SEPARATOR)) {
    const [table, alias] = from.split(ALIAS_SEPARATOR).map(trim2);
    return AliasNode.create(parseTable(table), IdentifierNode.create(alias));
  } else {
    return parseTable(from);
  }
}
__name(parseAliasedTable, "parseAliasedTable");
function parseTable(from) {
  const SCHEMA_SEPARATOR = ".";
  if (from.includes(SCHEMA_SEPARATOR)) {
    const [schema2, table] = from.split(SCHEMA_SEPARATOR).map(trim2);
    return TableNode.createWithSchema(schema2, table);
  } else {
    return TableNode.create(from);
  }
}
__name(parseTable, "parseTable");
function trim2(str) {
  return str.trim();
}
__name(trim2, "trim2");
var init_table_parser = __esm({
  "../node_modules/kysely/dist/esm/parser/table-parser.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    init_alias_node();
    init_table_node();
    init_expression_parser();
    init_identifier_node();
    init_dynamic_table_builder();
    __name2(parseTableExpressionOrList, "parseTableExpressionOrList");
    __name2(parseTableExpression, "parseTableExpression");
    __name2(parseAliasedTable, "parseAliasedTable");
    __name2(parseTable, "parseTable");
    __name2(trim2, "trim");
  }
});
var AddColumnNode;
var init_add_column_node = __esm({
  "../node_modules/kysely/dist/esm/operation-node/add-column-node.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    AddColumnNode = freeze({
      is(node) {
        return node.kind === "AddColumnNode";
      },
      create(column) {
        return freeze({
          kind: "AddColumnNode",
          column
        });
      }
    });
  }
});
var ColumnDefinitionNode;
var init_column_definition_node = __esm({
  "../node_modules/kysely/dist/esm/operation-node/column-definition-node.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    init_column_node();
    ColumnDefinitionNode = freeze({
      is(node) {
        return node.kind === "ColumnDefinitionNode";
      },
      create(column, dataType) {
        return freeze({
          kind: "ColumnDefinitionNode",
          column: ColumnNode.create(column),
          dataType
        });
      },
      cloneWithFrontModifier(node, modifier) {
        return freeze({
          ...node,
          frontModifiers: node.frontModifiers ? freeze([...node.frontModifiers, modifier]) : [modifier]
        });
      },
      cloneWithEndModifier(node, modifier) {
        return freeze({
          ...node,
          endModifiers: node.endModifiers ? freeze([...node.endModifiers, modifier]) : [modifier]
        });
      },
      cloneWith(node, props) {
        return freeze({
          ...node,
          ...props
        });
      }
    });
  }
});
var DropColumnNode;
var init_drop_column_node = __esm({
  "../node_modules/kysely/dist/esm/operation-node/drop-column-node.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    init_column_node();
    DropColumnNode = freeze({
      is(node) {
        return node.kind === "DropColumnNode";
      },
      create(column) {
        return freeze({
          kind: "DropColumnNode",
          column: ColumnNode.create(column)
        });
      }
    });
  }
});
var RenameColumnNode;
var init_rename_column_node = __esm({
  "../node_modules/kysely/dist/esm/operation-node/rename-column-node.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    init_column_node();
    RenameColumnNode = freeze({
      is(node) {
        return node.kind === "RenameColumnNode";
      },
      create(column, newColumn) {
        return freeze({
          kind: "RenameColumnNode",
          column: ColumnNode.create(column),
          renameTo: ColumnNode.create(newColumn)
        });
      }
    });
  }
});
var CheckConstraintNode;
var init_check_constraint_node = __esm({
  "../node_modules/kysely/dist/esm/operation-node/check-constraint-node.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    init_identifier_node();
    CheckConstraintNode = freeze({
      is(node) {
        return node.kind === "CheckConstraintNode";
      },
      create(expression, constraintName) {
        return freeze({
          kind: "CheckConstraintNode",
          expression,
          name: constraintName ? IdentifierNode.create(constraintName) : void 0
        });
      }
    });
  }
});
var ON_MODIFY_FOREIGN_ACTIONS;
var ReferencesNode;
var init_references_node = __esm({
  "../node_modules/kysely/dist/esm/operation-node/references-node.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    ON_MODIFY_FOREIGN_ACTIONS = [
      "no action",
      "restrict",
      "cascade",
      "set null",
      "set default"
    ];
    ReferencesNode = freeze({
      is(node) {
        return node.kind === "ReferencesNode";
      },
      create(table, columns) {
        return freeze({
          kind: "ReferencesNode",
          table,
          columns: freeze([...columns])
        });
      },
      cloneWithOnDelete(references, onDelete) {
        return freeze({
          ...references,
          onDelete
        });
      },
      cloneWithOnUpdate(references, onUpdate) {
        return freeze({
          ...references,
          onUpdate
        });
      }
    });
  }
});
function parseDefaultValueExpression(value) {
  return isOperationNodeSource(value) ? value.toOperationNode() : ValueNode.createImmediate(value);
}
__name(parseDefaultValueExpression, "parseDefaultValueExpression");
var init_default_value_parser = __esm({
  "../node_modules/kysely/dist/esm/parser/default-value-parser.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_operation_node_source();
    init_value_node();
    __name2(parseDefaultValueExpression, "parseDefaultValueExpression");
  }
});
var GeneratedNode;
var init_generated_node = __esm({
  "../node_modules/kysely/dist/esm/operation-node/generated-node.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    GeneratedNode = freeze({
      is(node) {
        return node.kind === "GeneratedNode";
      },
      create(params) {
        return freeze({
          kind: "GeneratedNode",
          ...params
        });
      },
      createWithExpression(expression) {
        return freeze({
          kind: "GeneratedNode",
          always: true,
          expression
        });
      },
      cloneWith(node, params) {
        return freeze({
          ...node,
          ...params
        });
      }
    });
  }
});
var DefaultValueNode;
var init_default_value_node = __esm({
  "../node_modules/kysely/dist/esm/operation-node/default-value-node.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    DefaultValueNode = freeze({
      is(node) {
        return node.kind === "DefaultValueNode";
      },
      create(defaultValue) {
        return freeze({
          kind: "DefaultValueNode",
          defaultValue
        });
      }
    });
  }
});
function parseOnModifyForeignAction(action) {
  if (ON_MODIFY_FOREIGN_ACTIONS.includes(action)) {
    return action;
  }
  throw new Error(`invalid OnModifyForeignAction ${action}`);
}
__name(parseOnModifyForeignAction, "parseOnModifyForeignAction");
var init_on_modify_action_parser = __esm({
  "../node_modules/kysely/dist/esm/parser/on-modify-action-parser.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_references_node();
    __name2(parseOnModifyForeignAction, "parseOnModifyForeignAction");
  }
});
var ColumnDefinitionBuilder;
var init_column_definition_builder = __esm({
  "../node_modules/kysely/dist/esm/schema/column-definition-builder.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_check_constraint_node();
    init_references_node();
    init_select_all_node();
    init_reference_parser();
    init_column_definition_node();
    init_default_value_parser();
    init_generated_node();
    init_default_value_node();
    init_on_modify_action_parser();
    ColumnDefinitionBuilder = class _ColumnDefinitionBuilder {
      static {
        __name(this, "_ColumnDefinitionBuilder");
      }
      static {
        __name2(this, "ColumnDefinitionBuilder");
      }
      #node;
      constructor(node) {
        this.#node = node;
      }
      /**
       * Adds `auto_increment` or `autoincrement` to the column definition
       * depending on the dialect.
       *
       * Some dialects like PostgreSQL don't support this. On PostgreSQL
       * you can use the `serial` or `bigserial` data type instead.
       *
       * ### Examples
       *
       * ```ts
       * await db.schema
       *   .createTable('person')
       *   .addColumn('id', 'integer', col => col.autoIncrement().primaryKey())
       *   .execute()
       * ```
       *
       * The generated SQL (MySQL):
       *
       * ```sql
       * create table `person` (
       *   `id` integer primary key auto_increment
       * )
       * ```
       */
      autoIncrement() {
        return new _ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, { autoIncrement: true }));
      }
      /**
       * Makes the column an identity column.
       *
       * This only works on some dialects like MS SQL Server (MSSQL).
       *
       * For PostgreSQL's `generated always as identity` use {@link generatedAlwaysAsIdentity}.
       *
       * ### Examples
       *
       * ```ts
       * await db.schema
       *   .createTable('person')
       *   .addColumn('id', 'integer', col => col.identity().primaryKey())
       *   .execute()
       * ```
       *
       * The generated SQL (MSSQL):
       *
       * ```sql
       * create table "person" (
       *   "id" integer identity primary key
       * )
       * ```
       */
      identity() {
        return new _ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, { identity: true }));
      }
      /**
       * Makes the column the primary key.
       *
       * If you want to specify a composite primary key use the
       * {@link CreateTableBuilder.addPrimaryKeyConstraint} method.
       *
       * ### Examples
       *
       * ```ts
       * await db.schema
       *   .createTable('person')
       *   .addColumn('id', 'integer', col => col.primaryKey())
       *   .execute()
       * ```
       *
       * The generated SQL (MySQL):
       *
       * ```sql
       * create table `person` (
       *   `id` integer primary key
       * )
       */
      primaryKey() {
        return new _ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, { primaryKey: true }));
      }
      /**
       * Adds a foreign key constraint for the column.
       *
       * If your database engine doesn't support foreign key constraints in the
       * column definition (like MySQL 5) you need to call the table level
       * {@link CreateTableBuilder.addForeignKeyConstraint} method instead.
       *
       * ### Examples
       *
       * ```ts
       * await db.schema
       *   .createTable('pet')
       *   .addColumn('owner_id', 'integer', (col) => col.references('person.id'))
       *   .execute()
       * ```
       *
       * The generated SQL (PostgreSQL):
       *
       * ```sql
       * create table "pet" (
       *   "owner_id" integer references "person" ("id")
       * )
       * ```
       */
      references(ref) {
        const references = parseStringReference(ref);
        if (!references.table || SelectAllNode.is(references.column)) {
          throw new Error(`invalid call references('${ref}'). The reference must have format table.column or schema.table.column`);
        }
        return new _ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, {
          references: ReferencesNode.create(references.table, [
            references.column
          ])
        }));
      }
      /**
       * Adds an `on delete` constraint for the foreign key column.
       *
       * If your database engine doesn't support foreign key constraints in the
       * column definition (like MySQL 5) you need to call the table level
       * {@link CreateTableBuilder.addForeignKeyConstraint} method instead.
       *
       * ### Examples
       *
       * ```ts
       * await db.schema
       *   .createTable('pet')
       *   .addColumn(
       *     'owner_id',
       *     'integer',
       *     (col) => col.references('person.id').onDelete('cascade')
       *   )
       *   .execute()
       * ```
       *
       * The generated SQL (PostgreSQL):
       *
       * ```sql
       * create table "pet" (
       *   "owner_id" integer references "person" ("id") on delete cascade
       * )
       * ```
       */
      onDelete(onDelete) {
        if (!this.#node.references) {
          throw new Error("on delete constraint can only be added for foreign keys");
        }
        return new _ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, {
          references: ReferencesNode.cloneWithOnDelete(this.#node.references, parseOnModifyForeignAction(onDelete))
        }));
      }
      /**
       * Adds an `on update` constraint for the foreign key column.
       *
       * If your database engine doesn't support foreign key constraints in the
       * column definition (like MySQL 5) you need to call the table level
       * {@link CreateTableBuilder.addForeignKeyConstraint} method instead.
       *
       * ### Examples
       *
       * ```ts
       * await db.schema
       *   .createTable('pet')
       *   .addColumn(
       *     'owner_id',
       *     'integer',
       *     (col) => col.references('person.id').onUpdate('cascade')
       *   )
       *   .execute()
       * ```
       *
       * The generated SQL (PostgreSQL):
       *
       * ```sql
       * create table "pet" (
       *   "owner_id" integer references "person" ("id") on update cascade
       * )
       * ```
       */
      onUpdate(onUpdate) {
        if (!this.#node.references) {
          throw new Error("on update constraint can only be added for foreign keys");
        }
        return new _ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, {
          references: ReferencesNode.cloneWithOnUpdate(this.#node.references, parseOnModifyForeignAction(onUpdate))
        }));
      }
      /**
       * Adds a unique constraint for the column.
       *
       * ### Examples
       *
       * ```ts
       * await db.schema
       *   .createTable('person')
       *   .addColumn('email', 'varchar(255)', col => col.unique())
       *   .execute()
       * ```
       *
       * The generated SQL (MySQL):
       *
       * ```sql
       * create table `person` (
       *   `email` varchar(255) unique
       * )
       * ```
       */
      unique() {
        return new _ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, { unique: true }));
      }
      /**
       * Adds a `not null` constraint for the column.
       *
       * ### Examples
       *
       * ```ts
       * await db.schema
       *   .createTable('person')
       *   .addColumn('first_name', 'varchar(255)', col => col.notNull())
       *   .execute()
       * ```
       *
       * The generated SQL (MySQL):
       *
       * ```sql
       * create table `person` (
       *   `first_name` varchar(255) not null
       * )
       * ```
       */
      notNull() {
        return new _ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, { notNull: true }));
      }
      /**
       * Adds a `unsigned` modifier for the column.
       *
       * This only works on some dialects like MySQL.
       *
       * ### Examples
       *
       * ```ts
       * await db.schema
       *   .createTable('person')
       *   .addColumn('age', 'integer', col => col.unsigned())
       *   .execute()
       * ```
       *
       * The generated SQL (MySQL):
       *
       * ```sql
       * create table `person` (
       *   `age` integer unsigned
       * )
       * ```
       */
      unsigned() {
        return new _ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, { unsigned: true }));
      }
      /**
       * Adds a default value constraint for the column.
       *
       * ### Examples
       *
       * ```ts
       * await db.schema
       *   .createTable('pet')
       *   .addColumn('number_of_legs', 'integer', (col) => col.defaultTo(4))
       *   .execute()
       * ```
       *
       * The generated SQL (MySQL):
       *
       * ```sql
       * create table `pet` (
       *   `number_of_legs` integer default 4
       * )
       * ```
       *
       * Values passed to `defaultTo` are interpreted as value literals by default. You can define
       * an arbitrary SQL expression using the {@link sql} template tag:
       *
       * ```ts
       * import { sql } from 'kysely'
       *
       * await db.schema
       *   .createTable('pet')
       *   .addColumn(
       *     'created_at',
       *     'timestamp',
       *     (col) => col.defaultTo(sql`CURRENT_TIMESTAMP`)
       *   )
       *   .execute()
       * ```
       *
       * The generated SQL (MySQL):
       *
       * ```sql
       * create table `pet` (
       *   `created_at` timestamp default CURRENT_TIMESTAMP
       * )
       * ```
       */
      defaultTo(value) {
        return new _ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, {
          defaultTo: DefaultValueNode.create(parseDefaultValueExpression(value))
        }));
      }
      /**
       * Adds a check constraint for the column.
       *
       * ### Examples
       *
       * ```ts
       * import { sql } from 'kysely'
       *
       * await db.schema
       *   .createTable('pet')
       *   .addColumn('number_of_legs', 'integer', (col) =>
       *     col.check(sql`number_of_legs < 5`)
       *   )
       *   .execute()
       * ```
       *
       * The generated SQL (MySQL):
       *
       * ```sql
       * create table `pet` (
       *   `number_of_legs` integer check (number_of_legs < 5)
       * )
       * ```
       */
      check(expression) {
        return new _ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, {
          check: CheckConstraintNode.create(expression.toOperationNode())
        }));
      }
      /**
       * Makes the column a generated column using a `generated always as` statement.
       *
       * ### Examples
       *
       * ```ts
       * import { sql } from 'kysely'
       *
       * await db.schema
       *   .createTable('person')
       *   .addColumn('full_name', 'varchar(255)',
       *     (col) => col.generatedAlwaysAs(sql`concat(first_name, ' ', last_name)`)
       *   )
       *   .execute()
       * ```
       *
       * The generated SQL (MySQL):
       *
       * ```sql
       * create table `person` (
       *   `full_name` varchar(255) generated always as (concat(first_name, ' ', last_name))
       * )
       * ```
       */
      generatedAlwaysAs(expression) {
        return new _ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, {
          generated: GeneratedNode.createWithExpression(expression.toOperationNode())
        }));
      }
      /**
       * Adds the `generated always as identity` specifier.
       *
       * This only works on some dialects like PostgreSQL.
       *
       * For MS SQL Server (MSSQL)'s identity column use {@link identity}.
       *
       * ### Examples
       *
       * ```ts
       * await db.schema
       *   .createTable('person')
       *   .addColumn('id', 'integer', col => col.generatedAlwaysAsIdentity().primaryKey())
       *   .execute()
       * ```
       *
       * The generated SQL (PostgreSQL):
       *
       * ```sql
       * create table "person" (
       *   "id" integer generated always as identity primary key
       * )
       * ```
       */
      generatedAlwaysAsIdentity() {
        return new _ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, {
          generated: GeneratedNode.create({ identity: true, always: true })
        }));
      }
      /**
       * Adds the `generated by default as identity` specifier on supported dialects.
       *
       * This only works on some dialects like PostgreSQL.
       *
       * For MS SQL Server (MSSQL)'s identity column use {@link identity}.
       *
       * ### Examples
       *
       * ```ts
       * await db.schema
       *   .createTable('person')
       *   .addColumn('id', 'integer', col => col.generatedByDefaultAsIdentity().primaryKey())
       *   .execute()
       * ```
       *
       * The generated SQL (PostgreSQL):
       *
       * ```sql
       * create table "person" (
       *   "id" integer generated by default as identity primary key
       * )
       * ```
       */
      generatedByDefaultAsIdentity() {
        return new _ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, {
          generated: GeneratedNode.create({ identity: true, byDefault: true })
        }));
      }
      /**
       * Makes a generated column stored instead of virtual. This method can only
       * be used with {@link generatedAlwaysAs}
       *
       * ### Examples
       *
       * ```ts
       * import { sql } from 'kysely'
       *
       * await db.schema
       *   .createTable('person')
       *   .addColumn('full_name', 'varchar(255)', (col) => col
       *     .generatedAlwaysAs(sql`concat(first_name, ' ', last_name)`)
       *     .stored()
       *   )
       *   .execute()
       * ```
       *
       * The generated SQL (MySQL):
       *
       * ```sql
       * create table `person` (
       *   `full_name` varchar(255) generated always as (concat(first_name, ' ', last_name)) stored
       * )
       * ```
       */
      stored() {
        if (!this.#node.generated) {
          throw new Error("stored() can only be called after generatedAlwaysAs");
        }
        return new _ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, {
          generated: GeneratedNode.cloneWith(this.#node.generated, {
            stored: true
          })
        }));
      }
      /**
       * This can be used to add any additional SQL right after the column's data type.
       *
       * ### Examples
       *
       * ```ts
       * import { sql } from 'kysely'
       *
       * await db.schema
       *   .createTable('person')
       *   .addColumn('id', 'integer', col => col.primaryKey())
       *   .addColumn(
       *     'first_name',
       *     'varchar(36)',
       *     (col) => col.modifyFront(sql`collate utf8mb4_general_ci`).notNull()
       *   )
       *   .execute()
       * ```
       *
       * The generated SQL (MySQL):
       *
       * ```sql
       * create table `person` (
       *   `id` integer primary key,
       *   `first_name` varchar(36) collate utf8mb4_general_ci not null
       * )
       * ```
       */
      modifyFront(modifier) {
        return new _ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWithFrontModifier(this.#node, modifier.toOperationNode()));
      }
      /**
       * Adds `nulls not distinct` specifier.
       * Should be used with `unique` constraint.
       *
       * This only works on some dialects like PostgreSQL.
       *
       * ### Examples
       *
       * ```ts
       * db.schema
       *   .createTable('person')
       *   .addColumn('id', 'integer', col => col.primaryKey())
       *   .addColumn('first_name', 'varchar(30)', col => col.unique().nullsNotDistinct())
       *   .execute()
       * ```
       *
       * The generated SQL (PostgreSQL):
       *
       * ```sql
       * create table "person" (
       *   "id" integer primary key,
       *   "first_name" varchar(30) unique nulls not distinct
       * )
       * ```
       */
      nullsNotDistinct() {
        return new _ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, { nullsNotDistinct: true }));
      }
      /**
       * Adds `if not exists` specifier. This only works for PostgreSQL.
       *
       * ### Examples
       *
       * ```ts
       * await db.schema
       *   .alterTable('person')
       *   .addColumn('email', 'varchar(255)', col => col.unique().ifNotExists())
       *   .execute()
       * ```
       *
       * The generated SQL (PostgreSQL):
       *
       * ```sql
       * alter table "person" add column if not exists "email" varchar(255) unique
       * ```
       */
      ifNotExists() {
        return new _ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, { ifNotExists: true }));
      }
      /**
       * This can be used to add any additional SQL to the end of the column definition.
       *
       * ### Examples
       *
       * ```ts
       * import { sql } from 'kysely'
       *
       * await db.schema
       *   .createTable('person')
       *   .addColumn('id', 'integer', col => col.primaryKey())
       *   .addColumn(
       *     'age',
       *     'integer',
       *     col => col.unsigned()
       *       .notNull()
       *       .modifyEnd(sql`comment ${sql.lit('it is not polite to ask a woman her age')}`)
       *   )
       *   .execute()
       * ```
       *
       * The generated SQL (MySQL):
       *
       * ```sql
       * create table `person` (
       *   `id` integer primary key,
       *   `age` integer unsigned not null comment 'it is not polite to ask a woman her age'
       * )
       * ```
       */
      modifyEnd(modifier) {
        return new _ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWithEndModifier(this.#node, modifier.toOperationNode()));
      }
      /**
       * Simply calls the provided function passing `this` as the only argument. `$call` returns
       * what the provided function returns.
       */
      $call(func) {
        return func(this);
      }
      toOperationNode() {
        return this.#node;
      }
    };
  }
});
var ModifyColumnNode;
var init_modify_column_node = __esm({
  "../node_modules/kysely/dist/esm/operation-node/modify-column-node.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    ModifyColumnNode = freeze({
      is(node) {
        return node.kind === "ModifyColumnNode";
      },
      create(column) {
        return freeze({
          kind: "ModifyColumnNode",
          column
        });
      }
    });
  }
});
var ForeignKeyConstraintNode;
var init_foreign_key_constraint_node = __esm({
  "../node_modules/kysely/dist/esm/operation-node/foreign-key-constraint-node.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    init_identifier_node();
    init_references_node();
    ForeignKeyConstraintNode = freeze({
      is(node) {
        return node.kind === "ForeignKeyConstraintNode";
      },
      create(sourceColumns, targetTable, targetColumns, constraintName) {
        return freeze({
          kind: "ForeignKeyConstraintNode",
          columns: sourceColumns,
          references: ReferencesNode.create(targetTable, targetColumns),
          name: constraintName ? IdentifierNode.create(constraintName) : void 0
        });
      },
      cloneWith(node, props) {
        return freeze({
          ...node,
          ...props
        });
      }
    });
  }
});
var ForeignKeyConstraintBuilder;
var init_foreign_key_constraint_builder = __esm({
  "../node_modules/kysely/dist/esm/schema/foreign-key-constraint-builder.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_foreign_key_constraint_node();
    init_on_modify_action_parser();
    ForeignKeyConstraintBuilder = class _ForeignKeyConstraintBuilder {
      static {
        __name(this, "_ForeignKeyConstraintBuilder");
      }
      static {
        __name2(this, "ForeignKeyConstraintBuilder");
      }
      #node;
      constructor(node) {
        this.#node = node;
      }
      onDelete(onDelete) {
        return new _ForeignKeyConstraintBuilder(ForeignKeyConstraintNode.cloneWith(this.#node, {
          onDelete: parseOnModifyForeignAction(onDelete)
        }));
      }
      onUpdate(onUpdate) {
        return new _ForeignKeyConstraintBuilder(ForeignKeyConstraintNode.cloneWith(this.#node, {
          onUpdate: parseOnModifyForeignAction(onUpdate)
        }));
      }
      deferrable() {
        return new _ForeignKeyConstraintBuilder(ForeignKeyConstraintNode.cloneWith(this.#node, { deferrable: true }));
      }
      notDeferrable() {
        return new _ForeignKeyConstraintBuilder(ForeignKeyConstraintNode.cloneWith(this.#node, { deferrable: false }));
      }
      initiallyDeferred() {
        return new _ForeignKeyConstraintBuilder(ForeignKeyConstraintNode.cloneWith(this.#node, {
          initiallyDeferred: true
        }));
      }
      initiallyImmediate() {
        return new _ForeignKeyConstraintBuilder(ForeignKeyConstraintNode.cloneWith(this.#node, {
          initiallyDeferred: false
        }));
      }
      /**
       * Simply calls the provided function passing `this` as the only argument. `$call` returns
       * what the provided function returns.
       */
      $call(func) {
        return func(this);
      }
      toOperationNode() {
        return this.#node;
      }
    };
  }
});
var AddConstraintNode;
var init_add_constraint_node = __esm({
  "../node_modules/kysely/dist/esm/operation-node/add-constraint-node.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    AddConstraintNode = freeze({
      is(node) {
        return node.kind === "AddConstraintNode";
      },
      create(constraint) {
        return freeze({
          kind: "AddConstraintNode",
          constraint
        });
      }
    });
  }
});
var UniqueConstraintNode;
var init_unique_constraint_node = __esm({
  "../node_modules/kysely/dist/esm/operation-node/unique-constraint-node.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    init_column_node();
    init_identifier_node();
    UniqueConstraintNode = freeze({
      is(node) {
        return node.kind === "UniqueConstraintNode";
      },
      create(columns, constraintName, nullsNotDistinct) {
        return freeze({
          kind: "UniqueConstraintNode",
          columns: freeze(columns.map(ColumnNode.create)),
          name: constraintName ? IdentifierNode.create(constraintName) : void 0,
          nullsNotDistinct
        });
      },
      cloneWith(node, props) {
        return freeze({
          ...node,
          ...props
        });
      }
    });
  }
});
var DropConstraintNode;
var init_drop_constraint_node = __esm({
  "../node_modules/kysely/dist/esm/operation-node/drop-constraint-node.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    init_identifier_node();
    DropConstraintNode = freeze({
      is(node) {
        return node.kind === "DropConstraintNode";
      },
      create(constraintName) {
        return freeze({
          kind: "DropConstraintNode",
          constraintName: IdentifierNode.create(constraintName)
        });
      },
      cloneWith(dropConstraint, props) {
        return freeze({
          ...dropConstraint,
          ...props
        });
      }
    });
  }
});
var AlterColumnNode;
var init_alter_column_node = __esm({
  "../node_modules/kysely/dist/esm/operation-node/alter-column-node.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    init_column_node();
    AlterColumnNode = freeze({
      is(node) {
        return node.kind === "AlterColumnNode";
      },
      create(column, prop, value) {
        return freeze({
          kind: "AlterColumnNode",
          column: ColumnNode.create(column),
          [prop]: value
        });
      }
    });
  }
});
var AlterColumnBuilder;
var AlteredColumnBuilder;
var init_alter_column_builder = __esm({
  "../node_modules/kysely/dist/esm/schema/alter-column-builder.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_alter_column_node();
    init_data_type_parser();
    init_default_value_parser();
    AlterColumnBuilder = class {
      static {
        __name(this, "AlterColumnBuilder");
      }
      static {
        __name2(this, "AlterColumnBuilder");
      }
      #column;
      constructor(column) {
        this.#column = column;
      }
      setDataType(dataType) {
        return new AlteredColumnBuilder(AlterColumnNode.create(this.#column, "dataType", parseDataTypeExpression(dataType)));
      }
      setDefault(value) {
        return new AlteredColumnBuilder(AlterColumnNode.create(this.#column, "setDefault", parseDefaultValueExpression(value)));
      }
      dropDefault() {
        return new AlteredColumnBuilder(AlterColumnNode.create(this.#column, "dropDefault", true));
      }
      setNotNull() {
        return new AlteredColumnBuilder(AlterColumnNode.create(this.#column, "setNotNull", true));
      }
      dropNotNull() {
        return new AlteredColumnBuilder(AlterColumnNode.create(this.#column, "dropNotNull", true));
      }
      /**
       * Simply calls the provided function passing `this` as the only argument. `$call` returns
       * what the provided function returns.
       */
      $call(func) {
        return func(this);
      }
    };
    AlteredColumnBuilder = class {
      static {
        __name(this, "AlteredColumnBuilder");
      }
      static {
        __name2(this, "AlteredColumnBuilder");
      }
      #alterColumnNode;
      constructor(alterColumnNode) {
        this.#alterColumnNode = alterColumnNode;
      }
      toOperationNode() {
        return this.#alterColumnNode;
      }
    };
  }
});
var AlterTableExecutor;
var init_alter_table_executor = __esm({
  "../node_modules/kysely/dist/esm/schema/alter-table-executor.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    AlterTableExecutor = class {
      static {
        __name(this, "AlterTableExecutor");
      }
      static {
        __name2(this, "AlterTableExecutor");
      }
      #props;
      constructor(props) {
        this.#props = freeze(props);
      }
      toOperationNode() {
        return this.#props.executor.transformQuery(this.#props.node, this.#props.queryId);
      }
      compile() {
        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);
      }
      async execute() {
        await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);
      }
    };
  }
});
var AlterTableAddForeignKeyConstraintBuilder;
var init_alter_table_add_foreign_key_constraint_builder = __esm({
  "../node_modules/kysely/dist/esm/schema/alter-table-add-foreign-key-constraint-builder.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_add_constraint_node();
    init_alter_table_node();
    init_object_utils();
    AlterTableAddForeignKeyConstraintBuilder = class _AlterTableAddForeignKeyConstraintBuilder {
      static {
        __name(this, "_AlterTableAddForeignKeyConstraintBuilder");
      }
      static {
        __name2(this, "AlterTableAddForeignKeyConstraintBuilder");
      }
      #props;
      constructor(props) {
        this.#props = freeze(props);
      }
      onDelete(onDelete) {
        return new _AlterTableAddForeignKeyConstraintBuilder({
          ...this.#props,
          constraintBuilder: this.#props.constraintBuilder.onDelete(onDelete)
        });
      }
      onUpdate(onUpdate) {
        return new _AlterTableAddForeignKeyConstraintBuilder({
          ...this.#props,
          constraintBuilder: this.#props.constraintBuilder.onUpdate(onUpdate)
        });
      }
      deferrable() {
        return new _AlterTableAddForeignKeyConstraintBuilder({
          ...this.#props,
          constraintBuilder: this.#props.constraintBuilder.deferrable()
        });
      }
      notDeferrable() {
        return new _AlterTableAddForeignKeyConstraintBuilder({
          ...this.#props,
          constraintBuilder: this.#props.constraintBuilder.notDeferrable()
        });
      }
      initiallyDeferred() {
        return new _AlterTableAddForeignKeyConstraintBuilder({
          ...this.#props,
          constraintBuilder: this.#props.constraintBuilder.initiallyDeferred()
        });
      }
      initiallyImmediate() {
        return new _AlterTableAddForeignKeyConstraintBuilder({
          ...this.#props,
          constraintBuilder: this.#props.constraintBuilder.initiallyImmediate()
        });
      }
      /**
       * Simply calls the provided function passing `this` as the only argument. `$call` returns
       * what the provided function returns.
       */
      $call(func) {
        return func(this);
      }
      toOperationNode() {
        return this.#props.executor.transformQuery(AlterTableNode.cloneWithTableProps(this.#props.node, {
          addConstraint: AddConstraintNode.create(this.#props.constraintBuilder.toOperationNode())
        }), this.#props.queryId);
      }
      compile() {
        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);
      }
      async execute() {
        await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);
      }
    };
  }
});
var AlterTableDropConstraintBuilder;
var init_alter_table_drop_constraint_builder = __esm({
  "../node_modules/kysely/dist/esm/schema/alter-table-drop-constraint-builder.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_alter_table_node();
    init_drop_constraint_node();
    init_object_utils();
    AlterTableDropConstraintBuilder = class _AlterTableDropConstraintBuilder {
      static {
        __name(this, "_AlterTableDropConstraintBuilder");
      }
      static {
        __name2(this, "AlterTableDropConstraintBuilder");
      }
      #props;
      constructor(props) {
        this.#props = freeze(props);
      }
      ifExists() {
        return new _AlterTableDropConstraintBuilder({
          ...this.#props,
          node: AlterTableNode.cloneWithTableProps(this.#props.node, {
            dropConstraint: DropConstraintNode.cloneWith(this.#props.node.dropConstraint, {
              ifExists: true
            })
          })
        });
      }
      cascade() {
        return new _AlterTableDropConstraintBuilder({
          ...this.#props,
          node: AlterTableNode.cloneWithTableProps(this.#props.node, {
            dropConstraint: DropConstraintNode.cloneWith(this.#props.node.dropConstraint, {
              modifier: "cascade"
            })
          })
        });
      }
      restrict() {
        return new _AlterTableDropConstraintBuilder({
          ...this.#props,
          node: AlterTableNode.cloneWithTableProps(this.#props.node, {
            dropConstraint: DropConstraintNode.cloneWith(this.#props.node.dropConstraint, {
              modifier: "restrict"
            })
          })
        });
      }
      /**
       * Simply calls the provided function passing `this` as the only argument. `$call` returns
       * what the provided function returns.
       */
      $call(func) {
        return func(this);
      }
      toOperationNode() {
        return this.#props.executor.transformQuery(this.#props.node, this.#props.queryId);
      }
      compile() {
        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);
      }
      async execute() {
        await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);
      }
    };
  }
});
var PrimaryKeyConstraintNode;
var init_primary_key_constraint_node = __esm({
  "../node_modules/kysely/dist/esm/operation-node/primary-key-constraint-node.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    init_column_node();
    init_identifier_node();
    PrimaryKeyConstraintNode = freeze({
      is(node) {
        return node.kind === "PrimaryKeyConstraintNode";
      },
      create(columns, constraintName) {
        return freeze({
          kind: "PrimaryKeyConstraintNode",
          columns: freeze(columns.map(ColumnNode.create)),
          name: constraintName ? IdentifierNode.create(constraintName) : void 0
        });
      },
      cloneWith(node, props) {
        return freeze({ ...node, ...props });
      }
    });
  }
});
var AddIndexNode;
var init_add_index_node = __esm({
  "../node_modules/kysely/dist/esm/operation-node/add-index-node.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    init_identifier_node();
    AddIndexNode = freeze({
      is(node) {
        return node.kind === "AddIndexNode";
      },
      create(name) {
        return freeze({
          kind: "AddIndexNode",
          name: IdentifierNode.create(name)
        });
      },
      cloneWith(node, props) {
        return freeze({
          ...node,
          ...props
        });
      },
      cloneWithColumns(node, columns) {
        return freeze({
          ...node,
          columns: [...node.columns || [], ...columns]
        });
      }
    });
  }
});
var AlterTableAddIndexBuilder;
var init_alter_table_add_index_builder = __esm({
  "../node_modules/kysely/dist/esm/schema/alter-table-add-index-builder.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_add_index_node();
    init_alter_table_node();
    init_raw_node();
    init_reference_parser();
    init_object_utils();
    AlterTableAddIndexBuilder = class _AlterTableAddIndexBuilder {
      static {
        __name(this, "_AlterTableAddIndexBuilder");
      }
      static {
        __name2(this, "AlterTableAddIndexBuilder");
      }
      #props;
      constructor(props) {
        this.#props = freeze(props);
      }
      /**
       * Makes the index unique.
       *
       * ### Examples
       *
       * ```ts
       * await db.schema
       *   .alterTable('person')
       *   .addIndex('person_first_name_index')
       *   .unique()
       *   .column('email')
       *   .execute()
       * ```
       *
       * The generated SQL (MySQL):
       *
       * ```sql
       * alter table `person` add unique index `person_first_name_index` (`email`)
       * ```
       */
      unique() {
        return new _AlterTableAddIndexBuilder({
          ...this.#props,
          node: AlterTableNode.cloneWithTableProps(this.#props.node, {
            addIndex: AddIndexNode.cloneWith(this.#props.node.addIndex, {
              unique: true
            })
          })
        });
      }
      /**
       * Adds a column to the index.
       *
       * Also see {@link columns} for adding multiple columns at once or {@link expression}
       * for specifying an arbitrary expression.
       *
       * ### Examples
       *
       * ```ts
       * await db.schema
       *   .alterTable('person')
       *   .addIndex('person_first_name_and_age_index')
       *   .column('first_name')
       *   .column('age desc')
       *   .execute()
       * ```
       *
       * The generated SQL (MySQL):
       *
       * ```sql
       * alter table `person` add index `person_first_name_and_age_index` (`first_name`, `age` desc)
       * ```
       */
      column(column) {
        return new _AlterTableAddIndexBuilder({
          ...this.#props,
          node: AlterTableNode.cloneWithTableProps(this.#props.node, {
            addIndex: AddIndexNode.cloneWithColumns(this.#props.node.addIndex, [
              parseOrderedColumnName(column)
            ])
          })
        });
      }
      /**
       * Specifies a list of columns for the index.
       *
       * Also see {@link column} for adding a single column or {@link expression} for
       * specifying an arbitrary expression.
       *
       * ### Examples
       *
       * ```ts
       * await db.schema
       *   .alterTable('person')
       *   .addIndex('person_first_name_and_age_index')
       *   .columns(['first_name', 'age desc'])
       *   .execute()
       * ```
       *
       * The generated SQL (MySQL):
       *
       * ```sql
       * alter table `person` add index `person_first_name_and_age_index` (`first_name`, `age` desc)
       * ```
       */
      columns(columns) {
        return new _AlterTableAddIndexBuilder({
          ...this.#props,
          node: AlterTableNode.cloneWithTableProps(this.#props.node, {
            addIndex: AddIndexNode.cloneWithColumns(this.#props.node.addIndex, columns.map(parseOrderedColumnName))
          })
        });
      }
      /**
       * Specifies an arbitrary expression for the index.
       *
       * ### Examples
       *
       * ```ts
       * import { sql } from 'kysely'
       *
       * await db.schema
       *   .alterTable('person')
       *   .addIndex('person_first_name_index')
       *   .expression(sql<boolean>`(first_name < 'Sami')`)
       *   .execute()
       * ```
       *
       * The generated SQL (MySQL):
       *
       * ```sql
       * alter table `person` add index `person_first_name_index` ((first_name < 'Sami'))
       * ```
       */
      expression(expression) {
        return new _AlterTableAddIndexBuilder({
          ...this.#props,
          node: AlterTableNode.cloneWithTableProps(this.#props.node, {
            addIndex: AddIndexNode.cloneWithColumns(this.#props.node.addIndex, [
              expression.toOperationNode()
            ])
          })
        });
      }
      using(indexType) {
        return new _AlterTableAddIndexBuilder({
          ...this.#props,
          node: AlterTableNode.cloneWithTableProps(this.#props.node, {
            addIndex: AddIndexNode.cloneWith(this.#props.node.addIndex, {
              using: RawNode.createWithSql(indexType)
            })
          })
        });
      }
      /**
       * Simply calls the provided function passing `this` as the only argument. `$call` returns
       * what the provided function returns.
       */
      $call(func) {
        return func(this);
      }
      toOperationNode() {
        return this.#props.executor.transformQuery(this.#props.node, this.#props.queryId);
      }
      compile() {
        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);
      }
      async execute() {
        await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);
      }
    };
  }
});
var UniqueConstraintNodeBuilder;
var init_unique_constraint_builder = __esm({
  "../node_modules/kysely/dist/esm/schema/unique-constraint-builder.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_unique_constraint_node();
    UniqueConstraintNodeBuilder = class _UniqueConstraintNodeBuilder {
      static {
        __name(this, "_UniqueConstraintNodeBuilder");
      }
      static {
        __name2(this, "UniqueConstraintNodeBuilder");
      }
      #node;
      constructor(node) {
        this.#node = node;
      }
      /**
       * Adds `nulls not distinct` to the unique constraint definition
       *
       * Supported by PostgreSQL dialect only
       */
      nullsNotDistinct() {
        return new _UniqueConstraintNodeBuilder(UniqueConstraintNode.cloneWith(this.#node, { nullsNotDistinct: true }));
      }
      deferrable() {
        return new _UniqueConstraintNodeBuilder(UniqueConstraintNode.cloneWith(this.#node, { deferrable: true }));
      }
      notDeferrable() {
        return new _UniqueConstraintNodeBuilder(UniqueConstraintNode.cloneWith(this.#node, { deferrable: false }));
      }
      initiallyDeferred() {
        return new _UniqueConstraintNodeBuilder(UniqueConstraintNode.cloneWith(this.#node, {
          initiallyDeferred: true
        }));
      }
      initiallyImmediate() {
        return new _UniqueConstraintNodeBuilder(UniqueConstraintNode.cloneWith(this.#node, {
          initiallyDeferred: false
        }));
      }
      /**
       * Simply calls the provided function passing `this` as the only argument. `$call` returns
       * what the provided function returns.
       */
      $call(func) {
        return func(this);
      }
      toOperationNode() {
        return this.#node;
      }
    };
  }
});
var PrimaryKeyConstraintBuilder;
var init_primary_key_constraint_builder = __esm({
  "../node_modules/kysely/dist/esm/schema/primary-key-constraint-builder.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_primary_key_constraint_node();
    PrimaryKeyConstraintBuilder = class _PrimaryKeyConstraintBuilder {
      static {
        __name(this, "_PrimaryKeyConstraintBuilder");
      }
      static {
        __name2(this, "PrimaryKeyConstraintBuilder");
      }
      #node;
      constructor(node) {
        this.#node = node;
      }
      deferrable() {
        return new _PrimaryKeyConstraintBuilder(PrimaryKeyConstraintNode.cloneWith(this.#node, { deferrable: true }));
      }
      notDeferrable() {
        return new _PrimaryKeyConstraintBuilder(PrimaryKeyConstraintNode.cloneWith(this.#node, { deferrable: false }));
      }
      initiallyDeferred() {
        return new _PrimaryKeyConstraintBuilder(PrimaryKeyConstraintNode.cloneWith(this.#node, {
          initiallyDeferred: true
        }));
      }
      initiallyImmediate() {
        return new _PrimaryKeyConstraintBuilder(PrimaryKeyConstraintNode.cloneWith(this.#node, {
          initiallyDeferred: false
        }));
      }
      /**
       * Simply calls the provided function passing `this` as the only argument. `$call` returns
       * what the provided function returns.
       */
      $call(func) {
        return func(this);
      }
      toOperationNode() {
        return this.#node;
      }
    };
  }
});
var CheckConstraintBuilder;
var init_check_constraint_builder = __esm({
  "../node_modules/kysely/dist/esm/schema/check-constraint-builder.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    CheckConstraintBuilder = class {
      static {
        __name(this, "CheckConstraintBuilder");
      }
      static {
        __name2(this, "CheckConstraintBuilder");
      }
      #node;
      constructor(node) {
        this.#node = node;
      }
      /**
       * Simply calls the provided function passing `this` as the only argument. `$call` returns
       * what the provided function returns.
       */
      $call(func) {
        return func(this);
      }
      toOperationNode() {
        return this.#node;
      }
    };
  }
});
var RenameConstraintNode;
var init_rename_constraint_node = __esm({
  "../node_modules/kysely/dist/esm/operation-node/rename-constraint-node.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    init_identifier_node();
    RenameConstraintNode = freeze({
      is(node) {
        return node.kind === "RenameConstraintNode";
      },
      create(oldName, newName) {
        return freeze({
          kind: "RenameConstraintNode",
          oldName: IdentifierNode.create(oldName),
          newName: IdentifierNode.create(newName)
        });
      }
    });
  }
});
var AlterTableBuilder;
var AlterTableColumnAlteringBuilder;
var init_alter_table_builder = __esm({
  "../node_modules/kysely/dist/esm/schema/alter-table-builder.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_add_column_node();
    init_alter_table_node();
    init_column_definition_node();
    init_drop_column_node();
    init_identifier_node();
    init_rename_column_node();
    init_object_utils();
    init_column_definition_builder();
    init_modify_column_node();
    init_data_type_parser();
    init_foreign_key_constraint_builder();
    init_add_constraint_node();
    init_unique_constraint_node();
    init_check_constraint_node();
    init_foreign_key_constraint_node();
    init_column_node();
    init_table_parser();
    init_drop_constraint_node();
    init_alter_column_builder();
    init_alter_table_executor();
    init_alter_table_add_foreign_key_constraint_builder();
    init_alter_table_drop_constraint_builder();
    init_primary_key_constraint_node();
    init_drop_index_node();
    init_add_index_node();
    init_alter_table_add_index_builder();
    init_unique_constraint_builder();
    init_primary_key_constraint_builder();
    init_check_constraint_builder();
    init_rename_constraint_node();
    AlterTableBuilder = class {
      static {
        __name(this, "AlterTableBuilder");
      }
      static {
        __name2(this, "AlterTableBuilder");
      }
      #props;
      constructor(props) {
        this.#props = freeze(props);
      }
      renameTo(newTableName) {
        return new AlterTableExecutor({
          ...this.#props,
          node: AlterTableNode.cloneWithTableProps(this.#props.node, {
            renameTo: parseTable(newTableName)
          })
        });
      }
      setSchema(newSchema) {
        return new AlterTableExecutor({
          ...this.#props,
          node: AlterTableNode.cloneWithTableProps(this.#props.node, {
            setSchema: IdentifierNode.create(newSchema)
          })
        });
      }
      alterColumn(column, alteration) {
        const builder = alteration(new AlterColumnBuilder(column));
        return new AlterTableColumnAlteringBuilder({
          ...this.#props,
          node: AlterTableNode.cloneWithColumnAlteration(this.#props.node, builder.toOperationNode())
        });
      }
      dropColumn(column) {
        return new AlterTableColumnAlteringBuilder({
          ...this.#props,
          node: AlterTableNode.cloneWithColumnAlteration(this.#props.node, DropColumnNode.create(column))
        });
      }
      renameColumn(column, newColumn) {
        return new AlterTableColumnAlteringBuilder({
          ...this.#props,
          node: AlterTableNode.cloneWithColumnAlteration(this.#props.node, RenameColumnNode.create(column, newColumn))
        });
      }
      addColumn(columnName, dataType, build = noop) {
        const builder = build(new ColumnDefinitionBuilder(ColumnDefinitionNode.create(columnName, parseDataTypeExpression(dataType))));
        return new AlterTableColumnAlteringBuilder({
          ...this.#props,
          node: AlterTableNode.cloneWithColumnAlteration(this.#props.node, AddColumnNode.create(builder.toOperationNode()))
        });
      }
      modifyColumn(columnName, dataType, build = noop) {
        const builder = build(new ColumnDefinitionBuilder(ColumnDefinitionNode.create(columnName, parseDataTypeExpression(dataType))));
        return new AlterTableColumnAlteringBuilder({
          ...this.#props,
          node: AlterTableNode.cloneWithColumnAlteration(this.#props.node, ModifyColumnNode.create(builder.toOperationNode()))
        });
      }
      /**
       * See {@link CreateTableBuilder.addUniqueConstraint}
       */
      addUniqueConstraint(constraintName, columns, build = noop) {
        const uniqueConstraintBuilder = build(new UniqueConstraintNodeBuilder(UniqueConstraintNode.create(columns, constraintName)));
        return new AlterTableExecutor({
          ...this.#props,
          node: AlterTableNode.cloneWithTableProps(this.#props.node, {
            addConstraint: AddConstraintNode.create(uniqueConstraintBuilder.toOperationNode())
          })
        });
      }
      /**
       * See {@link CreateTableBuilder.addCheckConstraint}
       */
      addCheckConstraint(constraintName, checkExpression, build = noop) {
        const constraintBuilder = build(new CheckConstraintBuilder(CheckConstraintNode.create(checkExpression.toOperationNode(), constraintName)));
        return new AlterTableExecutor({
          ...this.#props,
          node: AlterTableNode.cloneWithTableProps(this.#props.node, {
            addConstraint: AddConstraintNode.create(constraintBuilder.toOperationNode())
          })
        });
      }
      /**
       * See {@link CreateTableBuilder.addForeignKeyConstraint}
       *
       * Unlike {@link CreateTableBuilder.addForeignKeyConstraint} this method returns
       * the constraint builder and doesn't take a callback as the last argument. This
       * is because you can only add one column per `ALTER TABLE` query.
       */
      addForeignKeyConstraint(constraintName, columns, targetTable, targetColumns, build = noop) {
        const constraintBuilder = build(new ForeignKeyConstraintBuilder(ForeignKeyConstraintNode.create(columns.map(ColumnNode.create), parseTable(targetTable), targetColumns.map(ColumnNode.create), constraintName)));
        return new AlterTableAddForeignKeyConstraintBuilder({
          ...this.#props,
          constraintBuilder
        });
      }
      /**
       * See {@link CreateTableBuilder.addPrimaryKeyConstraint}
       */
      addPrimaryKeyConstraint(constraintName, columns, build = noop) {
        const constraintBuilder = build(new PrimaryKeyConstraintBuilder(PrimaryKeyConstraintNode.create(columns, constraintName)));
        return new AlterTableExecutor({
          ...this.#props,
          node: AlterTableNode.cloneWithTableProps(this.#props.node, {
            addConstraint: AddConstraintNode.create(constraintBuilder.toOperationNode())
          })
        });
      }
      dropConstraint(constraintName) {
        return new AlterTableDropConstraintBuilder({
          ...this.#props,
          node: AlterTableNode.cloneWithTableProps(this.#props.node, {
            dropConstraint: DropConstraintNode.create(constraintName)
          })
        });
      }
      renameConstraint(oldName, newName) {
        return new AlterTableDropConstraintBuilder({
          ...this.#props,
          node: AlterTableNode.cloneWithTableProps(this.#props.node, {
            renameConstraint: RenameConstraintNode.create(oldName, newName)
          })
        });
      }
      /**
       * This can be used to add index to table.
       *
       *  ### Examples
       *
       * ```ts
       * db.schema.alterTable('person')
       *   .addIndex('person_email_index')
       *   .column('email')
       *   .unique()
       *   .execute()
       * ```
       *
       * The generated SQL (MySQL):
       *
       * ```sql
       * alter table `person` add unique index `person_email_index` (`email`)
       * ```
       */
      addIndex(indexName) {
        return new AlterTableAddIndexBuilder({
          ...this.#props,
          node: AlterTableNode.cloneWithTableProps(this.#props.node, {
            addIndex: AddIndexNode.create(indexName)
          })
        });
      }
      /**
       * This can be used to drop index from table.
       *
       * ### Examples
       *
       * ```ts
       * db.schema.alterTable('person')
       *   .dropIndex('person_email_index')
       *   .execute()
       * ```
       *
       * The generated SQL (MySQL):
       *
       * ```sql
       * alter table `person` drop index `test_first_name_index`
       * ```
       */
      dropIndex(indexName) {
        return new AlterTableExecutor({
          ...this.#props,
          node: AlterTableNode.cloneWithTableProps(this.#props.node, {
            dropIndex: DropIndexNode.create(indexName)
          })
        });
      }
      /**
       * Calls the given function passing `this` as the only argument.
       *
       * See {@link CreateTableBuilder.$call}
       */
      $call(func) {
        return func(this);
      }
    };
    AlterTableColumnAlteringBuilder = class _AlterTableColumnAlteringBuilder {
      static {
        __name(this, "_AlterTableColumnAlteringBuilder");
      }
      static {
        __name2(this, "AlterTableColumnAlteringBuilder");
      }
      #props;
      constructor(props) {
        this.#props = freeze(props);
      }
      alterColumn(column, alteration) {
        const builder = alteration(new AlterColumnBuilder(column));
        return new _AlterTableColumnAlteringBuilder({
          ...this.#props,
          node: AlterTableNode.cloneWithColumnAlteration(this.#props.node, builder.toOperationNode())
        });
      }
      dropColumn(column) {
        return new _AlterTableColumnAlteringBuilder({
          ...this.#props,
          node: AlterTableNode.cloneWithColumnAlteration(this.#props.node, DropColumnNode.create(column))
        });
      }
      renameColumn(column, newColumn) {
        return new _AlterTableColumnAlteringBuilder({
          ...this.#props,
          node: AlterTableNode.cloneWithColumnAlteration(this.#props.node, RenameColumnNode.create(column, newColumn))
        });
      }
      addColumn(columnName, dataType, build = noop) {
        const builder = build(new ColumnDefinitionBuilder(ColumnDefinitionNode.create(columnName, parseDataTypeExpression(dataType))));
        return new _AlterTableColumnAlteringBuilder({
          ...this.#props,
          node: AlterTableNode.cloneWithColumnAlteration(this.#props.node, AddColumnNode.create(builder.toOperationNode()))
        });
      }
      modifyColumn(columnName, dataType, build = noop) {
        const builder = build(new ColumnDefinitionBuilder(ColumnDefinitionNode.create(columnName, parseDataTypeExpression(dataType))));
        return new _AlterTableColumnAlteringBuilder({
          ...this.#props,
          node: AlterTableNode.cloneWithColumnAlteration(this.#props.node, ModifyColumnNode.create(builder.toOperationNode()))
        });
      }
      toOperationNode() {
        return this.#props.executor.transformQuery(this.#props.node, this.#props.queryId);
      }
      compile() {
        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);
      }
      async execute() {
        await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);
      }
    };
  }
});
var ImmediateValueTransformer;
var init_immediate_value_transformer = __esm({
  "../node_modules/kysely/dist/esm/plugin/immediate-value/immediate-value-transformer.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_operation_node_transformer();
    init_value_list_node();
    init_value_node();
    ImmediateValueTransformer = class extends OperationNodeTransformer {
      static {
        __name(this, "ImmediateValueTransformer");
      }
      static {
        __name2(this, "ImmediateValueTransformer");
      }
      transformPrimitiveValueList(node) {
        return ValueListNode.create(node.values.map(ValueNode.createImmediate));
      }
      transformValue(node) {
        return ValueNode.createImmediate(node.value);
      }
    };
  }
});
var CreateIndexBuilder;
var init_create_index_builder = __esm({
  "../node_modules/kysely/dist/esm/schema/create-index-builder.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_create_index_node();
    init_raw_node();
    init_reference_parser();
    init_table_parser();
    init_object_utils();
    init_binary_operation_parser();
    init_query_node();
    init_immediate_value_transformer();
    CreateIndexBuilder = class _CreateIndexBuilder {
      static {
        __name(this, "_CreateIndexBuilder");
      }
      static {
        __name2(this, "CreateIndexBuilder");
      }
      #props;
      constructor(props) {
        this.#props = freeze(props);
      }
      /**
       * Adds the "if not exists" modifier.
       *
       * If the index already exists, no error is thrown if this method has been called.
       */
      ifNotExists() {
        return new _CreateIndexBuilder({
          ...this.#props,
          node: CreateIndexNode.cloneWith(this.#props.node, {
            ifNotExists: true
          })
        });
      }
      /**
       * Makes the index unique.
       */
      unique() {
        return new _CreateIndexBuilder({
          ...this.#props,
          node: CreateIndexNode.cloneWith(this.#props.node, {
            unique: true
          })
        });
      }
      /**
       * Adds `nulls not distinct` specifier to index.
       * This only works on some dialects like PostgreSQL.
       *
       * ### Examples
       *
       * ```ts
       * db.schema.createIndex('person_first_name_index')
       *  .on('person')
       *  .column('first_name')
       *  .nullsNotDistinct()
       *  .execute()
       * ```
       *
       * The generated SQL (PostgreSQL):
       *
       * ```sql
       * create index "person_first_name_index"
       * on "test" ("first_name")
       * nulls not distinct;
       * ```
       */
      nullsNotDistinct() {
        return new _CreateIndexBuilder({
          ...this.#props,
          node: CreateIndexNode.cloneWith(this.#props.node, {
            nullsNotDistinct: true
          })
        });
      }
      /**
       * Specifies the table for the index.
       */
      on(table) {
        return new _CreateIndexBuilder({
          ...this.#props,
          node: CreateIndexNode.cloneWith(this.#props.node, {
            table: parseTable(table)
          })
        });
      }
      /**
       * Adds a column to the index.
       *
       * Also see {@link columns} for adding multiple columns at once or {@link expression}
       * for specifying an arbitrary expression.
       *
       * ### Examples
       *
       * ```ts
       * await db.schema
       *         .createIndex('person_first_name_and_age_index')
       *         .on('person')
       *         .column('first_name')
       *         .column('age desc')
       *         .execute()
       * ```
       *
       * The generated SQL (PostgreSQL):
       *
       * ```sql
       * create index "person_first_name_and_age_index" on "person" ("first_name", "age" desc)
       * ```
       */
      column(column) {
        return new _CreateIndexBuilder({
          ...this.#props,
          node: CreateIndexNode.cloneWithColumns(this.#props.node, [
            parseOrderedColumnName(column)
          ])
        });
      }
      /**
       * Specifies a list of columns for the index.
       *
       * Also see {@link column} for adding a single column or {@link expression} for
       * specifying an arbitrary expression.
       *
       * ### Examples
       *
       * ```ts
       * await db.schema
       *         .createIndex('person_first_name_and_age_index')
       *         .on('person')
       *         .columns(['first_name', 'age desc'])
       *         .execute()
       * ```
       *
       * The generated SQL (PostgreSQL):
       *
       * ```sql
       * create index "person_first_name_and_age_index" on "person" ("first_name", "age" desc)
       * ```
       */
      columns(columns) {
        return new _CreateIndexBuilder({
          ...this.#props,
          node: CreateIndexNode.cloneWithColumns(this.#props.node, columns.map(parseOrderedColumnName))
        });
      }
      /**
       * Specifies an arbitrary expression for the index.
       *
       * ### Examples
       *
       * ```ts
       * import { sql } from 'kysely'
       *
       * await db.schema
       *   .createIndex('person_first_name_index')
       *   .on('person')
       *   .expression(sql`first_name COLLATE "fi_FI"`)
       *   .execute()
       * ```
       *
       * The generated SQL (PostgreSQL):
       *
       * ```sql
       * create index "person_first_name_index" on "person" (first_name COLLATE "fi_FI")
       * ```
       */
      expression(expression) {
        return new _CreateIndexBuilder({
          ...this.#props,
          node: CreateIndexNode.cloneWithColumns(this.#props.node, [
            expression.toOperationNode()
          ])
        });
      }
      using(indexType) {
        return new _CreateIndexBuilder({
          ...this.#props,
          node: CreateIndexNode.cloneWith(this.#props.node, {
            using: RawNode.createWithSql(indexType)
          })
        });
      }
      where(...args) {
        const transformer = new ImmediateValueTransformer();
        return new _CreateIndexBuilder({
          ...this.#props,
          node: QueryNode.cloneWithWhere(this.#props.node, transformer.transformNode(parseValueBinaryOperationOrExpression(args), this.#props.queryId))
        });
      }
      /**
       * Simply calls the provided function passing `this` as the only argument. `$call` returns
       * what the provided function returns.
       */
      $call(func) {
        return func(this);
      }
      toOperationNode() {
        return this.#props.executor.transformQuery(this.#props.node, this.#props.queryId);
      }
      compile() {
        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);
      }
      async execute() {
        await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);
      }
    };
  }
});
var CreateSchemaBuilder;
var init_create_schema_builder = __esm({
  "../node_modules/kysely/dist/esm/schema/create-schema-builder.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_create_schema_node();
    init_object_utils();
    CreateSchemaBuilder = class _CreateSchemaBuilder {
      static {
        __name(this, "_CreateSchemaBuilder");
      }
      static {
        __name2(this, "CreateSchemaBuilder");
      }
      #props;
      constructor(props) {
        this.#props = freeze(props);
      }
      ifNotExists() {
        return new _CreateSchemaBuilder({
          ...this.#props,
          node: CreateSchemaNode.cloneWith(this.#props.node, { ifNotExists: true })
        });
      }
      /**
       * Simply calls the provided function passing `this` as the only argument. `$call` returns
       * what the provided function returns.
       */
      $call(func) {
        return func(this);
      }
      toOperationNode() {
        return this.#props.executor.transformQuery(this.#props.node, this.#props.queryId);
      }
      compile() {
        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);
      }
      async execute() {
        await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);
      }
    };
  }
});
function parseOnCommitAction(action) {
  if (ON_COMMIT_ACTIONS.includes(action)) {
    return action;
  }
  throw new Error(`invalid OnCommitAction ${action}`);
}
__name(parseOnCommitAction, "parseOnCommitAction");
var init_on_commit_action_parse = __esm({
  "../node_modules/kysely/dist/esm/parser/on-commit-action-parse.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_create_table_node();
    __name2(parseOnCommitAction, "parseOnCommitAction");
  }
});
var CreateTableBuilder;
var init_create_table_builder = __esm({
  "../node_modules/kysely/dist/esm/schema/create-table-builder.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_column_definition_node();
    init_create_table_node();
    init_column_definition_builder();
    init_object_utils();
    init_foreign_key_constraint_node();
    init_column_node();
    init_foreign_key_constraint_builder();
    init_data_type_parser();
    init_primary_key_constraint_node();
    init_unique_constraint_node();
    init_check_constraint_node();
    init_table_parser();
    init_on_commit_action_parse();
    init_unique_constraint_builder();
    init_expression_parser();
    init_primary_key_constraint_builder();
    init_check_constraint_builder();
    CreateTableBuilder = class _CreateTableBuilder {
      static {
        __name(this, "_CreateTableBuilder");
      }
      static {
        __name2(this, "CreateTableBuilder");
      }
      #props;
      constructor(props) {
        this.#props = freeze(props);
      }
      /**
       * Adds the "temporary" modifier.
       *
       * Use this to create a temporary table.
       */
      temporary() {
        return new _CreateTableBuilder({
          ...this.#props,
          node: CreateTableNode.cloneWith(this.#props.node, {
            temporary: true
          })
        });
      }
      /**
       * Adds an "on commit" statement.
       *
       * This can be used in conjunction with temporary tables on supported databases
       * like PostgreSQL.
       */
      onCommit(onCommit) {
        return new _CreateTableBuilder({
          ...this.#props,
          node: CreateTableNode.cloneWith(this.#props.node, {
            onCommit: parseOnCommitAction(onCommit)
          })
        });
      }
      /**
       * Adds the "if not exists" modifier.
       *
       * If the table already exists, no error is thrown if this method has been called.
       */
      ifNotExists() {
        return new _CreateTableBuilder({
          ...this.#props,
          node: CreateTableNode.cloneWith(this.#props.node, {
            ifNotExists: true
          })
        });
      }
      /**
       * Adds a column to the table.
       *
       * ### Examples
       *
       * ```ts
       * import { sql } from 'kysely'
       *
       * await db.schema
       *   .createTable('person')
       *   .addColumn('id', 'integer', (col) => col.autoIncrement().primaryKey())
       *   .addColumn('first_name', 'varchar(50)', (col) => col.notNull())
       *   .addColumn('last_name', 'varchar(255)')
       *   .addColumn('bank_balance', 'numeric(8, 2)')
       *   // You can specify any data type using the `sql` tag if the types
       *   // don't include it.
       *   .addColumn('data', sql`any_type_here`)
       *   .addColumn('parent_id', 'integer', (col) =>
       *     col.references('person.id').onDelete('cascade')
       *   )
       * ```
       *
       * With this method, it's once again good to remember that Kysely just builds the
       * query and doesn't provide the same API for all databases. For example, some
       * databases like older MySQL don't support the `references` statement in the
       * column definition. Instead foreign key constraints need to be defined in the
       * `create table` query. See the next example:
       *
       * ```ts
       * await db.schema
       *   .createTable('person')
       *   .addColumn('id', 'integer', (col) => col.primaryKey())
       *   .addColumn('parent_id', 'integer')
       *   .addForeignKeyConstraint(
       *     'person_parent_id_fk',
       *     ['parent_id'],
       *     'person',
       *     ['id'],
       *     (cb) => cb.onDelete('cascade')
       *   )
       *   .execute()
       * ```
       *
       * Another good example is that PostgreSQL doesn't support the `auto_increment`
       * keyword and you need to define an autoincrementing column for example using
       * `serial`:
       *
       * ```ts
       * await db.schema
       *   .createTable('person')
       *   .addColumn('id', 'serial', (col) => col.primaryKey())
       *   .execute()
       * ```
       */
      addColumn(columnName, dataType, build = noop) {
        const columnBuilder = build(new ColumnDefinitionBuilder(ColumnDefinitionNode.create(columnName, parseDataTypeExpression(dataType))));
        return new _CreateTableBuilder({
          ...this.#props,
          node: CreateTableNode.cloneWithColumn(this.#props.node, columnBuilder.toOperationNode())
        });
      }
      /**
       * Adds a primary key constraint for one or more columns.
       *
       * The constraint name can be anything you want, but it must be unique
       * across the whole database.
       *
       * ### Examples
       *
       * ```ts
       * await db.schema
       *   .createTable('person')
       *   .addColumn('first_name', 'varchar(64)')
       *   .addColumn('last_name', 'varchar(64)')
       *   .addPrimaryKeyConstraint('primary_key', ['first_name', 'last_name'])
       *   .execute()
       * ```
       */
      addPrimaryKeyConstraint(constraintName, columns, build = noop) {
        const constraintBuilder = build(new PrimaryKeyConstraintBuilder(PrimaryKeyConstraintNode.create(columns, constraintName)));
        return new _CreateTableBuilder({
          ...this.#props,
          node: CreateTableNode.cloneWithConstraint(this.#props.node, constraintBuilder.toOperationNode())
        });
      }
      /**
       * Adds a unique constraint for one or more columns.
       *
       * The constraint name can be anything you want, but it must be unique
       * across the whole database.
       *
       * ### Examples
       *
       * ```ts
       * await db.schema
       *   .createTable('person')
       *   .addColumn('first_name', 'varchar(64)')
       *   .addColumn('last_name', 'varchar(64)')
       *   .addUniqueConstraint(
       *     'first_name_last_name_unique',
       *     ['first_name', 'last_name']
       *   )
       *   .execute()
       * ```
       *
       * In dialects such as PostgreSQL you can specify `nulls not distinct` as follows:
       *
       * ```ts
       * await db.schema
       *   .createTable('person')
       *   .addColumn('first_name', 'varchar(64)')
       *   .addColumn('last_name', 'varchar(64)')
       *   .addUniqueConstraint(
       *     'first_name_last_name_unique',
       *     ['first_name', 'last_name'],
       *     (cb) => cb.nullsNotDistinct()
       *   )
       *   .execute()
       * ```
       */
      addUniqueConstraint(constraintName, columns, build = noop) {
        const uniqueConstraintBuilder = build(new UniqueConstraintNodeBuilder(UniqueConstraintNode.create(columns, constraintName)));
        return new _CreateTableBuilder({
          ...this.#props,
          node: CreateTableNode.cloneWithConstraint(this.#props.node, uniqueConstraintBuilder.toOperationNode())
        });
      }
      /**
       * Adds a check constraint.
       *
       * The constraint name can be anything you want, but it must be unique
       * across the whole database.
       *
       * ### Examples
       *
       * ```ts
       * import { sql } from 'kysely'
       *
       * await db.schema
       *   .createTable('animal')
       *   .addColumn('number_of_legs', 'integer')
       *   .addCheckConstraint('check_legs', sql`number_of_legs < 5`)
       *   .execute()
       * ```
       */
      addCheckConstraint(constraintName, checkExpression, build = noop) {
        const constraintBuilder = build(new CheckConstraintBuilder(CheckConstraintNode.create(checkExpression.toOperationNode(), constraintName)));
        return new _CreateTableBuilder({
          ...this.#props,
          node: CreateTableNode.cloneWithConstraint(this.#props.node, constraintBuilder.toOperationNode())
        });
      }
      /**
       * Adds a foreign key constraint.
       *
       * The constraint name can be anything you want, but it must be unique
       * across the whole database.
       *
       * ### Examples
       *
       * ```ts
       * await db.schema
       *   .createTable('pet')
       *   .addColumn('owner_id', 'integer')
       *   .addForeignKeyConstraint(
       *     'owner_id_foreign',
       *     ['owner_id'],
       *     'person',
       *     ['id'],
       *   )
       *   .execute()
       * ```
       *
       * Add constraint for multiple columns:
       *
       * ```ts
       * await db.schema
       *   .createTable('pet')
       *   .addColumn('owner_id1', 'integer')
       *   .addColumn('owner_id2', 'integer')
       *   .addForeignKeyConstraint(
       *     'owner_id_foreign',
       *     ['owner_id1', 'owner_id2'],
       *     'person',
       *     ['id1', 'id2'],
       *     (cb) => cb.onDelete('cascade')
       *   )
       *   .execute()
       * ```
       */
      addForeignKeyConstraint(constraintName, columns, targetTable, targetColumns, build = noop) {
        const builder = build(new ForeignKeyConstraintBuilder(ForeignKeyConstraintNode.create(columns.map(ColumnNode.create), parseTable(targetTable), targetColumns.map(ColumnNode.create), constraintName)));
        return new _CreateTableBuilder({
          ...this.#props,
          node: CreateTableNode.cloneWithConstraint(this.#props.node, builder.toOperationNode())
        });
      }
      /**
       * This can be used to add any additional SQL to the front of the query __after__ the `create` keyword.
       *
       * Also see {@link temporary}.
       *
       * ### Examples
       *
       * ```ts
       * import { sql } from 'kysely'
       *
       * await db.schema
       *   .createTable('person')
       *   .modifyFront(sql`global temporary`)
       *   .addColumn('id', 'integer', col => col.primaryKey())
       *   .addColumn('first_name', 'varchar(64)', col => col.notNull())
       *   .addColumn('last_name', 'varchar(64)', col => col.notNull())
       *   .execute()
       * ```
       *
       * The generated SQL (Postgres):
       *
       * ```sql
       * create global temporary table "person" (
       *   "id" integer primary key,
       *   "first_name" varchar(64) not null,
       *   "last_name" varchar(64) not null
       * )
       * ```
       */
      modifyFront(modifier) {
        return new _CreateTableBuilder({
          ...this.#props,
          node: CreateTableNode.cloneWithFrontModifier(this.#props.node, modifier.toOperationNode())
        });
      }
      /**
       * This can be used to add any additional SQL to the end of the query.
       *
       * Also see {@link onCommit}.
       *
       * ### Examples
       *
       * ```ts
       * import { sql } from 'kysely'
       *
       * await db.schema
       *   .createTable('person')
       *   .addColumn('id', 'integer', col => col.primaryKey())
       *   .addColumn('first_name', 'varchar(64)', col => col.notNull())
       *   .addColumn('last_name', 'varchar(64)', col => col.notNull())
       *   .modifyEnd(sql`collate utf8_unicode_ci`)
       *   .execute()
       * ```
       *
       * The generated SQL (MySQL):
       *
       * ```sql
       * create table `person` (
       *   `id` integer primary key,
       *   `first_name` varchar(64) not null,
       *   `last_name` varchar(64) not null
       * ) collate utf8_unicode_ci
       * ```
       */
      modifyEnd(modifier) {
        return new _CreateTableBuilder({
          ...this.#props,
          node: CreateTableNode.cloneWithEndModifier(this.#props.node, modifier.toOperationNode())
        });
      }
      /**
       * Allows to create table from `select` query.
       *
       * ### Examples
       *
       * ```ts
       * await db.schema
       *   .createTable('copy')
       *   .temporary()
       *   .as(db.selectFrom('person').select(['first_name', 'last_name']))
       *   .execute()
       * ```
       *
       * The generated SQL (PostgreSQL):
       *
       * ```sql
       * create temporary table "copy" as
       * select "first_name", "last_name" from "person"
       * ```
       */
      as(expression) {
        return new _CreateTableBuilder({
          ...this.#props,
          node: CreateTableNode.cloneWith(this.#props.node, {
            selectQuery: parseExpression(expression)
          })
        });
      }
      /**
       * Calls the given function passing `this` as the only argument.
       *
       * ### Examples
       *
       * ```ts
       * await db.schema
       *   .createTable('test')
       *   .$call((builder) => builder.addColumn('id', 'integer'))
       *   .execute()
       * ```
       *
       * This is useful for creating reusable functions that can be called with a builder.
       *
       * ```ts
       * import { type CreateTableBuilder, sql } from 'kysely'
       *
       * const addDefaultColumns = (ctb: CreateTableBuilder<any, any>) => {
       *   return ctb
       *     .addColumn('id', 'integer', (col) => col.notNull())
       *     .addColumn('created_at', 'date', (col) =>
       *       col.notNull().defaultTo(sql`now()`)
       *     )
       *     .addColumn('updated_at', 'date', (col) =>
       *       col.notNull().defaultTo(sql`now()`)
       *     )
       * }
       *
       * await db.schema
       *   .createTable('test')
       *   .$call(addDefaultColumns)
       *   .execute()
       * ```
       */
      $call(func) {
        return func(this);
      }
      toOperationNode() {
        return this.#props.executor.transformQuery(this.#props.node, this.#props.queryId);
      }
      compile() {
        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);
      }
      async execute() {
        await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);
      }
    };
  }
});
var DropIndexBuilder;
var init_drop_index_builder = __esm({
  "../node_modules/kysely/dist/esm/schema/drop-index-builder.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_drop_index_node();
    init_table_parser();
    init_object_utils();
    DropIndexBuilder = class _DropIndexBuilder {
      static {
        __name(this, "_DropIndexBuilder");
      }
      static {
        __name2(this, "DropIndexBuilder");
      }
      #props;
      constructor(props) {
        this.#props = freeze(props);
      }
      /**
       * Specifies the table the index was created for. This is not needed
       * in all dialects.
       */
      on(table) {
        return new _DropIndexBuilder({
          ...this.#props,
          node: DropIndexNode.cloneWith(this.#props.node, {
            table: parseTable(table)
          })
        });
      }
      ifExists() {
        return new _DropIndexBuilder({
          ...this.#props,
          node: DropIndexNode.cloneWith(this.#props.node, {
            ifExists: true
          })
        });
      }
      cascade() {
        return new _DropIndexBuilder({
          ...this.#props,
          node: DropIndexNode.cloneWith(this.#props.node, {
            cascade: true
          })
        });
      }
      /**
       * Simply calls the provided function passing `this` as the only argument. `$call` returns
       * what the provided function returns.
       */
      $call(func) {
        return func(this);
      }
      toOperationNode() {
        return this.#props.executor.transformQuery(this.#props.node, this.#props.queryId);
      }
      compile() {
        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);
      }
      async execute() {
        await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);
      }
    };
  }
});
var DropSchemaBuilder;
var init_drop_schema_builder = __esm({
  "../node_modules/kysely/dist/esm/schema/drop-schema-builder.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_drop_schema_node();
    init_object_utils();
    DropSchemaBuilder = class _DropSchemaBuilder {
      static {
        __name(this, "_DropSchemaBuilder");
      }
      static {
        __name2(this, "DropSchemaBuilder");
      }
      #props;
      constructor(props) {
        this.#props = freeze(props);
      }
      ifExists() {
        return new _DropSchemaBuilder({
          ...this.#props,
          node: DropSchemaNode.cloneWith(this.#props.node, {
            ifExists: true
          })
        });
      }
      cascade() {
        return new _DropSchemaBuilder({
          ...this.#props,
          node: DropSchemaNode.cloneWith(this.#props.node, {
            cascade: true
          })
        });
      }
      /**
       * Simply calls the provided function passing `this` as the only argument. `$call` returns
       * what the provided function returns.
       */
      $call(func) {
        return func(this);
      }
      toOperationNode() {
        return this.#props.executor.transformQuery(this.#props.node, this.#props.queryId);
      }
      compile() {
        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);
      }
      async execute() {
        await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);
      }
    };
  }
});
var DropTableBuilder;
var init_drop_table_builder = __esm({
  "../node_modules/kysely/dist/esm/schema/drop-table-builder.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_drop_table_node();
    init_object_utils();
    DropTableBuilder = class _DropTableBuilder {
      static {
        __name(this, "_DropTableBuilder");
      }
      static {
        __name2(this, "DropTableBuilder");
      }
      #props;
      constructor(props) {
        this.#props = freeze(props);
      }
      ifExists() {
        return new _DropTableBuilder({
          ...this.#props,
          node: DropTableNode.cloneWith(this.#props.node, {
            ifExists: true
          })
        });
      }
      cascade() {
        return new _DropTableBuilder({
          ...this.#props,
          node: DropTableNode.cloneWith(this.#props.node, {
            cascade: true
          })
        });
      }
      /**
       * Simply calls the provided function passing `this` as the only argument. `$call` returns
       * what the provided function returns.
       */
      $call(func) {
        return func(this);
      }
      toOperationNode() {
        return this.#props.executor.transformQuery(this.#props.node, this.#props.queryId);
      }
      compile() {
        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);
      }
      async execute() {
        await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);
      }
    };
  }
});
var CreateViewNode;
var init_create_view_node = __esm({
  "../node_modules/kysely/dist/esm/operation-node/create-view-node.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    init_schemable_identifier_node();
    CreateViewNode = freeze({
      is(node) {
        return node.kind === "CreateViewNode";
      },
      create(name) {
        return freeze({
          kind: "CreateViewNode",
          name: SchemableIdentifierNode.create(name)
        });
      },
      cloneWith(createView2, params) {
        return freeze({
          ...createView2,
          ...params
        });
      }
    });
  }
});
var ImmediateValuePlugin;
var init_immediate_value_plugin = __esm({
  "../node_modules/kysely/dist/esm/plugin/immediate-value/immediate-value-plugin.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_immediate_value_transformer();
    ImmediateValuePlugin = class {
      static {
        __name(this, "ImmediateValuePlugin");
      }
      static {
        __name2(this, "ImmediateValuePlugin");
      }
      #transformer = new ImmediateValueTransformer();
      transformQuery(args) {
        return this.#transformer.transformNode(args.node, args.queryId);
      }
      transformResult(args) {
        return Promise.resolve(args.result);
      }
    };
  }
});
var CreateViewBuilder;
var init_create_view_builder = __esm({
  "../node_modules/kysely/dist/esm/schema/create-view-builder.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    init_create_view_node();
    init_reference_parser();
    init_immediate_value_plugin();
    CreateViewBuilder = class _CreateViewBuilder {
      static {
        __name(this, "_CreateViewBuilder");
      }
      static {
        __name2(this, "CreateViewBuilder");
      }
      #props;
      constructor(props) {
        this.#props = freeze(props);
      }
      /**
       * Adds the "temporary" modifier.
       *
       * Use this to create a temporary view.
       */
      temporary() {
        return new _CreateViewBuilder({
          ...this.#props,
          node: CreateViewNode.cloneWith(this.#props.node, {
            temporary: true
          })
        });
      }
      materialized() {
        return new _CreateViewBuilder({
          ...this.#props,
          node: CreateViewNode.cloneWith(this.#props.node, {
            materialized: true
          })
        });
      }
      /**
       * Only implemented on some dialects like SQLite. On most dialects, use {@link orReplace}.
       */
      ifNotExists() {
        return new _CreateViewBuilder({
          ...this.#props,
          node: CreateViewNode.cloneWith(this.#props.node, {
            ifNotExists: true
          })
        });
      }
      orReplace() {
        return new _CreateViewBuilder({
          ...this.#props,
          node: CreateViewNode.cloneWith(this.#props.node, {
            orReplace: true
          })
        });
      }
      columns(columns) {
        return new _CreateViewBuilder({
          ...this.#props,
          node: CreateViewNode.cloneWith(this.#props.node, {
            columns: columns.map(parseColumnName)
          })
        });
      }
      /**
       * Sets the select query or a `values` statement that creates the view.
       *
       * WARNING!
       * Some dialects don't support parameterized queries in DDL statements and therefore
       * the query or raw {@link sql } expression passed here is interpolated into a single
       * string opening an SQL injection vulnerability. DO NOT pass unchecked user input
       * into the query or raw expression passed to this method!
       */
      as(query) {
        const queryNode = query.withPlugin(new ImmediateValuePlugin()).toOperationNode();
        return new _CreateViewBuilder({
          ...this.#props,
          node: CreateViewNode.cloneWith(this.#props.node, {
            as: queryNode
          })
        });
      }
      /**
       * Simply calls the provided function passing `this` as the only argument. `$call` returns
       * what the provided function returns.
       */
      $call(func) {
        return func(this);
      }
      toOperationNode() {
        return this.#props.executor.transformQuery(this.#props.node, this.#props.queryId);
      }
      compile() {
        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);
      }
      async execute() {
        await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);
      }
    };
  }
});
var DropViewNode;
var init_drop_view_node = __esm({
  "../node_modules/kysely/dist/esm/operation-node/drop-view-node.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    init_schemable_identifier_node();
    DropViewNode = freeze({
      is(node) {
        return node.kind === "DropViewNode";
      },
      create(name) {
        return freeze({
          kind: "DropViewNode",
          name: SchemableIdentifierNode.create(name)
        });
      },
      cloneWith(dropView, params) {
        return freeze({
          ...dropView,
          ...params
        });
      }
    });
  }
});
var DropViewBuilder;
var init_drop_view_builder = __esm({
  "../node_modules/kysely/dist/esm/schema/drop-view-builder.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    init_drop_view_node();
    DropViewBuilder = class _DropViewBuilder {
      static {
        __name(this, "_DropViewBuilder");
      }
      static {
        __name2(this, "DropViewBuilder");
      }
      #props;
      constructor(props) {
        this.#props = freeze(props);
      }
      materialized() {
        return new _DropViewBuilder({
          ...this.#props,
          node: DropViewNode.cloneWith(this.#props.node, {
            materialized: true
          })
        });
      }
      ifExists() {
        return new _DropViewBuilder({
          ...this.#props,
          node: DropViewNode.cloneWith(this.#props.node, {
            ifExists: true
          })
        });
      }
      cascade() {
        return new _DropViewBuilder({
          ...this.#props,
          node: DropViewNode.cloneWith(this.#props.node, {
            cascade: true
          })
        });
      }
      /**
       * Simply calls the provided function passing `this` as the only argument. `$call` returns
       * what the provided function returns.
       */
      $call(func) {
        return func(this);
      }
      toOperationNode() {
        return this.#props.executor.transformQuery(this.#props.node, this.#props.queryId);
      }
      compile() {
        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);
      }
      async execute() {
        await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);
      }
    };
  }
});
var CreateTypeNode;
var init_create_type_node = __esm({
  "../node_modules/kysely/dist/esm/operation-node/create-type-node.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    init_value_list_node();
    init_value_node();
    CreateTypeNode = freeze({
      is(node) {
        return node.kind === "CreateTypeNode";
      },
      create(name) {
        return freeze({
          kind: "CreateTypeNode",
          name
        });
      },
      cloneWithEnum(createType, values) {
        return freeze({
          ...createType,
          enum: ValueListNode.create(values.map(ValueNode.createImmediate))
        });
      }
    });
  }
});
var CreateTypeBuilder;
var init_create_type_builder = __esm({
  "../node_modules/kysely/dist/esm/schema/create-type-builder.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    init_create_type_node();
    CreateTypeBuilder = class _CreateTypeBuilder {
      static {
        __name(this, "_CreateTypeBuilder");
      }
      static {
        __name2(this, "CreateTypeBuilder");
      }
      #props;
      constructor(props) {
        this.#props = freeze(props);
      }
      toOperationNode() {
        return this.#props.executor.transformQuery(this.#props.node, this.#props.queryId);
      }
      /**
       * Creates an anum type.
       *
       * ### Examples
       *
       * ```ts
       * db.schema.createType('species').asEnum(['cat', 'dog', 'frog'])
       * ```
       */
      asEnum(values) {
        return new _CreateTypeBuilder({
          ...this.#props,
          node: CreateTypeNode.cloneWithEnum(this.#props.node, values)
        });
      }
      /**
       * Simply calls the provided function passing `this` as the only argument. `$call` returns
       * what the provided function returns.
       */
      $call(func) {
        return func(this);
      }
      compile() {
        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);
      }
      async execute() {
        await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);
      }
    };
  }
});
var DropTypeNode;
var init_drop_type_node = __esm({
  "../node_modules/kysely/dist/esm/operation-node/drop-type-node.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    DropTypeNode = freeze({
      is(node) {
        return node.kind === "DropTypeNode";
      },
      create(name) {
        return freeze({
          kind: "DropTypeNode",
          name
        });
      },
      cloneWith(dropType, params) {
        return freeze({
          ...dropType,
          ...params
        });
      }
    });
  }
});
var DropTypeBuilder;
var init_drop_type_builder = __esm({
  "../node_modules/kysely/dist/esm/schema/drop-type-builder.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_drop_type_node();
    init_object_utils();
    DropTypeBuilder = class _DropTypeBuilder {
      static {
        __name(this, "_DropTypeBuilder");
      }
      static {
        __name2(this, "DropTypeBuilder");
      }
      #props;
      constructor(props) {
        this.#props = freeze(props);
      }
      ifExists() {
        return new _DropTypeBuilder({
          ...this.#props,
          node: DropTypeNode.cloneWith(this.#props.node, {
            ifExists: true
          })
        });
      }
      /**
       * Simply calls the provided function passing `this` as the only argument. `$call` returns
       * what the provided function returns.
       */
      $call(func) {
        return func(this);
      }
      toOperationNode() {
        return this.#props.executor.transformQuery(this.#props.node, this.#props.queryId);
      }
      compile() {
        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);
      }
      async execute() {
        await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);
      }
    };
  }
});
function parseSchemableIdentifier(id) {
  const SCHEMA_SEPARATOR = ".";
  if (id.includes(SCHEMA_SEPARATOR)) {
    const parts = id.split(SCHEMA_SEPARATOR).map(trim3);
    if (parts.length === 2) {
      return SchemableIdentifierNode.createWithSchema(parts[0], parts[1]);
    } else {
      throw new Error(`invalid schemable identifier ${id}`);
    }
  } else {
    return SchemableIdentifierNode.create(id);
  }
}
__name(parseSchemableIdentifier, "parseSchemableIdentifier");
function trim3(str) {
  return str.trim();
}
__name(trim3, "trim3");
var init_identifier_parser = __esm({
  "../node_modules/kysely/dist/esm/parser/identifier-parser.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_schemable_identifier_node();
    __name2(parseSchemableIdentifier, "parseSchemableIdentifier");
    __name2(trim3, "trim");
  }
});
var RefreshMaterializedViewNode;
var init_refresh_materialized_view_node = __esm({
  "../node_modules/kysely/dist/esm/operation-node/refresh-materialized-view-node.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    init_schemable_identifier_node();
    RefreshMaterializedViewNode = freeze({
      is(node) {
        return node.kind === "RefreshMaterializedViewNode";
      },
      create(name) {
        return freeze({
          kind: "RefreshMaterializedViewNode",
          name: SchemableIdentifierNode.create(name)
        });
      },
      cloneWith(createView2, params) {
        return freeze({
          ...createView2,
          ...params
        });
      }
    });
  }
});
var RefreshMaterializedViewBuilder;
var init_refresh_materialized_view_builder = __esm({
  "../node_modules/kysely/dist/esm/schema/refresh-materialized-view-builder.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    init_refresh_materialized_view_node();
    RefreshMaterializedViewBuilder = class _RefreshMaterializedViewBuilder {
      static {
        __name(this, "_RefreshMaterializedViewBuilder");
      }
      static {
        __name2(this, "RefreshMaterializedViewBuilder");
      }
      #props;
      constructor(props) {
        this.#props = freeze(props);
      }
      /**
       * Adds the "concurrently" modifier.
       *
       * Use this to refresh the view without locking out concurrent selects on the materialized view.
       *
       * WARNING!
       * This cannot be used with the "with no data" modifier.
       */
      concurrently() {
        return new _RefreshMaterializedViewBuilder({
          ...this.#props,
          node: RefreshMaterializedViewNode.cloneWith(this.#props.node, {
            concurrently: true,
            withNoData: false
          })
        });
      }
      /**
       * Adds the "with data" modifier.
       *
       * If specified (or defaults) the backing query is executed to provide the new data, and the materialized view is left in a scannable state
       */
      withData() {
        return new _RefreshMaterializedViewBuilder({
          ...this.#props,
          node: RefreshMaterializedViewNode.cloneWith(this.#props.node, {
            withNoData: false
          })
        });
      }
      /**
       * Adds the "with no data" modifier.
       *
       * If specified, no new data is generated and the materialized view is left in an unscannable state.
       *
       * WARNING!
       * This cannot be used with the "concurrently" modifier.
       */
      withNoData() {
        return new _RefreshMaterializedViewBuilder({
          ...this.#props,
          node: RefreshMaterializedViewNode.cloneWith(this.#props.node, {
            withNoData: true,
            concurrently: false
          })
        });
      }
      /**
       * Simply calls the provided function passing `this` as the only argument. `$call` returns
       * what the provided function returns.
       */
      $call(func) {
        return func(this);
      }
      toOperationNode() {
        return this.#props.executor.transformQuery(this.#props.node, this.#props.queryId);
      }
      compile() {
        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);
      }
      async execute() {
        await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);
      }
    };
  }
});
var SchemaModule;
var init_schema = __esm({
  "../node_modules/kysely/dist/esm/schema/schema.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_alter_table_node();
    init_create_index_node();
    init_create_schema_node();
    init_create_table_node();
    init_drop_index_node();
    init_drop_schema_node();
    init_drop_table_node();
    init_table_parser();
    init_alter_table_builder();
    init_create_index_builder();
    init_create_schema_builder();
    init_create_table_builder();
    init_drop_index_builder();
    init_drop_schema_builder();
    init_drop_table_builder();
    init_query_id();
    init_with_schema_plugin();
    init_create_view_builder();
    init_create_view_node();
    init_drop_view_builder();
    init_drop_view_node();
    init_create_type_builder();
    init_drop_type_builder();
    init_create_type_node();
    init_drop_type_node();
    init_identifier_parser();
    init_refresh_materialized_view_builder();
    init_refresh_materialized_view_node();
    SchemaModule = class _SchemaModule {
      static {
        __name(this, "_SchemaModule");
      }
      static {
        __name2(this, "SchemaModule");
      }
      #executor;
      constructor(executor) {
        this.#executor = executor;
      }
      /**
       * Create a new table.
       *
       * ### Examples
       *
       * This example creates a new table with columns `id`, `first_name`,
       * `last_name` and `gender`:
       *
       * ```ts
       * await db.schema
       *   .createTable('person')
       *   .addColumn('id', 'integer', col => col.primaryKey().autoIncrement())
       *   .addColumn('first_name', 'varchar', col => col.notNull())
       *   .addColumn('last_name', 'varchar', col => col.notNull())
       *   .addColumn('gender', 'varchar')
       *   .execute()
       * ```
       *
       * This example creates a table with a foreign key. Not all database
       * engines support column-level foreign key constraint definitions.
       * For example if you are using MySQL 5.X see the next example after
       * this one.
       *
       * ```ts
       * await db.schema
       *   .createTable('pet')
       *   .addColumn('id', 'integer', col => col.primaryKey().autoIncrement())
       *   .addColumn('owner_id', 'integer', col => col
       *     .references('person.id')
       *     .onDelete('cascade')
       *   )
       *   .execute()
       * ```
       *
       * This example adds a foreign key constraint for a columns just
       * like the previous example, but using a table-level statement.
       * On MySQL 5.X you need to define foreign key constraints like
       * this:
       *
       * ```ts
       * await db.schema
       *   .createTable('pet')
       *   .addColumn('id', 'integer', col => col.primaryKey().autoIncrement())
       *   .addColumn('owner_id', 'integer')
       *   .addForeignKeyConstraint(
       *     'pet_owner_id_foreign', ['owner_id'], 'person', ['id'],
       *     (constraint) => constraint.onDelete('cascade')
       *   )
       *   .execute()
       * ```
       */
      createTable(table) {
        return new CreateTableBuilder({
          queryId: createQueryId(),
          executor: this.#executor,
          node: CreateTableNode.create(parseTable(table))
        });
      }
      /**
       * Drop a table.
       *
       * ### Examples
       *
       * ```ts
       * await db.schema
       *   .dropTable('person')
       *   .execute()
       * ```
       */
      dropTable(table) {
        return new DropTableBuilder({
          queryId: createQueryId(),
          executor: this.#executor,
          node: DropTableNode.create(parseTable(table))
        });
      }
      /**
       * Create a new index.
       *
       * ### Examples
       *
       * ```ts
       * await db.schema
       *   .createIndex('person_full_name_unique_index')
       *   .on('person')
       *   .columns(['first_name', 'last_name'])
       *   .execute()
       * ```
       */
      createIndex(indexName) {
        return new CreateIndexBuilder({
          queryId: createQueryId(),
          executor: this.#executor,
          node: CreateIndexNode.create(indexName)
        });
      }
      /**
       * Drop an index.
       *
       * ### Examples
       *
       * ```ts
       * await db.schema
       *   .dropIndex('person_full_name_unique_index')
       *   .execute()
       * ```
       */
      dropIndex(indexName) {
        return new DropIndexBuilder({
          queryId: createQueryId(),
          executor: this.#executor,
          node: DropIndexNode.create(indexName)
        });
      }
      /**
       * Create a new schema.
       *
       * ### Examples
       *
       * ```ts
       * await db.schema
       *   .createSchema('some_schema')
       *   .execute()
       * ```
       */
      createSchema(schema2) {
        return new CreateSchemaBuilder({
          queryId: createQueryId(),
          executor: this.#executor,
          node: CreateSchemaNode.create(schema2)
        });
      }
      /**
       * Drop a schema.
       *
       * ### Examples
       *
       * ```ts
       * await db.schema
       *   .dropSchema('some_schema')
       *   .execute()
       * ```
       */
      dropSchema(schema2) {
        return new DropSchemaBuilder({
          queryId: createQueryId(),
          executor: this.#executor,
          node: DropSchemaNode.create(schema2)
        });
      }
      /**
       * Alter a table.
       *
       * ### Examples
       *
       * ```ts
       * await db.schema
       *   .alterTable('person')
       *   .alterColumn('first_name', (ac) => ac.setDataType('text'))
       *   .execute()
       * ```
       */
      alterTable(table) {
        return new AlterTableBuilder({
          queryId: createQueryId(),
          executor: this.#executor,
          node: AlterTableNode.create(parseTable(table))
        });
      }
      /**
       * Create a new view.
       *
       * ### Examples
       *
       * ```ts
       * await db.schema
       *   .createView('dogs')
       *   .orReplace()
       *   .as(db.selectFrom('pet').selectAll().where('species', '=', 'dog'))
       *   .execute()
       * ```
       */
      createView(viewName) {
        return new CreateViewBuilder({
          queryId: createQueryId(),
          executor: this.#executor,
          node: CreateViewNode.create(viewName)
        });
      }
      /**
       * Refresh a materialized view.
       *
       * ### Examples
       *
       * ```ts
       * await db.schema
       *   .refreshMaterializedView('my_view')
       *   .concurrently()
       *   .execute()
       * ```
       */
      refreshMaterializedView(viewName) {
        return new RefreshMaterializedViewBuilder({
          queryId: createQueryId(),
          executor: this.#executor,
          node: RefreshMaterializedViewNode.create(viewName)
        });
      }
      /**
       * Drop a view.
       *
       * ### Examples
       *
       * ```ts
       * await db.schema
       *   .dropView('dogs')
       *   .ifExists()
       *   .execute()
       * ```
       */
      dropView(viewName) {
        return new DropViewBuilder({
          queryId: createQueryId(),
          executor: this.#executor,
          node: DropViewNode.create(viewName)
        });
      }
      /**
       * Create a new type.
       *
       * Only some dialects like PostgreSQL have user-defined types.
       *
       * ### Examples
       *
       * ```ts
       * await db.schema
       *   .createType('species')
       *   .asEnum(['dog', 'cat', 'frog'])
       *   .execute()
       * ```
       */
      createType(typeName) {
        return new CreateTypeBuilder({
          queryId: createQueryId(),
          executor: this.#executor,
          node: CreateTypeNode.create(parseSchemableIdentifier(typeName))
        });
      }
      /**
       * Drop a type.
       *
       * Only some dialects like PostgreSQL have user-defined types.
       *
       * ### Examples
       *
       * ```ts
       * await db.schema
       *   .dropType('species')
       *   .ifExists()
       *   .execute()
       * ```
       */
      dropType(typeName) {
        return new DropTypeBuilder({
          queryId: createQueryId(),
          executor: this.#executor,
          node: DropTypeNode.create(parseSchemableIdentifier(typeName))
        });
      }
      /**
       * Returns a copy of this schema module with the given plugin installed.
       */
      withPlugin(plugin) {
        return new _SchemaModule(this.#executor.withPlugin(plugin));
      }
      /**
       * Returns a copy of this schema module  without any plugins.
       */
      withoutPlugins() {
        return new _SchemaModule(this.#executor.withoutPlugins());
      }
      /**
       * See {@link QueryCreator.withSchema}
       */
      withSchema(schema2) {
        return new _SchemaModule(this.#executor.withPluginAtFront(new WithSchemaPlugin(schema2)));
      }
    };
  }
});
var DynamicModule;
var init_dynamic = __esm({
  "../node_modules/kysely/dist/esm/dynamic/dynamic.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_dynamic_reference_builder();
    init_dynamic_table_builder();
    DynamicModule = class {
      static {
        __name(this, "DynamicModule");
      }
      static {
        __name2(this, "DynamicModule");
      }
      /**
       * Creates a dynamic reference to a column that is not know at compile time.
       *
       * Kysely is built in a way that by default you can't refer to tables or columns
       * that are not actually visible in the current query and context. This is all
       * done by TypeScript at compile time, which means that you need to know the
       * columns and tables at compile time. This is not always the case of course.
       *
       * This method is meant to be used in those cases where the column names
       * come from the user input or are not otherwise known at compile time.
       *
       * WARNING! Unlike values, column names are not escaped by the database engine
       * or Kysely and if you pass in unchecked column names using this method, you
       * create an SQL injection vulnerability. Always __always__ validate the user
       * input before passing it to this method.
       *
       * There are couple of examples below for some use cases, but you can pass
       * `ref` to other methods as well. If the types allow you to pass a `ref`
       * value to some place, it should work.
       *
       * ### Examples
       *
       * Filter by a column not know at compile time:
       *
       * ```ts
       * async function someQuery(filterColumn: string, filterValue: string) {
       *   const { ref } = db.dynamic
       *
       *   return await db
       *     .selectFrom('person')
       *     .selectAll()
       *     .where(ref(filterColumn), '=', filterValue)
       *     .execute()
       * }
       *
       * someQuery('first_name', 'Arnold')
       * someQuery('person.last_name', 'Aniston')
       * ```
       *
       * Order by a column not know at compile time:
       *
       * ```ts
       * async function someQuery(orderBy: string) {
       *   const { ref } = db.dynamic
       *
       *   return await db
       *     .selectFrom('person')
       *     .select('person.first_name as fn')
       *     .orderBy(ref(orderBy))
       *     .execute()
       * }
       *
       * someQuery('fn')
       * ```
       *
       * In this example we add selections dynamically:
       *
       * ```ts
       * const { ref } = db.dynamic
       *
       * // Some column name provided by the user. Value not known at compile time.
       * const columnFromUserInput: PossibleColumns = 'birthdate';
       *
       * // A type that lists all possible values `columnFromUserInput` can have.
       * // You can use `keyof Person` if any column of an interface is allowed.
       * type PossibleColumns = 'last_name' | 'first_name' | 'birthdate'
       *
       * const [person] = await db.selectFrom('person')
       *   .select([
       *     ref<PossibleColumns>(columnFromUserInput),
       *     'id'
       *   ])
       *   .execute()
       *
       * // The resulting type contains all `PossibleColumns` as optional fields
       * // because we cannot know which field was actually selected before
       * // running the code.
       * const lastName: string | null | undefined = person?.last_name
       * const firstName: string | undefined = person?.first_name
       * const birthDate: Date | null | undefined = person?.birthdate
       *
       * // The result type also contains the compile time selection `id`.
       * person?.id
       * ```
       */
      ref(reference) {
        return new DynamicReferenceBuilder(reference);
      }
      /**
       * Creates a table reference to a table that's not fully known at compile time.
       *
       * The type `T` is allowed to be a union of multiple tables.
       *
       * <!-- siteExample("select", "Generic find query", 130) -->
       *
       * A generic type-safe helper function for finding a row by a column value:
       *
       * ```ts
       * import { SelectType } from 'kysely'
       * import { Database } from 'type-editor'
       *
       * async function getRowByColumn<
       *   T extends keyof Database,
       *   C extends keyof Database[T] & string,
       *   V extends SelectType<Database[T][C]>,
       * >(t: T, c: C, v: V) {
       *   // We need to use the dynamic module since the table name
       *   // is not known at compile time.
       *   const { table, ref } = db.dynamic
       *
       *   return await db
       *     .selectFrom(table(t).as('t'))
       *     .selectAll()
       *     .where(ref(c), '=', v)
       *     .orderBy('t.id')
       *     .executeTakeFirstOrThrow()
       * }
       *
       * const person = await getRowByColumn('person', 'first_name', 'Arnold')
       * ```
       */
      table(table) {
        return new DynamicTableBuilder(table);
      }
    };
  }
});
var DefaultConnectionProvider;
var init_default_connection_provider = __esm({
  "../node_modules/kysely/dist/esm/driver/default-connection-provider.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    DefaultConnectionProvider = class {
      static {
        __name(this, "DefaultConnectionProvider");
      }
      static {
        __name2(this, "DefaultConnectionProvider");
      }
      #driver;
      constructor(driver) {
        this.#driver = driver;
      }
      async provideConnection(consumer) {
        const connection = await this.#driver.acquireConnection();
        try {
          return await consumer(connection);
        } finally {
          await this.#driver.releaseConnection(connection);
        }
      }
    };
  }
});
var DefaultQueryExecutor;
var init_default_query_executor = __esm({
  "../node_modules/kysely/dist/esm/query-executor/default-query-executor.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_query_executor_base();
    DefaultQueryExecutor = class _DefaultQueryExecutor extends QueryExecutorBase {
      static {
        __name(this, "_DefaultQueryExecutor");
      }
      static {
        __name2(this, "DefaultQueryExecutor");
      }
      #compiler;
      #adapter;
      #connectionProvider;
      constructor(compiler, adapter, connectionProvider, plugins = []) {
        super(plugins);
        this.#compiler = compiler;
        this.#adapter = adapter;
        this.#connectionProvider = connectionProvider;
      }
      get adapter() {
        return this.#adapter;
      }
      compileQuery(node, queryId) {
        return this.#compiler.compileQuery(node, queryId);
      }
      provideConnection(consumer) {
        return this.#connectionProvider.provideConnection(consumer);
      }
      withPlugins(plugins) {
        return new _DefaultQueryExecutor(this.#compiler, this.#adapter, this.#connectionProvider, [...this.plugins, ...plugins]);
      }
      withPlugin(plugin) {
        return new _DefaultQueryExecutor(this.#compiler, this.#adapter, this.#connectionProvider, [...this.plugins, plugin]);
      }
      withPluginAtFront(plugin) {
        return new _DefaultQueryExecutor(this.#compiler, this.#adapter, this.#connectionProvider, [plugin, ...this.plugins]);
      }
      withConnectionProvider(connectionProvider) {
        return new _DefaultQueryExecutor(this.#compiler, this.#adapter, connectionProvider, [...this.plugins]);
      }
      withoutPlugins() {
        return new _DefaultQueryExecutor(this.#compiler, this.#adapter, this.#connectionProvider, []);
      }
    };
  }
});
function performanceNow() {
  if (typeof performance !== "undefined" && isFunction(performance.now)) {
    return performance.now();
  } else {
    return Date.now();
  }
}
__name(performanceNow, "performanceNow");
var init_performance_now = __esm({
  "../node_modules/kysely/dist/esm/util/performance-now.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    __name2(performanceNow, "performanceNow");
  }
});
var RuntimeDriver;
var init_runtime_driver = __esm({
  "../node_modules/kysely/dist/esm/driver/runtime-driver.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_performance_now();
    RuntimeDriver = class {
      static {
        __name(this, "RuntimeDriver");
      }
      static {
        __name2(this, "RuntimeDriver");
      }
      #driver;
      #log;
      #initPromise;
      #initDone;
      #destroyPromise;
      #connections = /* @__PURE__ */ new WeakSet();
      constructor(driver, log) {
        this.#initDone = false;
        this.#driver = driver;
        this.#log = log;
      }
      async init() {
        if (this.#destroyPromise) {
          throw new Error("driver has already been destroyed");
        }
        if (!this.#initPromise) {
          this.#initPromise = this.#driver.init().then(() => {
            this.#initDone = true;
          }).catch((err) => {
            this.#initPromise = void 0;
            return Promise.reject(err);
          });
        }
        await this.#initPromise;
      }
      async acquireConnection() {
        if (this.#destroyPromise) {
          throw new Error("driver has already been destroyed");
        }
        if (!this.#initDone) {
          await this.init();
        }
        const connection = await this.#driver.acquireConnection();
        if (!this.#connections.has(connection)) {
          if (this.#needsLogging()) {
            this.#addLogging(connection);
          }
          this.#connections.add(connection);
        }
        return connection;
      }
      async releaseConnection(connection) {
        await this.#driver.releaseConnection(connection);
      }
      beginTransaction(connection, settings) {
        return this.#driver.beginTransaction(connection, settings);
      }
      commitTransaction(connection) {
        return this.#driver.commitTransaction(connection);
      }
      rollbackTransaction(connection) {
        return this.#driver.rollbackTransaction(connection);
      }
      savepoint(connection, savepointName, compileQuery) {
        if (this.#driver.savepoint) {
          return this.#driver.savepoint(connection, savepointName, compileQuery);
        }
        throw new Error("The `savepoint` method is not supported by this driver");
      }
      rollbackToSavepoint(connection, savepointName, compileQuery) {
        if (this.#driver.rollbackToSavepoint) {
          return this.#driver.rollbackToSavepoint(connection, savepointName, compileQuery);
        }
        throw new Error("The `rollbackToSavepoint` method is not supported by this driver");
      }
      releaseSavepoint(connection, savepointName, compileQuery) {
        if (this.#driver.releaseSavepoint) {
          return this.#driver.releaseSavepoint(connection, savepointName, compileQuery);
        }
        throw new Error("The `releaseSavepoint` method is not supported by this driver");
      }
      async destroy() {
        if (!this.#initPromise) {
          return;
        }
        await this.#initPromise;
        if (!this.#destroyPromise) {
          this.#destroyPromise = this.#driver.destroy().catch((err) => {
            this.#destroyPromise = void 0;
            return Promise.reject(err);
          });
        }
        await this.#destroyPromise;
      }
      #needsLogging() {
        return this.#log.isLevelEnabled("query") || this.#log.isLevelEnabled("error");
      }
      // This method monkey patches the database connection's executeQuery method
      // by adding logging code around it. Monkey patching is not pretty, but it's
      // the best option in this case.
      #addLogging(connection) {
        const executeQuery = connection.executeQuery;
        const streamQuery = connection.streamQuery;
        const dis = this;
        connection.executeQuery = async (compiledQuery) => {
          let caughtError;
          const startTime = performanceNow();
          try {
            return await executeQuery.call(connection, compiledQuery);
          } catch (error2) {
            caughtError = error2;
            await dis.#logError(error2, compiledQuery, startTime);
            throw error2;
          } finally {
            if (!caughtError) {
              await dis.#logQuery(compiledQuery, startTime);
            }
          }
        };
        connection.streamQuery = async function* (compiledQuery, chunkSize) {
          let caughtError;
          const startTime = performanceNow();
          try {
            for await (const result of streamQuery.call(connection, compiledQuery, chunkSize)) {
              yield result;
            }
          } catch (error2) {
            caughtError = error2;
            await dis.#logError(error2, compiledQuery, startTime);
            throw error2;
          } finally {
            if (!caughtError) {
              await dis.#logQuery(compiledQuery, startTime, true);
            }
          }
        };
      }
      async #logError(error2, compiledQuery, startTime) {
        await this.#log.error(() => ({
          level: "error",
          error: error2,
          query: compiledQuery,
          queryDurationMillis: this.#calculateDurationMillis(startTime)
        }));
      }
      async #logQuery(compiledQuery, startTime, isStream = false) {
        await this.#log.query(() => ({
          level: "query",
          isStream,
          query: compiledQuery,
          queryDurationMillis: this.#calculateDurationMillis(startTime)
        }));
      }
      #calculateDurationMillis(startTime) {
        return performanceNow() - startTime;
      }
    };
  }
});
var ignoreError;
var SingleConnectionProvider;
var init_single_connection_provider = __esm({
  "../node_modules/kysely/dist/esm/driver/single-connection-provider.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    ignoreError = /* @__PURE__ */ __name2(() => {
    }, "ignoreError");
    SingleConnectionProvider = class {
      static {
        __name(this, "SingleConnectionProvider");
      }
      static {
        __name2(this, "SingleConnectionProvider");
      }
      #connection;
      #runningPromise;
      constructor(connection) {
        this.#connection = connection;
      }
      async provideConnection(consumer) {
        while (this.#runningPromise) {
          await this.#runningPromise.catch(ignoreError);
        }
        this.#runningPromise = this.#run(consumer).finally(() => {
          this.#runningPromise = void 0;
        });
        return this.#runningPromise;
      }
      // Run the runner in an async function to make sure it doesn't
      // throw synchronous errors.
      async #run(runner) {
        return await runner(this.#connection);
      }
    };
  }
});
function validateTransactionSettings(settings) {
  if (settings.accessMode && !TRANSACTION_ACCESS_MODES.includes(settings.accessMode)) {
    throw new Error(`invalid transaction access mode ${settings.accessMode}`);
  }
  if (settings.isolationLevel && !TRANSACTION_ISOLATION_LEVELS.includes(settings.isolationLevel)) {
    throw new Error(`invalid transaction isolation level ${settings.isolationLevel}`);
  }
}
__name(validateTransactionSettings, "validateTransactionSettings");
var TRANSACTION_ACCESS_MODES;
var TRANSACTION_ISOLATION_LEVELS;
var init_driver = __esm({
  "../node_modules/kysely/dist/esm/driver/driver.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    TRANSACTION_ACCESS_MODES = ["read only", "read write"];
    TRANSACTION_ISOLATION_LEVELS = [
      "read uncommitted",
      "read committed",
      "repeatable read",
      "serializable",
      "snapshot"
    ];
    __name2(validateTransactionSettings, "validateTransactionSettings");
  }
});
function defaultLogger(event) {
  if (event.level === "query") {
    const prefix = `kysely:query:${event.isStream ? "stream:" : ""}`;
    console.log(`${prefix} ${event.query.sql}`);
    console.log(`${prefix} duration: ${event.queryDurationMillis.toFixed(1)}ms`);
  } else if (event.level === "error") {
    if (event.error instanceof Error) {
      console.error(`kysely:error: ${event.error.stack ?? event.error.message}`);
    } else {
      console.error(`kysely:error: ${JSON.stringify({
        error: event.error,
        query: event.query.sql,
        queryDurationMillis: event.queryDurationMillis
      })}`);
    }
  }
}
__name(defaultLogger, "defaultLogger");
var LOG_LEVELS;
var Log;
var init_log = __esm({
  "../node_modules/kysely/dist/esm/util/log.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    LOG_LEVELS = freeze(["query", "error"]);
    Log = class {
      static {
        __name(this, "Log");
      }
      static {
        __name2(this, "Log");
      }
      #levels;
      #logger;
      constructor(config2) {
        if (isFunction(config2)) {
          this.#logger = config2;
          this.#levels = freeze({
            query: true,
            error: true
          });
        } else {
          this.#logger = defaultLogger;
          this.#levels = freeze({
            query: config2.includes("query"),
            error: config2.includes("error")
          });
        }
      }
      isLevelEnabled(level) {
        return this.#levels[level];
      }
      async query(getEvent) {
        if (this.#levels.query) {
          await this.#logger(getEvent());
        }
      }
      async error(getEvent) {
        if (this.#levels.error) {
          await this.#logger(getEvent());
        }
      }
    };
    __name2(defaultLogger, "defaultLogger");
  }
});
function isCompilable(value) {
  return isObject(value) && isFunction(value.compile);
}
__name(isCompilable, "isCompilable");
var init_compilable = __esm({
  "../node_modules/kysely/dist/esm/util/compilable.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    __name2(isCompilable, "isCompilable");
  }
});
function isKyselyProps(obj) {
  return isObject(obj) && isObject(obj.config) && isObject(obj.driver) && isObject(obj.executor) && isObject(obj.dialect);
}
__name(isKyselyProps, "isKyselyProps");
function assertNotCommittedOrRolledBack(state) {
  if (state.isCommitted) {
    throw new Error("Transaction is already committed");
  }
  if (state.isRolledBack) {
    throw new Error("Transaction is already rolled back");
  }
}
__name(assertNotCommittedOrRolledBack, "assertNotCommittedOrRolledBack");
var Kysely;
var Transaction;
var ConnectionBuilder;
var TransactionBuilder;
var ControlledTransactionBuilder;
var ControlledTransaction;
var Command;
var NotCommittedOrRolledBackAssertingExecutor;
var init_kysely = __esm({
  "../node_modules/kysely/dist/esm/kysely.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_schema();
    init_dynamic();
    init_default_connection_provider();
    init_query_creator();
    init_default_query_executor();
    init_object_utils();
    init_runtime_driver();
    init_single_connection_provider();
    init_driver();
    init_function_module();
    init_log();
    init_query_id();
    init_compilable();
    init_case_builder();
    init_case_node();
    init_expression_parser();
    init_with_schema_plugin();
    init_provide_controlled_connection();
    Symbol.asyncDispose ??= Symbol("Symbol.asyncDispose");
    Kysely = class _Kysely extends QueryCreator {
      static {
        __name(this, "_Kysely");
      }
      static {
        __name2(this, "Kysely");
      }
      #props;
      constructor(args) {
        let superProps;
        let props;
        if (isKyselyProps(args)) {
          superProps = { executor: args.executor };
          props = { ...args };
        } else {
          const dialect = args.dialect;
          const driver = dialect.createDriver();
          const compiler = dialect.createQueryCompiler();
          const adapter = dialect.createAdapter();
          const log = new Log(args.log ?? []);
          const runtimeDriver = new RuntimeDriver(driver, log);
          const connectionProvider = new DefaultConnectionProvider(runtimeDriver);
          const executor = new DefaultQueryExecutor(compiler, adapter, connectionProvider, args.plugins ?? []);
          superProps = { executor };
          props = {
            config: args,
            executor,
            dialect,
            driver: runtimeDriver
          };
        }
        super(superProps);
        this.#props = freeze(props);
      }
      /**
       * Returns the {@link SchemaModule} module for building database schema.
       */
      get schema() {
        return new SchemaModule(this.#props.executor);
      }
      /**
       * Returns a the {@link DynamicModule} module.
       *
       * The {@link DynamicModule} module can be used to bypass strict typing and
       * passing in dynamic values for the queries.
       */
      get dynamic() {
        return new DynamicModule();
      }
      /**
       * Returns a {@link DatabaseIntrospector | database introspector}.
       */
      get introspection() {
        return this.#props.dialect.createIntrospector(this.withoutPlugins());
      }
      case(value) {
        return new CaseBuilder({
          node: CaseNode.create(isUndefined(value) ? void 0 : parseExpression(value))
        });
      }
      /**
       * Returns a {@link FunctionModule} that can be used to write somewhat type-safe function
       * calls.
       *
       * ```ts
       * const { count } = db.fn
       *
       * await db.selectFrom('person')
       *   .innerJoin('pet', 'pet.owner_id', 'person.id')
       *   .select([
       *     'id',
       *     count('pet.id').as('person_count'),
       *   ])
       *   .groupBy('person.id')
       *   .having(count('pet.id'), '>', 10)
       *   .execute()
       * ```
       *
       * The generated SQL (PostgreSQL):
       *
       * ```sql
       * select "person"."id", count("pet"."id") as "person_count"
       * from "person"
       * inner join "pet" on "pet"."owner_id" = "person"."id"
       * group by "person"."id"
       * having count("pet"."id") > $1
       * ```
       *
       * Why "somewhat" type-safe? Because the function calls are not bound to the
       * current query context. They allow you to reference columns and tables that
       * are not in the current query. E.g. remove the `innerJoin` from the previous
       * query and TypeScript won't even complain.
       *
       * If you want to make the function calls fully type-safe, you can use the
       * {@link ExpressionBuilder.fn} getter for a query context-aware, stricter {@link FunctionModule}.
       *
       * ```ts
       * await db.selectFrom('person')
       *   .innerJoin('pet', 'pet.owner_id', 'person.id')
       *   .select((eb) => [
       *     'person.id',
       *     eb.fn.count('pet.id').as('pet_count')
       *   ])
       *   .groupBy('person.id')
       *   .having((eb) => eb.fn.count('pet.id'), '>', 10)
       *   .execute()
       * ```
       */
      get fn() {
        return createFunctionModule();
      }
      /**
       * Creates a {@link TransactionBuilder} that can be used to run queries inside a transaction.
       *
       * The returned {@link TransactionBuilder} can be used to configure the transaction. The
       * {@link TransactionBuilder.execute} method can then be called to run the transaction.
       * {@link TransactionBuilder.execute} takes a function that is run inside the
       * transaction. If the function throws an exception,
       * 1. the exception is caught,
       * 2. the transaction is rolled back, and
       * 3. the exception is thrown again.
       * Otherwise the transaction is committed.
       *
       * The callback function passed to the {@link TransactionBuilder.execute | execute}
       * method gets the transaction object as its only argument. The transaction is
       * of type {@link Transaction} which inherits {@link Kysely}. Any query
       * started through the transaction object is executed inside the transaction.
       *
       * To run a controlled transaction, allowing you to commit and rollback manually,
       * use {@link startTransaction} instead.
       *
       * ### Examples
       *
       * <!-- siteExample("transactions", "Simple transaction", 10) -->
       *
       * This example inserts two rows in a transaction. If an exception is thrown inside
       * the callback passed to the `execute` method,
       * 1. the exception is caught,
       * 2. the transaction is rolled back, and
       * 3. the exception is thrown again.
       * Otherwise the transaction is committed.
       *
       * ```ts
       * const catto = await db.transaction().execute(async (trx) => {
       *   const jennifer = await trx.insertInto('person')
       *     .values({
       *       first_name: 'Jennifer',
       *       last_name: 'Aniston',
       *       age: 40,
       *     })
       *     .returning('id')
       *     .executeTakeFirstOrThrow()
       *
       *   return await trx.insertInto('pet')
       *     .values({
       *       owner_id: jennifer.id,
       *       name: 'Catto',
       *       species: 'cat',
       *       is_favorite: false,
       *     })
       *     .returningAll()
       *     .executeTakeFirst()
       * })
       * ```
       *
       * Setting the isolation level:
       *
       * ```ts
       * import type { Kysely } from 'kysely'
       *
       * await db
       *   .transaction()
       *   .setIsolationLevel('serializable')
       *   .execute(async (trx) => {
       *     await doStuff(trx)
       *   })
       *
       * async function doStuff(kysely: typeof db) {
       *   // ...
       * }
       * ```
       */
      transaction() {
        return new TransactionBuilder({ ...this.#props });
      }
      /**
       * Creates a {@link ControlledTransactionBuilder} that can be used to run queries inside a controlled transaction.
       *
       * The returned {@link ControlledTransactionBuilder} can be used to configure the transaction.
       * The {@link ControlledTransactionBuilder.execute} method can then be called
       * to start the transaction and return a {@link ControlledTransaction}.
       *
       * A {@link ControlledTransaction} allows you to commit and rollback manually,
       * execute savepoint commands. It extends {@link Transaction} which extends {@link Kysely},
       * so you can run queries inside the transaction. Once the transaction is committed,
       * or rolled back, it can't be used anymore - all queries will throw an error.
       * This is to prevent accidentally running queries outside the transaction - where
       * atomicity is not guaranteed anymore.
       *
       * ### Examples
       *
       * <!-- siteExample("transactions", "Controlled transaction", 11) -->
       *
       * A controlled transaction allows you to commit and rollback manually, execute
       * savepoint commands, and queries in general.
       *
       * In this example we start a transaction, use it to insert two rows and then commit
       * the transaction. If an error is thrown, we catch it and rollback the transaction.
       *
       * ```ts
       * const trx = await db.startTransaction().execute()
       *
       * try {
       *   const jennifer = await trx.insertInto('person')
       *     .values({
       *       first_name: 'Jennifer',
       *       last_name: 'Aniston',
       *       age: 40,
       *     })
       *     .returning('id')
       *     .executeTakeFirstOrThrow()
       *
       *   const catto = await trx.insertInto('pet')
       *     .values({
       *       owner_id: jennifer.id,
       *       name: 'Catto',
       *       species: 'cat',
       *       is_favorite: false,
       *     })
       *     .returningAll()
       *     .executeTakeFirstOrThrow()
       *
       *   await trx.commit().execute()
       *
       *   // ...
       * } catch (error) {
       *   await trx.rollback().execute()
       * }
       * ```
       *
       * <!-- siteExample("transactions", "Controlled transaction /w savepoints", 12) -->
       *
       * A controlled transaction allows you to commit and rollback manually, execute
       * savepoint commands, and queries in general.
       *
       * In this example we start a transaction, insert a person, create a savepoint,
       * try inserting a toy and a pet, and if an error is thrown, we rollback to the
       * savepoint. Eventually we release the savepoint, insert an audit record and
       * commit the transaction. If an error is thrown, we catch it and rollback the
       * transaction.
       *
       * ```ts
       * const trx = await db.startTransaction().execute()
       *
       * try {
       *   const jennifer = await trx
       *     .insertInto('person')
       *     .values({
       *       first_name: 'Jennifer',
       *       last_name: 'Aniston',
       *       age: 40,
       *     })
       *     .returning('id')
       *     .executeTakeFirstOrThrow()
       *
       *   const trxAfterJennifer = await trx.savepoint('after_jennifer').execute()
       *
       *   try {
       *     const catto = await trxAfterJennifer
       *       .insertInto('pet')
       *       .values({
       *         owner_id: jennifer.id,
       *         name: 'Catto',
       *         species: 'cat',
       *       })
       *       .returning('id')
       *       .executeTakeFirstOrThrow()
       *
       *     await trxAfterJennifer
       *       .insertInto('toy')
       *       .values({ name: 'Bone', price: 1.99, pet_id: catto.id })
       *       .execute()
       *   } catch (error) {
       *     await trxAfterJennifer.rollbackToSavepoint('after_jennifer').execute()
       *   }
       *
       *   await trxAfterJennifer.releaseSavepoint('after_jennifer').execute()
       *
       *   await trx.insertInto('audit').values({ action: 'added Jennifer' }).execute()
       *
       *   await trx.commit().execute()
       * } catch (error) {
       *   await trx.rollback().execute()
       * }
       * ```
       */
      startTransaction() {
        return new ControlledTransactionBuilder({ ...this.#props });
      }
      /**
       * Provides a kysely instance bound to a single database connection.
       *
       * ### Examples
       *
       * ```ts
       * await db
       *   .connection()
       *   .execute(async (db) => {
       *     // `db` is an instance of `Kysely` that's bound to a single
       *     // database connection. All queries executed through `db` use
       *     // the same connection.
       *     await doStuff(db)
       *   })
       *
       * async function doStuff(kysely: typeof db) {
       *   // ...
       * }
       * ```
       */
      connection() {
        return new ConnectionBuilder({ ...this.#props });
      }
      /**
       * Returns a copy of this Kysely instance with the given plugin installed.
       */
      withPlugin(plugin) {
        return new _Kysely({
          ...this.#props,
          executor: this.#props.executor.withPlugin(plugin)
        });
      }
      /**
       * Returns a copy of this Kysely instance without any plugins.
       */
      withoutPlugins() {
        return new _Kysely({
          ...this.#props,
          executor: this.#props.executor.withoutPlugins()
        });
      }
      /**
       * @override
       */
      withSchema(schema2) {
        return new _Kysely({
          ...this.#props,
          executor: this.#props.executor.withPluginAtFront(new WithSchemaPlugin(schema2))
        });
      }
      /**
       * Returns a copy of this Kysely instance with tables added to its
       * database type.
       *
       * This method only modifies the types and doesn't affect any of the
       * executed queries in any way.
       *
       * ### Examples
       *
       * The following example adds and uses a temporary table:
       *
       * ```ts
       * await db.schema
       *   .createTable('temp_table')
       *   .temporary()
       *   .addColumn('some_column', 'integer')
       *   .execute()
       *
       * const tempDb = db.withTables<{
       *   temp_table: {
       *     some_column: number
       *   }
       * }>()
       *
       * await tempDb
       *   .insertInto('temp_table')
       *   .values({ some_column: 100 })
       *   .execute()
       * ```
       */
      withTables() {
        return new _Kysely({ ...this.#props });
      }
      /**
       * Releases all resources and disconnects from the database.
       *
       * You need to call this when you are done using the `Kysely` instance.
       */
      async destroy() {
        await this.#props.driver.destroy();
      }
      /**
       * Returns true if this `Kysely` instance is a transaction.
       *
       * You can also use `db instanceof Transaction`.
       */
      get isTransaction() {
        return false;
      }
      /**
       * @internal
       * @private
       */
      getExecutor() {
        return this.#props.executor;
      }
      /**
       * Executes a given compiled query or query builder.
       *
       * See {@link https://github.com/kysely-org/kysely/blob/master/site/docs/recipes/0004-splitting-query-building-and-execution.md#execute-compiled-queries splitting build, compile and execute code recipe} for more information.
       */
      executeQuery(query, queryId = createQueryId()) {
        const compiledQuery = isCompilable(query) ? query.compile() : query;
        return this.getExecutor().executeQuery(compiledQuery, queryId);
      }
      async [Symbol.asyncDispose]() {
        await this.destroy();
      }
    };
    Transaction = class _Transaction extends Kysely {
      static {
        __name(this, "_Transaction");
      }
      static {
        __name2(this, "Transaction");
      }
      #props;
      constructor(props) {
        super(props);
        this.#props = props;
      }
      // The return type is `true` instead of `boolean` to make Kysely<DB>
      // unassignable to Transaction<DB> while allowing assignment the
      // other way around.
      get isTransaction() {
        return true;
      }
      transaction() {
        throw new Error("calling the transaction method for a Transaction is not supported");
      }
      connection() {
        throw new Error("calling the connection method for a Transaction is not supported");
      }
      async destroy() {
        throw new Error("calling the destroy method for a Transaction is not supported");
      }
      withPlugin(plugin) {
        return new _Transaction({
          ...this.#props,
          executor: this.#props.executor.withPlugin(plugin)
        });
      }
      withoutPlugins() {
        return new _Transaction({
          ...this.#props,
          executor: this.#props.executor.withoutPlugins()
        });
      }
      withSchema(schema2) {
        return new _Transaction({
          ...this.#props,
          executor: this.#props.executor.withPluginAtFront(new WithSchemaPlugin(schema2))
        });
      }
      withTables() {
        return new _Transaction({ ...this.#props });
      }
    };
    __name2(isKyselyProps, "isKyselyProps");
    ConnectionBuilder = class {
      static {
        __name(this, "ConnectionBuilder");
      }
      static {
        __name2(this, "ConnectionBuilder");
      }
      #props;
      constructor(props) {
        this.#props = freeze(props);
      }
      async execute(callback) {
        return this.#props.executor.provideConnection(async (connection) => {
          const executor = this.#props.executor.withConnectionProvider(new SingleConnectionProvider(connection));
          const db = new Kysely({
            ...this.#props,
            executor
          });
          return await callback(db);
        });
      }
    };
    TransactionBuilder = class _TransactionBuilder {
      static {
        __name(this, "_TransactionBuilder");
      }
      static {
        __name2(this, "TransactionBuilder");
      }
      #props;
      constructor(props) {
        this.#props = freeze(props);
      }
      setAccessMode(accessMode) {
        return new _TransactionBuilder({
          ...this.#props,
          accessMode
        });
      }
      setIsolationLevel(isolationLevel) {
        return new _TransactionBuilder({
          ...this.#props,
          isolationLevel
        });
      }
      async execute(callback) {
        const { isolationLevel, accessMode, ...kyselyProps } = this.#props;
        const settings = { isolationLevel, accessMode };
        validateTransactionSettings(settings);
        return this.#props.executor.provideConnection(async (connection) => {
          const executor = this.#props.executor.withConnectionProvider(new SingleConnectionProvider(connection));
          const transaction = new Transaction({
            ...kyselyProps,
            executor
          });
          try {
            await this.#props.driver.beginTransaction(connection, settings);
            const result = await callback(transaction);
            await this.#props.driver.commitTransaction(connection);
            return result;
          } catch (error2) {
            await this.#props.driver.rollbackTransaction(connection);
            throw error2;
          }
        });
      }
    };
    ControlledTransactionBuilder = class _ControlledTransactionBuilder {
      static {
        __name(this, "_ControlledTransactionBuilder");
      }
      static {
        __name2(this, "ControlledTransactionBuilder");
      }
      #props;
      constructor(props) {
        this.#props = freeze(props);
      }
      setAccessMode(accessMode) {
        return new _ControlledTransactionBuilder({
          ...this.#props,
          accessMode
        });
      }
      setIsolationLevel(isolationLevel) {
        return new _ControlledTransactionBuilder({
          ...this.#props,
          isolationLevel
        });
      }
      async execute() {
        const { isolationLevel, accessMode, ...props } = this.#props;
        const settings = { isolationLevel, accessMode };
        validateTransactionSettings(settings);
        const connection = await provideControlledConnection(this.#props.executor);
        await this.#props.driver.beginTransaction(connection.connection, settings);
        return new ControlledTransaction({
          ...props,
          connection,
          executor: this.#props.executor.withConnectionProvider(new SingleConnectionProvider(connection.connection))
        });
      }
    };
    ControlledTransaction = class _ControlledTransaction extends Transaction {
      static {
        __name(this, "_ControlledTransaction");
      }
      static {
        __name2(this, "ControlledTransaction");
      }
      #props;
      #compileQuery;
      #state;
      constructor(props) {
        const state = { isCommitted: false, isRolledBack: false };
        props = {
          ...props,
          executor: new NotCommittedOrRolledBackAssertingExecutor(props.executor, state)
        };
        const { connection, ...transactionProps } = props;
        super(transactionProps);
        this.#props = freeze(props);
        this.#state = state;
        const queryId = createQueryId();
        this.#compileQuery = (node) => props.executor.compileQuery(node, queryId);
      }
      get isCommitted() {
        return this.#state.isCommitted;
      }
      get isRolledBack() {
        return this.#state.isRolledBack;
      }
      /**
       * Commits the transaction.
       *
       * See {@link rollback}.
       *
       * ### Examples
       *
       * ```ts
       * import type { Kysely } from 'kysely'
       * import type { Database } from 'type-editor' // imaginary module
       *
       * const trx = await db.startTransaction().execute()
       *
       * try {
       *   await doSomething(trx)
       *
       *   await trx.commit().execute()
       * } catch (error) {
       *   await trx.rollback().execute()
       * }
       *
       * async function doSomething(kysely: Kysely<Database>) {}
       * ```
       */
      commit() {
        assertNotCommittedOrRolledBack(this.#state);
        return new Command(async () => {
          await this.#props.driver.commitTransaction(this.#props.connection.connection);
          this.#state.isCommitted = true;
          this.#props.connection.release();
        });
      }
      /**
       * Rolls back the transaction.
       *
       * See {@link commit} and {@link rollbackToSavepoint}.
       *
       * ### Examples
       *
       * ```ts
       * import type { Kysely } from 'kysely'
       * import type { Database } from 'type-editor' // imaginary module
       *
       * const trx = await db.startTransaction().execute()
       *
       * try {
       *   await doSomething(trx)
       *
       *   await trx.commit().execute()
       * } catch (error) {
       *   await trx.rollback().execute()
       * }
       *
       * async function doSomething(kysely: Kysely<Database>) {}
       * ```
       */
      rollback() {
        assertNotCommittedOrRolledBack(this.#state);
        return new Command(async () => {
          await this.#props.driver.rollbackTransaction(this.#props.connection.connection);
          this.#state.isRolledBack = true;
          this.#props.connection.release();
        });
      }
      /**
       * Creates a savepoint with a given name.
       *
       * See {@link rollbackToSavepoint} and {@link releaseSavepoint}.
       *
       * For a type-safe experience, you should use the returned instance from now on.
       *
       * ### Examples
       *
       * ```ts
       * import type { Kysely } from 'kysely'
       * import type { Database } from 'type-editor' // imaginary module
       *
       * const trx = await db.startTransaction().execute()
       *
       * await insertJennifer(trx)
       *
       * const trxAfterJennifer = await trx.savepoint('after_jennifer').execute()
       *
       * try {
       *   await doSomething(trxAfterJennifer)
       * } catch (error) {
       *   await trxAfterJennifer.rollbackToSavepoint('after_jennifer').execute()
       * }
       *
       * async function insertJennifer(kysely: Kysely<Database>) {}
       * async function doSomething(kysely: Kysely<Database>) {}
       * ```
       */
      savepoint(savepointName) {
        assertNotCommittedOrRolledBack(this.#state);
        return new Command(async () => {
          await this.#props.driver.savepoint?.(this.#props.connection.connection, savepointName, this.#compileQuery);
          return new _ControlledTransaction({ ...this.#props });
        });
      }
      /**
       * Rolls back to a savepoint with a given name.
       *
       * See {@link savepoint} and {@link releaseSavepoint}.
       *
       * You must use the same instance returned by {@link savepoint}, or
       * escape the type-check by using `as any`.
       *
       * ### Examples
       *
       * ```ts
       * import type { Kysely } from 'kysely'
       * import type { Database } from 'type-editor' // imaginary module
       *
       * const trx = await db.startTransaction().execute()
       *
       * await insertJennifer(trx)
       *
       * const trxAfterJennifer = await trx.savepoint('after_jennifer').execute()
       *
       * try {
       *   await doSomething(trxAfterJennifer)
       * } catch (error) {
       *   await trxAfterJennifer.rollbackToSavepoint('after_jennifer').execute()
       * }
       *
       * async function insertJennifer(kysely: Kysely<Database>) {}
       * async function doSomething(kysely: Kysely<Database>) {}
       * ```
       */
      rollbackToSavepoint(savepointName) {
        assertNotCommittedOrRolledBack(this.#state);
        return new Command(async () => {
          await this.#props.driver.rollbackToSavepoint?.(this.#props.connection.connection, savepointName, this.#compileQuery);
          return new _ControlledTransaction({ ...this.#props });
        });
      }
      /**
       * Releases a savepoint with a given name.
       *
       * See {@link savepoint} and {@link rollbackToSavepoint}.
       *
       * You must use the same instance returned by {@link savepoint}, or
       * escape the type-check by using `as any`.
       *
       * ### Examples
       *
       * ```ts
       * import type { Kysely } from 'kysely'
       * import type { Database } from 'type-editor' // imaginary module
       *
       * const trx = await db.startTransaction().execute()
       *
       * await insertJennifer(trx)
       *
       * const trxAfterJennifer = await trx.savepoint('after_jennifer').execute()
       *
       * try {
       *   await doSomething(trxAfterJennifer)
       * } catch (error) {
       *   await trxAfterJennifer.rollbackToSavepoint('after_jennifer').execute()
       * }
       *
       * await trxAfterJennifer.releaseSavepoint('after_jennifer').execute()
       *
       * await doSomethingElse(trx)
       *
       * async function insertJennifer(kysely: Kysely<Database>) {}
       * async function doSomething(kysely: Kysely<Database>) {}
       * async function doSomethingElse(kysely: Kysely<Database>) {}
       * ```
       */
      releaseSavepoint(savepointName) {
        assertNotCommittedOrRolledBack(this.#state);
        return new Command(async () => {
          await this.#props.driver.releaseSavepoint?.(this.#props.connection.connection, savepointName, this.#compileQuery);
          return new _ControlledTransaction({ ...this.#props });
        });
      }
      withPlugin(plugin) {
        return new _ControlledTransaction({
          ...this.#props,
          executor: this.#props.executor.withPlugin(plugin)
        });
      }
      withoutPlugins() {
        return new _ControlledTransaction({
          ...this.#props,
          executor: this.#props.executor.withoutPlugins()
        });
      }
      withSchema(schema2) {
        return new _ControlledTransaction({
          ...this.#props,
          executor: this.#props.executor.withPluginAtFront(new WithSchemaPlugin(schema2))
        });
      }
      withTables() {
        return new _ControlledTransaction({ ...this.#props });
      }
    };
    Command = class {
      static {
        __name(this, "Command");
      }
      static {
        __name2(this, "Command");
      }
      #cb;
      constructor(cb) {
        this.#cb = cb;
      }
      /**
       * Executes the command.
       */
      async execute() {
        return await this.#cb();
      }
    };
    __name2(assertNotCommittedOrRolledBack, "assertNotCommittedOrRolledBack");
    NotCommittedOrRolledBackAssertingExecutor = class _NotCommittedOrRolledBackAssertingExecutor {
      static {
        __name(this, "_NotCommittedOrRolledBackAssertingExecutor");
      }
      static {
        __name2(this, "NotCommittedOrRolledBackAssertingExecutor");
      }
      #executor;
      #state;
      constructor(executor, state) {
        if (executor instanceof _NotCommittedOrRolledBackAssertingExecutor) {
          this.#executor = executor.#executor;
        } else {
          this.#executor = executor;
        }
        this.#state = state;
      }
      get adapter() {
        return this.#executor.adapter;
      }
      get plugins() {
        return this.#executor.plugins;
      }
      transformQuery(node, queryId) {
        return this.#executor.transformQuery(node, queryId);
      }
      compileQuery(node, queryId) {
        return this.#executor.compileQuery(node, queryId);
      }
      provideConnection(consumer) {
        return this.#executor.provideConnection(consumer);
      }
      executeQuery(compiledQuery, queryId) {
        assertNotCommittedOrRolledBack(this.#state);
        return this.#executor.executeQuery(compiledQuery, queryId);
      }
      stream(compiledQuery, chunkSize, queryId) {
        assertNotCommittedOrRolledBack(this.#state);
        return this.#executor.stream(compiledQuery, chunkSize, queryId);
      }
      withConnectionProvider(connectionProvider) {
        return new _NotCommittedOrRolledBackAssertingExecutor(this.#executor.withConnectionProvider(connectionProvider), this.#state);
      }
      withPlugin(plugin) {
        return new _NotCommittedOrRolledBackAssertingExecutor(this.#executor.withPlugin(plugin), this.#state);
      }
      withPlugins(plugins) {
        return new _NotCommittedOrRolledBackAssertingExecutor(this.#executor.withPlugins(plugins), this.#state);
      }
      withPluginAtFront(plugin) {
        return new _NotCommittedOrRolledBackAssertingExecutor(this.#executor.withPluginAtFront(plugin), this.#state);
      }
      withoutPlugins() {
        return new _NotCommittedOrRolledBackAssertingExecutor(this.#executor.withoutPlugins(), this.#state);
      }
    };
  }
});
var init_where_interface = __esm({
  "../node_modules/kysely/dist/esm/query-builder/where-interface.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
  }
});
var init_returning_interface = __esm({
  "../node_modules/kysely/dist/esm/query-builder/returning-interface.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
  }
});
var init_output_interface = __esm({
  "../node_modules/kysely/dist/esm/query-builder/output-interface.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
  }
});
var init_having_interface = __esm({
  "../node_modules/kysely/dist/esm/query-builder/having-interface.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
  }
});
var init_order_by_interface = __esm({
  "../node_modules/kysely/dist/esm/query-builder/order-by-interface.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
  }
});
function createRawBuilder(props) {
  return new RawBuilderImpl(props);
}
__name(createRawBuilder, "createRawBuilder");
var RawBuilderImpl;
var AliasedRawBuilderImpl;
var init_raw_builder = __esm({
  "../node_modules/kysely/dist/esm/raw-builder/raw-builder.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_alias_node();
    init_object_utils();
    init_noop_query_executor();
    init_identifier_node();
    init_operation_node_source();
    RawBuilderImpl = class _RawBuilderImpl {
      static {
        __name(this, "_RawBuilderImpl");
      }
      static {
        __name2(this, "RawBuilderImpl");
      }
      #props;
      constructor(props) {
        this.#props = freeze(props);
      }
      get expressionType() {
        return void 0;
      }
      get isRawBuilder() {
        return true;
      }
      as(alias) {
        return new AliasedRawBuilderImpl(this, alias);
      }
      $castTo() {
        return new _RawBuilderImpl({ ...this.#props });
      }
      $notNull() {
        return new _RawBuilderImpl(this.#props);
      }
      withPlugin(plugin) {
        return new _RawBuilderImpl({
          ...this.#props,
          plugins: this.#props.plugins !== void 0 ? freeze([...this.#props.plugins, plugin]) : freeze([plugin])
        });
      }
      toOperationNode() {
        return this.#toOperationNode(this.#getExecutor());
      }
      compile(executorProvider) {
        return this.#compile(this.#getExecutor(executorProvider));
      }
      async execute(executorProvider) {
        const executor = this.#getExecutor(executorProvider);
        return executor.executeQuery(this.#compile(executor), this.#props.queryId);
      }
      #getExecutor(executorProvider) {
        const executor = executorProvider !== void 0 ? executorProvider.getExecutor() : NOOP_QUERY_EXECUTOR;
        return this.#props.plugins !== void 0 ? executor.withPlugins(this.#props.plugins) : executor;
      }
      #toOperationNode(executor) {
        return executor.transformQuery(this.#props.rawNode, this.#props.queryId);
      }
      #compile(executor) {
        return executor.compileQuery(this.#toOperationNode(executor), this.#props.queryId);
      }
    };
    __name2(createRawBuilder, "createRawBuilder");
    AliasedRawBuilderImpl = class {
      static {
        __name(this, "AliasedRawBuilderImpl");
      }
      static {
        __name2(this, "AliasedRawBuilderImpl");
      }
      #rawBuilder;
      #alias;
      constructor(rawBuilder, alias) {
        this.#rawBuilder = rawBuilder;
        this.#alias = alias;
      }
      get expression() {
        return this.#rawBuilder;
      }
      get alias() {
        return this.#alias;
      }
      get rawBuilder() {
        return this.#rawBuilder;
      }
      toOperationNode() {
        return AliasNode.create(this.#rawBuilder.toOperationNode(), isOperationNodeSource(this.#alias) ? this.#alias.toOperationNode() : IdentifierNode.create(this.#alias));
      }
    };
  }
});
function parseParameter(param) {
  if (isOperationNodeSource(param)) {
    return param.toOperationNode();
  }
  return parseValueExpression(param);
}
__name(parseParameter, "parseParameter");
var sql;
var init_sql3 = __esm({
  "../node_modules/kysely/dist/esm/raw-builder/sql.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_identifier_node();
    init_operation_node_source();
    init_raw_node();
    init_value_node();
    init_reference_parser();
    init_table_parser();
    init_value_parser();
    init_query_id();
    init_raw_builder();
    sql = Object.assign((sqlFragments, ...parameters) => {
      return createRawBuilder({
        queryId: createQueryId(),
        rawNode: RawNode.create(sqlFragments, parameters?.map(parseParameter) ?? [])
      });
    }, {
      ref(columnReference) {
        return createRawBuilder({
          queryId: createQueryId(),
          rawNode: RawNode.createWithChild(parseStringReference(columnReference))
        });
      },
      val(value) {
        return createRawBuilder({
          queryId: createQueryId(),
          rawNode: RawNode.createWithChild(parseValueExpression(value))
        });
      },
      value(value) {
        return this.val(value);
      },
      table(tableReference) {
        return createRawBuilder({
          queryId: createQueryId(),
          rawNode: RawNode.createWithChild(parseTable(tableReference))
        });
      },
      id(...ids) {
        const fragments = new Array(ids.length + 1).fill(".");
        fragments[0] = "";
        fragments[fragments.length - 1] = "";
        return createRawBuilder({
          queryId: createQueryId(),
          rawNode: RawNode.create(fragments, ids.map(IdentifierNode.create))
        });
      },
      lit(value) {
        return createRawBuilder({
          queryId: createQueryId(),
          rawNode: RawNode.createWithChild(ValueNode.createImmediate(value))
        });
      },
      literal(value) {
        return this.lit(value);
      },
      raw(sql2) {
        return createRawBuilder({
          queryId: createQueryId(),
          rawNode: RawNode.createWithSql(sql2)
        });
      },
      join(array3, separator = sql`, `) {
        const nodes = new Array(Math.max(2 * array3.length - 1, 0));
        const sep = separator.toOperationNode();
        for (let i = 0; i < array3.length; ++i) {
          nodes[2 * i] = parseParameter(array3[i]);
          if (i !== array3.length - 1) {
            nodes[2 * i + 1] = sep;
          }
        }
        return createRawBuilder({
          queryId: createQueryId(),
          rawNode: RawNode.createWithChildren(nodes)
        });
      }
    });
    __name2(parseParameter, "parseParameter");
  }
});
var init_query_executor = __esm({
  "../node_modules/kysely/dist/esm/query-executor/query-executor.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
  }
});
var init_query_executor_provider = __esm({
  "../node_modules/kysely/dist/esm/query-executor/query-executor-provider.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
  }
});
var OperationNodeVisitor;
var init_operation_node_visitor = __esm({
  "../node_modules/kysely/dist/esm/operation-node/operation-node-visitor.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    OperationNodeVisitor = class {
      static {
        __name(this, "OperationNodeVisitor");
      }
      static {
        __name2(this, "OperationNodeVisitor");
      }
      nodeStack = [];
      get parentNode() {
        return this.nodeStack[this.nodeStack.length - 2];
      }
      #visitors = freeze({
        AliasNode: this.visitAlias.bind(this),
        ColumnNode: this.visitColumn.bind(this),
        IdentifierNode: this.visitIdentifier.bind(this),
        SchemableIdentifierNode: this.visitSchemableIdentifier.bind(this),
        RawNode: this.visitRaw.bind(this),
        ReferenceNode: this.visitReference.bind(this),
        SelectQueryNode: this.visitSelectQuery.bind(this),
        SelectionNode: this.visitSelection.bind(this),
        TableNode: this.visitTable.bind(this),
        FromNode: this.visitFrom.bind(this),
        SelectAllNode: this.visitSelectAll.bind(this),
        AndNode: this.visitAnd.bind(this),
        OrNode: this.visitOr.bind(this),
        ValueNode: this.visitValue.bind(this),
        ValueListNode: this.visitValueList.bind(this),
        PrimitiveValueListNode: this.visitPrimitiveValueList.bind(this),
        ParensNode: this.visitParens.bind(this),
        JoinNode: this.visitJoin.bind(this),
        OperatorNode: this.visitOperator.bind(this),
        WhereNode: this.visitWhere.bind(this),
        InsertQueryNode: this.visitInsertQuery.bind(this),
        DeleteQueryNode: this.visitDeleteQuery.bind(this),
        ReturningNode: this.visitReturning.bind(this),
        CreateTableNode: this.visitCreateTable.bind(this),
        AddColumnNode: this.visitAddColumn.bind(this),
        ColumnDefinitionNode: this.visitColumnDefinition.bind(this),
        DropTableNode: this.visitDropTable.bind(this),
        DataTypeNode: this.visitDataType.bind(this),
        OrderByNode: this.visitOrderBy.bind(this),
        OrderByItemNode: this.visitOrderByItem.bind(this),
        GroupByNode: this.visitGroupBy.bind(this),
        GroupByItemNode: this.visitGroupByItem.bind(this),
        UpdateQueryNode: this.visitUpdateQuery.bind(this),
        ColumnUpdateNode: this.visitColumnUpdate.bind(this),
        LimitNode: this.visitLimit.bind(this),
        OffsetNode: this.visitOffset.bind(this),
        OnConflictNode: this.visitOnConflict.bind(this),
        OnDuplicateKeyNode: this.visitOnDuplicateKey.bind(this),
        CreateIndexNode: this.visitCreateIndex.bind(this),
        DropIndexNode: this.visitDropIndex.bind(this),
        ListNode: this.visitList.bind(this),
        PrimaryKeyConstraintNode: this.visitPrimaryKeyConstraint.bind(this),
        UniqueConstraintNode: this.visitUniqueConstraint.bind(this),
        ReferencesNode: this.visitReferences.bind(this),
        CheckConstraintNode: this.visitCheckConstraint.bind(this),
        WithNode: this.visitWith.bind(this),
        CommonTableExpressionNode: this.visitCommonTableExpression.bind(this),
        CommonTableExpressionNameNode: this.visitCommonTableExpressionName.bind(this),
        HavingNode: this.visitHaving.bind(this),
        CreateSchemaNode: this.visitCreateSchema.bind(this),
        DropSchemaNode: this.visitDropSchema.bind(this),
        AlterTableNode: this.visitAlterTable.bind(this),
        DropColumnNode: this.visitDropColumn.bind(this),
        RenameColumnNode: this.visitRenameColumn.bind(this),
        AlterColumnNode: this.visitAlterColumn.bind(this),
        ModifyColumnNode: this.visitModifyColumn.bind(this),
        AddConstraintNode: this.visitAddConstraint.bind(this),
        DropConstraintNode: this.visitDropConstraint.bind(this),
        RenameConstraintNode: this.visitRenameConstraint.bind(this),
        ForeignKeyConstraintNode: this.visitForeignKeyConstraint.bind(this),
        CreateViewNode: this.visitCreateView.bind(this),
        RefreshMaterializedViewNode: this.visitRefreshMaterializedView.bind(this),
        DropViewNode: this.visitDropView.bind(this),
        GeneratedNode: this.visitGenerated.bind(this),
        DefaultValueNode: this.visitDefaultValue.bind(this),
        OnNode: this.visitOn.bind(this),
        ValuesNode: this.visitValues.bind(this),
        SelectModifierNode: this.visitSelectModifier.bind(this),
        CreateTypeNode: this.visitCreateType.bind(this),
        DropTypeNode: this.visitDropType.bind(this),
        ExplainNode: this.visitExplain.bind(this),
        DefaultInsertValueNode: this.visitDefaultInsertValue.bind(this),
        AggregateFunctionNode: this.visitAggregateFunction.bind(this),
        OverNode: this.visitOver.bind(this),
        PartitionByNode: this.visitPartitionBy.bind(this),
        PartitionByItemNode: this.visitPartitionByItem.bind(this),
        SetOperationNode: this.visitSetOperation.bind(this),
        BinaryOperationNode: this.visitBinaryOperation.bind(this),
        UnaryOperationNode: this.visitUnaryOperation.bind(this),
        UsingNode: this.visitUsing.bind(this),
        FunctionNode: this.visitFunction.bind(this),
        CaseNode: this.visitCase.bind(this),
        WhenNode: this.visitWhen.bind(this),
        JSONReferenceNode: this.visitJSONReference.bind(this),
        JSONPathNode: this.visitJSONPath.bind(this),
        JSONPathLegNode: this.visitJSONPathLeg.bind(this),
        JSONOperatorChainNode: this.visitJSONOperatorChain.bind(this),
        TupleNode: this.visitTuple.bind(this),
        MergeQueryNode: this.visitMergeQuery.bind(this),
        MatchedNode: this.visitMatched.bind(this),
        AddIndexNode: this.visitAddIndex.bind(this),
        CastNode: this.visitCast.bind(this),
        FetchNode: this.visitFetch.bind(this),
        TopNode: this.visitTop.bind(this),
        OutputNode: this.visitOutput.bind(this),
        OrActionNode: this.visitOrAction.bind(this),
        CollateNode: this.visitCollate.bind(this)
      });
      visitNode = /* @__PURE__ */ __name2((node) => {
        this.nodeStack.push(node);
        this.#visitors[node.kind](node);
        this.nodeStack.pop();
      }, "visitNode");
    };
  }
});
var LIT_WRAP_REGEX;
var DefaultQueryCompiler;
var SELECT_MODIFIER_SQL;
var SELECT_MODIFIER_PRIORITY;
var JOIN_TYPE_SQL;
var init_default_query_compiler = __esm({
  "../node_modules/kysely/dist/esm/query-compiler/default-query-compiler.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_create_table_node();
    init_insert_query_node();
    init_operation_node_visitor();
    init_operator_node();
    init_parens_node();
    init_query_node();
    init_object_utils();
    init_create_view_node();
    init_set_operation_node();
    init_merge_query_node();
    init_log_once();
    LIT_WRAP_REGEX = /'/g;
    DefaultQueryCompiler = class extends OperationNodeVisitor {
      static {
        __name(this, "DefaultQueryCompiler");
      }
      static {
        __name2(this, "DefaultQueryCompiler");
      }
      #sql = "";
      #parameters = [];
      get numParameters() {
        return this.#parameters.length;
      }
      compileQuery(node, queryId) {
        this.#sql = "";
        this.#parameters = [];
        this.nodeStack.splice(0, this.nodeStack.length);
        this.visitNode(node);
        return freeze({
          query: node,
          queryId,
          sql: this.getSql(),
          parameters: [...this.#parameters]
        });
      }
      getSql() {
        return this.#sql;
      }
      visitSelectQuery(node) {
        const wrapInParens = this.parentNode !== void 0 && !ParensNode.is(this.parentNode) && !InsertQueryNode.is(this.parentNode) && !CreateTableNode.is(this.parentNode) && !CreateViewNode.is(this.parentNode) && !SetOperationNode.is(this.parentNode);
        if (this.parentNode === void 0 && node.explain) {
          this.visitNode(node.explain);
          this.append(" ");
        }
        if (wrapInParens) {
          this.append("(");
        }
        if (node.with) {
          this.visitNode(node.with);
          this.append(" ");
        }
        this.append("select");
        if (node.distinctOn) {
          this.append(" ");
          this.compileDistinctOn(node.distinctOn);
        }
        if (node.frontModifiers?.length) {
          this.append(" ");
          this.compileList(node.frontModifiers, " ");
        }
        if (node.top) {
          this.append(" ");
          this.visitNode(node.top);
        }
        if (node.selections) {
          this.append(" ");
          this.compileList(node.selections);
        }
        if (node.from) {
          this.append(" ");
          this.visitNode(node.from);
        }
        if (node.joins) {
          this.append(" ");
          this.compileList(node.joins, " ");
        }
        if (node.where) {
          this.append(" ");
          this.visitNode(node.where);
        }
        if (node.groupBy) {
          this.append(" ");
          this.visitNode(node.groupBy);
        }
        if (node.having) {
          this.append(" ");
          this.visitNode(node.having);
        }
        if (node.setOperations) {
          this.append(" ");
          this.compileList(node.setOperations, " ");
        }
        if (node.orderBy) {
          this.append(" ");
          this.visitNode(node.orderBy);
        }
        if (node.limit) {
          this.append(" ");
          this.visitNode(node.limit);
        }
        if (node.offset) {
          this.append(" ");
          this.visitNode(node.offset);
        }
        if (node.fetch) {
          this.append(" ");
          this.visitNode(node.fetch);
        }
        if (node.endModifiers?.length) {
          this.append(" ");
          this.compileList(this.sortSelectModifiers([...node.endModifiers]), " ");
        }
        if (wrapInParens) {
          this.append(")");
        }
      }
      visitFrom(node) {
        this.append("from ");
        this.compileList(node.froms);
      }
      visitSelection(node) {
        this.visitNode(node.selection);
      }
      visitColumn(node) {
        this.visitNode(node.column);
      }
      compileDistinctOn(expressions) {
        this.append("distinct on (");
        this.compileList(expressions);
        this.append(")");
      }
      compileList(nodes, separator = ", ") {
        const lastIndex = nodes.length - 1;
        for (let i = 0; i <= lastIndex; i++) {
          this.visitNode(nodes[i]);
          if (i < lastIndex) {
            this.append(separator);
          }
        }
      }
      visitWhere(node) {
        this.append("where ");
        this.visitNode(node.where);
      }
      visitHaving(node) {
        this.append("having ");
        this.visitNode(node.having);
      }
      visitInsertQuery(node) {
        const rootQueryNode = this.nodeStack.find(QueryNode.is);
        const isSubQuery = rootQueryNode !== node;
        if (!isSubQuery && node.explain) {
          this.visitNode(node.explain);
          this.append(" ");
        }
        if (isSubQuery && !MergeQueryNode.is(rootQueryNode)) {
          this.append("(");
        }
        if (node.with) {
          this.visitNode(node.with);
          this.append(" ");
        }
        this.append(node.replace ? "replace" : "insert");
        if (node.ignore) {
          logOnce("`InsertQueryNode.ignore` is deprecated. Use `InsertQueryNode.orAction` instead.");
          this.append(" ignore");
        }
        if (node.orAction) {
          this.append(" ");
          this.visitNode(node.orAction);
        }
        if (node.top) {
          this.append(" ");
          this.visitNode(node.top);
        }
        if (node.into) {
          this.append(" into ");
          this.visitNode(node.into);
        }
        if (node.columns) {
          this.append(" (");
          this.compileList(node.columns);
          this.append(")");
        }
        if (node.output) {
          this.append(" ");
          this.visitNode(node.output);
        }
        if (node.values) {
          this.append(" ");
          this.visitNode(node.values);
        }
        if (node.defaultValues) {
          this.append(" ");
          this.append("default values");
        }
        if (node.onConflict) {
          this.append(" ");
          this.visitNode(node.onConflict);
        }
        if (node.onDuplicateKey) {
          this.append(" ");
          this.visitNode(node.onDuplicateKey);
        }
        if (node.returning) {
          this.append(" ");
          this.visitNode(node.returning);
        }
        if (isSubQuery && !MergeQueryNode.is(rootQueryNode)) {
          this.append(")");
        }
        if (node.endModifiers?.length) {
          this.append(" ");
          this.compileList(node.endModifiers, " ");
        }
      }
      visitValues(node) {
        this.append("values ");
        this.compileList(node.values);
      }
      visitDeleteQuery(node) {
        const isSubQuery = this.nodeStack.find(QueryNode.is) !== node;
        if (!isSubQuery && node.explain) {
          this.visitNode(node.explain);
          this.append(" ");
        }
        if (isSubQuery) {
          this.append("(");
        }
        if (node.with) {
          this.visitNode(node.with);
          this.append(" ");
        }
        this.append("delete ");
        if (node.top) {
          this.visitNode(node.top);
          this.append(" ");
        }
        this.visitNode(node.from);
        if (node.output) {
          this.append(" ");
          this.visitNode(node.output);
        }
        if (node.using) {
          this.append(" ");
          this.visitNode(node.using);
        }
        if (node.joins) {
          this.append(" ");
          this.compileList(node.joins, " ");
        }
        if (node.where) {
          this.append(" ");
          this.visitNode(node.where);
        }
        if (node.orderBy) {
          this.append(" ");
          this.visitNode(node.orderBy);
        }
        if (node.limit) {
          this.append(" ");
          this.visitNode(node.limit);
        }
        if (node.returning) {
          this.append(" ");
          this.visitNode(node.returning);
        }
        if (isSubQuery) {
          this.append(")");
        }
        if (node.endModifiers?.length) {
          this.append(" ");
          this.compileList(node.endModifiers, " ");
        }
      }
      visitReturning(node) {
        this.append("returning ");
        this.compileList(node.selections);
      }
      visitAlias(node) {
        this.visitNode(node.node);
        this.append(" as ");
        this.visitNode(node.alias);
      }
      visitReference(node) {
        if (node.table) {
          this.visitNode(node.table);
          this.append(".");
        }
        this.visitNode(node.column);
      }
      visitSelectAll(_) {
        this.append("*");
      }
      visitIdentifier(node) {
        this.append(this.getLeftIdentifierWrapper());
        this.compileUnwrappedIdentifier(node);
        this.append(this.getRightIdentifierWrapper());
      }
      compileUnwrappedIdentifier(node) {
        if (!isString(node.name)) {
          throw new Error("a non-string identifier was passed to compileUnwrappedIdentifier.");
        }
        this.append(this.sanitizeIdentifier(node.name));
      }
      visitAnd(node) {
        this.visitNode(node.left);
        this.append(" and ");
        this.visitNode(node.right);
      }
      visitOr(node) {
        this.visitNode(node.left);
        this.append(" or ");
        this.visitNode(node.right);
      }
      visitValue(node) {
        if (node.immediate) {
          this.appendImmediateValue(node.value);
        } else {
          this.appendValue(node.value);
        }
      }
      visitValueList(node) {
        this.append("(");
        this.compileList(node.values);
        this.append(")");
      }
      visitTuple(node) {
        this.append("(");
        this.compileList(node.values);
        this.append(")");
      }
      visitPrimitiveValueList(node) {
        this.append("(");
        const { values } = node;
        for (let i = 0; i < values.length; ++i) {
          this.appendValue(values[i]);
          if (i !== values.length - 1) {
            this.append(", ");
          }
        }
        this.append(")");
      }
      visitParens(node) {
        this.append("(");
        this.visitNode(node.node);
        this.append(")");
      }
      visitJoin(node) {
        this.append(JOIN_TYPE_SQL[node.joinType]);
        this.append(" ");
        this.visitNode(node.table);
        if (node.on) {
          this.append(" ");
          this.visitNode(node.on);
        }
      }
      visitOn(node) {
        this.append("on ");
        this.visitNode(node.on);
      }
      visitRaw(node) {
        const { sqlFragments, parameters: params } = node;
        for (let i = 0; i < sqlFragments.length; ++i) {
          this.append(sqlFragments[i]);
          if (params.length > i) {
            this.visitNode(params[i]);
          }
        }
      }
      visitOperator(node) {
        this.append(node.operator);
      }
      visitTable(node) {
        this.visitNode(node.table);
      }
      visitSchemableIdentifier(node) {
        if (node.schema) {
          this.visitNode(node.schema);
          this.append(".");
        }
        this.visitNode(node.identifier);
      }
      visitCreateTable(node) {
        this.append("create ");
        if (node.frontModifiers && node.frontModifiers.length > 0) {
          this.compileList(node.frontModifiers, " ");
          this.append(" ");
        }
        if (node.temporary) {
          this.append("temporary ");
        }
        this.append("table ");
        if (node.ifNotExists) {
          this.append("if not exists ");
        }
        this.visitNode(node.table);
        if (node.selectQuery) {
          this.append(" as ");
          this.visitNode(node.selectQuery);
        } else {
          this.append(" (");
          this.compileList([...node.columns, ...node.constraints ?? []]);
          this.append(")");
          if (node.onCommit) {
            this.append(" on commit ");
            this.append(node.onCommit);
          }
          if (node.endModifiers && node.endModifiers.length > 0) {
            this.append(" ");
            this.compileList(node.endModifiers, " ");
          }
        }
      }
      visitColumnDefinition(node) {
        if (node.ifNotExists) {
          this.append("if not exists ");
        }
        this.visitNode(node.column);
        this.append(" ");
        this.visitNode(node.dataType);
        if (node.unsigned) {
          this.append(" unsigned");
        }
        if (node.frontModifiers && node.frontModifiers.length > 0) {
          this.append(" ");
          this.compileList(node.frontModifiers, " ");
        }
        if (node.generated) {
          this.append(" ");
          this.visitNode(node.generated);
        }
        if (node.identity) {
          this.append(" identity");
        }
        if (node.defaultTo) {
          this.append(" ");
          this.visitNode(node.defaultTo);
        }
        if (node.notNull) {
          this.append(" not null");
        }
        if (node.unique) {
          this.append(" unique");
        }
        if (node.nullsNotDistinct) {
          this.append(" nulls not distinct");
        }
        if (node.primaryKey) {
          this.append(" primary key");
        }
        if (node.autoIncrement) {
          this.append(" ");
          this.append(this.getAutoIncrement());
        }
        if (node.references) {
          this.append(" ");
          this.visitNode(node.references);
        }
        if (node.check) {
          this.append(" ");
          this.visitNode(node.check);
        }
        if (node.endModifiers && node.endModifiers.length > 0) {
          this.append(" ");
          this.compileList(node.endModifiers, " ");
        }
      }
      getAutoIncrement() {
        return "auto_increment";
      }
      visitReferences(node) {
        this.append("references ");
        this.visitNode(node.table);
        this.append(" (");
        this.compileList(node.columns);
        this.append(")");
        if (node.onDelete) {
          this.append(" on delete ");
          this.append(node.onDelete);
        }
        if (node.onUpdate) {
          this.append(" on update ");
          this.append(node.onUpdate);
        }
      }
      visitDropTable(node) {
        this.append("drop table ");
        if (node.ifExists) {
          this.append("if exists ");
        }
        this.visitNode(node.table);
        if (node.cascade) {
          this.append(" cascade");
        }
      }
      visitDataType(node) {
        this.append(node.dataType);
      }
      visitOrderBy(node) {
        this.append("order by ");
        this.compileList(node.items);
      }
      visitOrderByItem(node) {
        this.visitNode(node.orderBy);
        if (node.collation) {
          this.append(" ");
          this.visitNode(node.collation);
        }
        if (node.direction) {
          this.append(" ");
          this.visitNode(node.direction);
        }
        if (node.nulls) {
          this.append(" nulls ");
          this.append(node.nulls);
        }
      }
      visitGroupBy(node) {
        this.append("group by ");
        this.compileList(node.items);
      }
      visitGroupByItem(node) {
        this.visitNode(node.groupBy);
      }
      visitUpdateQuery(node) {
        const rootQueryNode = this.nodeStack.find(QueryNode.is);
        const isSubQuery = rootQueryNode !== node;
        if (!isSubQuery && node.explain) {
          this.visitNode(node.explain);
          this.append(" ");
        }
        if (isSubQuery && !MergeQueryNode.is(rootQueryNode)) {
          this.append("(");
        }
        if (node.with) {
          this.visitNode(node.with);
          this.append(" ");
        }
        this.append("update ");
        if (node.top) {
          this.visitNode(node.top);
          this.append(" ");
        }
        if (node.table) {
          this.visitNode(node.table);
          this.append(" ");
        }
        this.append("set ");
        if (node.updates) {
          this.compileList(node.updates);
        }
        if (node.output) {
          this.append(" ");
          this.visitNode(node.output);
        }
        if (node.from) {
          this.append(" ");
          this.visitNode(node.from);
        }
        if (node.joins) {
          if (!node.from) {
            throw new Error("Joins in an update query are only supported as a part of a PostgreSQL 'update set from join' query. If you want to create a MySQL 'update join set' query, see https://kysely.dev/docs/examples/update/my-sql-joins");
          }
          this.append(" ");
          this.compileList(node.joins, " ");
        }
        if (node.where) {
          this.append(" ");
          this.visitNode(node.where);
        }
        if (node.orderBy) {
          this.append(" ");
          this.visitNode(node.orderBy);
        }
        if (node.limit) {
          this.append(" ");
          this.visitNode(node.limit);
        }
        if (node.returning) {
          this.append(" ");
          this.visitNode(node.returning);
        }
        if (isSubQuery && !MergeQueryNode.is(rootQueryNode)) {
          this.append(")");
        }
        if (node.endModifiers?.length) {
          this.append(" ");
          this.compileList(node.endModifiers, " ");
        }
      }
      visitColumnUpdate(node) {
        this.visitNode(node.column);
        this.append(" = ");
        this.visitNode(node.value);
      }
      visitLimit(node) {
        this.append("limit ");
        this.visitNode(node.limit);
      }
      visitOffset(node) {
        this.append("offset ");
        this.visitNode(node.offset);
      }
      visitOnConflict(node) {
        this.append("on conflict");
        if (node.columns) {
          this.append(" (");
          this.compileList(node.columns);
          this.append(")");
        } else if (node.constraint) {
          this.append(" on constraint ");
          this.visitNode(node.constraint);
        } else if (node.indexExpression) {
          this.append(" (");
          this.visitNode(node.indexExpression);
          this.append(")");
        }
        if (node.indexWhere) {
          this.append(" ");
          this.visitNode(node.indexWhere);
        }
        if (node.doNothing === true) {
          this.append(" do nothing");
        } else if (node.updates) {
          this.append(" do update set ");
          this.compileList(node.updates);
          if (node.updateWhere) {
            this.append(" ");
            this.visitNode(node.updateWhere);
          }
        }
      }
      visitOnDuplicateKey(node) {
        this.append("on duplicate key update ");
        this.compileList(node.updates);
      }
      visitCreateIndex(node) {
        this.append("create ");
        if (node.unique) {
          this.append("unique ");
        }
        this.append("index ");
        if (node.ifNotExists) {
          this.append("if not exists ");
        }
        this.visitNode(node.name);
        if (node.table) {
          this.append(" on ");
          this.visitNode(node.table);
        }
        if (node.using) {
          this.append(" using ");
          this.visitNode(node.using);
        }
        if (node.columns) {
          this.append(" (");
          this.compileList(node.columns);
          this.append(")");
        }
        if (node.nullsNotDistinct) {
          this.append(" nulls not distinct");
        }
        if (node.where) {
          this.append(" ");
          this.visitNode(node.where);
        }
      }
      visitDropIndex(node) {
        this.append("drop index ");
        if (node.ifExists) {
          this.append("if exists ");
        }
        this.visitNode(node.name);
        if (node.table) {
          this.append(" on ");
          this.visitNode(node.table);
        }
        if (node.cascade) {
          this.append(" cascade");
        }
      }
      visitCreateSchema(node) {
        this.append("create schema ");
        if (node.ifNotExists) {
          this.append("if not exists ");
        }
        this.visitNode(node.schema);
      }
      visitDropSchema(node) {
        this.append("drop schema ");
        if (node.ifExists) {
          this.append("if exists ");
        }
        this.visitNode(node.schema);
        if (node.cascade) {
          this.append(" cascade");
        }
      }
      visitPrimaryKeyConstraint(node) {
        if (node.name) {
          this.append("constraint ");
          this.visitNode(node.name);
          this.append(" ");
        }
        this.append("primary key (");
        this.compileList(node.columns);
        this.append(")");
        this.buildDeferrable(node);
      }
      buildDeferrable(node) {
        if (node.deferrable !== void 0) {
          if (node.deferrable) {
            this.append(" deferrable");
          } else {
            this.append(" not deferrable");
          }
        }
        if (node.initiallyDeferred !== void 0) {
          if (node.initiallyDeferred) {
            this.append(" initially deferred");
          } else {
            this.append(" initially immediate");
          }
        }
      }
      visitUniqueConstraint(node) {
        if (node.name) {
          this.append("constraint ");
          this.visitNode(node.name);
          this.append(" ");
        }
        this.append("unique");
        if (node.nullsNotDistinct) {
          this.append(" nulls not distinct");
        }
        this.append(" (");
        this.compileList(node.columns);
        this.append(")");
        this.buildDeferrable(node);
      }
      visitCheckConstraint(node) {
        if (node.name) {
          this.append("constraint ");
          this.visitNode(node.name);
          this.append(" ");
        }
        this.append("check (");
        this.visitNode(node.expression);
        this.append(")");
      }
      visitForeignKeyConstraint(node) {
        if (node.name) {
          this.append("constraint ");
          this.visitNode(node.name);
          this.append(" ");
        }
        this.append("foreign key (");
        this.compileList(node.columns);
        this.append(") ");
        this.visitNode(node.references);
        if (node.onDelete) {
          this.append(" on delete ");
          this.append(node.onDelete);
        }
        if (node.onUpdate) {
          this.append(" on update ");
          this.append(node.onUpdate);
        }
        this.buildDeferrable(node);
      }
      visitList(node) {
        this.compileList(node.items);
      }
      visitWith(node) {
        this.append("with ");
        if (node.recursive) {
          this.append("recursive ");
        }
        this.compileList(node.expressions);
      }
      visitCommonTableExpression(node) {
        this.visitNode(node.name);
        this.append(" as ");
        if (isBoolean(node.materialized)) {
          if (!node.materialized) {
            this.append("not ");
          }
          this.append("materialized ");
        }
        this.visitNode(node.expression);
      }
      visitCommonTableExpressionName(node) {
        this.visitNode(node.table);
        if (node.columns) {
          this.append("(");
          this.compileList(node.columns);
          this.append(")");
        }
      }
      visitAlterTable(node) {
        this.append("alter table ");
        this.visitNode(node.table);
        this.append(" ");
        if (node.renameTo) {
          this.append("rename to ");
          this.visitNode(node.renameTo);
        }
        if (node.setSchema) {
          this.append("set schema ");
          this.visitNode(node.setSchema);
        }
        if (node.addConstraint) {
          this.visitNode(node.addConstraint);
        }
        if (node.dropConstraint) {
          this.visitNode(node.dropConstraint);
        }
        if (node.renameConstraint) {
          this.visitNode(node.renameConstraint);
        }
        if (node.columnAlterations) {
          this.compileColumnAlterations(node.columnAlterations);
        }
        if (node.addIndex) {
          this.visitNode(node.addIndex);
        }
        if (node.dropIndex) {
          this.visitNode(node.dropIndex);
        }
      }
      visitAddColumn(node) {
        this.append("add column ");
        this.visitNode(node.column);
      }
      visitRenameColumn(node) {
        this.append("rename column ");
        this.visitNode(node.column);
        this.append(" to ");
        this.visitNode(node.renameTo);
      }
      visitDropColumn(node) {
        this.append("drop column ");
        this.visitNode(node.column);
      }
      visitAlterColumn(node) {
        this.append("alter column ");
        this.visitNode(node.column);
        this.append(" ");
        if (node.dataType) {
          if (this.announcesNewColumnDataType()) {
            this.append("type ");
          }
          this.visitNode(node.dataType);
          if (node.dataTypeExpression) {
            this.append("using ");
            this.visitNode(node.dataTypeExpression);
          }
        }
        if (node.setDefault) {
          this.append("set default ");
          this.visitNode(node.setDefault);
        }
        if (node.dropDefault) {
          this.append("drop default");
        }
        if (node.setNotNull) {
          this.append("set not null");
        }
        if (node.dropNotNull) {
          this.append("drop not null");
        }
      }
      visitModifyColumn(node) {
        this.append("modify column ");
        this.visitNode(node.column);
      }
      visitAddConstraint(node) {
        this.append("add ");
        this.visitNode(node.constraint);
      }
      visitDropConstraint(node) {
        this.append("drop constraint ");
        if (node.ifExists) {
          this.append("if exists ");
        }
        this.visitNode(node.constraintName);
        if (node.modifier === "cascade") {
          this.append(" cascade");
        } else if (node.modifier === "restrict") {
          this.append(" restrict");
        }
      }
      visitRenameConstraint(node) {
        this.append("rename constraint ");
        this.visitNode(node.oldName);
        this.append(" to ");
        this.visitNode(node.newName);
      }
      visitSetOperation(node) {
        this.append(node.operator);
        this.append(" ");
        if (node.all) {
          this.append("all ");
        }
        this.visitNode(node.expression);
      }
      visitCreateView(node) {
        this.append("create ");
        if (node.orReplace) {
          this.append("or replace ");
        }
        if (node.materialized) {
          this.append("materialized ");
        }
        if (node.temporary) {
          this.append("temporary ");
        }
        this.append("view ");
        if (node.ifNotExists) {
          this.append("if not exists ");
        }
        this.visitNode(node.name);
        this.append(" ");
        if (node.columns) {
          this.append("(");
          this.compileList(node.columns);
          this.append(") ");
        }
        if (node.as) {
          this.append("as ");
          this.visitNode(node.as);
        }
      }
      visitRefreshMaterializedView(node) {
        this.append("refresh materialized view ");
        if (node.concurrently) {
          this.append("concurrently ");
        }
        this.visitNode(node.name);
        if (node.withNoData) {
          this.append(" with no data");
        } else {
          this.append(" with data");
        }
      }
      visitDropView(node) {
        this.append("drop ");
        if (node.materialized) {
          this.append("materialized ");
        }
        this.append("view ");
        if (node.ifExists) {
          this.append("if exists ");
        }
        this.visitNode(node.name);
        if (node.cascade) {
          this.append(" cascade");
        }
      }
      visitGenerated(node) {
        this.append("generated ");
        if (node.always) {
          this.append("always ");
        }
        if (node.byDefault) {
          this.append("by default ");
        }
        this.append("as ");
        if (node.identity) {
          this.append("identity");
        }
        if (node.expression) {
          this.append("(");
          this.visitNode(node.expression);
          this.append(")");
        }
        if (node.stored) {
          this.append(" stored");
        }
      }
      visitDefaultValue(node) {
        this.append("default ");
        this.visitNode(node.defaultValue);
      }
      visitSelectModifier(node) {
        if (node.rawModifier) {
          this.visitNode(node.rawModifier);
        } else {
          this.append(SELECT_MODIFIER_SQL[node.modifier]);
        }
        if (node.of) {
          this.append(" of ");
          this.compileList(node.of, ", ");
        }
      }
      visitCreateType(node) {
        this.append("create type ");
        this.visitNode(node.name);
        if (node.enum) {
          this.append(" as enum ");
          this.visitNode(node.enum);
        }
      }
      visitDropType(node) {
        this.append("drop type ");
        if (node.ifExists) {
          this.append("if exists ");
        }
        this.visitNode(node.name);
      }
      visitExplain(node) {
        this.append("explain");
        if (node.options || node.format) {
          this.append(" ");
          this.append(this.getLeftExplainOptionsWrapper());
          if (node.options) {
            this.visitNode(node.options);
            if (node.format) {
              this.append(this.getExplainOptionsDelimiter());
            }
          }
          if (node.format) {
            this.append("format");
            this.append(this.getExplainOptionAssignment());
            this.append(node.format);
          }
          this.append(this.getRightExplainOptionsWrapper());
        }
      }
      visitDefaultInsertValue(_) {
        this.append("default");
      }
      visitAggregateFunction(node) {
        this.append(node.func);
        this.append("(");
        if (node.distinct) {
          this.append("distinct ");
        }
        this.compileList(node.aggregated);
        if (node.orderBy) {
          this.append(" ");
          this.visitNode(node.orderBy);
        }
        this.append(")");
        if (node.withinGroup) {
          this.append(" within group (");
          this.visitNode(node.withinGroup);
          this.append(")");
        }
        if (node.filter) {
          this.append(" filter(");
          this.visitNode(node.filter);
          this.append(")");
        }
        if (node.over) {
          this.append(" ");
          this.visitNode(node.over);
        }
      }
      visitOver(node) {
        this.append("over(");
        if (node.partitionBy) {
          this.visitNode(node.partitionBy);
          if (node.orderBy) {
            this.append(" ");
          }
        }
        if (node.orderBy) {
          this.visitNode(node.orderBy);
        }
        this.append(")");
      }
      visitPartitionBy(node) {
        this.append("partition by ");
        this.compileList(node.items);
      }
      visitPartitionByItem(node) {
        this.visitNode(node.partitionBy);
      }
      visitBinaryOperation(node) {
        this.visitNode(node.leftOperand);
        this.append(" ");
        this.visitNode(node.operator);
        this.append(" ");
        this.visitNode(node.rightOperand);
      }
      visitUnaryOperation(node) {
        this.visitNode(node.operator);
        if (!this.isMinusOperator(node.operator)) {
          this.append(" ");
        }
        this.visitNode(node.operand);
      }
      isMinusOperator(node) {
        return OperatorNode.is(node) && node.operator === "-";
      }
      visitUsing(node) {
        this.append("using ");
        this.compileList(node.tables);
      }
      visitFunction(node) {
        this.append(node.func);
        this.append("(");
        this.compileList(node.arguments);
        this.append(")");
      }
      visitCase(node) {
        this.append("case");
        if (node.value) {
          this.append(" ");
          this.visitNode(node.value);
        }
        if (node.when) {
          this.append(" ");
          this.compileList(node.when, " ");
        }
        if (node.else) {
          this.append(" else ");
          this.visitNode(node.else);
        }
        this.append(" end");
        if (node.isStatement) {
          this.append(" case");
        }
      }
      visitWhen(node) {
        this.append("when ");
        this.visitNode(node.condition);
        if (node.result) {
          this.append(" then ");
          this.visitNode(node.result);
        }
      }
      visitJSONReference(node) {
        this.visitNode(node.reference);
        this.visitNode(node.traversal);
      }
      visitJSONPath(node) {
        if (node.inOperator) {
          this.visitNode(node.inOperator);
        }
        this.append("'$");
        for (const pathLeg of node.pathLegs) {
          this.visitNode(pathLeg);
        }
        this.append("'");
      }
      visitJSONPathLeg(node) {
        const isArrayLocation = node.type === "ArrayLocation";
        this.append(isArrayLocation ? "[" : ".");
        this.append(String(node.value));
        if (isArrayLocation) {
          this.append("]");
        }
      }
      visitJSONOperatorChain(node) {
        for (let i = 0, len = node.values.length; i < len; i++) {
          if (i === len - 1) {
            this.visitNode(node.operator);
          } else {
            this.append("->");
          }
          this.visitNode(node.values[i]);
        }
      }
      visitMergeQuery(node) {
        if (node.with) {
          this.visitNode(node.with);
          this.append(" ");
        }
        this.append("merge ");
        if (node.top) {
          this.visitNode(node.top);
          this.append(" ");
        }
        this.append("into ");
        this.visitNode(node.into);
        if (node.using) {
          this.append(" ");
          this.visitNode(node.using);
        }
        if (node.whens) {
          this.append(" ");
          this.compileList(node.whens, " ");
        }
        if (node.returning) {
          this.append(" ");
          this.visitNode(node.returning);
        }
        if (node.output) {
          this.append(" ");
          this.visitNode(node.output);
        }
        if (node.endModifiers?.length) {
          this.append(" ");
          this.compileList(node.endModifiers, " ");
        }
      }
      visitMatched(node) {
        if (node.not) {
          this.append("not ");
        }
        this.append("matched");
        if (node.bySource) {
          this.append(" by source");
        }
      }
      visitAddIndex(node) {
        this.append("add ");
        if (node.unique) {
          this.append("unique ");
        }
        this.append("index ");
        this.visitNode(node.name);
        if (node.columns) {
          this.append(" (");
          this.compileList(node.columns);
          this.append(")");
        }
        if (node.using) {
          this.append(" using ");
          this.visitNode(node.using);
        }
      }
      visitCast(node) {
        this.append("cast(");
        this.visitNode(node.expression);
        this.append(" as ");
        this.visitNode(node.dataType);
        this.append(")");
      }
      visitFetch(node) {
        this.append("fetch next ");
        this.visitNode(node.rowCount);
        this.append(` rows ${node.modifier}`);
      }
      visitOutput(node) {
        this.append("output ");
        this.compileList(node.selections);
      }
      visitTop(node) {
        this.append(`top(${node.expression})`);
        if (node.modifiers) {
          this.append(` ${node.modifiers}`);
        }
      }
      visitOrAction(node) {
        this.append(node.action);
      }
      visitCollate(node) {
        this.append("collate ");
        this.visitNode(node.collation);
      }
      append(str) {
        this.#sql += str;
      }
      appendValue(parameter) {
        this.addParameter(parameter);
        this.append(this.getCurrentParameterPlaceholder());
      }
      getLeftIdentifierWrapper() {
        return '"';
      }
      getRightIdentifierWrapper() {
        return '"';
      }
      getCurrentParameterPlaceholder() {
        return "$" + this.numParameters;
      }
      getLeftExplainOptionsWrapper() {
        return "(";
      }
      getExplainOptionAssignment() {
        return " ";
      }
      getExplainOptionsDelimiter() {
        return ", ";
      }
      getRightExplainOptionsWrapper() {
        return ")";
      }
      sanitizeIdentifier(identifier) {
        const leftWrap = this.getLeftIdentifierWrapper();
        const rightWrap = this.getRightIdentifierWrapper();
        let sanitized = "";
        for (const c of identifier) {
          sanitized += c;
          if (c === leftWrap) {
            sanitized += leftWrap;
          } else if (c === rightWrap) {
            sanitized += rightWrap;
          }
        }
        return sanitized;
      }
      sanitizeStringLiteral(value) {
        return value.replace(LIT_WRAP_REGEX, "''");
      }
      addParameter(parameter) {
        this.#parameters.push(parameter);
      }
      appendImmediateValue(value) {
        if (isString(value)) {
          this.appendStringLiteral(value);
        } else if (isNumber(value) || isBoolean(value)) {
          this.append(value.toString());
        } else if (isNull(value)) {
          this.append("null");
        } else if (isDate(value)) {
          this.appendImmediateValue(value.toISOString());
        } else if (isBigInt(value)) {
          this.appendImmediateValue(value.toString());
        } else {
          throw new Error(`invalid immediate value ${value}`);
        }
      }
      appendStringLiteral(value) {
        this.append("'");
        this.append(this.sanitizeStringLiteral(value));
        this.append("'");
      }
      sortSelectModifiers(arr) {
        arr.sort((left, right) => left.modifier && right.modifier ? SELECT_MODIFIER_PRIORITY[left.modifier] - SELECT_MODIFIER_PRIORITY[right.modifier] : 1);
        return freeze(arr);
      }
      compileColumnAlterations(columnAlterations) {
        this.compileList(columnAlterations);
      }
      /**
       * controls whether the dialect adds a "type" keyword before a column's new data
       * type in an ALTER TABLE statement.
       */
      announcesNewColumnDataType() {
        return true;
      }
    };
    SELECT_MODIFIER_SQL = freeze({
      ForKeyShare: "for key share",
      ForNoKeyUpdate: "for no key update",
      ForUpdate: "for update",
      ForShare: "for share",
      NoWait: "nowait",
      SkipLocked: "skip locked",
      Distinct: "distinct"
    });
    SELECT_MODIFIER_PRIORITY = freeze({
      ForKeyShare: 1,
      ForNoKeyUpdate: 1,
      ForUpdate: 1,
      ForShare: 1,
      NoWait: 2,
      SkipLocked: 2,
      Distinct: 0
    });
    JOIN_TYPE_SQL = freeze({
      InnerJoin: "inner join",
      LeftJoin: "left join",
      RightJoin: "right join",
      FullJoin: "full join",
      CrossJoin: "cross join",
      LateralInnerJoin: "inner join lateral",
      LateralLeftJoin: "left join lateral",
      LateralCrossJoin: "cross join lateral",
      OuterApply: "outer apply",
      CrossApply: "cross apply",
      Using: "using"
    });
  }
});
var CompiledQuery;
var init_compiled_query = __esm({
  "../node_modules/kysely/dist/esm/query-compiler/compiled-query.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_raw_node();
    init_object_utils();
    init_query_id();
    CompiledQuery = freeze({
      raw(sql2, parameters = []) {
        return freeze({
          sql: sql2,
          query: RawNode.createWithSql(sql2),
          parameters: freeze(parameters),
          queryId: createQueryId()
        });
      }
    });
  }
});
var init_database_connection = __esm({
  "../node_modules/kysely/dist/esm/driver/database-connection.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
  }
});
var init_connection_provider = __esm({
  "../node_modules/kysely/dist/esm/driver/connection-provider.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
  }
});
var init_dummy_driver = __esm({
  "../node_modules/kysely/dist/esm/driver/dummy-driver.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
  }
});
var init_dialect = __esm({
  "../node_modules/kysely/dist/esm/dialect/dialect.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
  }
});
var init_dialect_adapter = __esm({
  "../node_modules/kysely/dist/esm/dialect/dialect-adapter.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
  }
});
var DialectAdapterBase;
var init_dialect_adapter_base = __esm({
  "../node_modules/kysely/dist/esm/dialect/dialect-adapter-base.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    DialectAdapterBase = class {
      static {
        __name(this, "DialectAdapterBase");
      }
      static {
        __name2(this, "DialectAdapterBase");
      }
      get supportsCreateIfNotExists() {
        return true;
      }
      get supportsTransactionalDdl() {
        return false;
      }
      get supportsReturning() {
        return false;
      }
      get supportsOutput() {
        return false;
      }
    };
  }
});
var init_database_introspector = __esm({
  "../node_modules/kysely/dist/esm/dialect/database-introspector.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
  }
});
function parseSavepointCommand(command, savepointName) {
  return RawNode.createWithChildren([
    RawNode.createWithSql(`${command} `),
    IdentifierNode.create(savepointName)
    // ensures savepointName gets sanitized
  ]);
}
__name(parseSavepointCommand, "parseSavepointCommand");
var init_savepoint_parser = __esm({
  "../node_modules/kysely/dist/esm/parser/savepoint-parser.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_identifier_node();
    init_raw_node();
    __name2(parseSavepointCommand, "parseSavepointCommand");
  }
});
var SqliteDriver;
var SqliteConnection;
var ConnectionMutex;
var init_sqlite_driver = __esm({
  "../node_modules/kysely/dist/esm/dialect/sqlite/sqlite-driver.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_select_query_node();
    init_savepoint_parser();
    init_compiled_query();
    init_object_utils();
    init_query_id();
    SqliteDriver = class {
      static {
        __name(this, "SqliteDriver");
      }
      static {
        __name2(this, "SqliteDriver");
      }
      #config;
      #connectionMutex = new ConnectionMutex();
      #db;
      #connection;
      constructor(config2) {
        this.#config = freeze({ ...config2 });
      }
      async init() {
        this.#db = isFunction(this.#config.database) ? await this.#config.database() : this.#config.database;
        this.#connection = new SqliteConnection(this.#db);
        if (this.#config.onCreateConnection) {
          await this.#config.onCreateConnection(this.#connection);
        }
      }
      async acquireConnection() {
        await this.#connectionMutex.lock();
        return this.#connection;
      }
      async beginTransaction(connection) {
        await connection.executeQuery(CompiledQuery.raw("begin"));
      }
      async commitTransaction(connection) {
        await connection.executeQuery(CompiledQuery.raw("commit"));
      }
      async rollbackTransaction(connection) {
        await connection.executeQuery(CompiledQuery.raw("rollback"));
      }
      async savepoint(connection, savepointName, compileQuery) {
        await connection.executeQuery(compileQuery(parseSavepointCommand("savepoint", savepointName), createQueryId()));
      }
      async rollbackToSavepoint(connection, savepointName, compileQuery) {
        await connection.executeQuery(compileQuery(parseSavepointCommand("rollback to", savepointName), createQueryId()));
      }
      async releaseSavepoint(connection, savepointName, compileQuery) {
        await connection.executeQuery(compileQuery(parseSavepointCommand("release", savepointName), createQueryId()));
      }
      async releaseConnection() {
        this.#connectionMutex.unlock();
      }
      async destroy() {
        this.#db?.close();
      }
    };
    SqliteConnection = class {
      static {
        __name(this, "SqliteConnection");
      }
      static {
        __name2(this, "SqliteConnection");
      }
      #db;
      constructor(db) {
        this.#db = db;
      }
      executeQuery(compiledQuery) {
        const { sql: sql2, parameters } = compiledQuery;
        const stmt = this.#db.prepare(sql2);
        if (stmt.reader) {
          return Promise.resolve({
            rows: stmt.all(parameters)
          });
        }
        const { changes, lastInsertRowid } = stmt.run(parameters);
        return Promise.resolve({
          numAffectedRows: changes !== void 0 && changes !== null ? BigInt(changes) : void 0,
          insertId: lastInsertRowid !== void 0 && lastInsertRowid !== null ? BigInt(lastInsertRowid) : void 0,
          rows: []
        });
      }
      async *streamQuery(compiledQuery, _chunkSize) {
        const { sql: sql2, parameters, query } = compiledQuery;
        const stmt = this.#db.prepare(sql2);
        if (SelectQueryNode.is(query)) {
          const iter = stmt.iterate(parameters);
          for (const row of iter) {
            yield {
              rows: [row]
            };
          }
        } else {
          throw new Error("Sqlite driver only supports streaming of select queries");
        }
      }
    };
    ConnectionMutex = class {
      static {
        __name(this, "ConnectionMutex");
      }
      static {
        __name2(this, "ConnectionMutex");
      }
      #promise;
      #resolve;
      async lock() {
        while (this.#promise) {
          await this.#promise;
        }
        this.#promise = new Promise((resolve) => {
          this.#resolve = resolve;
        });
      }
      unlock() {
        const resolve = this.#resolve;
        this.#promise = void 0;
        this.#resolve = void 0;
        resolve?.();
      }
    };
  }
});
var ID_WRAP_REGEX;
var SqliteQueryCompiler;
var init_sqlite_query_compiler = __esm({
  "../node_modules/kysely/dist/esm/dialect/sqlite/sqlite-query-compiler.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_default_query_compiler();
    ID_WRAP_REGEX = /"/g;
    SqliteQueryCompiler = class extends DefaultQueryCompiler {
      static {
        __name(this, "SqliteQueryCompiler");
      }
      static {
        __name2(this, "SqliteQueryCompiler");
      }
      visitOrAction(node) {
        this.append("or ");
        this.append(node.action);
      }
      getCurrentParameterPlaceholder() {
        return "?";
      }
      getLeftExplainOptionsWrapper() {
        return "";
      }
      getRightExplainOptionsWrapper() {
        return "";
      }
      getLeftIdentifierWrapper() {
        return '"';
      }
      getRightIdentifierWrapper() {
        return '"';
      }
      getAutoIncrement() {
        return "autoincrement";
      }
      sanitizeIdentifier(identifier) {
        return identifier.replace(ID_WRAP_REGEX, '""');
      }
      visitDefaultInsertValue(_) {
        this.append("null");
      }
    };
  }
});
var DEFAULT_MIGRATION_TABLE;
var DEFAULT_MIGRATION_LOCK_TABLE;
var NO_MIGRATIONS;
var init_migrator = __esm({
  "../node_modules/kysely/dist/esm/migration/migrator.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    DEFAULT_MIGRATION_TABLE = "kysely_migration";
    DEFAULT_MIGRATION_LOCK_TABLE = "kysely_migration_lock";
    NO_MIGRATIONS = freeze({ __noMigrations__: true });
  }
});
var SqliteIntrospector;
var init_sqlite_introspector = __esm({
  "../node_modules/kysely/dist/esm/dialect/sqlite/sqlite-introspector.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_migrator();
    init_sql3();
    SqliteIntrospector = class {
      static {
        __name(this, "SqliteIntrospector");
      }
      static {
        __name2(this, "SqliteIntrospector");
      }
      #db;
      constructor(db) {
        this.#db = db;
      }
      async getSchemas() {
        return [];
      }
      async getTables(options = { withInternalKyselyTables: false }) {
        return await this.#getTableMetadata(options);
      }
      async getMetadata(options) {
        return {
          tables: await this.getTables(options)
        };
      }
      #tablesQuery(qb, options) {
        let tablesQuery = qb.selectFrom("sqlite_master").where("type", "in", ["table", "view"]).where("name", "not like", "sqlite_%").select(["name", "sql", "type"]).orderBy("name");
        if (!options.withInternalKyselyTables) {
          tablesQuery = tablesQuery.where("name", "!=", DEFAULT_MIGRATION_TABLE).where("name", "!=", DEFAULT_MIGRATION_LOCK_TABLE);
        }
        return tablesQuery;
      }
      async #getTableMetadata(options) {
        const tablesResult = await this.#tablesQuery(this.#db, options).execute();
        const tableMetadata = await this.#db.with("table_list", (qb) => this.#tablesQuery(qb, options)).selectFrom([
          "table_list as tl",
          sql`pragma_table_info(tl.name)`.as("p")
        ]).select([
          "tl.name as table",
          "p.cid",
          "p.name",
          "p.type",
          "p.notnull",
          "p.dflt_value",
          "p.pk"
        ]).orderBy("tl.name").orderBy("p.cid").execute();
        const columnsByTable = {};
        for (const row of tableMetadata) {
          columnsByTable[row.table] ??= [];
          columnsByTable[row.table].push(row);
        }
        return tablesResult.map(({ name, sql: sql2, type }) => {
          let autoIncrementCol = sql2?.split(/[\(\),]/)?.find((it) => it.toLowerCase().includes("autoincrement"))?.trimStart()?.split(/\s+/)?.[0]?.replace(/["`]/g, "");
          const columns = columnsByTable[name] ?? [];
          if (!autoIncrementCol) {
            const pkCols = columns.filter((r) => r.pk > 0);
            if (pkCols.length === 1 && pkCols[0].type.toLowerCase() === "integer") {
              autoIncrementCol = pkCols[0].name;
            }
          }
          return {
            name,
            isView: type === "view",
            columns: columns.map((col) => ({
              name: col.name,
              dataType: col.type,
              isNullable: !col.notnull,
              isAutoIncrementing: col.name === autoIncrementCol,
              hasDefaultValue: col.dflt_value != null,
              comment: void 0
            }))
          };
        });
      }
    };
  }
});
var SqliteAdapter;
var init_sqlite_adapter = __esm({
  "../node_modules/kysely/dist/esm/dialect/sqlite/sqlite-adapter.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_dialect_adapter_base();
    SqliteAdapter = class extends DialectAdapterBase {
      static {
        __name(this, "SqliteAdapter");
      }
      static {
        __name2(this, "SqliteAdapter");
      }
      get supportsTransactionalDdl() {
        return false;
      }
      get supportsReturning() {
        return true;
      }
      async acquireMigrationLock(_db, _opt) {
      }
      async releaseMigrationLock(_db, _opt) {
      }
    };
  }
});
var SqliteDialect;
var init_sqlite_dialect = __esm({
  "../node_modules/kysely/dist/esm/dialect/sqlite/sqlite-dialect.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_sqlite_driver();
    init_sqlite_query_compiler();
    init_sqlite_introspector();
    init_sqlite_adapter();
    init_object_utils();
    SqliteDialect = class {
      static {
        __name(this, "SqliteDialect");
      }
      static {
        __name2(this, "SqliteDialect");
      }
      #config;
      constructor(config2) {
        this.#config = freeze({ ...config2 });
      }
      createDriver() {
        return new SqliteDriver(this.#config);
      }
      createQueryCompiler() {
        return new SqliteQueryCompiler();
      }
      createAdapter() {
        return new SqliteAdapter();
      }
      createIntrospector(db) {
        return new SqliteIntrospector(db);
      }
    };
  }
});
var init_sqlite_dialect_config = __esm({
  "../node_modules/kysely/dist/esm/dialect/sqlite/sqlite-dialect-config.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
  }
});
var ID_WRAP_REGEX2;
var PostgresQueryCompiler;
var init_postgres_query_compiler = __esm({
  "../node_modules/kysely/dist/esm/dialect/postgres/postgres-query-compiler.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_default_query_compiler();
    ID_WRAP_REGEX2 = /"/g;
    PostgresQueryCompiler = class extends DefaultQueryCompiler {
      static {
        __name(this, "PostgresQueryCompiler");
      }
      static {
        __name2(this, "PostgresQueryCompiler");
      }
      sanitizeIdentifier(identifier) {
        return identifier.replace(ID_WRAP_REGEX2, '""');
      }
    };
  }
});
var PostgresIntrospector;
var init_postgres_introspector = __esm({
  "../node_modules/kysely/dist/esm/dialect/postgres/postgres-introspector.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_migrator();
    init_object_utils();
    init_sql3();
    PostgresIntrospector = class {
      static {
        __name(this, "PostgresIntrospector");
      }
      static {
        __name2(this, "PostgresIntrospector");
      }
      #db;
      constructor(db) {
        this.#db = db;
      }
      async getSchemas() {
        let rawSchemas = await this.#db.selectFrom("pg_catalog.pg_namespace").select("nspname").$castTo().execute();
        return rawSchemas.map((it) => ({ name: it.nspname }));
      }
      async getTables(options = { withInternalKyselyTables: false }) {
        let query = this.#db.selectFrom("pg_catalog.pg_attribute as a").innerJoin("pg_catalog.pg_class as c", "a.attrelid", "c.oid").innerJoin("pg_catalog.pg_namespace as ns", "c.relnamespace", "ns.oid").innerJoin("pg_catalog.pg_type as typ", "a.atttypid", "typ.oid").innerJoin("pg_catalog.pg_namespace as dtns", "typ.typnamespace", "dtns.oid").select([
          "a.attname as column",
          "a.attnotnull as not_null",
          "a.atthasdef as has_default",
          "c.relname as table",
          "c.relkind as table_type",
          "ns.nspname as schema",
          "typ.typname as type",
          "dtns.nspname as type_schema",
          sql`col_description(a.attrelid, a.attnum)`.as("column_description"),
          sql`pg_get_serial_sequence(quote_ident(ns.nspname) || '.' || quote_ident(c.relname), a.attname)`.as("auto_incrementing")
        ]).where("c.relkind", "in", [
          "r",
          "v",
          "p"
        ]).where("ns.nspname", "!~", "^pg_").where("ns.nspname", "!=", "information_schema").where("a.attnum", ">=", 0).where("a.attisdropped", "!=", true).orderBy("ns.nspname").orderBy("c.relname").orderBy("a.attnum").$castTo();
        if (!options.withInternalKyselyTables) {
          query = query.where("c.relname", "!=", DEFAULT_MIGRATION_TABLE).where("c.relname", "!=", DEFAULT_MIGRATION_LOCK_TABLE);
        }
        const rawColumns = await query.execute();
        return this.#parseTableMetadata(rawColumns);
      }
      async getMetadata(options) {
        return {
          tables: await this.getTables(options)
        };
      }
      #parseTableMetadata(columns) {
        return columns.reduce((tables, it) => {
          let table = tables.find((tbl) => tbl.name === it.table && tbl.schema === it.schema);
          if (!table) {
            table = freeze({
              name: it.table,
              isView: it.table_type === "v",
              schema: it.schema,
              columns: []
            });
            tables.push(table);
          }
          table.columns.push(freeze({
            name: it.column,
            dataType: it.type,
            dataTypeSchema: it.type_schema,
            isNullable: !it.not_null,
            isAutoIncrementing: it.auto_incrementing !== null,
            hasDefaultValue: it.has_default,
            comment: it.column_description ?? void 0
          }));
          return tables;
        }, []);
      }
    };
  }
});
var LOCK_ID;
var PostgresAdapter;
var init_postgres_adapter = __esm({
  "../node_modules/kysely/dist/esm/dialect/postgres/postgres-adapter.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_sql3();
    init_dialect_adapter_base();
    LOCK_ID = BigInt("3853314791062309107");
    PostgresAdapter = class extends DialectAdapterBase {
      static {
        __name(this, "PostgresAdapter");
      }
      static {
        __name2(this, "PostgresAdapter");
      }
      get supportsTransactionalDdl() {
        return true;
      }
      get supportsReturning() {
        return true;
      }
      async acquireMigrationLock(db, _opt) {
        await sql`select pg_advisory_xact_lock(${sql.lit(LOCK_ID)})`.execute(db);
      }
      async releaseMigrationLock(_db, _opt) {
      }
    };
  }
});
function extendStackTrace(err, stackError) {
  if (isStackHolder(err) && stackError.stack) {
    const stackExtension = stackError.stack.split("\n").slice(1).join("\n");
    err.stack += `
${stackExtension}`;
    return err;
  }
  return err;
}
__name(extendStackTrace, "extendStackTrace");
function isStackHolder(obj) {
  return isObject(obj) && isString(obj.stack);
}
__name(isStackHolder, "isStackHolder");
var init_stack_trace_utils = __esm({
  "../node_modules/kysely/dist/esm/util/stack-trace-utils.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    __name2(extendStackTrace, "extendStackTrace");
    __name2(isStackHolder, "isStackHolder");
  }
});
function isOkPacket(obj) {
  return isObject(obj) && "insertId" in obj && "affectedRows" in obj;
}
__name(isOkPacket, "isOkPacket");
var PRIVATE_RELEASE_METHOD;
var MysqlDriver;
var MysqlConnection;
var init_mysql_driver = __esm({
  "../node_modules/kysely/dist/esm/dialect/mysql/mysql-driver.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_savepoint_parser();
    init_compiled_query();
    init_object_utils();
    init_query_id();
    init_stack_trace_utils();
    PRIVATE_RELEASE_METHOD = Symbol();
    MysqlDriver = class {
      static {
        __name(this, "MysqlDriver");
      }
      static {
        __name2(this, "MysqlDriver");
      }
      #config;
      #connections = /* @__PURE__ */ new WeakMap();
      #pool;
      constructor(configOrPool) {
        this.#config = freeze({ ...configOrPool });
      }
      async init() {
        this.#pool = isFunction(this.#config.pool) ? await this.#config.pool() : this.#config.pool;
      }
      async acquireConnection() {
        const rawConnection = await this.#acquireConnection();
        let connection = this.#connections.get(rawConnection);
        if (!connection) {
          connection = new MysqlConnection(rawConnection);
          this.#connections.set(rawConnection, connection);
          if (this.#config?.onCreateConnection) {
            await this.#config.onCreateConnection(connection);
          }
        }
        if (this.#config?.onReserveConnection) {
          await this.#config.onReserveConnection(connection);
        }
        return connection;
      }
      async #acquireConnection() {
        return new Promise((resolve, reject) => {
          this.#pool.getConnection(async (err, rawConnection) => {
            if (err) {
              reject(err);
            } else {
              resolve(rawConnection);
            }
          });
        });
      }
      async beginTransaction(connection, settings) {
        if (settings.isolationLevel || settings.accessMode) {
          const parts = [];
          if (settings.isolationLevel) {
            parts.push(`isolation level ${settings.isolationLevel}`);
          }
          if (settings.accessMode) {
            parts.push(settings.accessMode);
          }
          const sql2 = `set transaction ${parts.join(", ")}`;
          await connection.executeQuery(CompiledQuery.raw(sql2));
        }
        await connection.executeQuery(CompiledQuery.raw("begin"));
      }
      async commitTransaction(connection) {
        await connection.executeQuery(CompiledQuery.raw("commit"));
      }
      async rollbackTransaction(connection) {
        await connection.executeQuery(CompiledQuery.raw("rollback"));
      }
      async savepoint(connection, savepointName, compileQuery) {
        await connection.executeQuery(compileQuery(parseSavepointCommand("savepoint", savepointName), createQueryId()));
      }
      async rollbackToSavepoint(connection, savepointName, compileQuery) {
        await connection.executeQuery(compileQuery(parseSavepointCommand("rollback to", savepointName), createQueryId()));
      }
      async releaseSavepoint(connection, savepointName, compileQuery) {
        await connection.executeQuery(compileQuery(parseSavepointCommand("release savepoint", savepointName), createQueryId()));
      }
      async releaseConnection(connection) {
        connection[PRIVATE_RELEASE_METHOD]();
      }
      async destroy() {
        return new Promise((resolve, reject) => {
          this.#pool.end((err) => {
            if (err) {
              reject(err);
            } else {
              resolve();
            }
          });
        });
      }
    };
    __name2(isOkPacket, "isOkPacket");
    MysqlConnection = class {
      static {
        __name(this, "MysqlConnection");
      }
      static {
        __name2(this, "MysqlConnection");
      }
      #rawConnection;
      constructor(rawConnection) {
        this.#rawConnection = rawConnection;
      }
      async executeQuery(compiledQuery) {
        try {
          const result = await this.#executeQuery(compiledQuery);
          if (isOkPacket(result)) {
            const { insertId, affectedRows, changedRows } = result;
            return {
              insertId: insertId !== void 0 && insertId !== null && insertId.toString() !== "0" ? BigInt(insertId) : void 0,
              numAffectedRows: affectedRows !== void 0 && affectedRows !== null ? BigInt(affectedRows) : void 0,
              numChangedRows: changedRows !== void 0 && changedRows !== null ? BigInt(changedRows) : void 0,
              rows: []
            };
          } else if (Array.isArray(result)) {
            return {
              rows: result
            };
          }
          return {
            rows: []
          };
        } catch (err) {
          throw extendStackTrace(err, new Error());
        }
      }
      #executeQuery(compiledQuery) {
        return new Promise((resolve, reject) => {
          this.#rawConnection.query(compiledQuery.sql, compiledQuery.parameters, (err, result) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          });
        });
      }
      async *streamQuery(compiledQuery, _chunkSize) {
        const stream = this.#rawConnection.query(compiledQuery.sql, compiledQuery.parameters).stream({
          objectMode: true
        });
        try {
          for await (const row of stream) {
            yield {
              rows: [row]
            };
          }
        } catch (ex) {
          if (ex && typeof ex === "object" && "code" in ex && // @ts-ignore
          ex.code === "ERR_STREAM_PREMATURE_CLOSE") {
            return;
          }
          throw ex;
        }
      }
      [PRIVATE_RELEASE_METHOD]() {
        this.#rawConnection.release();
      }
    };
  }
});
var ID_WRAP_REGEX3;
var MysqlQueryCompiler;
var init_mysql_query_compiler = __esm({
  "../node_modules/kysely/dist/esm/dialect/mysql/mysql-query-compiler.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_default_query_compiler();
    ID_WRAP_REGEX3 = /`/g;
    MysqlQueryCompiler = class extends DefaultQueryCompiler {
      static {
        __name(this, "MysqlQueryCompiler");
      }
      static {
        __name2(this, "MysqlQueryCompiler");
      }
      getCurrentParameterPlaceholder() {
        return "?";
      }
      getLeftExplainOptionsWrapper() {
        return "";
      }
      getExplainOptionAssignment() {
        return "=";
      }
      getExplainOptionsDelimiter() {
        return " ";
      }
      getRightExplainOptionsWrapper() {
        return "";
      }
      getLeftIdentifierWrapper() {
        return "`";
      }
      getRightIdentifierWrapper() {
        return "`";
      }
      sanitizeIdentifier(identifier) {
        return identifier.replace(ID_WRAP_REGEX3, "``");
      }
      visitCreateIndex(node) {
        this.append("create ");
        if (node.unique) {
          this.append("unique ");
        }
        this.append("index ");
        if (node.ifNotExists) {
          this.append("if not exists ");
        }
        this.visitNode(node.name);
        if (node.using) {
          this.append(" using ");
          this.visitNode(node.using);
        }
        if (node.table) {
          this.append(" on ");
          this.visitNode(node.table);
        }
        if (node.columns) {
          this.append(" (");
          this.compileList(node.columns);
          this.append(")");
        }
        if (node.where) {
          this.append(" ");
          this.visitNode(node.where);
        }
      }
    };
  }
});
var MysqlIntrospector;
var init_mysql_introspector = __esm({
  "../node_modules/kysely/dist/esm/dialect/mysql/mysql-introspector.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_migrator();
    init_object_utils();
    init_sql3();
    MysqlIntrospector = class {
      static {
        __name(this, "MysqlIntrospector");
      }
      static {
        __name2(this, "MysqlIntrospector");
      }
      #db;
      constructor(db) {
        this.#db = db;
      }
      async getSchemas() {
        let rawSchemas = await this.#db.selectFrom("information_schema.schemata").select("schema_name").$castTo().execute();
        return rawSchemas.map((it) => ({ name: it.SCHEMA_NAME }));
      }
      async getTables(options = { withInternalKyselyTables: false }) {
        let query = this.#db.selectFrom("information_schema.columns as columns").innerJoin("information_schema.tables as tables", (b) => b.onRef("columns.TABLE_CATALOG", "=", "tables.TABLE_CATALOG").onRef("columns.TABLE_SCHEMA", "=", "tables.TABLE_SCHEMA").onRef("columns.TABLE_NAME", "=", "tables.TABLE_NAME")).select([
          "columns.COLUMN_NAME",
          "columns.COLUMN_DEFAULT",
          "columns.TABLE_NAME",
          "columns.TABLE_SCHEMA",
          "tables.TABLE_TYPE",
          "columns.IS_NULLABLE",
          "columns.DATA_TYPE",
          "columns.EXTRA",
          "columns.COLUMN_COMMENT"
        ]).where("columns.TABLE_SCHEMA", "=", sql`database()`).orderBy("columns.TABLE_NAME").orderBy("columns.ORDINAL_POSITION").$castTo();
        if (!options.withInternalKyselyTables) {
          query = query.where("columns.TABLE_NAME", "!=", DEFAULT_MIGRATION_TABLE).where("columns.TABLE_NAME", "!=", DEFAULT_MIGRATION_LOCK_TABLE);
        }
        const rawColumns = await query.execute();
        return this.#parseTableMetadata(rawColumns);
      }
      async getMetadata(options) {
        return {
          tables: await this.getTables(options)
        };
      }
      #parseTableMetadata(columns) {
        return columns.reduce((tables, it) => {
          let table = tables.find((tbl) => tbl.name === it.TABLE_NAME);
          if (!table) {
            table = freeze({
              name: it.TABLE_NAME,
              isView: it.TABLE_TYPE === "VIEW",
              schema: it.TABLE_SCHEMA,
              columns: []
            });
            tables.push(table);
          }
          table.columns.push(freeze({
            name: it.COLUMN_NAME,
            dataType: it.DATA_TYPE,
            isNullable: it.IS_NULLABLE === "YES",
            isAutoIncrementing: it.EXTRA.toLowerCase().includes("auto_increment"),
            hasDefaultValue: it.COLUMN_DEFAULT !== null,
            comment: it.COLUMN_COMMENT === "" ? void 0 : it.COLUMN_COMMENT
          }));
          return tables;
        }, []);
      }
    };
  }
});
var LOCK_ID2;
var LOCK_TIMEOUT_SECONDS;
var MysqlAdapter;
var init_mysql_adapter = __esm({
  "../node_modules/kysely/dist/esm/dialect/mysql/mysql-adapter.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_sql3();
    init_dialect_adapter_base();
    LOCK_ID2 = "ea586330-2c93-47c8-908d-981d9d270f9d";
    LOCK_TIMEOUT_SECONDS = 60 * 60;
    MysqlAdapter = class extends DialectAdapterBase {
      static {
        __name(this, "MysqlAdapter");
      }
      static {
        __name2(this, "MysqlAdapter");
      }
      get supportsTransactionalDdl() {
        return false;
      }
      get supportsReturning() {
        return false;
      }
      async acquireMigrationLock(db, _opt) {
        await sql`select get_lock(${sql.lit(LOCK_ID2)}, ${sql.lit(LOCK_TIMEOUT_SECONDS)})`.execute(db);
      }
      async releaseMigrationLock(db, _opt) {
        await sql`select release_lock(${sql.lit(LOCK_ID2)})`.execute(db);
      }
    };
  }
});
var MysqlDialect;
var init_mysql_dialect = __esm({
  "../node_modules/kysely/dist/esm/dialect/mysql/mysql-dialect.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_mysql_driver();
    init_mysql_query_compiler();
    init_mysql_introspector();
    init_mysql_adapter();
    MysqlDialect = class {
      static {
        __name(this, "MysqlDialect");
      }
      static {
        __name2(this, "MysqlDialect");
      }
      #config;
      constructor(config2) {
        this.#config = config2;
      }
      createDriver() {
        return new MysqlDriver(this.#config);
      }
      createQueryCompiler() {
        return new MysqlQueryCompiler();
      }
      createAdapter() {
        return new MysqlAdapter();
      }
      createIntrospector(db) {
        return new MysqlIntrospector(db);
      }
    };
  }
});
var init_mysql_dialect_config = __esm({
  "../node_modules/kysely/dist/esm/dialect/mysql/mysql-dialect-config.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
  }
});
var PRIVATE_RELEASE_METHOD2;
var PostgresDriver;
var PostgresConnection;
var init_postgres_driver = __esm({
  "../node_modules/kysely/dist/esm/dialect/postgres/postgres-driver.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_savepoint_parser();
    init_compiled_query();
    init_object_utils();
    init_query_id();
    init_stack_trace_utils();
    PRIVATE_RELEASE_METHOD2 = Symbol();
    PostgresDriver = class {
      static {
        __name(this, "PostgresDriver");
      }
      static {
        __name2(this, "PostgresDriver");
      }
      #config;
      #connections = /* @__PURE__ */ new WeakMap();
      #pool;
      constructor(config2) {
        this.#config = freeze({ ...config2 });
      }
      async init() {
        this.#pool = isFunction(this.#config.pool) ? await this.#config.pool() : this.#config.pool;
      }
      async acquireConnection() {
        const client = await this.#pool.connect();
        let connection = this.#connections.get(client);
        if (!connection) {
          connection = new PostgresConnection(client, {
            cursor: this.#config.cursor ?? null
          });
          this.#connections.set(client, connection);
          if (this.#config.onCreateConnection) {
            await this.#config.onCreateConnection(connection);
          }
        }
        if (this.#config.onReserveConnection) {
          await this.#config.onReserveConnection(connection);
        }
        return connection;
      }
      async beginTransaction(connection, settings) {
        if (settings.isolationLevel || settings.accessMode) {
          let sql2 = "start transaction";
          if (settings.isolationLevel) {
            sql2 += ` isolation level ${settings.isolationLevel}`;
          }
          if (settings.accessMode) {
            sql2 += ` ${settings.accessMode}`;
          }
          await connection.executeQuery(CompiledQuery.raw(sql2));
        } else {
          await connection.executeQuery(CompiledQuery.raw("begin"));
        }
      }
      async commitTransaction(connection) {
        await connection.executeQuery(CompiledQuery.raw("commit"));
      }
      async rollbackTransaction(connection) {
        await connection.executeQuery(CompiledQuery.raw("rollback"));
      }
      async savepoint(connection, savepointName, compileQuery) {
        await connection.executeQuery(compileQuery(parseSavepointCommand("savepoint", savepointName), createQueryId()));
      }
      async rollbackToSavepoint(connection, savepointName, compileQuery) {
        await connection.executeQuery(compileQuery(parseSavepointCommand("rollback to", savepointName), createQueryId()));
      }
      async releaseSavepoint(connection, savepointName, compileQuery) {
        await connection.executeQuery(compileQuery(parseSavepointCommand("release", savepointName), createQueryId()));
      }
      async releaseConnection(connection) {
        connection[PRIVATE_RELEASE_METHOD2]();
      }
      async destroy() {
        if (this.#pool) {
          const pool = this.#pool;
          this.#pool = void 0;
          await pool.end();
        }
      }
    };
    PostgresConnection = class {
      static {
        __name(this, "PostgresConnection");
      }
      static {
        __name2(this, "PostgresConnection");
      }
      #client;
      #options;
      constructor(client, options) {
        this.#client = client;
        this.#options = options;
      }
      async executeQuery(compiledQuery) {
        try {
          const { command, rowCount, rows } = await this.#client.query(compiledQuery.sql, [...compiledQuery.parameters]);
          return {
            numAffectedRows: command === "INSERT" || command === "UPDATE" || command === "DELETE" || command === "MERGE" ? BigInt(rowCount) : void 0,
            rows: rows ?? []
          };
        } catch (err) {
          throw extendStackTrace(err, new Error());
        }
      }
      async *streamQuery(compiledQuery, chunkSize) {
        if (!this.#options.cursor) {
          throw new Error("'cursor' is not present in your postgres dialect config. It's required to make streaming work in postgres.");
        }
        if (!Number.isInteger(chunkSize) || chunkSize <= 0) {
          throw new Error("chunkSize must be a positive integer");
        }
        const cursor = this.#client.query(new this.#options.cursor(compiledQuery.sql, compiledQuery.parameters.slice()));
        try {
          while (true) {
            const rows = await cursor.read(chunkSize);
            if (rows.length === 0) {
              break;
            }
            yield {
              rows
            };
          }
        } finally {
          await cursor.close();
        }
      }
      [PRIVATE_RELEASE_METHOD2]() {
        this.#client.release();
      }
    };
  }
});
var init_postgres_dialect_config = __esm({
  "../node_modules/kysely/dist/esm/dialect/postgres/postgres-dialect-config.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
  }
});
var PostgresDialect;
var init_postgres_dialect = __esm({
  "../node_modules/kysely/dist/esm/dialect/postgres/postgres-dialect.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_postgres_driver();
    init_postgres_introspector();
    init_postgres_query_compiler();
    init_postgres_adapter();
    PostgresDialect = class {
      static {
        __name(this, "PostgresDialect");
      }
      static {
        __name2(this, "PostgresDialect");
      }
      #config;
      constructor(config2) {
        this.#config = config2;
      }
      createDriver() {
        return new PostgresDriver(this.#config);
      }
      createQueryCompiler() {
        return new PostgresQueryCompiler();
      }
      createAdapter() {
        return new PostgresAdapter();
      }
      createIntrospector(db) {
        return new PostgresIntrospector(db);
      }
    };
  }
});
var MssqlAdapter;
var init_mssql_adapter = __esm({
  "../node_modules/kysely/dist/esm/dialect/mssql/mssql-adapter.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_migrator();
    init_sql3();
    init_dialect_adapter_base();
    MssqlAdapter = class extends DialectAdapterBase {
      static {
        __name(this, "MssqlAdapter");
      }
      static {
        __name2(this, "MssqlAdapter");
      }
      get supportsCreateIfNotExists() {
        return false;
      }
      get supportsTransactionalDdl() {
        return true;
      }
      get supportsOutput() {
        return true;
      }
      async acquireMigrationLock(db) {
        await sql`exec sp_getapplock @DbPrincipal = ${sql.lit("dbo")}, @Resource = ${sql.lit(DEFAULT_MIGRATION_TABLE)}, @LockMode = ${sql.lit("Exclusive")}`.execute(db);
      }
      async releaseMigrationLock() {
      }
    };
  }
});
var init_mssql_dialect_config = __esm({
  "../node_modules/kysely/dist/esm/dialect/mssql/mssql-dialect-config.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
  }
});
var PRIVATE_RESET_METHOD;
var PRIVATE_DESTROY_METHOD;
var MssqlDriver;
var MssqlConnection;
var MssqlRequest;
var init_mssql_driver = __esm({
  "../node_modules/kysely/dist/esm/dialect/mssql/mssql-driver.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_object_utils();
    init_compiled_query();
    init_stack_trace_utils();
    init_random_string();
    init_deferred();
    PRIVATE_RESET_METHOD = Symbol();
    PRIVATE_DESTROY_METHOD = Symbol();
    MssqlDriver = class {
      static {
        __name(this, "MssqlDriver");
      }
      static {
        __name2(this, "MssqlDriver");
      }
      #config;
      #pool;
      constructor(config2) {
        this.#config = freeze({ ...config2 });
        const { tarn, tedious, validateConnections } = this.#config;
        const { validateConnections: deprecatedValidateConnections, ...poolOptions } = tarn.options;
        this.#pool = new tarn.Pool({
          ...poolOptions,
          create: /* @__PURE__ */ __name2(async () => {
            const connection = await tedious.connectionFactory();
            return await new MssqlConnection(connection, tedious).connect();
          }, "create"),
          destroy: /* @__PURE__ */ __name2(async (connection) => {
            await connection[PRIVATE_DESTROY_METHOD]();
          }, "destroy"),
          // @ts-ignore `tarn` accepts a function that returns a promise here, but
          // the types are not aligned and it type errors.
          validate: validateConnections === false || deprecatedValidateConnections === false ? void 0 : (connection) => connection.validate()
        });
      }
      async init() {
      }
      async acquireConnection() {
        return await this.#pool.acquire().promise;
      }
      async beginTransaction(connection, settings) {
        await connection.beginTransaction(settings);
      }
      async commitTransaction(connection) {
        await connection.commitTransaction();
      }
      async rollbackTransaction(connection) {
        await connection.rollbackTransaction();
      }
      async savepoint(connection, savepointName) {
        await connection.savepoint(savepointName);
      }
      async rollbackToSavepoint(connection, savepointName) {
        await connection.rollbackTransaction(savepointName);
      }
      async releaseConnection(connection) {
        if (this.#config.resetConnectionsOnRelease || this.#config.tedious.resetConnectionOnRelease) {
          await connection[PRIVATE_RESET_METHOD]();
        }
        this.#pool.release(connection);
      }
      async destroy() {
        await this.#pool.destroy();
      }
    };
    MssqlConnection = class {
      static {
        __name(this, "MssqlConnection");
      }
      static {
        __name2(this, "MssqlConnection");
      }
      #connection;
      #tedious;
      constructor(connection, tedious) {
        this.#connection = connection;
        this.#tedious = tedious;
        this.#connection.on("error", console.error);
        this.#connection.once("end", () => {
          this.#connection.off("error", console.error);
        });
      }
      async beginTransaction(settings) {
        const { isolationLevel } = settings;
        await new Promise((resolve, reject) => this.#connection.beginTransaction((error2) => {
          if (error2)
            reject(error2);
          else
            resolve(void 0);
        }, isolationLevel ? randomString(8) : void 0, isolationLevel ? this.#getTediousIsolationLevel(isolationLevel) : void 0));
      }
      async commitTransaction() {
        await new Promise((resolve, reject) => this.#connection.commitTransaction((error2) => {
          if (error2)
            reject(error2);
          else
            resolve(void 0);
        }));
      }
      async connect() {
        await new Promise((resolve, reject) => {
          this.#connection.connect((error2) => {
            if (error2) {
              console.error(error2);
              reject(error2);
            } else {
              resolve(void 0);
            }
          });
        });
        return this;
      }
      async executeQuery(compiledQuery) {
        try {
          const deferred = new Deferred();
          const request = new MssqlRequest({
            compiledQuery,
            tedious: this.#tedious,
            onDone: deferred
          });
          this.#connection.execSql(request.request);
          const { rowCount, rows } = await deferred.promise;
          return {
            numAffectedRows: rowCount !== void 0 ? BigInt(rowCount) : void 0,
            rows
          };
        } catch (err) {
          throw extendStackTrace(err, new Error());
        }
      }
      async rollbackTransaction(savepointName) {
        await new Promise((resolve, reject) => this.#connection.rollbackTransaction((error2) => {
          if (error2)
            reject(error2);
          else
            resolve(void 0);
        }, savepointName));
      }
      async savepoint(savepointName) {
        await new Promise((resolve, reject) => this.#connection.saveTransaction((error2) => {
          if (error2)
            reject(error2);
          else
            resolve(void 0);
        }, savepointName));
      }
      async *streamQuery(compiledQuery, chunkSize) {
        if (!Number.isInteger(chunkSize) || chunkSize <= 0) {
          throw new Error("chunkSize must be a positive integer");
        }
        const request = new MssqlRequest({
          compiledQuery,
          streamChunkSize: chunkSize,
          tedious: this.#tedious
        });
        this.#connection.execSql(request.request);
        try {
          while (true) {
            const rows = await request.readChunk();
            if (rows.length === 0) {
              break;
            }
            yield { rows };
            if (rows.length < chunkSize) {
              break;
            }
          }
        } finally {
          await this.#cancelRequest(request);
        }
      }
      async validate() {
        try {
          const deferred = new Deferred();
          const request = new MssqlRequest({
            compiledQuery: CompiledQuery.raw("select 1"),
            onDone: deferred,
            tedious: this.#tedious
          });
          this.#connection.execSql(request.request);
          await deferred.promise;
          return true;
        } catch {
          return false;
        }
      }
      #getTediousIsolationLevel(isolationLevel) {
        const { ISOLATION_LEVEL } = this.#tedious;
        const mapper = {
          "read committed": ISOLATION_LEVEL.READ_COMMITTED,
          "read uncommitted": ISOLATION_LEVEL.READ_UNCOMMITTED,
          "repeatable read": ISOLATION_LEVEL.REPEATABLE_READ,
          serializable: ISOLATION_LEVEL.SERIALIZABLE,
          snapshot: ISOLATION_LEVEL.SNAPSHOT
        };
        const tediousIsolationLevel = mapper[isolationLevel];
        if (tediousIsolationLevel === void 0) {
          throw new Error(`Unknown isolation level: ${isolationLevel}`);
        }
        return tediousIsolationLevel;
      }
      #cancelRequest(request) {
        return new Promise((resolve) => {
          request.request.once("requestCompleted", resolve);
          const wasCanceled = this.#connection.cancel();
          if (!wasCanceled) {
            request.request.off("requestCompleted", resolve);
            resolve(void 0);
          }
        });
      }
      async [PRIVATE_RESET_METHOD]() {
        await new Promise((resolve, reject) => {
          this.#connection.reset((error2) => {
            if (error2)
              reject(error2);
            else
              resolve(void 0);
          });
        });
      }
      [PRIVATE_DESTROY_METHOD]() {
        return new Promise((resolve) => {
          this.#connection.once("end", () => {
            resolve(void 0);
          });
          this.#connection.close();
        });
      }
    };
    MssqlRequest = class {
      static {
        __name(this, "MssqlRequest");
      }
      static {
        __name2(this, "MssqlRequest");
      }
      #request;
      #rows;
      #streamChunkSize;
      #subscribers;
      #tedious;
      #rowCount;
      constructor(props) {
        const { compiledQuery, onDone, streamChunkSize, tedious } = props;
        this.#rows = [];
        this.#streamChunkSize = streamChunkSize;
        this.#subscribers = {};
        this.#tedious = tedious;
        if (onDone) {
          const subscriptionKey = "onDone";
          this.#subscribers[subscriptionKey] = (event, error2) => {
            if (event === "chunkReady") {
              return;
            }
            delete this.#subscribers[subscriptionKey];
            if (event === "error") {
              onDone.reject(error2);
            } else {
              onDone.resolve({
                rowCount: this.#rowCount,
                rows: this.#rows
              });
            }
          };
        }
        this.#request = new this.#tedious.Request(compiledQuery.sql, (err, rowCount) => {
          if (err) {
            Object.values(this.#subscribers).forEach((subscriber) => subscriber("error", err instanceof AggregateError ? err.errors : err));
          } else {
            this.#rowCount = rowCount;
          }
        });
        this.#addParametersToRequest(compiledQuery.parameters);
        this.#attachListeners();
      }
      get request() {
        return this.#request;
      }
      readChunk() {
        const subscriptionKey = this.readChunk.name;
        return new Promise((resolve, reject) => {
          this.#subscribers[subscriptionKey] = (event, error2) => {
            delete this.#subscribers[subscriptionKey];
            if (event === "error") {
              reject(error2);
            } else {
              resolve(this.#rows.splice(0, this.#streamChunkSize));
            }
          };
          this.#request.resume();
        });
      }
      #addParametersToRequest(parameters) {
        for (let i = 0; i < parameters.length; i++) {
          const parameter = parameters[i];
          this.#request.addParameter(String(i + 1), this.#getTediousDataType(parameter), parameter);
        }
      }
      #attachListeners() {
        const pauseAndEmitChunkReady = this.#streamChunkSize ? () => {
          if (this.#streamChunkSize <= this.#rows.length) {
            this.#request.pause();
            Object.values(this.#subscribers).forEach((subscriber) => subscriber("chunkReady"));
          }
        } : () => {
        };
        const rowListener = /* @__PURE__ */ __name2((columns) => {
          const row = {};
          for (const column of columns) {
            row[column.metadata.colName] = column.value;
          }
          this.#rows.push(row);
          pauseAndEmitChunkReady();
        }, "rowListener");
        this.#request.on("row", rowListener);
        this.#request.once("requestCompleted", () => {
          Object.values(this.#subscribers).forEach((subscriber) => subscriber("completed"));
          this.#request.off("row", rowListener);
        });
      }
      #getTediousDataType(value) {
        if (isNull(value) || isUndefined(value) || isString(value)) {
          return this.#tedious.TYPES.NVarChar;
        }
        if (isBigInt(value) || isNumber(value) && value % 1 === 0) {
          if (value < -2147483648 || value > 2147483647) {
            return this.#tedious.TYPES.BigInt;
          } else {
            return this.#tedious.TYPES.Int;
          }
        }
        if (isNumber(value)) {
          return this.#tedious.TYPES.Float;
        }
        if (isBoolean(value)) {
          return this.#tedious.TYPES.Bit;
        }
        if (isDate(value)) {
          return this.#tedious.TYPES.DateTime;
        }
        if (isBuffer(value)) {
          return this.#tedious.TYPES.VarBinary;
        }
        return this.#tedious.TYPES.NVarChar;
      }
    };
  }
});
var MssqlIntrospector;
var init_mssql_introspector = __esm({
  "../node_modules/kysely/dist/esm/dialect/mssql/mssql-introspector.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_migrator();
    init_object_utils();
    MssqlIntrospector = class {
      static {
        __name(this, "MssqlIntrospector");
      }
      static {
        __name2(this, "MssqlIntrospector");
      }
      #db;
      constructor(db) {
        this.#db = db;
      }
      async getSchemas() {
        return await this.#db.selectFrom("sys.schemas").select("name").execute();
      }
      async getTables(options = { withInternalKyselyTables: false }) {
        const rawColumns = await this.#db.selectFrom("sys.tables as tables").leftJoin("sys.schemas as table_schemas", "table_schemas.schema_id", "tables.schema_id").innerJoin("sys.columns as columns", "columns.object_id", "tables.object_id").innerJoin("sys.types as types", "types.user_type_id", "columns.user_type_id").leftJoin("sys.schemas as type_schemas", "type_schemas.schema_id", "types.schema_id").leftJoin("sys.extended_properties as comments", (join) => join.onRef("comments.major_id", "=", "tables.object_id").onRef("comments.minor_id", "=", "columns.column_id").on("comments.name", "=", "MS_Description")).$if(!options.withInternalKyselyTables, (qb) => qb.where("tables.name", "!=", DEFAULT_MIGRATION_TABLE).where("tables.name", "!=", DEFAULT_MIGRATION_LOCK_TABLE)).select([
          "tables.name as table_name",
          (eb) => eb.ref("tables.type").$castTo().as("table_type"),
          "table_schemas.name as table_schema_name",
          "columns.default_object_id as column_default_object_id",
          "columns.generated_always_type_desc as column_generated_always_type",
          "columns.is_computed as column_is_computed",
          "columns.is_identity as column_is_identity",
          "columns.is_nullable as column_is_nullable",
          "columns.is_rowguidcol as column_is_rowguidcol",
          "columns.name as column_name",
          "types.is_nullable as type_is_nullable",
          "types.name as type_name",
          "type_schemas.name as type_schema_name",
          "comments.value as column_comment"
        ]).unionAll(this.#db.selectFrom("sys.views as views").leftJoin("sys.schemas as view_schemas", "view_schemas.schema_id", "views.schema_id").innerJoin("sys.columns as columns", "columns.object_id", "views.object_id").innerJoin("sys.types as types", "types.user_type_id", "columns.user_type_id").leftJoin("sys.schemas as type_schemas", "type_schemas.schema_id", "types.schema_id").leftJoin("sys.extended_properties as comments", (join) => join.onRef("comments.major_id", "=", "views.object_id").onRef("comments.minor_id", "=", "columns.column_id").on("comments.name", "=", "MS_Description")).select([
          "views.name as table_name",
          "views.type as table_type",
          "view_schemas.name as table_schema_name",
          "columns.default_object_id as column_default_object_id",
          "columns.generated_always_type_desc as column_generated_always_type",
          "columns.is_computed as column_is_computed",
          "columns.is_identity as column_is_identity",
          "columns.is_nullable as column_is_nullable",
          "columns.is_rowguidcol as column_is_rowguidcol",
          "columns.name as column_name",
          "types.is_nullable as type_is_nullable",
          "types.name as type_name",
          "type_schemas.name as type_schema_name",
          "comments.value as column_comment"
        ])).orderBy("table_schema_name").orderBy("table_name").orderBy("column_name").execute();
        const tableDictionary = {};
        for (const rawColumn of rawColumns) {
          const key = `${rawColumn.table_schema_name}.${rawColumn.table_name}`;
          const table = tableDictionary[key] = tableDictionary[key] || freeze({
            columns: [],
            isView: rawColumn.table_type === "V ",
            name: rawColumn.table_name,
            schema: rawColumn.table_schema_name ?? void 0
          });
          table.columns.push(freeze({
            dataType: rawColumn.type_name,
            dataTypeSchema: rawColumn.type_schema_name ?? void 0,
            hasDefaultValue: rawColumn.column_default_object_id > 0 || rawColumn.column_generated_always_type !== "NOT_APPLICABLE" || rawColumn.column_is_identity || rawColumn.column_is_computed || rawColumn.column_is_rowguidcol,
            isAutoIncrementing: rawColumn.column_is_identity,
            isNullable: rawColumn.column_is_nullable && rawColumn.type_is_nullable,
            name: rawColumn.column_name,
            comment: rawColumn.column_comment ?? void 0
          }));
        }
        return Object.values(tableDictionary);
      }
      async getMetadata(options) {
        return {
          tables: await this.getTables(options)
        };
      }
    };
  }
});
var COLLATION_CHAR_REGEX;
var MssqlQueryCompiler;
var init_mssql_query_compiler = __esm({
  "../node_modules/kysely/dist/esm/dialect/mssql/mssql-query-compiler.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_default_query_compiler();
    COLLATION_CHAR_REGEX = /^[a-z0-9_]$/i;
    MssqlQueryCompiler = class extends DefaultQueryCompiler {
      static {
        __name(this, "MssqlQueryCompiler");
      }
      static {
        __name2(this, "MssqlQueryCompiler");
      }
      getCurrentParameterPlaceholder() {
        return `@${this.numParameters}`;
      }
      visitOffset(node) {
        super.visitOffset(node);
        this.append(" rows");
      }
      // mssql allows multi-column alterations in a single statement,
      // but you can only use the command keyword/s once.
      // it also doesn't support multiple kinds of commands in the same
      // alter table statement, but we compile that anyway for the sake
      // of WYSIWYG.
      compileColumnAlterations(columnAlterations) {
        const nodesByKind = {};
        for (const columnAlteration of columnAlterations) {
          if (!nodesByKind[columnAlteration.kind]) {
            nodesByKind[columnAlteration.kind] = [];
          }
          nodesByKind[columnAlteration.kind].push(columnAlteration);
        }
        let first = true;
        if (nodesByKind.AddColumnNode) {
          this.append("add ");
          this.compileList(nodesByKind.AddColumnNode);
          first = false;
        }
        if (nodesByKind.AlterColumnNode) {
          if (!first)
            this.append(", ");
          this.compileList(nodesByKind.AlterColumnNode);
        }
        if (nodesByKind.DropColumnNode) {
          if (!first)
            this.append(", ");
          this.append("drop column ");
          this.compileList(nodesByKind.DropColumnNode);
        }
        if (nodesByKind.ModifyColumnNode) {
          if (!first)
            this.append(", ");
          this.compileList(nodesByKind.ModifyColumnNode);
        }
        if (nodesByKind.RenameColumnNode) {
          if (!first)
            this.append(", ");
          this.compileList(nodesByKind.RenameColumnNode);
        }
      }
      visitAddColumn(node) {
        this.visitNode(node.column);
      }
      visitDropColumn(node) {
        this.visitNode(node.column);
      }
      visitMergeQuery(node) {
        super.visitMergeQuery(node);
        this.append(";");
      }
      visitCollate(node) {
        this.append("collate ");
        const { name } = node.collation;
        for (const char of name) {
          if (!COLLATION_CHAR_REGEX.test(char)) {
            throw new Error(`Invalid collation: ${name}`);
          }
        }
        this.append(name);
      }
      announcesNewColumnDataType() {
        return false;
      }
    };
  }
});
var MssqlDialect;
var init_mssql_dialect = __esm({
  "../node_modules/kysely/dist/esm/dialect/mssql/mssql-dialect.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_mssql_adapter();
    init_mssql_driver();
    init_mssql_introspector();
    init_mssql_query_compiler();
    MssqlDialect = class {
      static {
        __name(this, "MssqlDialect");
      }
      static {
        __name2(this, "MssqlDialect");
      }
      #config;
      constructor(config2) {
        this.#config = config2;
      }
      createDriver() {
        return new MssqlDriver(this.#config);
      }
      createQueryCompiler() {
        return new MssqlQueryCompiler();
      }
      createAdapter() {
        return new MssqlAdapter();
      }
      createIntrospector(db) {
        return new MssqlIntrospector(db);
      }
    };
  }
});
var init_query_compiler = __esm({
  "../node_modules/kysely/dist/esm/query-compiler/query-compiler.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
  }
});
var init_file_migration_provider = __esm({
  "../node_modules/kysely/dist/esm/migration/file-migration-provider.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
  }
});
var init_kysely_plugin = __esm({
  "../node_modules/kysely/dist/esm/plugin/kysely-plugin.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
  }
});
var init_camel_case_plugin = __esm({
  "../node_modules/kysely/dist/esm/plugin/camel-case/camel-case-plugin.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
  }
});
var init_deduplicate_joins_plugin = __esm({
  "../node_modules/kysely/dist/esm/plugin/deduplicate-joins/deduplicate-joins-plugin.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
  }
});
var init_parse_json_results_plugin = __esm({
  "../node_modules/kysely/dist/esm/plugin/parse-json-results/parse-json-results-plugin.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
  }
});
var init_handle_empty_in_lists_plugin = __esm({
  "../node_modules/kysely/dist/esm/plugin/handle-empty-in-lists/handle-empty-in-lists-plugin.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
  }
});
var init_handle_empty_in_lists = __esm({
  "../node_modules/kysely/dist/esm/plugin/handle-empty-in-lists/handle-empty-in-lists.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
  }
});
var init_constraint_node = __esm({
  "../node_modules/kysely/dist/esm/operation-node/constraint-node.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
  }
});
var init_operation_node = __esm({
  "../node_modules/kysely/dist/esm/operation-node/operation-node.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
  }
});
var init_simple_reference_expression_node = __esm({
  "../node_modules/kysely/dist/esm/operation-node/simple-reference-expression-node.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
  }
});
var init_column_type = __esm({
  "../node_modules/kysely/dist/esm/util/column-type.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
  }
});
var init_explainable = __esm({
  "../node_modules/kysely/dist/esm/util/explainable.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
  }
});
var init_streamable = __esm({
  "../node_modules/kysely/dist/esm/util/streamable.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
  }
});
var init_infer_result = __esm({
  "../node_modules/kysely/dist/esm/util/infer-result.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
  }
});
var init_esm = __esm({
  "../node_modules/kysely/dist/esm/index.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_kysely();
    init_query_creator();
    init_expression();
    init_expression_wrapper();
    init_where_interface();
    init_returning_interface();
    init_output_interface();
    init_having_interface();
    init_order_by_interface();
    init_select_query_builder();
    init_insert_query_builder();
    init_update_query_builder();
    init_delete_query_builder();
    init_no_result_error();
    init_join_builder();
    init_function_module();
    init_insert_result();
    init_delete_result();
    init_update_result();
    init_on_conflict_builder();
    init_aggregate_function_builder();
    init_case_builder();
    init_json_path_builder();
    init_merge_query_builder();
    init_merge_result();
    init_order_by_item_builder();
    init_raw_builder();
    init_sql3();
    init_query_executor();
    init_default_query_executor();
    init_noop_query_executor();
    init_query_executor_provider();
    init_default_query_compiler();
    init_compiled_query();
    init_schema();
    init_create_table_builder();
    init_create_type_builder();
    init_drop_table_builder();
    init_drop_type_builder();
    init_create_index_builder();
    init_drop_index_builder();
    init_create_schema_builder();
    init_drop_schema_builder();
    init_column_definition_builder();
    init_foreign_key_constraint_builder();
    init_alter_table_builder();
    init_create_view_builder();
    init_refresh_materialized_view_builder();
    init_drop_view_builder();
    init_alter_column_builder();
    init_dynamic();
    init_driver();
    init_database_connection();
    init_connection_provider();
    init_default_connection_provider();
    init_single_connection_provider();
    init_dummy_driver();
    init_dialect();
    init_dialect_adapter();
    init_dialect_adapter_base();
    init_database_introspector();
    init_sqlite_dialect();
    init_sqlite_dialect_config();
    init_sqlite_driver();
    init_postgres_query_compiler();
    init_postgres_introspector();
    init_postgres_adapter();
    init_mysql_dialect();
    init_mysql_dialect_config();
    init_mysql_driver();
    init_mysql_query_compiler();
    init_mysql_introspector();
    init_mysql_adapter();
    init_postgres_driver();
    init_postgres_dialect_config();
    init_postgres_dialect();
    init_sqlite_query_compiler();
    init_sqlite_introspector();
    init_sqlite_adapter();
    init_mssql_adapter();
    init_mssql_dialect_config();
    init_mssql_dialect();
    init_mssql_driver();
    init_mssql_introspector();
    init_mssql_query_compiler();
    init_default_query_compiler();
    init_query_compiler();
    init_migrator();
    init_file_migration_provider();
    init_kysely_plugin();
    init_camel_case_plugin();
    init_deduplicate_joins_plugin();
    init_with_schema_plugin();
    init_parse_json_results_plugin();
    init_handle_empty_in_lists_plugin();
    init_handle_empty_in_lists();
    init_add_column_node();
    init_add_constraint_node();
    init_add_index_node();
    init_aggregate_function_node();
    init_alias_node();
    init_alter_column_node();
    init_alter_table_node();
    init_and_node();
    init_binary_operation_node();
    init_case_node();
    init_cast_node();
    init_check_constraint_node();
    init_collate_node();
    init_column_definition_node();
    init_column_node();
    init_column_update_node();
    init_common_table_expression_name_node();
    init_common_table_expression_node();
    init_constraint_node();
    init_create_index_node();
    init_create_schema_node();
    init_create_table_node();
    init_create_type_node();
    init_create_view_node();
    init_refresh_materialized_view_node();
    init_data_type_node();
    init_default_insert_value_node();
    init_default_value_node();
    init_delete_query_node();
    init_drop_column_node();
    init_drop_constraint_node();
    init_drop_index_node();
    init_drop_schema_node();
    init_drop_table_node();
    init_drop_type_node();
    init_drop_view_node();
    init_explain_node();
    init_fetch_node();
    init_foreign_key_constraint_node();
    init_from_node();
    init_function_node();
    init_generated_node();
    init_group_by_item_node();
    init_group_by_node();
    init_having_node();
    init_identifier_node();
    init_insert_query_node();
    init_join_node();
    init_json_operator_chain_node();
    init_json_path_leg_node();
    init_json_path_node();
    init_json_reference_node();
    init_limit_node();
    init_list_node();
    init_matched_node();
    init_merge_query_node();
    init_modify_column_node();
    init_offset_node();
    init_on_conflict_node();
    init_on_duplicate_key_node();
    init_on_node();
    init_operation_node_source();
    init_operation_node_transformer();
    init_operation_node_visitor();
    init_operation_node();
    init_operator_node();
    init_or_action_node();
    init_or_node();
    init_order_by_item_node();
    init_order_by_node();
    init_output_node();
    init_over_node();
    init_parens_node();
    init_partition_by_item_node();
    init_partition_by_node();
    init_primary_key_constraint_node();
    init_primitive_value_list_node();
    init_query_node();
    init_raw_node();
    init_reference_node();
    init_references_node();
    init_rename_column_node();
    init_rename_constraint_node();
    init_returning_node();
    init_schemable_identifier_node();
    init_select_all_node();
    init_select_modifier_node();
    init_select_query_node();
    init_selection_node();
    init_set_operation_node();
    init_simple_reference_expression_node();
    init_table_node();
    init_top_node();
    init_tuple_node();
    init_unary_operation_node();
    init_unique_constraint_node();
    init_update_query_node();
    init_using_node();
    init_value_list_node();
    init_value_node();
    init_values_node();
    init_when_node();
    init_where_node();
    init_with_node();
    init_column_type();
    init_compilable();
    init_explainable();
    init_streamable();
    init_log();
    init_infer_result();
  }
});
var LibsqlDialect;
var LibsqlDriver;
var LibsqlConnection;
var init_lib_esm3 = __esm({
  "../node_modules/@libsql/kysely-libsql/lib-esm/index.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_web5();
    init_esm();
    init_web5();
    LibsqlDialect = class {
      static {
        __name(this, "LibsqlDialect");
      }
      static {
        __name2(this, "LibsqlDialect");
      }
      #config;
      constructor(config2) {
        this.#config = config2;
      }
      createAdapter() {
        return new SqliteAdapter();
      }
      createDriver() {
        let client;
        let closeClient;
        if ("client" in this.#config) {
          client = this.#config.client;
          closeClient = false;
        } else if (this.#config.url !== void 0) {
          client = createClient2(this.#config);
          closeClient = true;
        } else {
          throw new Error("Please specify either `client` or `url` in the LibsqlDialect config");
        }
        return new LibsqlDriver(client, closeClient);
      }
      createIntrospector(db) {
        return new SqliteIntrospector(db);
      }
      createQueryCompiler() {
        return new SqliteQueryCompiler();
      }
    };
    LibsqlDriver = class {
      static {
        __name(this, "LibsqlDriver");
      }
      static {
        __name2(this, "LibsqlDriver");
      }
      client;
      #closeClient;
      constructor(client, closeClient) {
        this.client = client;
        this.#closeClient = closeClient;
      }
      async init() {
      }
      async acquireConnection() {
        return new LibsqlConnection(this.client);
      }
      async beginTransaction(connection, _settings) {
        await connection.beginTransaction();
      }
      async commitTransaction(connection) {
        await connection.commitTransaction();
      }
      async rollbackTransaction(connection) {
        await connection.rollbackTransaction();
      }
      async releaseConnection(_conn) {
      }
      async destroy() {
        if (this.#closeClient) {
          this.client.close();
        }
      }
    };
    LibsqlConnection = class {
      static {
        __name(this, "LibsqlConnection");
      }
      static {
        __name2(this, "LibsqlConnection");
      }
      client;
      #transaction;
      constructor(client) {
        this.client = client;
      }
      async executeQuery(compiledQuery) {
        const target = this.#transaction ?? this.client;
        const result = await target.execute({
          sql: compiledQuery.sql,
          args: compiledQuery.parameters
        });
        return {
          insertId: result.lastInsertRowid,
          numAffectedRows: BigInt(result.rowsAffected),
          rows: result.rows
        };
      }
      async beginTransaction() {
        if (this.#transaction) {
          throw new Error("Transaction already in progress");
        }
        this.#transaction = await this.client.transaction();
      }
      async commitTransaction() {
        if (!this.#transaction) {
          throw new Error("No transaction to commit");
        }
        await this.#transaction.commit();
        this.#transaction = void 0;
      }
      async rollbackTransaction() {
        if (!this.#transaction) {
          throw new Error("No transaction to rollback");
        }
        await this.#transaction.rollback();
        this.#transaction = void 0;
      }
      async *streamQuery(_compiledQuery, _chunkSize) {
        throw new Error("Libsql Driver does not support streaming yet");
      }
    };
  }
});
var webCrypto;
var subtle;
var getRandomValues;
var init_crypto_web = __esm({
  "../node_modules/uncrypto/dist/crypto.web.mjs"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    webCrypto = globalThis.crypto;
    subtle = webCrypto.subtle;
    getRandomValues = /* @__PURE__ */ __name2((array3) => {
      return webCrypto.getRandomValues(array3);
    }, "getRandomValues");
  }
});
function createRouter() {
  const ctx = {
    root: { key: "" },
    static: new EmptyObject()
  };
  return ctx;
}
__name(createRouter, "createRouter");
function splitPath(path) {
  return path.split("/").filter(Boolean);
}
__name(splitPath, "splitPath");
function getMatchParams(segments, paramsMap) {
  const params = new EmptyObject();
  for (const [index, name] of paramsMap) {
    const segment = index < 0 ? segments.slice(-1 * index).join("/") : segments[index];
    if (typeof name === "string") {
      params[name] = segment;
    } else {
      const match2 = segment.match(name);
      if (match2) {
        for (const key in match2.groups) {
          params[key] = match2.groups[key];
        }
      }
    }
  }
  return params;
}
__name(getMatchParams, "getMatchParams");
function addRoute(ctx, method = "", path, data) {
  const segments = splitPath(path);
  let node = ctx.root;
  let _unnamedParamIndex = 0;
  const paramsMap = [];
  for (let i = 0; i < segments.length; i++) {
    const segment = segments[i];
    if (segment.startsWith("**")) {
      if (!node.wildcard) {
        node.wildcard = { key: "**" };
      }
      node = node.wildcard;
      paramsMap.push([
        -i,
        segment.split(":")[1] || "_",
        segment.length === 2
      ]);
      break;
    }
    if (segment === "*" || segment.includes(":")) {
      if (!node.param) {
        node.param = { key: "*" };
      }
      node = node.param;
      const isOptional = segment === "*";
      paramsMap.push([
        i,
        isOptional ? `_${_unnamedParamIndex++}` : _getParamMatcher(segment),
        isOptional
      ]);
      continue;
    }
    const child = node.static?.[segment];
    if (child) {
      node = child;
    } else {
      const staticNode = { key: segment };
      if (!node.static) {
        node.static = new EmptyObject();
      }
      node.static[segment] = staticNode;
      node = staticNode;
    }
  }
  const hasParams = paramsMap.length > 0;
  if (!node.methods) {
    node.methods = new EmptyObject();
  }
  if (!node.methods[method]) {
    node.methods[method] = [];
  }
  node.methods[method].push({
    data: data || null,
    paramsMap: hasParams ? paramsMap : void 0
  });
  if (!hasParams) {
    ctx.static[path] = node;
  }
}
__name(addRoute, "addRoute");
function _getParamMatcher(segment) {
  if (!segment.includes(":", 1)) {
    return segment.slice(1);
  }
  const regex = segment.replace(/:(\w+)/g, (_, id) => `(?<${id}>\\w+)`);
  return new RegExp(`^${regex}$`);
}
__name(_getParamMatcher, "_getParamMatcher");
function findRoute(ctx, method = "", path, opts) {
  if (path[path.length - 1] === "/") {
    path = path.slice(0, -1);
  }
  const staticNode = ctx.static[path];
  if (staticNode && staticNode.methods) {
    const staticMatch = staticNode.methods[method] || staticNode.methods[""];
    if (staticMatch !== void 0) {
      return staticMatch[0];
    }
  }
  const segments = splitPath(path);
  const match2 = _lookupTree(ctx, ctx.root, method, segments, 0)?.[0];
  if (match2 === void 0) {
    return;
  }
  if (opts?.params === false) {
    return match2;
  }
  return {
    data: match2.data,
    params: match2.paramsMap ? getMatchParams(segments, match2.paramsMap) : void 0
  };
}
__name(findRoute, "findRoute");
function _lookupTree(ctx, node, method, segments, index) {
  if (index === segments.length) {
    if (node.methods) {
      const match2 = node.methods[method] || node.methods[""];
      if (match2) {
        return match2;
      }
    }
    if (node.param && node.param.methods) {
      const match2 = node.param.methods[method] || node.param.methods[""];
      if (match2) {
        const pMap = match2[0].paramsMap;
        if (pMap?.[pMap?.length - 1]?.[2]) {
          return match2;
        }
      }
    }
    if (node.wildcard && node.wildcard.methods) {
      const match2 = node.wildcard.methods[method] || node.wildcard.methods[""];
      if (match2) {
        const pMap = match2[0].paramsMap;
        if (pMap?.[pMap?.length - 1]?.[2]) {
          return match2;
        }
      }
    }
    return void 0;
  }
  const segment = segments[index];
  if (node.static) {
    const staticChild = node.static[segment];
    if (staticChild) {
      const match2 = _lookupTree(ctx, staticChild, method, segments, index + 1);
      if (match2) {
        return match2;
      }
    }
  }
  if (node.param) {
    const match2 = _lookupTree(ctx, node.param, method, segments, index + 1);
    if (match2) {
      return match2;
    }
  }
  if (node.wildcard && node.wildcard.methods) {
    return node.wildcard.methods[method] || node.wildcard.methods[""];
  }
  return;
}
__name(_lookupTree, "_lookupTree");
function findAllRoutes(ctx, method = "", path, opts) {
  if (path[path.length - 1] === "/") {
    path = path.slice(0, -1);
  }
  const segments = splitPath(path);
  const matches = _findAll(ctx, ctx.root, method, segments, 0);
  if (opts?.params === false) {
    return matches;
  }
  return matches.map((m) => {
    return {
      data: m.data,
      params: m.paramsMap ? getMatchParams(segments, m.paramsMap) : void 0
    };
  });
}
__name(findAllRoutes, "findAllRoutes");
function _findAll(ctx, node, method, segments, index, matches = []) {
  const segment = segments[index];
  if (node.wildcard && node.wildcard.methods) {
    const match2 = node.wildcard.methods[method] || node.wildcard.methods[""];
    if (match2) {
      matches.push(...match2);
    }
  }
  if (node.param) {
    _findAll(ctx, node.param, method, segments, index + 1, matches);
    if (index === segments.length && node.param.methods) {
      const match2 = node.param.methods[method] || node.param.methods[""];
      if (match2) {
        matches.push(...match2);
      }
    }
  }
  const staticChild = node.static?.[segment];
  if (staticChild) {
    _findAll(ctx, staticChild, method, segments, index + 1, matches);
  }
  if (index === segments.length && node.methods) {
    const match2 = node.methods[method] || node.methods[""];
    if (match2) {
      matches.push(...match2);
    }
  }
  return matches;
}
__name(_findAll, "_findAll");
var EmptyObject;
var init_dist = __esm({
  "../node_modules/rou3/dist/index.mjs"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    EmptyObject = /* @__PURE__ */ (() => {
      const C = /* @__PURE__ */ __name2(function() {
      }, "C");
      C.prototype = /* @__PURE__ */ Object.create(null);
      return C;
    })();
    __name2(createRouter, "createRouter");
    __name2(splitPath, "splitPath");
    __name2(getMatchParams, "getMatchParams");
    __name2(addRoute, "addRoute");
    __name2(_getParamMatcher, "_getParamMatcher");
    __name2(findRoute, "findRoute");
    __name2(_lookupTree, "_lookupTree");
    __name2(findAllRoutes, "findAllRoutes");
    __name2(_findAll, "_findAll");
  }
});
async function getBody(request) {
  const contentType = request.headers.get("content-type") || "";
  if (!request.body) {
    return void 0;
  }
  if (contentType.includes("application/json")) {
    return await request.json();
  }
  if (contentType.includes("application/x-www-form-urlencoded")) {
    const formData = await request.formData();
    const result = {};
    formData.forEach((value, key) => {
      result[key] = value.toString();
    });
    return result;
  }
  if (contentType.includes("multipart/form-data")) {
    const formData = await request.formData();
    const result = {};
    formData.forEach((value, key) => {
      result[key] = value;
    });
    return result;
  }
  if (contentType.includes("text/plain")) {
    return await request.text();
  }
  if (contentType.includes("application/octet-stream")) {
    return await request.arrayBuffer();
  }
  if (contentType.includes("application/pdf") || contentType.includes("image/") || contentType.includes("video/")) {
    const blob = await request.blob();
    return blob;
  }
  if (contentType.includes("application/stream") || request.body instanceof ReadableStream) {
    return request.body;
  }
  return await request.text();
}
__name(getBody, "getBody");
function isAPIError(error2) {
  return error2 instanceof APIError || error2?.name === "APIError";
}
__name(isAPIError, "isAPIError");
function tryDecode(str) {
  try {
    return str.includes("%") ? decodeURIComponent(str) : str;
  } catch {
    return str;
  }
}
__name(tryDecode, "tryDecode");
function isJSONSerializable(value) {
  if (value === void 0) {
    return false;
  }
  const t = typeof value;
  if (t === "string" || t === "number" || t === "boolean" || t === null) {
    return true;
  }
  if (t !== "object") {
    return false;
  }
  if (Array.isArray(value)) {
    return true;
  }
  if (value.buffer) {
    return false;
  }
  return value.constructor && value.constructor.name === "Object" || typeof value.toJSON === "function";
}
__name(isJSONSerializable, "isJSONSerializable");
function toResponse(data, init2) {
  if (data instanceof Response) {
    if (init2?.headers instanceof Headers) {
      init2.headers.forEach((value, key) => {
        data.headers.set(key, value);
      });
    }
    return data;
  }
  if (data?._flag === "json") {
    const routerResponse = data.routerResponse;
    if (routerResponse instanceof Response) {
      return routerResponse;
    }
    return toResponse(data.body, {
      headers: data.headers,
      status: data.status
    });
  }
  if (isAPIError(data)) {
    return toResponse(data.body, {
      status: data.statusCode,
      statusText: data.status.toString(),
      headers: init2?.headers || data.headers
    });
  }
  let body = data;
  let headers = new Headers(init2?.headers);
  if (!data) {
    if (data === null) {
      body = JSON.stringify(null);
    }
    headers.set("content-type", "application/json");
  } else if (typeof data === "string") {
    body = data;
    headers.set("Content-Type", "text/plain");
  } else if (data instanceof ArrayBuffer || ArrayBuffer.isView(data)) {
    body = data;
    headers.set("Content-Type", "application/octet-stream");
  } else if (data instanceof Blob) {
    body = data;
    headers.set("Content-Type", data.type || "application/octet-stream");
  } else if (data instanceof FormData) {
    body = data;
  } else if (data instanceof URLSearchParams) {
    body = data;
    headers.set("Content-Type", "application/x-www-form-urlencoded");
  } else if (data instanceof ReadableStream) {
    body = data;
    headers.set("Content-Type", "application/octet-stream");
  } else if (isJSONSerializable(data)) {
    body = JSON.stringify(data);
    headers.set("Content-Type", "application/json");
  }
  return new Response(body, {
    ...init2,
    headers
  });
}
__name(toResponse, "toResponse");
async function runValidation(options, context = {}) {
  let request = {
    body: context.body,
    query: context.query
  };
  if (options.body) {
    const result = await options.body["~standard"].validate(context.body);
    if (result.issues) {
      return {
        data: null,
        error: fromError(result.issues, "body")
      };
    }
    request.body = result.value;
  }
  if (options.query) {
    const result = await options.query["~standard"].validate(context.query);
    if (result.issues) {
      return {
        data: null,
        error: fromError(result.issues, "query")
      };
    }
    request.query = result.value;
  }
  if (options.requireHeaders && !context.headers) {
    return {
      data: null,
      error: { message: "Headers is required" }
    };
  }
  if (options.requireRequest && !context.request) {
    return {
      data: null,
      error: { message: "Request is required" }
    };
  }
  return {
    data: request,
    error: null
  };
}
__name(runValidation, "runValidation");
function fromError(error2, validating) {
  const errorMessages = [];
  for (const issue of error2) {
    const message2 = issue.message;
    errorMessages.push(message2);
  }
  return {
    message: `Invalid ${validating} parameters`
  };
}
__name(fromError, "fromError");
function parseCookies(str) {
  if (typeof str !== "string") {
    throw new TypeError("argument str must be a string");
  }
  const cookies = /* @__PURE__ */ new Map();
  let index = 0;
  while (index < str.length) {
    const eqIdx = str.indexOf("=", index);
    if (eqIdx === -1) {
      break;
    }
    let endIdx = str.indexOf(";", index);
    if (endIdx === -1) {
      endIdx = str.length;
    } else if (endIdx < eqIdx) {
      index = str.lastIndexOf(";", eqIdx - 1) + 1;
      continue;
    }
    const key = str.slice(index, eqIdx).trim();
    if (!cookies.has(key)) {
      let val = str.slice(eqIdx + 1, endIdx).trim();
      if (val.codePointAt(0) === 34) {
        val = val.slice(1, -1);
      }
      cookies.set(key, tryDecode(val));
    }
    index = endIdx + 1;
  }
  return cookies;
}
__name(parseCookies, "parseCookies");
function createMiddleware(optionsOrHandler, handler) {
  const internalHandler = /* @__PURE__ */ __name2(async (inputCtx) => {
    const context = inputCtx;
    const _handler = typeof optionsOrHandler === "function" ? optionsOrHandler : handler;
    const options = typeof optionsOrHandler === "function" ? {} : optionsOrHandler;
    const internalContext = await createInternalContext(context, {
      options,
      path: "/"
    });
    if (!_handler) {
      throw new Error("handler must be defined");
    }
    const response = await _handler(internalContext);
    const headers = internalContext.responseHeaders;
    return context.returnHeaders ? {
      headers,
      response
    } : response;
  }, "internalHandler");
  internalHandler.options = typeof optionsOrHandler === "function" ? {} : optionsOrHandler;
  return internalHandler;
}
__name(createMiddleware, "createMiddleware");
function getErrorMap() {
  return overrideErrorMap;
}
__name(getErrorMap, "getErrorMap");
function addIssueToContext(ctx, issueData) {
  const overrideMap = getErrorMap();
  const issue = makeIssue({
    issueData,
    data: ctx.data,
    path: ctx.path,
    errorMaps: [
      ctx.common.contextualErrorMap,
      // contextual error map is first priority
      ctx.schemaErrorMap,
      // then schema-bound map if available
      overrideMap,
      // then global override map
      overrideMap === errorMap ? void 0 : errorMap
      // then global default map
    ].filter((x) => !!x)
  });
  ctx.common.issues.push(issue);
}
__name(addIssueToContext, "addIssueToContext");
function __classPrivateFieldGet(receiver, state, kind, f) {
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}
__name(__classPrivateFieldGet, "__classPrivateFieldGet");
function __classPrivateFieldSet(receiver, state, value, kind, f) {
  if (kind === "m") throw new TypeError("Private method is not writable");
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
}
__name(__classPrivateFieldSet, "__classPrivateFieldSet");
function processCreateParams(params) {
  if (!params)
    return {};
  const { errorMap: errorMap22, invalid_type_error, required_error, description } = params;
  if (errorMap22 && (invalid_type_error || required_error)) {
    throw new Error(`Can't use "invalid_type_error" or "required_error" in conjunction with custom error map.`);
  }
  if (errorMap22)
    return { errorMap: errorMap22, description };
  const customMap = /* @__PURE__ */ __name2((iss, ctx) => {
    var _a, _b;
    const { message: message2 } = params;
    if (iss.code === "invalid_enum_value") {
      return { message: message2 !== null && message2 !== void 0 ? message2 : ctx.defaultError };
    }
    if (typeof ctx.data === "undefined") {
      return { message: (_a = message2 !== null && message2 !== void 0 ? message2 : required_error) !== null && _a !== void 0 ? _a : ctx.defaultError };
    }
    if (iss.code !== "invalid_type")
      return { message: ctx.defaultError };
    return { message: (_b = message2 !== null && message2 !== void 0 ? message2 : invalid_type_error) !== null && _b !== void 0 ? _b : ctx.defaultError };
  }, "customMap");
  return { errorMap: customMap, description };
}
__name(processCreateParams, "processCreateParams");
function timeRegexSource(args) {
  let regex = `([01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d`;
  if (args.precision) {
    regex = `${regex}\\.\\d{${args.precision}}`;
  } else if (args.precision == null) {
    regex = `${regex}(\\.\\d+)?`;
  }
  return regex;
}
__name(timeRegexSource, "timeRegexSource");
function timeRegex(args) {
  return new RegExp(`^${timeRegexSource(args)}$`);
}
__name(timeRegex, "timeRegex");
function datetimeRegex(args) {
  let regex = `${dateRegexSource}T${timeRegexSource(args)}`;
  const opts = [];
  opts.push(args.local ? `Z?` : `Z`);
  if (args.offset)
    opts.push(`([+-]\\d{2}:?\\d{2})`);
  regex = `${regex}(${opts.join("|")})`;
  return new RegExp(`^${regex}$`);
}
__name(datetimeRegex, "datetimeRegex");
function isValidIP(ip, version2) {
  if ((version2 === "v4" || !version2) && ipv4Regex.test(ip)) {
    return true;
  }
  if ((version2 === "v6" || !version2) && ipv6Regex.test(ip)) {
    return true;
  }
  return false;
}
__name(isValidIP, "isValidIP");
function isValidJWT(jwt, alg) {
  if (!jwtRegex.test(jwt))
    return false;
  try {
    const [header] = jwt.split(".");
    const base642 = header.replace(/-/g, "+").replace(/_/g, "/").padEnd(header.length + (4 - header.length % 4) % 4, "=");
    const decoded = JSON.parse(atob(base642));
    if (typeof decoded !== "object" || decoded === null)
      return false;
    if (!decoded.typ || !decoded.alg)
      return false;
    if (alg && decoded.alg !== alg)
      return false;
    return true;
  } catch (_a) {
    return false;
  }
}
__name(isValidJWT, "isValidJWT");
function isValidCidr(ip, version2) {
  if ((version2 === "v4" || !version2) && ipv4CidrRegex.test(ip)) {
    return true;
  }
  if ((version2 === "v6" || !version2) && ipv6CidrRegex.test(ip)) {
    return true;
  }
  return false;
}
__name(isValidCidr, "isValidCidr");
function floatSafeRemainder(val, step) {
  const valDecCount = (val.toString().split(".")[1] || "").length;
  const stepDecCount = (step.toString().split(".")[1] || "").length;
  const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;
  const valInt = parseInt(val.toFixed(decCount).replace(".", ""));
  const stepInt = parseInt(step.toFixed(decCount).replace(".", ""));
  return valInt % stepInt / Math.pow(10, decCount);
}
__name(floatSafeRemainder, "floatSafeRemainder");
function deepPartialify(schema2) {
  if (schema2 instanceof ZodObject) {
    const newShape = {};
    for (const key in schema2.shape) {
      const fieldSchema = schema2.shape[key];
      newShape[key] = ZodOptional.create(deepPartialify(fieldSchema));
    }
    return new ZodObject({
      ...schema2._def,
      shape: /* @__PURE__ */ __name2(() => newShape, "shape")
    });
  } else if (schema2 instanceof ZodArray) {
    return new ZodArray({
      ...schema2._def,
      type: deepPartialify(schema2.element)
    });
  } else if (schema2 instanceof ZodOptional) {
    return ZodOptional.create(deepPartialify(schema2.unwrap()));
  } else if (schema2 instanceof ZodNullable) {
    return ZodNullable.create(deepPartialify(schema2.unwrap()));
  } else if (schema2 instanceof ZodTuple) {
    return ZodTuple.create(schema2.items.map((item) => deepPartialify(item)));
  } else {
    return schema2;
  }
}
__name(deepPartialify, "deepPartialify");
function mergeValues(a, b) {
  const aType = getParsedType(a);
  const bType = getParsedType(b);
  if (a === b) {
    return { valid: true, data: a };
  } else if (aType === ZodParsedType.object && bType === ZodParsedType.object) {
    const bKeys = util.objectKeys(b);
    const sharedKeys = util.objectKeys(a).filter((key) => bKeys.indexOf(key) !== -1);
    const newObj = { ...a, ...b };
    for (const key of sharedKeys) {
      const sharedValue = mergeValues(a[key], b[key]);
      if (!sharedValue.valid) {
        return { valid: false };
      }
      newObj[key] = sharedValue.data;
    }
    return { valid: true, data: newObj };
  } else if (aType === ZodParsedType.array && bType === ZodParsedType.array) {
    if (a.length !== b.length) {
      return { valid: false };
    }
    const newArray = [];
    for (let index = 0; index < a.length; index++) {
      const itemA = a[index];
      const itemB = b[index];
      const sharedValue = mergeValues(itemA, itemB);
      if (!sharedValue.valid) {
        return { valid: false };
      }
      newArray.push(sharedValue.data);
    }
    return { valid: true, data: newArray };
  } else if (aType === ZodParsedType.date && bType === ZodParsedType.date && +a === +b) {
    return { valid: true, data: a };
  } else {
    return { valid: false };
  }
}
__name(mergeValues, "mergeValues");
function createZodEnum(values, params) {
  return new ZodEnum({
    values,
    typeName: ZodFirstPartyTypeKind.ZodEnum,
    ...processCreateParams(params)
  });
}
__name(createZodEnum, "createZodEnum");
function getTypeFromZodType(zodType) {
  switch (zodType.constructor.name) {
    case "ZodString":
      return "string";
    case "ZodNumber":
      return "number";
    case "ZodBoolean":
      return "boolean";
    case "ZodObject":
      return "object";
    case "ZodArray":
      return "array";
    default:
      return "string";
  }
}
__name(getTypeFromZodType, "getTypeFromZodType");
function getParameters(options) {
  const parameters = [];
  if (options.metadata?.openapi?.parameters) {
    parameters.push(...options.metadata.openapi.parameters);
    return parameters;
  }
  if (options.query instanceof ZodObject) {
    Object.entries(options.query.shape).forEach(([key, value]) => {
      if (value instanceof ZodType) {
        parameters.push({
          name: key,
          in: "query",
          schema: {
            type: getTypeFromZodType(value),
            ..."minLength" in value && value.minLength ? {
              minLength: value.minLength
            } : {},
            description: value.description
          }
        });
      }
    });
  }
  return parameters;
}
__name(getParameters, "getParameters");
function getRequestBody(options) {
  if (options.metadata?.openapi?.requestBody) {
    return options.metadata.openapi.requestBody;
  }
  if (!options.body) return void 0;
  if (options.body instanceof ZodObject || options.body instanceof ZodOptional) {
    const shape = options.body.shape;
    if (!shape) return void 0;
    const properties = {};
    const required = [];
    Object.entries(shape).forEach(([key, value]) => {
      if (value instanceof ZodType) {
        properties[key] = {
          type: getTypeFromZodType(value),
          description: value.description
        };
        if (!(value instanceof ZodOptional)) {
          required.push(key);
        }
      }
    });
    return {
      required: options.body instanceof ZodOptional ? false : options.body ? true : false,
      content: {
        "application/json": {
          schema: {
            type: "object",
            properties,
            required
          }
        }
      }
    };
  }
  return void 0;
}
__name(getRequestBody, "getRequestBody");
function getResponse(responses) {
  return {
    "400": {
      content: {
        "application/json": {
          schema: {
            type: "object",
            properties: {
              message: {
                type: "string"
              }
            },
            required: ["message"]
          }
        }
      },
      description: "Bad Request. Usually due to missing parameters, or invalid parameters."
    },
    "401": {
      content: {
        "application/json": {
          schema: {
            type: "object",
            properties: {
              message: {
                type: "string"
              }
            },
            required: ["message"]
          }
        }
      },
      description: "Unauthorized. Due to missing or invalid authentication."
    },
    "403": {
      content: {
        "application/json": {
          schema: {
            type: "object",
            properties: {
              message: {
                type: "string"
              }
            }
          }
        }
      },
      description: "Forbidden. You do not have permission to access this resource or to perform this action."
    },
    "404": {
      content: {
        "application/json": {
          schema: {
            type: "object",
            properties: {
              message: {
                type: "string"
              }
            }
          }
        }
      },
      description: "Not Found. The requested resource was not found."
    },
    "429": {
      content: {
        "application/json": {
          schema: {
            type: "object",
            properties: {
              message: {
                type: "string"
              }
            }
          }
        }
      },
      description: "Too Many Requests. You have exceeded the rate limit. Try again later."
    },
    "500": {
      content: {
        "application/json": {
          schema: {
            type: "object",
            properties: {
              message: {
                type: "string"
              }
            }
          }
        }
      },
      description: "Internal Server Error. This is a problem with the server that you cannot fix."
    },
    ...responses
  };
}
__name(getResponse, "getResponse");
async function generator(endpoints, config2) {
  const components = {
    schemas: {}
  };
  Object.entries(endpoints).forEach(([_, value]) => {
    const options = value.options;
    if (options.metadata?.SERVER_ONLY) return;
    if (options.method === "GET") {
      paths[value.path] = {
        get: {
          tags: ["Default", ...options.metadata?.openapi?.tags || []],
          description: options.metadata?.openapi?.description,
          operationId: options.metadata?.openapi?.operationId,
          security: [
            {
              bearerAuth: []
            }
          ],
          parameters: getParameters(options),
          responses: getResponse(options.metadata?.openapi?.responses)
        }
      };
    }
    if (options.method === "POST") {
      const body = getRequestBody(options);
      paths[value.path] = {
        post: {
          tags: ["Default", ...options.metadata?.openapi?.tags || []],
          description: options.metadata?.openapi?.description,
          operationId: options.metadata?.openapi?.operationId,
          security: [
            {
              bearerAuth: []
            }
          ],
          parameters: getParameters(options),
          ...body ? { requestBody: body } : {
            requestBody: {
              //set body none
              content: {
                "application/json": {
                  schema: {
                    type: "object",
                    properties: {}
                  }
                }
              }
            }
          },
          responses: getResponse(options.metadata?.openapi?.responses)
        }
      };
    }
  });
  const res = {
    openapi: "3.1.1",
    info: {
      title: "Better Auth",
      description: "API Reference for your Better Auth Instance",
      version: "1.1.0"
    },
    components,
    security: [
      {
        apiKeyCookie: []
      }
    ],
    servers: [
      {
        url: config2?.url
      }
    ],
    tags: [
      {
        name: "Default",
        description: "Default endpoints that are included with Better Auth by default. These endpoints are not part of any plugin."
      }
    ],
    paths
  };
  return res;
}
__name(generator, "generator");
var _statusCode;
var APIError;
var algorithm;
var getCryptoKey;
var verifySignature;
var makeSignature;
var signCookieValue;
var getCookieKey;
var _serialize;
var serializeCookie;
var serializeSignedCookie;
var createInternalContext;
var createEndpoint2;
var util;
var objectUtil;
var ZodParsedType;
var getParsedType;
var ZodIssueCode;
var ZodError;
var errorMap;
var overrideErrorMap;
var makeIssue;
var ParseStatus;
var INVALID;
var DIRTY;
var OK;
var isAborted;
var isDirty;
var isValid2;
var isAsync;
var errorUtil;
var _ZodEnum_cache;
var _ZodNativeEnum_cache;
var ParseInputLazyPath;
var handleResult;
var ZodType;
var cuidRegex;
var cuid2Regex;
var ulidRegex;
var uuidRegex;
var nanoidRegex;
var jwtRegex;
var durationRegex;
var emailRegex;
var _emojiRegex;
var emojiRegex;
var ipv4Regex;
var ipv4CidrRegex;
var ipv6Regex;
var ipv6CidrRegex;
var base64Regex;
var base64urlRegex;
var dateRegexSource;
var dateRegex;
var ZodString;
var ZodNumber;
var ZodBigInt;
var ZodBoolean;
var ZodDate;
var ZodSymbol;
var ZodUndefined;
var ZodNull;
var ZodAny;
var ZodUnknown;
var ZodNever;
var ZodVoid;
var ZodArray;
var ZodObject;
var ZodUnion;
var getDiscriminator;
var ZodDiscriminatedUnion;
var ZodIntersection;
var ZodTuple;
var ZodRecord;
var ZodMap;
var ZodSet;
var ZodFunction;
var ZodLazy;
var ZodLiteral;
var ZodEnum;
var ZodNativeEnum;
var ZodPromise;
var ZodEffects;
var ZodOptional;
var ZodNullable;
var ZodDefault;
var ZodCatch;
var ZodNaN;
var BRAND;
var ZodBranded;
var ZodPipeline;
var ZodReadonly;
var late;
var ZodFirstPartyTypeKind;
var stringType;
var numberType;
var nanType;
var bigIntType;
var booleanType;
var dateType;
var symbolType;
var undefinedType;
var nullType;
var anyType;
var unknownType;
var neverType;
var voidType;
var arrayType;
var objectType;
var strictObjectType;
var unionType;
var discriminatedUnionType;
var intersectionType;
var tupleType;
var recordType;
var mapType;
var setType;
var functionType;
var lazyType;
var literalType;
var enumType;
var nativeEnumType;
var promiseType;
var effectsType;
var optionalType;
var nullableType;
var preprocessType;
var pipelineType;
var paths;
var getHTML;
var createRouter2;
var init_dist2 = __esm({
  "../node_modules/better-call/dist/index.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_crypto_web();
    init_dist();
    _statusCode = {
      OK: 200,
      CREATED: 201,
      ACCEPTED: 202,
      NO_CONTENT: 204,
      MULTIPLE_CHOICES: 300,
      MOVED_PERMANENTLY: 301,
      FOUND: 302,
      SEE_OTHER: 303,
      NOT_MODIFIED: 304,
      TEMPORARY_REDIRECT: 307,
      BAD_REQUEST: 400,
      UNAUTHORIZED: 401,
      PAYMENT_REQUIRED: 402,
      FORBIDDEN: 403,
      NOT_FOUND: 404,
      METHOD_NOT_ALLOWED: 405,
      NOT_ACCEPTABLE: 406,
      PROXY_AUTHENTICATION_REQUIRED: 407,
      REQUEST_TIMEOUT: 408,
      CONFLICT: 409,
      GONE: 410,
      LENGTH_REQUIRED: 411,
      PRECONDITION_FAILED: 412,
      PAYLOAD_TOO_LARGE: 413,
      URI_TOO_LONG: 414,
      UNSUPPORTED_MEDIA_TYPE: 415,
      RANGE_NOT_SATISFIABLE: 416,
      EXPECTATION_FAILED: 417,
      "I'M_A_TEAPOT": 418,
      MISDIRECTED_REQUEST: 421,
      UNPROCESSABLE_ENTITY: 422,
      LOCKED: 423,
      FAILED_DEPENDENCY: 424,
      TOO_EARLY: 425,
      UPGRADE_REQUIRED: 426,
      PRECONDITION_REQUIRED: 428,
      TOO_MANY_REQUESTS: 429,
      REQUEST_HEADER_FIELDS_TOO_LARGE: 431,
      UNAVAILABLE_FOR_LEGAL_REASONS: 451,
      INTERNAL_SERVER_ERROR: 500,
      NOT_IMPLEMENTED: 501,
      BAD_GATEWAY: 502,
      SERVICE_UNAVAILABLE: 503,
      GATEWAY_TIMEOUT: 504,
      HTTP_VERSION_NOT_SUPPORTED: 505,
      VARIANT_ALSO_NEGOTIATES: 506,
      INSUFFICIENT_STORAGE: 507,
      LOOP_DETECTED: 508,
      NOT_EXTENDED: 510,
      NETWORK_AUTHENTICATION_REQUIRED: 511
    };
    APIError = class extends Error {
      static {
        __name(this, "APIError");
      }
      static {
        __name2(this, "APIError");
      }
      constructor(status = "INTERNAL_SERVER_ERROR", body = void 0, headers = {}, statusCode = typeof status === "number" ? status : _statusCode[status]) {
        super(body?.message);
        this.status = status;
        this.body = body;
        this.headers = headers;
        this.statusCode = statusCode;
        this.name = "APIError";
        this.status = status;
        this.headers = headers;
        this.statusCode = statusCode;
        this.body = body ? {
          code: body?.message?.toUpperCase().replace(/ /g, "_").replace(/[^A-Z0-9_]/g, ""),
          ...body
        } : void 0;
        this.stack = "";
      }
    };
    __name2(getBody, "getBody");
    __name2(isAPIError, "isAPIError");
    __name2(tryDecode, "tryDecode");
    __name2(isJSONSerializable, "isJSONSerializable");
    __name2(toResponse, "toResponse");
    __name2(runValidation, "runValidation");
    __name2(fromError, "fromError");
    algorithm = { name: "HMAC", hash: "SHA-256" };
    getCryptoKey = /* @__PURE__ */ __name2(async (secret) => {
      const secretBuf = typeof secret === "string" ? new TextEncoder().encode(secret) : secret;
      return await subtle.importKey("raw", secretBuf, algorithm, false, ["sign", "verify"]);
    }, "getCryptoKey");
    verifySignature = /* @__PURE__ */ __name2(async (base64Signature, value, secret) => {
      try {
        const signatureBinStr = atob(base64Signature);
        const signature = new Uint8Array(signatureBinStr.length);
        for (let i = 0, len = signatureBinStr.length; i < len; i++) {
          signature[i] = signatureBinStr.charCodeAt(i);
        }
        return await subtle.verify(algorithm, secret, signature, new TextEncoder().encode(value));
      } catch (e) {
        return false;
      }
    }, "verifySignature");
    makeSignature = /* @__PURE__ */ __name2(async (value, secret) => {
      const key = await getCryptoKey(secret);
      const signature = await subtle.sign(algorithm.name, key, new TextEncoder().encode(value));
      return btoa(String.fromCharCode(...new Uint8Array(signature)));
    }, "makeSignature");
    signCookieValue = /* @__PURE__ */ __name2(async (value, secret) => {
      const signature = await makeSignature(value, secret);
      value = `${value}.${signature}`;
      value = encodeURIComponent(value);
      return value;
    }, "signCookieValue");
    getCookieKey = /* @__PURE__ */ __name2((key, prefix) => {
      let finalKey = key;
      if (prefix) {
        if (prefix === "secure") {
          finalKey = "__Secure-" + key;
        } else if (prefix === "host") {
          finalKey = "__Host-" + key;
        } else {
          return void 0;
        }
      }
      return finalKey;
    }, "getCookieKey");
    __name2(parseCookies, "parseCookies");
    _serialize = /* @__PURE__ */ __name2((key, value, opt = {}) => {
      let cookie;
      if (opt?.prefix === "secure") {
        cookie = `${`__Secure-${key}`}=${value}`;
      } else if (opt?.prefix === "host") {
        cookie = `${`__Host-${key}`}=${value}`;
      } else {
        cookie = `${key}=${value}`;
      }
      if (key.startsWith("__Secure-") && !opt.secure) {
        opt.secure = true;
      }
      if (key.startsWith("__Host-")) {
        if (!opt.secure) {
          opt.secure = true;
        }
        if (opt.path !== "/") {
          opt.path = "/";
        }
        if (opt.domain) {
          opt.domain = void 0;
        }
      }
      if (opt && typeof opt.maxAge === "number" && opt.maxAge >= 0) {
        if (opt.maxAge > 3456e4) {
          throw new Error(
            "Cookies Max-Age SHOULD NOT be greater than 400 days (34560000 seconds) in duration."
          );
        }
        cookie += `; Max-Age=${Math.floor(opt.maxAge)}`;
      }
      if (opt.domain && opt.prefix !== "host") {
        cookie += `; Domain=${opt.domain}`;
      }
      if (opt.path) {
        cookie += `; Path=${opt.path}`;
      }
      if (opt.expires) {
        if (opt.expires.getTime() - Date.now() > 3456e7) {
          throw new Error(
            "Cookies Expires SHOULD NOT be greater than 400 days (34560000 seconds) in the future."
          );
        }
        cookie += `; Expires=${opt.expires.toUTCString()}`;
      }
      if (opt.httpOnly) {
        cookie += "; HttpOnly";
      }
      if (opt.secure) {
        cookie += "; Secure";
      }
      if (opt.sameSite) {
        cookie += `; SameSite=${opt.sameSite.charAt(0).toUpperCase() + opt.sameSite.slice(1)}`;
      }
      if (opt.partitioned) {
        if (!opt.secure) {
          opt.secure = true;
        }
        cookie += "; Partitioned";
      }
      return cookie;
    }, "_serialize");
    serializeCookie = /* @__PURE__ */ __name2((key, value, opt) => {
      value = encodeURIComponent(value);
      return _serialize(key, value, opt);
    }, "serializeCookie");
    serializeSignedCookie = /* @__PURE__ */ __name2(async (key, value, secret, opt) => {
      value = await signCookieValue(value, secret);
      return _serialize(key, value, opt);
    }, "serializeSignedCookie");
    createInternalContext = /* @__PURE__ */ __name2(async (context, {
      options,
      path
    }) => {
      const headers = new Headers();
      const { data, error: error2 } = await runValidation(options, context);
      if (error2) {
        throw new APIError(400, {
          message: error2.message,
          code: "VALIDATION_ERROR"
        });
      }
      const requestHeaders = "headers" in context ? context.headers instanceof Headers ? context.headers : new Headers(context.headers) : "request" in context && context.request instanceof Request ? context.request.headers : null;
      const requestCookies = requestHeaders?.get("cookie");
      const parsedCookies = requestCookies ? parseCookies(requestCookies) : void 0;
      const internalContext = {
        ...context,
        body: data.body,
        query: data.query,
        path: context.path || path,
        context: "context" in context && context.context ? context.context : {},
        returned: void 0,
        headers: context?.headers,
        request: context?.request,
        params: "params" in context ? context.params : void 0,
        method: context.method,
        setHeader: /* @__PURE__ */ __name2((key, value) => {
          headers.set(key, value);
        }, "setHeader"),
        getHeader: /* @__PURE__ */ __name2((key) => {
          if (!requestHeaders) return null;
          return requestHeaders.get(key);
        }, "getHeader"),
        getCookie: /* @__PURE__ */ __name2((key, prefix) => {
          const finalKey = getCookieKey(key, prefix);
          if (!finalKey) {
            return null;
          }
          return parsedCookies?.get(finalKey) || null;
        }, "getCookie"),
        getSignedCookie: /* @__PURE__ */ __name2(async (key, secret, prefix) => {
          const finalKey = getCookieKey(key, prefix);
          if (!finalKey) {
            return null;
          }
          const value = parsedCookies?.get(finalKey);
          if (!value) {
            return null;
          }
          const signatureStartPos = value.lastIndexOf(".");
          if (signatureStartPos < 1) {
            return null;
          }
          const signedValue = value.substring(0, signatureStartPos);
          const signature = value.substring(signatureStartPos + 1);
          if (signature.length !== 44 || !signature.endsWith("=")) {
            return null;
          }
          const secretKey = await getCryptoKey(secret);
          const isVerified = await verifySignature(signature, signedValue, secretKey);
          return isVerified ? signedValue : false;
        }, "getSignedCookie"),
        setCookie: /* @__PURE__ */ __name2((key, value, options2) => {
          const cookie = serializeCookie(key, value, options2);
          headers.append("set-cookie", cookie);
          return cookie;
        }, "setCookie"),
        setSignedCookie: /* @__PURE__ */ __name2(async (key, value, secret, options2) => {
          const cookie = await serializeSignedCookie(key, value, secret, options2);
          headers.append("set-cookie", cookie);
          return cookie;
        }, "setSignedCookie"),
        redirect: /* @__PURE__ */ __name2((url) => {
          headers.set("location", url);
          return new APIError("FOUND", void 0, headers);
        }, "redirect"),
        error: /* @__PURE__ */ __name2((status, body, headers2) => {
          return new APIError(status, body, headers2);
        }, "error"),
        json: /* @__PURE__ */ __name2((json, routerResponse) => {
          if (!context.asResponse) {
            return json;
          }
          return {
            body: routerResponse?.body || json,
            routerResponse,
            _flag: "json"
          };
        }, "json"),
        responseHeaders: headers
      };
      for (const middleware of options.use || []) {
        const response = await middleware({
          ...internalContext,
          returnHeaders: true,
          asResponse: false
        });
        if (response.response) {
          Object.assign(internalContext.context, response.response);
        }
        if (response.headers) {
          response.headers.forEach((value, key) => {
            internalContext.responseHeaders.set(key, value);
          });
        }
      }
      return internalContext;
    }, "createInternalContext");
    __name2(createMiddleware, "createMiddleware");
    createMiddleware.create = (opts) => {
      function fn(optionsOrHandler, handler) {
        if (typeof optionsOrHandler === "function") {
          return createMiddleware(
            {
              use: opts?.use
            },
            optionsOrHandler
          );
        }
        if (!handler) {
          throw new Error("Middleware handler is required");
        }
        const middleware = createMiddleware(
          {
            ...optionsOrHandler,
            method: "*",
            use: [...opts?.use || [], ...optionsOrHandler.use || []]
          },
          handler
        );
        return middleware;
      }
      __name(fn, "fn");
      __name2(fn, "fn");
      return fn;
    };
    createEndpoint2 = /* @__PURE__ */ __name2((path, options, handler) => {
      const internalHandler = /* @__PURE__ */ __name2(async (...inputCtx) => {
        const context = inputCtx[0] || {};
        const internalContext = await createInternalContext(context, {
          options,
          path
        });
        const response = await handler(internalContext).catch(async (e) => {
          if (isAPIError(e)) {
            const onAPIError = options.onAPIError;
            if (onAPIError) {
              await onAPIError(e);
            }
            if (context.asResponse) {
              return e;
            }
          }
          throw e;
        });
        const headers = internalContext.responseHeaders;
        return context.asResponse ? toResponse(response, {
          headers
        }) : context.returnHeaders ? {
          headers,
          response
        } : response;
      }, "internalHandler");
      internalHandler.options = options;
      internalHandler.path = path;
      return internalHandler;
    }, "createEndpoint2");
    createEndpoint2.create = (opts) => {
      return (path, options, handler) => {
        return createEndpoint2(
          path,
          {
            ...options,
            use: [...options?.use || [], ...opts?.use || []]
          },
          handler
        );
      };
    };
    (function(util22) {
      util22.assertEqual = (val) => val;
      function assertIs(_arg) {
      }
      __name(assertIs, "assertIs");
      __name2(assertIs, "assertIs");
      util22.assertIs = assertIs;
      function assertNever(_x) {
        throw new Error();
      }
      __name(assertNever, "assertNever");
      __name2(assertNever, "assertNever");
      util22.assertNever = assertNever;
      util22.arrayToEnum = (items) => {
        const obj = {};
        for (const item of items) {
          obj[item] = item;
        }
        return obj;
      };
      util22.getValidEnumValues = (obj) => {
        const validKeys = util22.objectKeys(obj).filter((k) => typeof obj[obj[k]] !== "number");
        const filtered = {};
        for (const k of validKeys) {
          filtered[k] = obj[k];
        }
        return util22.objectValues(filtered);
      };
      util22.objectValues = (obj) => {
        return util22.objectKeys(obj).map(function(e) {
          return obj[e];
        });
      };
      util22.objectKeys = typeof Object.keys === "function" ? (obj) => Object.keys(obj) : (object3) => {
        const keys = [];
        for (const key in object3) {
          if (Object.prototype.hasOwnProperty.call(object3, key)) {
            keys.push(key);
          }
        }
        return keys;
      };
      util22.find = (arr, checker) => {
        for (const item of arr) {
          if (checker(item))
            return item;
        }
        return void 0;
      };
      util22.isInteger = typeof Number.isInteger === "function" ? (val) => Number.isInteger(val) : (val) => typeof val === "number" && isFinite(val) && Math.floor(val) === val;
      function joinValues(array3, separator = " | ") {
        return array3.map((val) => typeof val === "string" ? `'${val}'` : val).join(separator);
      }
      __name(joinValues, "joinValues");
      __name2(joinValues, "joinValues");
      util22.joinValues = joinValues;
      util22.jsonStringifyReplacer = (_, value) => {
        if (typeof value === "bigint") {
          return value.toString();
        }
        return value;
      };
    })(util || (util = {}));
    (function(objectUtil22) {
      objectUtil22.mergeShapes = (first, second) => {
        return {
          ...first,
          ...second
          // second overwrites first
        };
      };
    })(objectUtil || (objectUtil = {}));
    ZodParsedType = util.arrayToEnum([
      "string",
      "nan",
      "number",
      "integer",
      "float",
      "boolean",
      "date",
      "bigint",
      "symbol",
      "function",
      "undefined",
      "null",
      "array",
      "object",
      "unknown",
      "promise",
      "void",
      "never",
      "map",
      "set"
    ]);
    getParsedType = /* @__PURE__ */ __name2((data) => {
      const t = typeof data;
      switch (t) {
        case "undefined":
          return ZodParsedType.undefined;
        case "string":
          return ZodParsedType.string;
        case "number":
          return isNaN(data) ? ZodParsedType.nan : ZodParsedType.number;
        case "boolean":
          return ZodParsedType.boolean;
        case "function":
          return ZodParsedType.function;
        case "bigint":
          return ZodParsedType.bigint;
        case "symbol":
          return ZodParsedType.symbol;
        case "object":
          if (Array.isArray(data)) {
            return ZodParsedType.array;
          }
          if (data === null) {
            return ZodParsedType.null;
          }
          if (data.then && typeof data.then === "function" && data.catch && typeof data.catch === "function") {
            return ZodParsedType.promise;
          }
          if (typeof Map !== "undefined" && data instanceof Map) {
            return ZodParsedType.map;
          }
          if (typeof Set !== "undefined" && data instanceof Set) {
            return ZodParsedType.set;
          }
          if (typeof Date !== "undefined" && data instanceof Date) {
            return ZodParsedType.date;
          }
          return ZodParsedType.object;
        default:
          return ZodParsedType.unknown;
      }
    }, "getParsedType");
    ZodIssueCode = util.arrayToEnum([
      "invalid_type",
      "invalid_literal",
      "custom",
      "invalid_union",
      "invalid_union_discriminator",
      "invalid_enum_value",
      "unrecognized_keys",
      "invalid_arguments",
      "invalid_return_type",
      "invalid_date",
      "invalid_string",
      "too_small",
      "too_big",
      "invalid_intersection_types",
      "not_multiple_of",
      "not_finite"
    ]);
    ZodError = class _ZodError extends Error {
      static {
        __name(this, "_ZodError");
      }
      static {
        __name2(this, "_ZodError");
      }
      get errors() {
        return this.issues;
      }
      constructor(issues) {
        super();
        this.issues = [];
        this.addIssue = (sub) => {
          this.issues = [...this.issues, sub];
        };
        this.addIssues = (subs = []) => {
          this.issues = [...this.issues, ...subs];
        };
        const actualProto = new.target.prototype;
        if (Object.setPrototypeOf) {
          Object.setPrototypeOf(this, actualProto);
        } else {
          this.__proto__ = actualProto;
        }
        this.name = "ZodError";
        this.issues = issues;
      }
      format(_mapper) {
        const mapper = _mapper || function(issue) {
          return issue.message;
        };
        const fieldErrors = { _errors: [] };
        const processError = /* @__PURE__ */ __name2((error2) => {
          for (const issue of error2.issues) {
            if (issue.code === "invalid_union") {
              issue.unionErrors.map(processError);
            } else if (issue.code === "invalid_return_type") {
              processError(issue.returnTypeError);
            } else if (issue.code === "invalid_arguments") {
              processError(issue.argumentsError);
            } else if (issue.path.length === 0) {
              fieldErrors._errors.push(mapper(issue));
            } else {
              let curr = fieldErrors;
              let i = 0;
              while (i < issue.path.length) {
                const el = issue.path[i];
                const terminal = i === issue.path.length - 1;
                if (!terminal) {
                  curr[el] = curr[el] || { _errors: [] };
                } else {
                  curr[el] = curr[el] || { _errors: [] };
                  curr[el]._errors.push(mapper(issue));
                }
                curr = curr[el];
                i++;
              }
            }
          }
        }, "processError");
        processError(this);
        return fieldErrors;
      }
      static assert(value) {
        if (!(value instanceof _ZodError)) {
          throw new Error(`Not a ZodError: ${value}`);
        }
      }
      toString() {
        return this.message;
      }
      get message() {
        return JSON.stringify(this.issues, util.jsonStringifyReplacer, 2);
      }
      get isEmpty() {
        return this.issues.length === 0;
      }
      flatten(mapper = (issue) => issue.message) {
        const fieldErrors = {};
        const formErrors = [];
        for (const sub of this.issues) {
          if (sub.path.length > 0) {
            fieldErrors[sub.path[0]] = fieldErrors[sub.path[0]] || [];
            fieldErrors[sub.path[0]].push(mapper(sub));
          } else {
            formErrors.push(mapper(sub));
          }
        }
        return { formErrors, fieldErrors };
      }
      get formErrors() {
        return this.flatten();
      }
    };
    ZodError.create = (issues) => {
      const error2 = new ZodError(issues);
      return error2;
    };
    errorMap = /* @__PURE__ */ __name2((issue, _ctx) => {
      let message2;
      switch (issue.code) {
        case ZodIssueCode.invalid_type:
          if (issue.received === ZodParsedType.undefined) {
            message2 = "Required";
          } else {
            message2 = `Expected ${issue.expected}, received ${issue.received}`;
          }
          break;
        case ZodIssueCode.invalid_literal:
          message2 = `Invalid literal value, expected ${JSON.stringify(issue.expected, util.jsonStringifyReplacer)}`;
          break;
        case ZodIssueCode.unrecognized_keys:
          message2 = `Unrecognized key(s) in object: ${util.joinValues(issue.keys, ", ")}`;
          break;
        case ZodIssueCode.invalid_union:
          message2 = `Invalid input`;
          break;
        case ZodIssueCode.invalid_union_discriminator:
          message2 = `Invalid discriminator value. Expected ${util.joinValues(issue.options)}`;
          break;
        case ZodIssueCode.invalid_enum_value:
          message2 = `Invalid enum value. Expected ${util.joinValues(issue.options)}, received '${issue.received}'`;
          break;
        case ZodIssueCode.invalid_arguments:
          message2 = `Invalid function arguments`;
          break;
        case ZodIssueCode.invalid_return_type:
          message2 = `Invalid function return type`;
          break;
        case ZodIssueCode.invalid_date:
          message2 = `Invalid date`;
          break;
        case ZodIssueCode.invalid_string:
          if (typeof issue.validation === "object") {
            if ("includes" in issue.validation) {
              message2 = `Invalid input: must include "${issue.validation.includes}"`;
              if (typeof issue.validation.position === "number") {
                message2 = `${message2} at one or more positions greater than or equal to ${issue.validation.position}`;
              }
            } else if ("startsWith" in issue.validation) {
              message2 = `Invalid input: must start with "${issue.validation.startsWith}"`;
            } else if ("endsWith" in issue.validation) {
              message2 = `Invalid input: must end with "${issue.validation.endsWith}"`;
            } else {
              util.assertNever(issue.validation);
            }
          } else if (issue.validation !== "regex") {
            message2 = `Invalid ${issue.validation}`;
          } else {
            message2 = "Invalid";
          }
          break;
        case ZodIssueCode.too_small:
          if (issue.type === "array")
            message2 = `Array must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;
          else if (issue.type === "string")
            message2 = `String must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;
          else if (issue.type === "number")
            message2 = `Number must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${issue.minimum}`;
          else if (issue.type === "date")
            message2 = `Date must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${new Date(Number(issue.minimum))}`;
          else
            message2 = "Invalid input";
          break;
        case ZodIssueCode.too_big:
          if (issue.type === "array")
            message2 = `Array must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;
          else if (issue.type === "string")
            message2 = `String must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;
          else if (issue.type === "number")
            message2 = `Number must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;
          else if (issue.type === "bigint")
            message2 = `BigInt must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;
          else if (issue.type === "date")
            message2 = `Date must be ${issue.exact ? `exactly` : issue.inclusive ? `smaller than or equal to` : `smaller than`} ${new Date(Number(issue.maximum))}`;
          else
            message2 = "Invalid input";
          break;
        case ZodIssueCode.custom:
          message2 = `Invalid input`;
          break;
        case ZodIssueCode.invalid_intersection_types:
          message2 = `Intersection results could not be merged`;
          break;
        case ZodIssueCode.not_multiple_of:
          message2 = `Number must be a multiple of ${issue.multipleOf}`;
          break;
        case ZodIssueCode.not_finite:
          message2 = "Number must be finite";
          break;
        default:
          message2 = _ctx.defaultError;
          util.assertNever(issue);
      }
      return { message: message2 };
    }, "errorMap");
    overrideErrorMap = errorMap;
    __name2(getErrorMap, "getErrorMap");
    makeIssue = /* @__PURE__ */ __name2((params) => {
      const { data, path, errorMaps, issueData } = params;
      const fullPath = [...path, ...issueData.path || []];
      const fullIssue = {
        ...issueData,
        path: fullPath
      };
      if (issueData.message !== void 0) {
        return {
          ...issueData,
          path: fullPath,
          message: issueData.message
        };
      }
      let errorMessage = "";
      const maps = errorMaps.filter((m) => !!m).slice().reverse();
      for (const map2 of maps) {
        errorMessage = map2(fullIssue, { data, defaultError: errorMessage }).message;
      }
      return {
        ...issueData,
        path: fullPath,
        message: errorMessage
      };
    }, "makeIssue");
    __name2(addIssueToContext, "addIssueToContext");
    ParseStatus = class _ParseStatus {
      static {
        __name(this, "_ParseStatus");
      }
      static {
        __name2(this, "_ParseStatus");
      }
      constructor() {
        this.value = "valid";
      }
      dirty() {
        if (this.value === "valid")
          this.value = "dirty";
      }
      abort() {
        if (this.value !== "aborted")
          this.value = "aborted";
      }
      static mergeArray(status, results) {
        const arrayValue = [];
        for (const s of results) {
          if (s.status === "aborted")
            return INVALID;
          if (s.status === "dirty")
            status.dirty();
          arrayValue.push(s.value);
        }
        return { status: status.value, value: arrayValue };
      }
      static async mergeObjectAsync(status, pairs) {
        const syncPairs = [];
        for (const pair of pairs) {
          const key = await pair.key;
          const value = await pair.value;
          syncPairs.push({
            key,
            value
          });
        }
        return _ParseStatus.mergeObjectSync(status, syncPairs);
      }
      static mergeObjectSync(status, pairs) {
        const finalObject = {};
        for (const pair of pairs) {
          const { key, value } = pair;
          if (key.status === "aborted")
            return INVALID;
          if (value.status === "aborted")
            return INVALID;
          if (key.status === "dirty")
            status.dirty();
          if (value.status === "dirty")
            status.dirty();
          if (key.value !== "__proto__" && (typeof value.value !== "undefined" || pair.alwaysSet)) {
            finalObject[key.value] = value.value;
          }
        }
        return { status: status.value, value: finalObject };
      }
    };
    INVALID = Object.freeze({
      status: "aborted"
    });
    DIRTY = /* @__PURE__ */ __name2((value) => ({ status: "dirty", value }), "DIRTY");
    OK = /* @__PURE__ */ __name2((value) => ({ status: "valid", value }), "OK");
    isAborted = /* @__PURE__ */ __name2((x) => x.status === "aborted", "isAborted");
    isDirty = /* @__PURE__ */ __name2((x) => x.status === "dirty", "isDirty");
    isValid2 = /* @__PURE__ */ __name2((x) => x.status === "valid", "isValid");
    isAsync = /* @__PURE__ */ __name2((x) => typeof Promise !== "undefined" && x instanceof Promise, "isAsync");
    __name2(__classPrivateFieldGet, "__classPrivateFieldGet");
    __name2(__classPrivateFieldSet, "__classPrivateFieldSet");
    (function(errorUtil22) {
      errorUtil22.errToObj = (message2) => typeof message2 === "string" ? { message: message2 } : message2 || {};
      errorUtil22.toString = (message2) => typeof message2 === "string" ? message2 : message2 === null || message2 === void 0 ? void 0 : message2.message;
    })(errorUtil || (errorUtil = {}));
    ParseInputLazyPath = class {
      static {
        __name(this, "ParseInputLazyPath");
      }
      static {
        __name2(this, "ParseInputLazyPath");
      }
      constructor(parent, value, path, key) {
        this._cachedPath = [];
        this.parent = parent;
        this.data = value;
        this._path = path;
        this._key = key;
      }
      get path() {
        if (!this._cachedPath.length) {
          if (this._key instanceof Array) {
            this._cachedPath.push(...this._path, ...this._key);
          } else {
            this._cachedPath.push(...this._path, this._key);
          }
        }
        return this._cachedPath;
      }
    };
    handleResult = /* @__PURE__ */ __name2((ctx, result) => {
      if (isValid2(result)) {
        return { success: true, data: result.value };
      } else {
        if (!ctx.common.issues.length) {
          throw new Error("Validation failed but no issues detected.");
        }
        return {
          success: false,
          get error() {
            if (this._error)
              return this._error;
            const error2 = new ZodError(ctx.common.issues);
            this._error = error2;
            return this._error;
          }
        };
      }
    }, "handleResult");
    __name2(processCreateParams, "processCreateParams");
    ZodType = class {
      static {
        __name(this, "ZodType");
      }
      static {
        __name2(this, "ZodType");
      }
      get description() {
        return this._def.description;
      }
      _getType(input) {
        return getParsedType(input.data);
      }
      _getOrReturnCtx(input, ctx) {
        return ctx || {
          common: input.parent.common,
          data: input.data,
          parsedType: getParsedType(input.data),
          schemaErrorMap: this._def.errorMap,
          path: input.path,
          parent: input.parent
        };
      }
      _processInputParams(input) {
        return {
          status: new ParseStatus(),
          ctx: {
            common: input.parent.common,
            data: input.data,
            parsedType: getParsedType(input.data),
            schemaErrorMap: this._def.errorMap,
            path: input.path,
            parent: input.parent
          }
        };
      }
      _parseSync(input) {
        const result = this._parse(input);
        if (isAsync(result)) {
          throw new Error("Synchronous parse encountered promise.");
        }
        return result;
      }
      _parseAsync(input) {
        const result = this._parse(input);
        return Promise.resolve(result);
      }
      parse(data, params) {
        const result = this.safeParse(data, params);
        if (result.success)
          return result.data;
        throw result.error;
      }
      safeParse(data, params) {
        var _a;
        const ctx = {
          common: {
            issues: [],
            async: (_a = params === null || params === void 0 ? void 0 : params.async) !== null && _a !== void 0 ? _a : false,
            contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap
          },
          path: (params === null || params === void 0 ? void 0 : params.path) || [],
          schemaErrorMap: this._def.errorMap,
          parent: null,
          data,
          parsedType: getParsedType(data)
        };
        const result = this._parseSync({ data, path: ctx.path, parent: ctx });
        return handleResult(ctx, result);
      }
      "~validate"(data) {
        var _a, _b;
        const ctx = {
          common: {
            issues: [],
            async: !!this["~standard"].async
          },
          path: [],
          schemaErrorMap: this._def.errorMap,
          parent: null,
          data,
          parsedType: getParsedType(data)
        };
        if (!this["~standard"].async) {
          try {
            const result = this._parseSync({ data, path: [], parent: ctx });
            return isValid2(result) ? {
              value: result.value
            } : {
              issues: ctx.common.issues
            };
          } catch (err) {
            if ((_b = (_a = err === null || err === void 0 ? void 0 : err.message) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === null || _b === void 0 ? void 0 : _b.includes("encountered")) {
              this["~standard"].async = true;
            }
            ctx.common = {
              issues: [],
              async: true
            };
          }
        }
        return this._parseAsync({ data, path: [], parent: ctx }).then((result) => isValid2(result) ? {
          value: result.value
        } : {
          issues: ctx.common.issues
        });
      }
      async parseAsync(data, params) {
        const result = await this.safeParseAsync(data, params);
        if (result.success)
          return result.data;
        throw result.error;
      }
      async safeParseAsync(data, params) {
        const ctx = {
          common: {
            issues: [],
            contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,
            async: true
          },
          path: (params === null || params === void 0 ? void 0 : params.path) || [],
          schemaErrorMap: this._def.errorMap,
          parent: null,
          data,
          parsedType: getParsedType(data)
        };
        const maybeAsyncResult = this._parse({ data, path: ctx.path, parent: ctx });
        const result = await (isAsync(maybeAsyncResult) ? maybeAsyncResult : Promise.resolve(maybeAsyncResult));
        return handleResult(ctx, result);
      }
      refine(check, message2) {
        const getIssueProperties = /* @__PURE__ */ __name2((val) => {
          if (typeof message2 === "string" || typeof message2 === "undefined") {
            return { message: message2 };
          } else if (typeof message2 === "function") {
            return message2(val);
          } else {
            return message2;
          }
        }, "getIssueProperties");
        return this._refinement((val, ctx) => {
          const result = check(val);
          const setError = /* @__PURE__ */ __name2(() => ctx.addIssue({
            code: ZodIssueCode.custom,
            ...getIssueProperties(val)
          }), "setError");
          if (typeof Promise !== "undefined" && result instanceof Promise) {
            return result.then((data) => {
              if (!data) {
                setError();
                return false;
              } else {
                return true;
              }
            });
          }
          if (!result) {
            setError();
            return false;
          } else {
            return true;
          }
        });
      }
      refinement(check, refinementData) {
        return this._refinement((val, ctx) => {
          if (!check(val)) {
            ctx.addIssue(typeof refinementData === "function" ? refinementData(val, ctx) : refinementData);
            return false;
          } else {
            return true;
          }
        });
      }
      _refinement(refinement) {
        return new ZodEffects({
          schema: this,
          typeName: ZodFirstPartyTypeKind.ZodEffects,
          effect: { type: "refinement", refinement }
        });
      }
      superRefine(refinement) {
        return this._refinement(refinement);
      }
      constructor(def) {
        this.spa = this.safeParseAsync;
        this._def = def;
        this.parse = this.parse.bind(this);
        this.safeParse = this.safeParse.bind(this);
        this.parseAsync = this.parseAsync.bind(this);
        this.safeParseAsync = this.safeParseAsync.bind(this);
        this.spa = this.spa.bind(this);
        this.refine = this.refine.bind(this);
        this.refinement = this.refinement.bind(this);
        this.superRefine = this.superRefine.bind(this);
        this.optional = this.optional.bind(this);
        this.nullable = this.nullable.bind(this);
        this.nullish = this.nullish.bind(this);
        this.array = this.array.bind(this);
        this.promise = this.promise.bind(this);
        this.or = this.or.bind(this);
        this.and = this.and.bind(this);
        this.transform = this.transform.bind(this);
        this.brand = this.brand.bind(this);
        this.default = this.default.bind(this);
        this.catch = this.catch.bind(this);
        this.describe = this.describe.bind(this);
        this.pipe = this.pipe.bind(this);
        this.readonly = this.readonly.bind(this);
        this.isNullable = this.isNullable.bind(this);
        this.isOptional = this.isOptional.bind(this);
        this["~standard"] = {
          version: 1,
          vendor: "zod",
          validate: /* @__PURE__ */ __name2((data) => this["~validate"](data), "validate")
        };
      }
      optional() {
        return ZodOptional.create(this, this._def);
      }
      nullable() {
        return ZodNullable.create(this, this._def);
      }
      nullish() {
        return this.nullable().optional();
      }
      array() {
        return ZodArray.create(this);
      }
      promise() {
        return ZodPromise.create(this, this._def);
      }
      or(option) {
        return ZodUnion.create([this, option], this._def);
      }
      and(incoming) {
        return ZodIntersection.create(this, incoming, this._def);
      }
      transform(transform2) {
        return new ZodEffects({
          ...processCreateParams(this._def),
          schema: this,
          typeName: ZodFirstPartyTypeKind.ZodEffects,
          effect: { type: "transform", transform: transform2 }
        });
      }
      default(def) {
        const defaultValueFunc = typeof def === "function" ? def : () => def;
        return new ZodDefault({
          ...processCreateParams(this._def),
          innerType: this,
          defaultValue: defaultValueFunc,
          typeName: ZodFirstPartyTypeKind.ZodDefault
        });
      }
      brand() {
        return new ZodBranded({
          typeName: ZodFirstPartyTypeKind.ZodBranded,
          type: this,
          ...processCreateParams(this._def)
        });
      }
      catch(def) {
        const catchValueFunc = typeof def === "function" ? def : () => def;
        return new ZodCatch({
          ...processCreateParams(this._def),
          innerType: this,
          catchValue: catchValueFunc,
          typeName: ZodFirstPartyTypeKind.ZodCatch
        });
      }
      describe(description) {
        const This = this.constructor;
        return new This({
          ...this._def,
          description
        });
      }
      pipe(target) {
        return ZodPipeline.create(this, target);
      }
      readonly() {
        return ZodReadonly.create(this);
      }
      isOptional() {
        return this.safeParse(void 0).success;
      }
      isNullable() {
        return this.safeParse(null).success;
      }
    };
    cuidRegex = /^c[^\s-]{8,}$/i;
    cuid2Regex = /^[0-9a-z]+$/;
    ulidRegex = /^[0-9A-HJKMNP-TV-Z]{26}$/i;
    uuidRegex = /^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/i;
    nanoidRegex = /^[a-z0-9_-]{21}$/i;
    jwtRegex = /^[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]*$/;
    durationRegex = /^[-+]?P(?!$)(?:(?:[-+]?\d+Y)|(?:[-+]?\d+[.,]\d+Y$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:(?:[-+]?\d+W)|(?:[-+]?\d+[.,]\d+W$))?(?:(?:[-+]?\d+D)|(?:[-+]?\d+[.,]\d+D$))?(?:T(?=[\d+-])(?:(?:[-+]?\d+H)|(?:[-+]?\d+[.,]\d+H$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:[-+]?\d+(?:[.,]\d+)?S)?)??$/;
    emailRegex = /^(?!\.)(?!.*\.\.)([A-Z0-9_'+\-\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\-]*\.)+[A-Z]{2,}$/i;
    _emojiRegex = `^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$`;
    ipv4Regex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/;
    ipv4CidrRegex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\/(3[0-2]|[12]?[0-9])$/;
    ipv6Regex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/;
    ipv6CidrRegex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/;
    base64Regex = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;
    base64urlRegex = /^([0-9a-zA-Z-_]{4})*(([0-9a-zA-Z-_]{2}(==)?)|([0-9a-zA-Z-_]{3}(=)?))?$/;
    dateRegexSource = `((\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\d|30)|(02)-(0[1-9]|1\\d|2[0-8])))`;
    dateRegex = new RegExp(`^${dateRegexSource}$`);
    __name2(timeRegexSource, "timeRegexSource");
    __name2(timeRegex, "timeRegex");
    __name2(datetimeRegex, "datetimeRegex");
    __name2(isValidIP, "isValidIP");
    __name2(isValidJWT, "isValidJWT");
    __name2(isValidCidr, "isValidCidr");
    ZodString = class _ZodString extends ZodType {
      static {
        __name(this, "_ZodString");
      }
      static {
        __name2(this, "_ZodString");
      }
      _parse(input) {
        if (this._def.coerce) {
          input.data = String(input.data);
        }
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.string) {
          const ctx2 = this._getOrReturnCtx(input);
          addIssueToContext(ctx2, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.string,
            received: ctx2.parsedType
          });
          return INVALID;
        }
        const status = new ParseStatus();
        let ctx = void 0;
        for (const check of this._def.checks) {
          if (check.kind === "min") {
            if (input.data.length < check.value) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                code: ZodIssueCode.too_small,
                minimum: check.value,
                type: "string",
                inclusive: true,
                exact: false,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "max") {
            if (input.data.length > check.value) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                code: ZodIssueCode.too_big,
                maximum: check.value,
                type: "string",
                inclusive: true,
                exact: false,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "length") {
            const tooBig = input.data.length > check.value;
            const tooSmall = input.data.length < check.value;
            if (tooBig || tooSmall) {
              ctx = this._getOrReturnCtx(input, ctx);
              if (tooBig) {
                addIssueToContext(ctx, {
                  code: ZodIssueCode.too_big,
                  maximum: check.value,
                  type: "string",
                  inclusive: true,
                  exact: true,
                  message: check.message
                });
              } else if (tooSmall) {
                addIssueToContext(ctx, {
                  code: ZodIssueCode.too_small,
                  minimum: check.value,
                  type: "string",
                  inclusive: true,
                  exact: true,
                  message: check.message
                });
              }
              status.dirty();
            }
          } else if (check.kind === "email") {
            if (!emailRegex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                validation: "email",
                code: ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "emoji") {
            if (!emojiRegex) {
              emojiRegex = new RegExp(_emojiRegex, "u");
            }
            if (!emojiRegex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                validation: "emoji",
                code: ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "uuid") {
            if (!uuidRegex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                validation: "uuid",
                code: ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "nanoid") {
            if (!nanoidRegex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                validation: "nanoid",
                code: ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "cuid") {
            if (!cuidRegex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                validation: "cuid",
                code: ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "cuid2") {
            if (!cuid2Regex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                validation: "cuid2",
                code: ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "ulid") {
            if (!ulidRegex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                validation: "ulid",
                code: ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "url") {
            try {
              new URL(input.data);
            } catch (_a) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                validation: "url",
                code: ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "regex") {
            check.regex.lastIndex = 0;
            const testResult = check.regex.test(input.data);
            if (!testResult) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                validation: "regex",
                code: ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "trim") {
            input.data = input.data.trim();
          } else if (check.kind === "includes") {
            if (!input.data.includes(check.value, check.position)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_string,
                validation: { includes: check.value, position: check.position },
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "toLowerCase") {
            input.data = input.data.toLowerCase();
          } else if (check.kind === "toUpperCase") {
            input.data = input.data.toUpperCase();
          } else if (check.kind === "startsWith") {
            if (!input.data.startsWith(check.value)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_string,
                validation: { startsWith: check.value },
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "endsWith") {
            if (!input.data.endsWith(check.value)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_string,
                validation: { endsWith: check.value },
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "datetime") {
            const regex = datetimeRegex(check);
            if (!regex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_string,
                validation: "datetime",
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "date") {
            const regex = dateRegex;
            if (!regex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_string,
                validation: "date",
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "time") {
            const regex = timeRegex(check);
            if (!regex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_string,
                validation: "time",
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "duration") {
            if (!durationRegex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                validation: "duration",
                code: ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "ip") {
            if (!isValidIP(input.data, check.version)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                validation: "ip",
                code: ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "jwt") {
            if (!isValidJWT(input.data, check.alg)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                validation: "jwt",
                code: ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "cidr") {
            if (!isValidCidr(input.data, check.version)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                validation: "cidr",
                code: ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "base64") {
            if (!base64Regex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                validation: "base64",
                code: ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "base64url") {
            if (!base64urlRegex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                validation: "base64url",
                code: ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else {
            util.assertNever(check);
          }
        }
        return { status: status.value, value: input.data };
      }
      _regex(regex, validation, message2) {
        return this.refinement((data) => regex.test(data), {
          validation,
          code: ZodIssueCode.invalid_string,
          ...errorUtil.errToObj(message2)
        });
      }
      _addCheck(check) {
        return new _ZodString({
          ...this._def,
          checks: [...this._def.checks, check]
        });
      }
      email(message2) {
        return this._addCheck({ kind: "email", ...errorUtil.errToObj(message2) });
      }
      url(message2) {
        return this._addCheck({ kind: "url", ...errorUtil.errToObj(message2) });
      }
      emoji(message2) {
        return this._addCheck({ kind: "emoji", ...errorUtil.errToObj(message2) });
      }
      uuid(message2) {
        return this._addCheck({ kind: "uuid", ...errorUtil.errToObj(message2) });
      }
      nanoid(message2) {
        return this._addCheck({ kind: "nanoid", ...errorUtil.errToObj(message2) });
      }
      cuid(message2) {
        return this._addCheck({ kind: "cuid", ...errorUtil.errToObj(message2) });
      }
      cuid2(message2) {
        return this._addCheck({ kind: "cuid2", ...errorUtil.errToObj(message2) });
      }
      ulid(message2) {
        return this._addCheck({ kind: "ulid", ...errorUtil.errToObj(message2) });
      }
      base64(message2) {
        return this._addCheck({ kind: "base64", ...errorUtil.errToObj(message2) });
      }
      base64url(message2) {
        return this._addCheck({
          kind: "base64url",
          ...errorUtil.errToObj(message2)
        });
      }
      jwt(options) {
        return this._addCheck({ kind: "jwt", ...errorUtil.errToObj(options) });
      }
      ip(options) {
        return this._addCheck({ kind: "ip", ...errorUtil.errToObj(options) });
      }
      cidr(options) {
        return this._addCheck({ kind: "cidr", ...errorUtil.errToObj(options) });
      }
      datetime(options) {
        var _a, _b;
        if (typeof options === "string") {
          return this._addCheck({
            kind: "datetime",
            precision: null,
            offset: false,
            local: false,
            message: options
          });
        }
        return this._addCheck({
          kind: "datetime",
          precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === "undefined" ? null : options === null || options === void 0 ? void 0 : options.precision,
          offset: (_a = options === null || options === void 0 ? void 0 : options.offset) !== null && _a !== void 0 ? _a : false,
          local: (_b = options === null || options === void 0 ? void 0 : options.local) !== null && _b !== void 0 ? _b : false,
          ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message)
        });
      }
      date(message2) {
        return this._addCheck({ kind: "date", message: message2 });
      }
      time(options) {
        if (typeof options === "string") {
          return this._addCheck({
            kind: "time",
            precision: null,
            message: options
          });
        }
        return this._addCheck({
          kind: "time",
          precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === "undefined" ? null : options === null || options === void 0 ? void 0 : options.precision,
          ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message)
        });
      }
      duration(message2) {
        return this._addCheck({ kind: "duration", ...errorUtil.errToObj(message2) });
      }
      regex(regex, message2) {
        return this._addCheck({
          kind: "regex",
          regex,
          ...errorUtil.errToObj(message2)
        });
      }
      includes(value, options) {
        return this._addCheck({
          kind: "includes",
          value,
          position: options === null || options === void 0 ? void 0 : options.position,
          ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message)
        });
      }
      startsWith(value, message2) {
        return this._addCheck({
          kind: "startsWith",
          value,
          ...errorUtil.errToObj(message2)
        });
      }
      endsWith(value, message2) {
        return this._addCheck({
          kind: "endsWith",
          value,
          ...errorUtil.errToObj(message2)
        });
      }
      min(minLength, message2) {
        return this._addCheck({
          kind: "min",
          value: minLength,
          ...errorUtil.errToObj(message2)
        });
      }
      max(maxLength, message2) {
        return this._addCheck({
          kind: "max",
          value: maxLength,
          ...errorUtil.errToObj(message2)
        });
      }
      length(len, message2) {
        return this._addCheck({
          kind: "length",
          value: len,
          ...errorUtil.errToObj(message2)
        });
      }
      /**
       * Equivalent to `.min(1)`
       */
      nonempty(message2) {
        return this.min(1, errorUtil.errToObj(message2));
      }
      trim() {
        return new _ZodString({
          ...this._def,
          checks: [...this._def.checks, { kind: "trim" }]
        });
      }
      toLowerCase() {
        return new _ZodString({
          ...this._def,
          checks: [...this._def.checks, { kind: "toLowerCase" }]
        });
      }
      toUpperCase() {
        return new _ZodString({
          ...this._def,
          checks: [...this._def.checks, { kind: "toUpperCase" }]
        });
      }
      get isDatetime() {
        return !!this._def.checks.find((ch) => ch.kind === "datetime");
      }
      get isDate() {
        return !!this._def.checks.find((ch) => ch.kind === "date");
      }
      get isTime() {
        return !!this._def.checks.find((ch) => ch.kind === "time");
      }
      get isDuration() {
        return !!this._def.checks.find((ch) => ch.kind === "duration");
      }
      get isEmail() {
        return !!this._def.checks.find((ch) => ch.kind === "email");
      }
      get isURL() {
        return !!this._def.checks.find((ch) => ch.kind === "url");
      }
      get isEmoji() {
        return !!this._def.checks.find((ch) => ch.kind === "emoji");
      }
      get isUUID() {
        return !!this._def.checks.find((ch) => ch.kind === "uuid");
      }
      get isNANOID() {
        return !!this._def.checks.find((ch) => ch.kind === "nanoid");
      }
      get isCUID() {
        return !!this._def.checks.find((ch) => ch.kind === "cuid");
      }
      get isCUID2() {
        return !!this._def.checks.find((ch) => ch.kind === "cuid2");
      }
      get isULID() {
        return !!this._def.checks.find((ch) => ch.kind === "ulid");
      }
      get isIP() {
        return !!this._def.checks.find((ch) => ch.kind === "ip");
      }
      get isCIDR() {
        return !!this._def.checks.find((ch) => ch.kind === "cidr");
      }
      get isBase64() {
        return !!this._def.checks.find((ch) => ch.kind === "base64");
      }
      get isBase64url() {
        return !!this._def.checks.find((ch) => ch.kind === "base64url");
      }
      get minLength() {
        let min = null;
        for (const ch of this._def.checks) {
          if (ch.kind === "min") {
            if (min === null || ch.value > min)
              min = ch.value;
          }
        }
        return min;
      }
      get maxLength() {
        let max = null;
        for (const ch of this._def.checks) {
          if (ch.kind === "max") {
            if (max === null || ch.value < max)
              max = ch.value;
          }
        }
        return max;
      }
    };
    ZodString.create = (params) => {
      var _a;
      return new ZodString({
        checks: [],
        typeName: ZodFirstPartyTypeKind.ZodString,
        coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,
        ...processCreateParams(params)
      });
    };
    __name2(floatSafeRemainder, "floatSafeRemainder");
    ZodNumber = class _ZodNumber extends ZodType {
      static {
        __name(this, "_ZodNumber");
      }
      static {
        __name2(this, "_ZodNumber");
      }
      constructor() {
        super(...arguments);
        this.min = this.gte;
        this.max = this.lte;
        this.step = this.multipleOf;
      }
      _parse(input) {
        if (this._def.coerce) {
          input.data = Number(input.data);
        }
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.number) {
          const ctx2 = this._getOrReturnCtx(input);
          addIssueToContext(ctx2, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.number,
            received: ctx2.parsedType
          });
          return INVALID;
        }
        let ctx = void 0;
        const status = new ParseStatus();
        for (const check of this._def.checks) {
          if (check.kind === "int") {
            if (!util.isInteger(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: "integer",
                received: "float",
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "min") {
            const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;
            if (tooSmall) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                code: ZodIssueCode.too_small,
                minimum: check.value,
                type: "number",
                inclusive: check.inclusive,
                exact: false,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "max") {
            const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;
            if (tooBig) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                code: ZodIssueCode.too_big,
                maximum: check.value,
                type: "number",
                inclusive: check.inclusive,
                exact: false,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "multipleOf") {
            if (floatSafeRemainder(input.data, check.value) !== 0) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                code: ZodIssueCode.not_multiple_of,
                multipleOf: check.value,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "finite") {
            if (!Number.isFinite(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                code: ZodIssueCode.not_finite,
                message: check.message
              });
              status.dirty();
            }
          } else {
            util.assertNever(check);
          }
        }
        return { status: status.value, value: input.data };
      }
      gte(value, message2) {
        return this.setLimit("min", value, true, errorUtil.toString(message2));
      }
      gt(value, message2) {
        return this.setLimit("min", value, false, errorUtil.toString(message2));
      }
      lte(value, message2) {
        return this.setLimit("max", value, true, errorUtil.toString(message2));
      }
      lt(value, message2) {
        return this.setLimit("max", value, false, errorUtil.toString(message2));
      }
      setLimit(kind, value, inclusive, message2) {
        return new _ZodNumber({
          ...this._def,
          checks: [
            ...this._def.checks,
            {
              kind,
              value,
              inclusive,
              message: errorUtil.toString(message2)
            }
          ]
        });
      }
      _addCheck(check) {
        return new _ZodNumber({
          ...this._def,
          checks: [...this._def.checks, check]
        });
      }
      int(message2) {
        return this._addCheck({
          kind: "int",
          message: errorUtil.toString(message2)
        });
      }
      positive(message2) {
        return this._addCheck({
          kind: "min",
          value: 0,
          inclusive: false,
          message: errorUtil.toString(message2)
        });
      }
      negative(message2) {
        return this._addCheck({
          kind: "max",
          value: 0,
          inclusive: false,
          message: errorUtil.toString(message2)
        });
      }
      nonpositive(message2) {
        return this._addCheck({
          kind: "max",
          value: 0,
          inclusive: true,
          message: errorUtil.toString(message2)
        });
      }
      nonnegative(message2) {
        return this._addCheck({
          kind: "min",
          value: 0,
          inclusive: true,
          message: errorUtil.toString(message2)
        });
      }
      multipleOf(value, message2) {
        return this._addCheck({
          kind: "multipleOf",
          value,
          message: errorUtil.toString(message2)
        });
      }
      finite(message2) {
        return this._addCheck({
          kind: "finite",
          message: errorUtil.toString(message2)
        });
      }
      safe(message2) {
        return this._addCheck({
          kind: "min",
          inclusive: true,
          value: Number.MIN_SAFE_INTEGER,
          message: errorUtil.toString(message2)
        })._addCheck({
          kind: "max",
          inclusive: true,
          value: Number.MAX_SAFE_INTEGER,
          message: errorUtil.toString(message2)
        });
      }
      get minValue() {
        let min = null;
        for (const ch of this._def.checks) {
          if (ch.kind === "min") {
            if (min === null || ch.value > min)
              min = ch.value;
          }
        }
        return min;
      }
      get maxValue() {
        let max = null;
        for (const ch of this._def.checks) {
          if (ch.kind === "max") {
            if (max === null || ch.value < max)
              max = ch.value;
          }
        }
        return max;
      }
      get isInt() {
        return !!this._def.checks.find((ch) => ch.kind === "int" || ch.kind === "multipleOf" && util.isInteger(ch.value));
      }
      get isFinite() {
        let max = null, min = null;
        for (const ch of this._def.checks) {
          if (ch.kind === "finite" || ch.kind === "int" || ch.kind === "multipleOf") {
            return true;
          } else if (ch.kind === "min") {
            if (min === null || ch.value > min)
              min = ch.value;
          } else if (ch.kind === "max") {
            if (max === null || ch.value < max)
              max = ch.value;
          }
        }
        return Number.isFinite(min) && Number.isFinite(max);
      }
    };
    ZodNumber.create = (params) => {
      return new ZodNumber({
        checks: [],
        typeName: ZodFirstPartyTypeKind.ZodNumber,
        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
        ...processCreateParams(params)
      });
    };
    ZodBigInt = class _ZodBigInt extends ZodType {
      static {
        __name(this, "_ZodBigInt");
      }
      static {
        __name2(this, "_ZodBigInt");
      }
      constructor() {
        super(...arguments);
        this.min = this.gte;
        this.max = this.lte;
      }
      _parse(input) {
        if (this._def.coerce) {
          try {
            input.data = BigInt(input.data);
          } catch (_a) {
            return this._getInvalidInput(input);
          }
        }
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.bigint) {
          return this._getInvalidInput(input);
        }
        let ctx = void 0;
        const status = new ParseStatus();
        for (const check of this._def.checks) {
          if (check.kind === "min") {
            const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;
            if (tooSmall) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                code: ZodIssueCode.too_small,
                type: "bigint",
                minimum: check.value,
                inclusive: check.inclusive,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "max") {
            const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;
            if (tooBig) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                code: ZodIssueCode.too_big,
                type: "bigint",
                maximum: check.value,
                inclusive: check.inclusive,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "multipleOf") {
            if (input.data % check.value !== BigInt(0)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                code: ZodIssueCode.not_multiple_of,
                multipleOf: check.value,
                message: check.message
              });
              status.dirty();
            }
          } else {
            util.assertNever(check);
          }
        }
        return { status: status.value, value: input.data };
      }
      _getInvalidInput(input) {
        const ctx = this._getOrReturnCtx(input);
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.bigint,
          received: ctx.parsedType
        });
        return INVALID;
      }
      gte(value, message2) {
        return this.setLimit("min", value, true, errorUtil.toString(message2));
      }
      gt(value, message2) {
        return this.setLimit("min", value, false, errorUtil.toString(message2));
      }
      lte(value, message2) {
        return this.setLimit("max", value, true, errorUtil.toString(message2));
      }
      lt(value, message2) {
        return this.setLimit("max", value, false, errorUtil.toString(message2));
      }
      setLimit(kind, value, inclusive, message2) {
        return new _ZodBigInt({
          ...this._def,
          checks: [
            ...this._def.checks,
            {
              kind,
              value,
              inclusive,
              message: errorUtil.toString(message2)
            }
          ]
        });
      }
      _addCheck(check) {
        return new _ZodBigInt({
          ...this._def,
          checks: [...this._def.checks, check]
        });
      }
      positive(message2) {
        return this._addCheck({
          kind: "min",
          value: BigInt(0),
          inclusive: false,
          message: errorUtil.toString(message2)
        });
      }
      negative(message2) {
        return this._addCheck({
          kind: "max",
          value: BigInt(0),
          inclusive: false,
          message: errorUtil.toString(message2)
        });
      }
      nonpositive(message2) {
        return this._addCheck({
          kind: "max",
          value: BigInt(0),
          inclusive: true,
          message: errorUtil.toString(message2)
        });
      }
      nonnegative(message2) {
        return this._addCheck({
          kind: "min",
          value: BigInt(0),
          inclusive: true,
          message: errorUtil.toString(message2)
        });
      }
      multipleOf(value, message2) {
        return this._addCheck({
          kind: "multipleOf",
          value,
          message: errorUtil.toString(message2)
        });
      }
      get minValue() {
        let min = null;
        for (const ch of this._def.checks) {
          if (ch.kind === "min") {
            if (min === null || ch.value > min)
              min = ch.value;
          }
        }
        return min;
      }
      get maxValue() {
        let max = null;
        for (const ch of this._def.checks) {
          if (ch.kind === "max") {
            if (max === null || ch.value < max)
              max = ch.value;
          }
        }
        return max;
      }
    };
    ZodBigInt.create = (params) => {
      var _a;
      return new ZodBigInt({
        checks: [],
        typeName: ZodFirstPartyTypeKind.ZodBigInt,
        coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,
        ...processCreateParams(params)
      });
    };
    ZodBoolean = class extends ZodType {
      static {
        __name(this, "ZodBoolean");
      }
      static {
        __name2(this, "ZodBoolean");
      }
      _parse(input) {
        if (this._def.coerce) {
          input.data = Boolean(input.data);
        }
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.boolean) {
          const ctx = this._getOrReturnCtx(input);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.boolean,
            received: ctx.parsedType
          });
          return INVALID;
        }
        return OK(input.data);
      }
    };
    ZodBoolean.create = (params) => {
      return new ZodBoolean({
        typeName: ZodFirstPartyTypeKind.ZodBoolean,
        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
        ...processCreateParams(params)
      });
    };
    ZodDate = class _ZodDate extends ZodType {
      static {
        __name(this, "_ZodDate");
      }
      static {
        __name2(this, "_ZodDate");
      }
      _parse(input) {
        if (this._def.coerce) {
          input.data = new Date(input.data);
        }
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.date) {
          const ctx2 = this._getOrReturnCtx(input);
          addIssueToContext(ctx2, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.date,
            received: ctx2.parsedType
          });
          return INVALID;
        }
        if (isNaN(input.data.getTime())) {
          const ctx2 = this._getOrReturnCtx(input);
          addIssueToContext(ctx2, {
            code: ZodIssueCode.invalid_date
          });
          return INVALID;
        }
        const status = new ParseStatus();
        let ctx = void 0;
        for (const check of this._def.checks) {
          if (check.kind === "min") {
            if (input.data.getTime() < check.value) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                code: ZodIssueCode.too_small,
                message: check.message,
                inclusive: true,
                exact: false,
                minimum: check.value,
                type: "date"
              });
              status.dirty();
            }
          } else if (check.kind === "max") {
            if (input.data.getTime() > check.value) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                code: ZodIssueCode.too_big,
                message: check.message,
                inclusive: true,
                exact: false,
                maximum: check.value,
                type: "date"
              });
              status.dirty();
            }
          } else {
            util.assertNever(check);
          }
        }
        return {
          status: status.value,
          value: new Date(input.data.getTime())
        };
      }
      _addCheck(check) {
        return new _ZodDate({
          ...this._def,
          checks: [...this._def.checks, check]
        });
      }
      min(minDate, message2) {
        return this._addCheck({
          kind: "min",
          value: minDate.getTime(),
          message: errorUtil.toString(message2)
        });
      }
      max(maxDate, message2) {
        return this._addCheck({
          kind: "max",
          value: maxDate.getTime(),
          message: errorUtil.toString(message2)
        });
      }
      get minDate() {
        let min = null;
        for (const ch of this._def.checks) {
          if (ch.kind === "min") {
            if (min === null || ch.value > min)
              min = ch.value;
          }
        }
        return min != null ? new Date(min) : null;
      }
      get maxDate() {
        let max = null;
        for (const ch of this._def.checks) {
          if (ch.kind === "max") {
            if (max === null || ch.value < max)
              max = ch.value;
          }
        }
        return max != null ? new Date(max) : null;
      }
    };
    ZodDate.create = (params) => {
      return new ZodDate({
        checks: [],
        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
        typeName: ZodFirstPartyTypeKind.ZodDate,
        ...processCreateParams(params)
      });
    };
    ZodSymbol = class extends ZodType {
      static {
        __name(this, "ZodSymbol");
      }
      static {
        __name2(this, "ZodSymbol");
      }
      _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.symbol) {
          const ctx = this._getOrReturnCtx(input);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.symbol,
            received: ctx.parsedType
          });
          return INVALID;
        }
        return OK(input.data);
      }
    };
    ZodSymbol.create = (params) => {
      return new ZodSymbol({
        typeName: ZodFirstPartyTypeKind.ZodSymbol,
        ...processCreateParams(params)
      });
    };
    ZodUndefined = class extends ZodType {
      static {
        __name(this, "ZodUndefined");
      }
      static {
        __name2(this, "ZodUndefined");
      }
      _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.undefined) {
          const ctx = this._getOrReturnCtx(input);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.undefined,
            received: ctx.parsedType
          });
          return INVALID;
        }
        return OK(input.data);
      }
    };
    ZodUndefined.create = (params) => {
      return new ZodUndefined({
        typeName: ZodFirstPartyTypeKind.ZodUndefined,
        ...processCreateParams(params)
      });
    };
    ZodNull = class extends ZodType {
      static {
        __name(this, "ZodNull");
      }
      static {
        __name2(this, "ZodNull");
      }
      _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.null) {
          const ctx = this._getOrReturnCtx(input);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.null,
            received: ctx.parsedType
          });
          return INVALID;
        }
        return OK(input.data);
      }
    };
    ZodNull.create = (params) => {
      return new ZodNull({
        typeName: ZodFirstPartyTypeKind.ZodNull,
        ...processCreateParams(params)
      });
    };
    ZodAny = class extends ZodType {
      static {
        __name(this, "ZodAny");
      }
      static {
        __name2(this, "ZodAny");
      }
      constructor() {
        super(...arguments);
        this._any = true;
      }
      _parse(input) {
        return OK(input.data);
      }
    };
    ZodAny.create = (params) => {
      return new ZodAny({
        typeName: ZodFirstPartyTypeKind.ZodAny,
        ...processCreateParams(params)
      });
    };
    ZodUnknown = class extends ZodType {
      static {
        __name(this, "ZodUnknown");
      }
      static {
        __name2(this, "ZodUnknown");
      }
      constructor() {
        super(...arguments);
        this._unknown = true;
      }
      _parse(input) {
        return OK(input.data);
      }
    };
    ZodUnknown.create = (params) => {
      return new ZodUnknown({
        typeName: ZodFirstPartyTypeKind.ZodUnknown,
        ...processCreateParams(params)
      });
    };
    ZodNever = class extends ZodType {
      static {
        __name(this, "ZodNever");
      }
      static {
        __name2(this, "ZodNever");
      }
      _parse(input) {
        const ctx = this._getOrReturnCtx(input);
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.never,
          received: ctx.parsedType
        });
        return INVALID;
      }
    };
    ZodNever.create = (params) => {
      return new ZodNever({
        typeName: ZodFirstPartyTypeKind.ZodNever,
        ...processCreateParams(params)
      });
    };
    ZodVoid = class extends ZodType {
      static {
        __name(this, "ZodVoid");
      }
      static {
        __name2(this, "ZodVoid");
      }
      _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.undefined) {
          const ctx = this._getOrReturnCtx(input);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.void,
            received: ctx.parsedType
          });
          return INVALID;
        }
        return OK(input.data);
      }
    };
    ZodVoid.create = (params) => {
      return new ZodVoid({
        typeName: ZodFirstPartyTypeKind.ZodVoid,
        ...processCreateParams(params)
      });
    };
    ZodArray = class _ZodArray extends ZodType {
      static {
        __name(this, "_ZodArray");
      }
      static {
        __name2(this, "_ZodArray");
      }
      _parse(input) {
        const { ctx, status } = this._processInputParams(input);
        const def = this._def;
        if (ctx.parsedType !== ZodParsedType.array) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.array,
            received: ctx.parsedType
          });
          return INVALID;
        }
        if (def.exactLength !== null) {
          const tooBig = ctx.data.length > def.exactLength.value;
          const tooSmall = ctx.data.length < def.exactLength.value;
          if (tooBig || tooSmall) {
            addIssueToContext(ctx, {
              code: tooBig ? ZodIssueCode.too_big : ZodIssueCode.too_small,
              minimum: tooSmall ? def.exactLength.value : void 0,
              maximum: tooBig ? def.exactLength.value : void 0,
              type: "array",
              inclusive: true,
              exact: true,
              message: def.exactLength.message
            });
            status.dirty();
          }
        }
        if (def.minLength !== null) {
          if (ctx.data.length < def.minLength.value) {
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_small,
              minimum: def.minLength.value,
              type: "array",
              inclusive: true,
              exact: false,
              message: def.minLength.message
            });
            status.dirty();
          }
        }
        if (def.maxLength !== null) {
          if (ctx.data.length > def.maxLength.value) {
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_big,
              maximum: def.maxLength.value,
              type: "array",
              inclusive: true,
              exact: false,
              message: def.maxLength.message
            });
            status.dirty();
          }
        }
        if (ctx.common.async) {
          return Promise.all([...ctx.data].map((item, i) => {
            return def.type._parseAsync(new ParseInputLazyPath(ctx, item, ctx.path, i));
          })).then((result2) => {
            return ParseStatus.mergeArray(status, result2);
          });
        }
        const result = [...ctx.data].map((item, i) => {
          return def.type._parseSync(new ParseInputLazyPath(ctx, item, ctx.path, i));
        });
        return ParseStatus.mergeArray(status, result);
      }
      get element() {
        return this._def.type;
      }
      min(minLength, message2) {
        return new _ZodArray({
          ...this._def,
          minLength: { value: minLength, message: errorUtil.toString(message2) }
        });
      }
      max(maxLength, message2) {
        return new _ZodArray({
          ...this._def,
          maxLength: { value: maxLength, message: errorUtil.toString(message2) }
        });
      }
      length(len, message2) {
        return new _ZodArray({
          ...this._def,
          exactLength: { value: len, message: errorUtil.toString(message2) }
        });
      }
      nonempty(message2) {
        return this.min(1, message2);
      }
    };
    ZodArray.create = (schema2, params) => {
      return new ZodArray({
        type: schema2,
        minLength: null,
        maxLength: null,
        exactLength: null,
        typeName: ZodFirstPartyTypeKind.ZodArray,
        ...processCreateParams(params)
      });
    };
    __name2(deepPartialify, "deepPartialify");
    ZodObject = class _ZodObject extends ZodType {
      static {
        __name(this, "_ZodObject");
      }
      static {
        __name2(this, "_ZodObject");
      }
      constructor() {
        super(...arguments);
        this._cached = null;
        this.nonstrict = this.passthrough;
        this.augment = this.extend;
      }
      _getCached() {
        if (this._cached !== null)
          return this._cached;
        const shape = this._def.shape();
        const keys = util.objectKeys(shape);
        return this._cached = { shape, keys };
      }
      _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.object) {
          const ctx2 = this._getOrReturnCtx(input);
          addIssueToContext(ctx2, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.object,
            received: ctx2.parsedType
          });
          return INVALID;
        }
        const { status, ctx } = this._processInputParams(input);
        const { shape, keys: shapeKeys } = this._getCached();
        const extraKeys = [];
        if (!(this._def.catchall instanceof ZodNever && this._def.unknownKeys === "strip")) {
          for (const key in ctx.data) {
            if (!shapeKeys.includes(key)) {
              extraKeys.push(key);
            }
          }
        }
        const pairs = [];
        for (const key of shapeKeys) {
          const keyValidator = shape[key];
          const value = ctx.data[key];
          pairs.push({
            key: { status: "valid", value: key },
            value: keyValidator._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),
            alwaysSet: key in ctx.data
          });
        }
        if (this._def.catchall instanceof ZodNever) {
          const unknownKeys = this._def.unknownKeys;
          if (unknownKeys === "passthrough") {
            for (const key of extraKeys) {
              pairs.push({
                key: { status: "valid", value: key },
                value: { status: "valid", value: ctx.data[key] }
              });
            }
          } else if (unknownKeys === "strict") {
            if (extraKeys.length > 0) {
              addIssueToContext(ctx, {
                code: ZodIssueCode.unrecognized_keys,
                keys: extraKeys
              });
              status.dirty();
            }
          } else if (unknownKeys === "strip") ;
          else {
            throw new Error(`Internal ZodObject error: invalid unknownKeys value.`);
          }
        } else {
          const catchall = this._def.catchall;
          for (const key of extraKeys) {
            const value = ctx.data[key];
            pairs.push({
              key: { status: "valid", value: key },
              value: catchall._parse(
                new ParseInputLazyPath(ctx, value, ctx.path, key)
                //, ctx.child(key), value, getParsedType(value)
              ),
              alwaysSet: key in ctx.data
            });
          }
        }
        if (ctx.common.async) {
          return Promise.resolve().then(async () => {
            const syncPairs = [];
            for (const pair of pairs) {
              const key = await pair.key;
              const value = await pair.value;
              syncPairs.push({
                key,
                value,
                alwaysSet: pair.alwaysSet
              });
            }
            return syncPairs;
          }).then((syncPairs) => {
            return ParseStatus.mergeObjectSync(status, syncPairs);
          });
        } else {
          return ParseStatus.mergeObjectSync(status, pairs);
        }
      }
      get shape() {
        return this._def.shape();
      }
      strict(message2) {
        errorUtil.errToObj;
        return new _ZodObject({
          ...this._def,
          unknownKeys: "strict",
          ...message2 !== void 0 ? {
            errorMap: /* @__PURE__ */ __name2((issue, ctx) => {
              var _a, _b, _c, _d;
              const defaultError = (_c = (_b = (_a = this._def).errorMap) === null || _b === void 0 ? void 0 : _b.call(_a, issue, ctx).message) !== null && _c !== void 0 ? _c : ctx.defaultError;
              if (issue.code === "unrecognized_keys")
                return {
                  message: (_d = errorUtil.errToObj(message2).message) !== null && _d !== void 0 ? _d : defaultError
                };
              return {
                message: defaultError
              };
            }, "errorMap")
          } : {}
        });
      }
      strip() {
        return new _ZodObject({
          ...this._def,
          unknownKeys: "strip"
        });
      }
      passthrough() {
        return new _ZodObject({
          ...this._def,
          unknownKeys: "passthrough"
        });
      }
      // const AugmentFactory =
      //   <Def extends ZodObjectDef>(def: Def) =>
      //   <Augmentation extends ZodRawShape>(
      //     augmentation: Augmentation
      //   ): ZodObject<
      //     extendShape<ReturnType<Def["shape"]>, Augmentation>,
      //     Def["unknownKeys"],
      //     Def["catchall"]
      //   > => {
      //     return new ZodObject({
      //       ...def,
      //       shape: () => ({
      //         ...def.shape(),
      //         ...augmentation,
      //       }),
      //     }) as any;
      //   };
      extend(augmentation) {
        return new _ZodObject({
          ...this._def,
          shape: /* @__PURE__ */ __name2(() => ({
            ...this._def.shape(),
            ...augmentation
          }), "shape")
        });
      }
      /**
       * Prior to zod@1.0.12 there was a bug in the
       * inferred type of merged objects. Please
       * upgrade if you are experiencing issues.
       */
      merge(merging) {
        const merged = new _ZodObject({
          unknownKeys: merging._def.unknownKeys,
          catchall: merging._def.catchall,
          shape: /* @__PURE__ */ __name2(() => ({
            ...this._def.shape(),
            ...merging._def.shape()
          }), "shape"),
          typeName: ZodFirstPartyTypeKind.ZodObject
        });
        return merged;
      }
      // merge<
      //   Incoming extends AnyZodObject,
      //   Augmentation extends Incoming["shape"],
      //   NewOutput extends {
      //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation
      //       ? Augmentation[k]["_output"]
      //       : k extends keyof Output
      //       ? Output[k]
      //       : never;
      //   },
      //   NewInput extends {
      //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation
      //       ? Augmentation[k]["_input"]
      //       : k extends keyof Input
      //       ? Input[k]
      //       : never;
      //   }
      // >(
      //   merging: Incoming
      // ): ZodObject<
      //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
      //   Incoming["_def"]["unknownKeys"],
      //   Incoming["_def"]["catchall"],
      //   NewOutput,
      //   NewInput
      // > {
      //   const merged: any = new ZodObject({
      //     unknownKeys: merging._def.unknownKeys,
      //     catchall: merging._def.catchall,
      //     shape: () =>
      //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
      //     typeName: ZodFirstPartyTypeKind.ZodObject,
      //   }) as any;
      //   return merged;
      // }
      setKey(key, schema2) {
        return this.augment({ [key]: schema2 });
      }
      // merge<Incoming extends AnyZodObject>(
      //   merging: Incoming
      // ): //ZodObject<T & Incoming["_shape"], UnknownKeys, Catchall> = (merging) => {
      // ZodObject<
      //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
      //   Incoming["_def"]["unknownKeys"],
      //   Incoming["_def"]["catchall"]
      // > {
      //   // const mergedShape = objectUtil.mergeShapes(
      //   //   this._def.shape(),
      //   //   merging._def.shape()
      //   // );
      //   const merged: any = new ZodObject({
      //     unknownKeys: merging._def.unknownKeys,
      //     catchall: merging._def.catchall,
      //     shape: () =>
      //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
      //     typeName: ZodFirstPartyTypeKind.ZodObject,
      //   }) as any;
      //   return merged;
      // }
      catchall(index) {
        return new _ZodObject({
          ...this._def,
          catchall: index
        });
      }
      pick(mask) {
        const shape = {};
        util.objectKeys(mask).forEach((key) => {
          if (mask[key] && this.shape[key]) {
            shape[key] = this.shape[key];
          }
        });
        return new _ZodObject({
          ...this._def,
          shape: /* @__PURE__ */ __name2(() => shape, "shape")
        });
      }
      omit(mask) {
        const shape = {};
        util.objectKeys(this.shape).forEach((key) => {
          if (!mask[key]) {
            shape[key] = this.shape[key];
          }
        });
        return new _ZodObject({
          ...this._def,
          shape: /* @__PURE__ */ __name2(() => shape, "shape")
        });
      }
      /**
       * @deprecated
       */
      deepPartial() {
        return deepPartialify(this);
      }
      partial(mask) {
        const newShape = {};
        util.objectKeys(this.shape).forEach((key) => {
          const fieldSchema = this.shape[key];
          if (mask && !mask[key]) {
            newShape[key] = fieldSchema;
          } else {
            newShape[key] = fieldSchema.optional();
          }
        });
        return new _ZodObject({
          ...this._def,
          shape: /* @__PURE__ */ __name2(() => newShape, "shape")
        });
      }
      required(mask) {
        const newShape = {};
        util.objectKeys(this.shape).forEach((key) => {
          if (mask && !mask[key]) {
            newShape[key] = this.shape[key];
          } else {
            const fieldSchema = this.shape[key];
            let newField = fieldSchema;
            while (newField instanceof ZodOptional) {
              newField = newField._def.innerType;
            }
            newShape[key] = newField;
          }
        });
        return new _ZodObject({
          ...this._def,
          shape: /* @__PURE__ */ __name2(() => newShape, "shape")
        });
      }
      keyof() {
        return createZodEnum(util.objectKeys(this.shape));
      }
    };
    ZodObject.create = (shape, params) => {
      return new ZodObject({
        shape: /* @__PURE__ */ __name2(() => shape, "shape"),
        unknownKeys: "strip",
        catchall: ZodNever.create(),
        typeName: ZodFirstPartyTypeKind.ZodObject,
        ...processCreateParams(params)
      });
    };
    ZodObject.strictCreate = (shape, params) => {
      return new ZodObject({
        shape: /* @__PURE__ */ __name2(() => shape, "shape"),
        unknownKeys: "strict",
        catchall: ZodNever.create(),
        typeName: ZodFirstPartyTypeKind.ZodObject,
        ...processCreateParams(params)
      });
    };
    ZodObject.lazycreate = (shape, params) => {
      return new ZodObject({
        shape,
        unknownKeys: "strip",
        catchall: ZodNever.create(),
        typeName: ZodFirstPartyTypeKind.ZodObject,
        ...processCreateParams(params)
      });
    };
    ZodUnion = class extends ZodType {
      static {
        __name(this, "ZodUnion");
      }
      static {
        __name2(this, "ZodUnion");
      }
      _parse(input) {
        const { ctx } = this._processInputParams(input);
        const options = this._def.options;
        function handleResults(results) {
          for (const result of results) {
            if (result.result.status === "valid") {
              return result.result;
            }
          }
          for (const result of results) {
            if (result.result.status === "dirty") {
              ctx.common.issues.push(...result.ctx.common.issues);
              return result.result;
            }
          }
          const unionErrors = results.map((result) => new ZodError(result.ctx.common.issues));
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_union,
            unionErrors
          });
          return INVALID;
        }
        __name(handleResults, "handleResults");
        __name2(handleResults, "handleResults");
        if (ctx.common.async) {
          return Promise.all(options.map(async (option) => {
            const childCtx = {
              ...ctx,
              common: {
                ...ctx.common,
                issues: []
              },
              parent: null
            };
            return {
              result: await option._parseAsync({
                data: ctx.data,
                path: ctx.path,
                parent: childCtx
              }),
              ctx: childCtx
            };
          })).then(handleResults);
        } else {
          let dirty = void 0;
          const issues = [];
          for (const option of options) {
            const childCtx = {
              ...ctx,
              common: {
                ...ctx.common,
                issues: []
              },
              parent: null
            };
            const result = option._parseSync({
              data: ctx.data,
              path: ctx.path,
              parent: childCtx
            });
            if (result.status === "valid") {
              return result;
            } else if (result.status === "dirty" && !dirty) {
              dirty = { result, ctx: childCtx };
            }
            if (childCtx.common.issues.length) {
              issues.push(childCtx.common.issues);
            }
          }
          if (dirty) {
            ctx.common.issues.push(...dirty.ctx.common.issues);
            return dirty.result;
          }
          const unionErrors = issues.map((issues2) => new ZodError(issues2));
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_union,
            unionErrors
          });
          return INVALID;
        }
      }
      get options() {
        return this._def.options;
      }
    };
    ZodUnion.create = (types2, params) => {
      return new ZodUnion({
        options: types2,
        typeName: ZodFirstPartyTypeKind.ZodUnion,
        ...processCreateParams(params)
      });
    };
    getDiscriminator = /* @__PURE__ */ __name2((type) => {
      if (type instanceof ZodLazy) {
        return getDiscriminator(type.schema);
      } else if (type instanceof ZodEffects) {
        return getDiscriminator(type.innerType());
      } else if (type instanceof ZodLiteral) {
        return [type.value];
      } else if (type instanceof ZodEnum) {
        return type.options;
      } else if (type instanceof ZodNativeEnum) {
        return util.objectValues(type.enum);
      } else if (type instanceof ZodDefault) {
        return getDiscriminator(type._def.innerType);
      } else if (type instanceof ZodUndefined) {
        return [void 0];
      } else if (type instanceof ZodNull) {
        return [null];
      } else if (type instanceof ZodOptional) {
        return [void 0, ...getDiscriminator(type.unwrap())];
      } else if (type instanceof ZodNullable) {
        return [null, ...getDiscriminator(type.unwrap())];
      } else if (type instanceof ZodBranded) {
        return getDiscriminator(type.unwrap());
      } else if (type instanceof ZodReadonly) {
        return getDiscriminator(type.unwrap());
      } else if (type instanceof ZodCatch) {
        return getDiscriminator(type._def.innerType);
      } else {
        return [];
      }
    }, "getDiscriminator");
    ZodDiscriminatedUnion = class _ZodDiscriminatedUnion extends ZodType {
      static {
        __name(this, "_ZodDiscriminatedUnion");
      }
      static {
        __name2(this, "_ZodDiscriminatedUnion");
      }
      _parse(input) {
        const { ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.object) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.object,
            received: ctx.parsedType
          });
          return INVALID;
        }
        const discriminator = this.discriminator;
        const discriminatorValue = ctx.data[discriminator];
        const option = this.optionsMap.get(discriminatorValue);
        if (!option) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_union_discriminator,
            options: Array.from(this.optionsMap.keys()),
            path: [discriminator]
          });
          return INVALID;
        }
        if (ctx.common.async) {
          return option._parseAsync({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
          });
        } else {
          return option._parseSync({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
          });
        }
      }
      get discriminator() {
        return this._def.discriminator;
      }
      get options() {
        return this._def.options;
      }
      get optionsMap() {
        return this._def.optionsMap;
      }
      /**
       * The constructor of the discriminated union schema. Its behaviour is very similar to that of the normal z.union() constructor.
       * However, it only allows a union of objects, all of which need to share a discriminator property. This property must
       * have a different value for each object in the union.
       * @param discriminator the name of the discriminator property
       * @param types an array of object schemas
       * @param params
       */
      static create(discriminator, options, params) {
        const optionsMap = /* @__PURE__ */ new Map();
        for (const type of options) {
          const discriminatorValues = getDiscriminator(type.shape[discriminator]);
          if (!discriminatorValues.length) {
            throw new Error(`A discriminator value for key \`${discriminator}\` could not be extracted from all schema options`);
          }
          for (const value of discriminatorValues) {
            if (optionsMap.has(value)) {
              throw new Error(`Discriminator property ${String(discriminator)} has duplicate value ${String(value)}`);
            }
            optionsMap.set(value, type);
          }
        }
        return new _ZodDiscriminatedUnion({
          typeName: ZodFirstPartyTypeKind.ZodDiscriminatedUnion,
          discriminator,
          options,
          optionsMap,
          ...processCreateParams(params)
        });
      }
    };
    __name2(mergeValues, "mergeValues");
    ZodIntersection = class extends ZodType {
      static {
        __name(this, "ZodIntersection");
      }
      static {
        __name2(this, "ZodIntersection");
      }
      _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        const handleParsed = /* @__PURE__ */ __name2((parsedLeft, parsedRight) => {
          if (isAborted(parsedLeft) || isAborted(parsedRight)) {
            return INVALID;
          }
          const merged = mergeValues(parsedLeft.value, parsedRight.value);
          if (!merged.valid) {
            addIssueToContext(ctx, {
              code: ZodIssueCode.invalid_intersection_types
            });
            return INVALID;
          }
          if (isDirty(parsedLeft) || isDirty(parsedRight)) {
            status.dirty();
          }
          return { status: status.value, value: merged.data };
        }, "handleParsed");
        if (ctx.common.async) {
          return Promise.all([
            this._def.left._parseAsync({
              data: ctx.data,
              path: ctx.path,
              parent: ctx
            }),
            this._def.right._parseAsync({
              data: ctx.data,
              path: ctx.path,
              parent: ctx
            })
          ]).then(([left, right]) => handleParsed(left, right));
        } else {
          return handleParsed(this._def.left._parseSync({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
          }), this._def.right._parseSync({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
          }));
        }
      }
    };
    ZodIntersection.create = (left, right, params) => {
      return new ZodIntersection({
        left,
        right,
        typeName: ZodFirstPartyTypeKind.ZodIntersection,
        ...processCreateParams(params)
      });
    };
    ZodTuple = class _ZodTuple extends ZodType {
      static {
        __name(this, "_ZodTuple");
      }
      static {
        __name2(this, "_ZodTuple");
      }
      _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.array) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.array,
            received: ctx.parsedType
          });
          return INVALID;
        }
        if (ctx.data.length < this._def.items.length) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_small,
            minimum: this._def.items.length,
            inclusive: true,
            exact: false,
            type: "array"
          });
          return INVALID;
        }
        const rest = this._def.rest;
        if (!rest && ctx.data.length > this._def.items.length) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_big,
            maximum: this._def.items.length,
            inclusive: true,
            exact: false,
            type: "array"
          });
          status.dirty();
        }
        const items = [...ctx.data].map((item, itemIndex) => {
          const schema2 = this._def.items[itemIndex] || this._def.rest;
          if (!schema2)
            return null;
          return schema2._parse(new ParseInputLazyPath(ctx, item, ctx.path, itemIndex));
        }).filter((x) => !!x);
        if (ctx.common.async) {
          return Promise.all(items).then((results) => {
            return ParseStatus.mergeArray(status, results);
          });
        } else {
          return ParseStatus.mergeArray(status, items);
        }
      }
      get items() {
        return this._def.items;
      }
      rest(rest) {
        return new _ZodTuple({
          ...this._def,
          rest
        });
      }
    };
    ZodTuple.create = (schemas, params) => {
      if (!Array.isArray(schemas)) {
        throw new Error("You must pass an array of schemas to z.tuple([ ... ])");
      }
      return new ZodTuple({
        items: schemas,
        typeName: ZodFirstPartyTypeKind.ZodTuple,
        rest: null,
        ...processCreateParams(params)
      });
    };
    ZodRecord = class _ZodRecord extends ZodType {
      static {
        __name(this, "_ZodRecord");
      }
      static {
        __name2(this, "_ZodRecord");
      }
      get keySchema() {
        return this._def.keyType;
      }
      get valueSchema() {
        return this._def.valueType;
      }
      _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.object) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.object,
            received: ctx.parsedType
          });
          return INVALID;
        }
        const pairs = [];
        const keyType = this._def.keyType;
        const valueType = this._def.valueType;
        for (const key in ctx.data) {
          pairs.push({
            key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, key)),
            value: valueType._parse(new ParseInputLazyPath(ctx, ctx.data[key], ctx.path, key)),
            alwaysSet: key in ctx.data
          });
        }
        if (ctx.common.async) {
          return ParseStatus.mergeObjectAsync(status, pairs);
        } else {
          return ParseStatus.mergeObjectSync(status, pairs);
        }
      }
      get element() {
        return this._def.valueType;
      }
      static create(first, second, third) {
        if (second instanceof ZodType) {
          return new _ZodRecord({
            keyType: first,
            valueType: second,
            typeName: ZodFirstPartyTypeKind.ZodRecord,
            ...processCreateParams(third)
          });
        }
        return new _ZodRecord({
          keyType: ZodString.create(),
          valueType: first,
          typeName: ZodFirstPartyTypeKind.ZodRecord,
          ...processCreateParams(second)
        });
      }
    };
    ZodMap = class extends ZodType {
      static {
        __name(this, "ZodMap");
      }
      static {
        __name2(this, "ZodMap");
      }
      get keySchema() {
        return this._def.keyType;
      }
      get valueSchema() {
        return this._def.valueType;
      }
      _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.map) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.map,
            received: ctx.parsedType
          });
          return INVALID;
        }
        const keyType = this._def.keyType;
        const valueType = this._def.valueType;
        const pairs = [...ctx.data.entries()].map(([key, value], index) => {
          return {
            key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, [index, "key"])),
            value: valueType._parse(new ParseInputLazyPath(ctx, value, ctx.path, [index, "value"]))
          };
        });
        if (ctx.common.async) {
          const finalMap = /* @__PURE__ */ new Map();
          return Promise.resolve().then(async () => {
            for (const pair of pairs) {
              const key = await pair.key;
              const value = await pair.value;
              if (key.status === "aborted" || value.status === "aborted") {
                return INVALID;
              }
              if (key.status === "dirty" || value.status === "dirty") {
                status.dirty();
              }
              finalMap.set(key.value, value.value);
            }
            return { status: status.value, value: finalMap };
          });
        } else {
          const finalMap = /* @__PURE__ */ new Map();
          for (const pair of pairs) {
            const key = pair.key;
            const value = pair.value;
            if (key.status === "aborted" || value.status === "aborted") {
              return INVALID;
            }
            if (key.status === "dirty" || value.status === "dirty") {
              status.dirty();
            }
            finalMap.set(key.value, value.value);
          }
          return { status: status.value, value: finalMap };
        }
      }
    };
    ZodMap.create = (keyType, valueType, params) => {
      return new ZodMap({
        valueType,
        keyType,
        typeName: ZodFirstPartyTypeKind.ZodMap,
        ...processCreateParams(params)
      });
    };
    ZodSet = class _ZodSet extends ZodType {
      static {
        __name(this, "_ZodSet");
      }
      static {
        __name2(this, "_ZodSet");
      }
      _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.set) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.set,
            received: ctx.parsedType
          });
          return INVALID;
        }
        const def = this._def;
        if (def.minSize !== null) {
          if (ctx.data.size < def.minSize.value) {
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_small,
              minimum: def.minSize.value,
              type: "set",
              inclusive: true,
              exact: false,
              message: def.minSize.message
            });
            status.dirty();
          }
        }
        if (def.maxSize !== null) {
          if (ctx.data.size > def.maxSize.value) {
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_big,
              maximum: def.maxSize.value,
              type: "set",
              inclusive: true,
              exact: false,
              message: def.maxSize.message
            });
            status.dirty();
          }
        }
        const valueType = this._def.valueType;
        function finalizeSet(elements2) {
          const parsedSet = /* @__PURE__ */ new Set();
          for (const element of elements2) {
            if (element.status === "aborted")
              return INVALID;
            if (element.status === "dirty")
              status.dirty();
            parsedSet.add(element.value);
          }
          return { status: status.value, value: parsedSet };
        }
        __name(finalizeSet, "finalizeSet");
        __name2(finalizeSet, "finalizeSet");
        const elements = [...ctx.data.values()].map((item, i) => valueType._parse(new ParseInputLazyPath(ctx, item, ctx.path, i)));
        if (ctx.common.async) {
          return Promise.all(elements).then((elements2) => finalizeSet(elements2));
        } else {
          return finalizeSet(elements);
        }
      }
      min(minSize, message2) {
        return new _ZodSet({
          ...this._def,
          minSize: { value: minSize, message: errorUtil.toString(message2) }
        });
      }
      max(maxSize, message2) {
        return new _ZodSet({
          ...this._def,
          maxSize: { value: maxSize, message: errorUtil.toString(message2) }
        });
      }
      size(size, message2) {
        return this.min(size, message2).max(size, message2);
      }
      nonempty(message2) {
        return this.min(1, message2);
      }
    };
    ZodSet.create = (valueType, params) => {
      return new ZodSet({
        valueType,
        minSize: null,
        maxSize: null,
        typeName: ZodFirstPartyTypeKind.ZodSet,
        ...processCreateParams(params)
      });
    };
    ZodFunction = class _ZodFunction extends ZodType {
      static {
        __name(this, "_ZodFunction");
      }
      static {
        __name2(this, "_ZodFunction");
      }
      constructor() {
        super(...arguments);
        this.validate = this.implement;
      }
      _parse(input) {
        const { ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.function) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.function,
            received: ctx.parsedType
          });
          return INVALID;
        }
        function makeArgsIssue(args, error2) {
          return makeIssue({
            data: args,
            path: ctx.path,
            errorMaps: [
              ctx.common.contextualErrorMap,
              ctx.schemaErrorMap,
              getErrorMap(),
              errorMap
            ].filter((x) => !!x),
            issueData: {
              code: ZodIssueCode.invalid_arguments,
              argumentsError: error2
            }
          });
        }
        __name(makeArgsIssue, "makeArgsIssue");
        __name2(makeArgsIssue, "makeArgsIssue");
        function makeReturnsIssue(returns, error2) {
          return makeIssue({
            data: returns,
            path: ctx.path,
            errorMaps: [
              ctx.common.contextualErrorMap,
              ctx.schemaErrorMap,
              getErrorMap(),
              errorMap
            ].filter((x) => !!x),
            issueData: {
              code: ZodIssueCode.invalid_return_type,
              returnTypeError: error2
            }
          });
        }
        __name(makeReturnsIssue, "makeReturnsIssue");
        __name2(makeReturnsIssue, "makeReturnsIssue");
        const params = { errorMap: ctx.common.contextualErrorMap };
        const fn = ctx.data;
        if (this._def.returns instanceof ZodPromise) {
          const me = this;
          return OK(async function(...args) {
            const error2 = new ZodError([]);
            const parsedArgs = await me._def.args.parseAsync(args, params).catch((e) => {
              error2.addIssue(makeArgsIssue(args, e));
              throw error2;
            });
            const result = await Reflect.apply(fn, this, parsedArgs);
            const parsedReturns = await me._def.returns._def.type.parseAsync(result, params).catch((e) => {
              error2.addIssue(makeReturnsIssue(result, e));
              throw error2;
            });
            return parsedReturns;
          });
        } else {
          const me = this;
          return OK(function(...args) {
            const parsedArgs = me._def.args.safeParse(args, params);
            if (!parsedArgs.success) {
              throw new ZodError([makeArgsIssue(args, parsedArgs.error)]);
            }
            const result = Reflect.apply(fn, this, parsedArgs.data);
            const parsedReturns = me._def.returns.safeParse(result, params);
            if (!parsedReturns.success) {
              throw new ZodError([makeReturnsIssue(result, parsedReturns.error)]);
            }
            return parsedReturns.data;
          });
        }
      }
      parameters() {
        return this._def.args;
      }
      returnType() {
        return this._def.returns;
      }
      args(...items) {
        return new _ZodFunction({
          ...this._def,
          args: ZodTuple.create(items).rest(ZodUnknown.create())
        });
      }
      returns(returnType) {
        return new _ZodFunction({
          ...this._def,
          returns: returnType
        });
      }
      implement(func) {
        const validatedFunc = this.parse(func);
        return validatedFunc;
      }
      strictImplement(func) {
        const validatedFunc = this.parse(func);
        return validatedFunc;
      }
      static create(args, returns, params) {
        return new _ZodFunction({
          args: args ? args : ZodTuple.create([]).rest(ZodUnknown.create()),
          returns: returns || ZodUnknown.create(),
          typeName: ZodFirstPartyTypeKind.ZodFunction,
          ...processCreateParams(params)
        });
      }
    };
    ZodLazy = class extends ZodType {
      static {
        __name(this, "ZodLazy");
      }
      static {
        __name2(this, "ZodLazy");
      }
      get schema() {
        return this._def.getter();
      }
      _parse(input) {
        const { ctx } = this._processInputParams(input);
        const lazySchema = this._def.getter();
        return lazySchema._parse({ data: ctx.data, path: ctx.path, parent: ctx });
      }
    };
    ZodLazy.create = (getter, params) => {
      return new ZodLazy({
        getter,
        typeName: ZodFirstPartyTypeKind.ZodLazy,
        ...processCreateParams(params)
      });
    };
    ZodLiteral = class extends ZodType {
      static {
        __name(this, "ZodLiteral");
      }
      static {
        __name2(this, "ZodLiteral");
      }
      _parse(input) {
        if (input.data !== this._def.value) {
          const ctx = this._getOrReturnCtx(input);
          addIssueToContext(ctx, {
            received: ctx.data,
            code: ZodIssueCode.invalid_literal,
            expected: this._def.value
          });
          return INVALID;
        }
        return { status: "valid", value: input.data };
      }
      get value() {
        return this._def.value;
      }
    };
    ZodLiteral.create = (value, params) => {
      return new ZodLiteral({
        value,
        typeName: ZodFirstPartyTypeKind.ZodLiteral,
        ...processCreateParams(params)
      });
    };
    __name2(createZodEnum, "createZodEnum");
    ZodEnum = class _ZodEnum extends ZodType {
      static {
        __name(this, "_ZodEnum");
      }
      static {
        __name2(this, "_ZodEnum");
      }
      constructor() {
        super(...arguments);
        _ZodEnum_cache.set(this, void 0);
      }
      _parse(input) {
        if (typeof input.data !== "string") {
          const ctx = this._getOrReturnCtx(input);
          const expectedValues = this._def.values;
          addIssueToContext(ctx, {
            expected: util.joinValues(expectedValues),
            received: ctx.parsedType,
            code: ZodIssueCode.invalid_type
          });
          return INVALID;
        }
        if (!__classPrivateFieldGet(this, _ZodEnum_cache, "f")) {
          __classPrivateFieldSet(this, _ZodEnum_cache, new Set(this._def.values), "f");
        }
        if (!__classPrivateFieldGet(this, _ZodEnum_cache, "f").has(input.data)) {
          const ctx = this._getOrReturnCtx(input);
          const expectedValues = this._def.values;
          addIssueToContext(ctx, {
            received: ctx.data,
            code: ZodIssueCode.invalid_enum_value,
            options: expectedValues
          });
          return INVALID;
        }
        return OK(input.data);
      }
      get options() {
        return this._def.values;
      }
      get enum() {
        const enumValues = {};
        for (const val of this._def.values) {
          enumValues[val] = val;
        }
        return enumValues;
      }
      get Values() {
        const enumValues = {};
        for (const val of this._def.values) {
          enumValues[val] = val;
        }
        return enumValues;
      }
      get Enum() {
        const enumValues = {};
        for (const val of this._def.values) {
          enumValues[val] = val;
        }
        return enumValues;
      }
      extract(values, newDef = this._def) {
        return _ZodEnum.create(values, {
          ...this._def,
          ...newDef
        });
      }
      exclude(values, newDef = this._def) {
        return _ZodEnum.create(this.options.filter((opt) => !values.includes(opt)), {
          ...this._def,
          ...newDef
        });
      }
    };
    _ZodEnum_cache = /* @__PURE__ */ new WeakMap();
    ZodEnum.create = createZodEnum;
    ZodNativeEnum = class extends ZodType {
      static {
        __name(this, "ZodNativeEnum");
      }
      static {
        __name2(this, "ZodNativeEnum");
      }
      constructor() {
        super(...arguments);
        _ZodNativeEnum_cache.set(this, void 0);
      }
      _parse(input) {
        const nativeEnumValues = util.getValidEnumValues(this._def.values);
        const ctx = this._getOrReturnCtx(input);
        if (ctx.parsedType !== ZodParsedType.string && ctx.parsedType !== ZodParsedType.number) {
          const expectedValues = util.objectValues(nativeEnumValues);
          addIssueToContext(ctx, {
            expected: util.joinValues(expectedValues),
            received: ctx.parsedType,
            code: ZodIssueCode.invalid_type
          });
          return INVALID;
        }
        if (!__classPrivateFieldGet(this, _ZodNativeEnum_cache, "f")) {
          __classPrivateFieldSet(this, _ZodNativeEnum_cache, new Set(util.getValidEnumValues(this._def.values)), "f");
        }
        if (!__classPrivateFieldGet(this, _ZodNativeEnum_cache, "f").has(input.data)) {
          const expectedValues = util.objectValues(nativeEnumValues);
          addIssueToContext(ctx, {
            received: ctx.data,
            code: ZodIssueCode.invalid_enum_value,
            options: expectedValues
          });
          return INVALID;
        }
        return OK(input.data);
      }
      get enum() {
        return this._def.values;
      }
    };
    _ZodNativeEnum_cache = /* @__PURE__ */ new WeakMap();
    ZodNativeEnum.create = (values, params) => {
      return new ZodNativeEnum({
        values,
        typeName: ZodFirstPartyTypeKind.ZodNativeEnum,
        ...processCreateParams(params)
      });
    };
    ZodPromise = class extends ZodType {
      static {
        __name(this, "ZodPromise");
      }
      static {
        __name2(this, "ZodPromise");
      }
      unwrap() {
        return this._def.type;
      }
      _parse(input) {
        const { ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.promise && ctx.common.async === false) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.promise,
            received: ctx.parsedType
          });
          return INVALID;
        }
        const promisified = ctx.parsedType === ZodParsedType.promise ? ctx.data : Promise.resolve(ctx.data);
        return OK(promisified.then((data) => {
          return this._def.type.parseAsync(data, {
            path: ctx.path,
            errorMap: ctx.common.contextualErrorMap
          });
        }));
      }
    };
    ZodPromise.create = (schema2, params) => {
      return new ZodPromise({
        type: schema2,
        typeName: ZodFirstPartyTypeKind.ZodPromise,
        ...processCreateParams(params)
      });
    };
    ZodEffects = class extends ZodType {
      static {
        __name(this, "ZodEffects");
      }
      static {
        __name2(this, "ZodEffects");
      }
      innerType() {
        return this._def.schema;
      }
      sourceType() {
        return this._def.schema._def.typeName === ZodFirstPartyTypeKind.ZodEffects ? this._def.schema.sourceType() : this._def.schema;
      }
      _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        const effect = this._def.effect || null;
        const checkCtx = {
          addIssue: /* @__PURE__ */ __name2((arg) => {
            addIssueToContext(ctx, arg);
            if (arg.fatal) {
              status.abort();
            } else {
              status.dirty();
            }
          }, "addIssue"),
          get path() {
            return ctx.path;
          }
        };
        checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);
        if (effect.type === "preprocess") {
          const processed = effect.transform(ctx.data, checkCtx);
          if (ctx.common.async) {
            return Promise.resolve(processed).then(async (processed2) => {
              if (status.value === "aborted")
                return INVALID;
              const result = await this._def.schema._parseAsync({
                data: processed2,
                path: ctx.path,
                parent: ctx
              });
              if (result.status === "aborted")
                return INVALID;
              if (result.status === "dirty")
                return DIRTY(result.value);
              if (status.value === "dirty")
                return DIRTY(result.value);
              return result;
            });
          } else {
            if (status.value === "aborted")
              return INVALID;
            const result = this._def.schema._parseSync({
              data: processed,
              path: ctx.path,
              parent: ctx
            });
            if (result.status === "aborted")
              return INVALID;
            if (result.status === "dirty")
              return DIRTY(result.value);
            if (status.value === "dirty")
              return DIRTY(result.value);
            return result;
          }
        }
        if (effect.type === "refinement") {
          const executeRefinement = /* @__PURE__ */ __name2((acc) => {
            const result = effect.refinement(acc, checkCtx);
            if (ctx.common.async) {
              return Promise.resolve(result);
            }
            if (result instanceof Promise) {
              throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");
            }
            return acc;
          }, "executeRefinement");
          if (ctx.common.async === false) {
            const inner = this._def.schema._parseSync({
              data: ctx.data,
              path: ctx.path,
              parent: ctx
            });
            if (inner.status === "aborted")
              return INVALID;
            if (inner.status === "dirty")
              status.dirty();
            executeRefinement(inner.value);
            return { status: status.value, value: inner.value };
          } else {
            return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((inner) => {
              if (inner.status === "aborted")
                return INVALID;
              if (inner.status === "dirty")
                status.dirty();
              return executeRefinement(inner.value).then(() => {
                return { status: status.value, value: inner.value };
              });
            });
          }
        }
        if (effect.type === "transform") {
          if (ctx.common.async === false) {
            const base = this._def.schema._parseSync({
              data: ctx.data,
              path: ctx.path,
              parent: ctx
            });
            if (!isValid2(base))
              return base;
            const result = effect.transform(base.value, checkCtx);
            if (result instanceof Promise) {
              throw new Error(`Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`);
            }
            return { status: status.value, value: result };
          } else {
            return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((base) => {
              if (!isValid2(base))
                return base;
              return Promise.resolve(effect.transform(base.value, checkCtx)).then((result) => ({ status: status.value, value: result }));
            });
          }
        }
        util.assertNever(effect);
      }
    };
    ZodEffects.create = (schema2, effect, params) => {
      return new ZodEffects({
        schema: schema2,
        typeName: ZodFirstPartyTypeKind.ZodEffects,
        effect,
        ...processCreateParams(params)
      });
    };
    ZodEffects.createWithPreprocess = (preprocess, schema2, params) => {
      return new ZodEffects({
        schema: schema2,
        effect: { type: "preprocess", transform: preprocess },
        typeName: ZodFirstPartyTypeKind.ZodEffects,
        ...processCreateParams(params)
      });
    };
    ZodOptional = class extends ZodType {
      static {
        __name(this, "ZodOptional");
      }
      static {
        __name2(this, "ZodOptional");
      }
      _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType === ZodParsedType.undefined) {
          return OK(void 0);
        }
        return this._def.innerType._parse(input);
      }
      unwrap() {
        return this._def.innerType;
      }
    };
    ZodOptional.create = (type, params) => {
      return new ZodOptional({
        innerType: type,
        typeName: ZodFirstPartyTypeKind.ZodOptional,
        ...processCreateParams(params)
      });
    };
    ZodNullable = class extends ZodType {
      static {
        __name(this, "ZodNullable");
      }
      static {
        __name2(this, "ZodNullable");
      }
      _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType === ZodParsedType.null) {
          return OK(null);
        }
        return this._def.innerType._parse(input);
      }
      unwrap() {
        return this._def.innerType;
      }
    };
    ZodNullable.create = (type, params) => {
      return new ZodNullable({
        innerType: type,
        typeName: ZodFirstPartyTypeKind.ZodNullable,
        ...processCreateParams(params)
      });
    };
    ZodDefault = class extends ZodType {
      static {
        __name(this, "ZodDefault");
      }
      static {
        __name2(this, "ZodDefault");
      }
      _parse(input) {
        const { ctx } = this._processInputParams(input);
        let data = ctx.data;
        if (ctx.parsedType === ZodParsedType.undefined) {
          data = this._def.defaultValue();
        }
        return this._def.innerType._parse({
          data,
          path: ctx.path,
          parent: ctx
        });
      }
      removeDefault() {
        return this._def.innerType;
      }
    };
    ZodDefault.create = (type, params) => {
      return new ZodDefault({
        innerType: type,
        typeName: ZodFirstPartyTypeKind.ZodDefault,
        defaultValue: typeof params.default === "function" ? params.default : () => params.default,
        ...processCreateParams(params)
      });
    };
    ZodCatch = class extends ZodType {
      static {
        __name(this, "ZodCatch");
      }
      static {
        __name2(this, "ZodCatch");
      }
      _parse(input) {
        const { ctx } = this._processInputParams(input);
        const newCtx = {
          ...ctx,
          common: {
            ...ctx.common,
            issues: []
          }
        };
        const result = this._def.innerType._parse({
          data: newCtx.data,
          path: newCtx.path,
          parent: {
            ...newCtx
          }
        });
        if (isAsync(result)) {
          return result.then((result2) => {
            return {
              status: "valid",
              value: result2.status === "valid" ? result2.value : this._def.catchValue({
                get error() {
                  return new ZodError(newCtx.common.issues);
                },
                input: newCtx.data
              })
            };
          });
        } else {
          return {
            status: "valid",
            value: result.status === "valid" ? result.value : this._def.catchValue({
              get error() {
                return new ZodError(newCtx.common.issues);
              },
              input: newCtx.data
            })
          };
        }
      }
      removeCatch() {
        return this._def.innerType;
      }
    };
    ZodCatch.create = (type, params) => {
      return new ZodCatch({
        innerType: type,
        typeName: ZodFirstPartyTypeKind.ZodCatch,
        catchValue: typeof params.catch === "function" ? params.catch : () => params.catch,
        ...processCreateParams(params)
      });
    };
    ZodNaN = class extends ZodType {
      static {
        __name(this, "ZodNaN");
      }
      static {
        __name2(this, "ZodNaN");
      }
      _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.nan) {
          const ctx = this._getOrReturnCtx(input);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.nan,
            received: ctx.parsedType
          });
          return INVALID;
        }
        return { status: "valid", value: input.data };
      }
    };
    ZodNaN.create = (params) => {
      return new ZodNaN({
        typeName: ZodFirstPartyTypeKind.ZodNaN,
        ...processCreateParams(params)
      });
    };
    BRAND = Symbol("zod_brand");
    ZodBranded = class extends ZodType {
      static {
        __name(this, "ZodBranded");
      }
      static {
        __name2(this, "ZodBranded");
      }
      _parse(input) {
        const { ctx } = this._processInputParams(input);
        const data = ctx.data;
        return this._def.type._parse({
          data,
          path: ctx.path,
          parent: ctx
        });
      }
      unwrap() {
        return this._def.type;
      }
    };
    ZodPipeline = class _ZodPipeline extends ZodType {
      static {
        __name(this, "_ZodPipeline");
      }
      static {
        __name2(this, "_ZodPipeline");
      }
      _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.common.async) {
          const handleAsync = /* @__PURE__ */ __name2(async () => {
            const inResult = await this._def.in._parseAsync({
              data: ctx.data,
              path: ctx.path,
              parent: ctx
            });
            if (inResult.status === "aborted")
              return INVALID;
            if (inResult.status === "dirty") {
              status.dirty();
              return DIRTY(inResult.value);
            } else {
              return this._def.out._parseAsync({
                data: inResult.value,
                path: ctx.path,
                parent: ctx
              });
            }
          }, "handleAsync");
          return handleAsync();
        } else {
          const inResult = this._def.in._parseSync({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
          });
          if (inResult.status === "aborted")
            return INVALID;
          if (inResult.status === "dirty") {
            status.dirty();
            return {
              status: "dirty",
              value: inResult.value
            };
          } else {
            return this._def.out._parseSync({
              data: inResult.value,
              path: ctx.path,
              parent: ctx
            });
          }
        }
      }
      static create(a, b) {
        return new _ZodPipeline({
          in: a,
          out: b,
          typeName: ZodFirstPartyTypeKind.ZodPipeline
        });
      }
    };
    ZodReadonly = class extends ZodType {
      static {
        __name(this, "ZodReadonly");
      }
      static {
        __name2(this, "ZodReadonly");
      }
      _parse(input) {
        const result = this._def.innerType._parse(input);
        const freeze2 = /* @__PURE__ */ __name2((data) => {
          if (isValid2(data)) {
            data.value = Object.freeze(data.value);
          }
          return data;
        }, "freeze");
        return isAsync(result) ? result.then((data) => freeze2(data)) : freeze2(result);
      }
      unwrap() {
        return this._def.innerType;
      }
    };
    ZodReadonly.create = (type, params) => {
      return new ZodReadonly({
        innerType: type,
        typeName: ZodFirstPartyTypeKind.ZodReadonly,
        ...processCreateParams(params)
      });
    };
    late = {
      object: ZodObject.lazycreate
    };
    (function(ZodFirstPartyTypeKind22) {
      ZodFirstPartyTypeKind22["ZodString"] = "ZodString";
      ZodFirstPartyTypeKind22["ZodNumber"] = "ZodNumber";
      ZodFirstPartyTypeKind22["ZodNaN"] = "ZodNaN";
      ZodFirstPartyTypeKind22["ZodBigInt"] = "ZodBigInt";
      ZodFirstPartyTypeKind22["ZodBoolean"] = "ZodBoolean";
      ZodFirstPartyTypeKind22["ZodDate"] = "ZodDate";
      ZodFirstPartyTypeKind22["ZodSymbol"] = "ZodSymbol";
      ZodFirstPartyTypeKind22["ZodUndefined"] = "ZodUndefined";
      ZodFirstPartyTypeKind22["ZodNull"] = "ZodNull";
      ZodFirstPartyTypeKind22["ZodAny"] = "ZodAny";
      ZodFirstPartyTypeKind22["ZodUnknown"] = "ZodUnknown";
      ZodFirstPartyTypeKind22["ZodNever"] = "ZodNever";
      ZodFirstPartyTypeKind22["ZodVoid"] = "ZodVoid";
      ZodFirstPartyTypeKind22["ZodArray"] = "ZodArray";
      ZodFirstPartyTypeKind22["ZodObject"] = "ZodObject";
      ZodFirstPartyTypeKind22["ZodUnion"] = "ZodUnion";
      ZodFirstPartyTypeKind22["ZodDiscriminatedUnion"] = "ZodDiscriminatedUnion";
      ZodFirstPartyTypeKind22["ZodIntersection"] = "ZodIntersection";
      ZodFirstPartyTypeKind22["ZodTuple"] = "ZodTuple";
      ZodFirstPartyTypeKind22["ZodRecord"] = "ZodRecord";
      ZodFirstPartyTypeKind22["ZodMap"] = "ZodMap";
      ZodFirstPartyTypeKind22["ZodSet"] = "ZodSet";
      ZodFirstPartyTypeKind22["ZodFunction"] = "ZodFunction";
      ZodFirstPartyTypeKind22["ZodLazy"] = "ZodLazy";
      ZodFirstPartyTypeKind22["ZodLiteral"] = "ZodLiteral";
      ZodFirstPartyTypeKind22["ZodEnum"] = "ZodEnum";
      ZodFirstPartyTypeKind22["ZodEffects"] = "ZodEffects";
      ZodFirstPartyTypeKind22["ZodNativeEnum"] = "ZodNativeEnum";
      ZodFirstPartyTypeKind22["ZodOptional"] = "ZodOptional";
      ZodFirstPartyTypeKind22["ZodNullable"] = "ZodNullable";
      ZodFirstPartyTypeKind22["ZodDefault"] = "ZodDefault";
      ZodFirstPartyTypeKind22["ZodCatch"] = "ZodCatch";
      ZodFirstPartyTypeKind22["ZodPromise"] = "ZodPromise";
      ZodFirstPartyTypeKind22["ZodBranded"] = "ZodBranded";
      ZodFirstPartyTypeKind22["ZodPipeline"] = "ZodPipeline";
      ZodFirstPartyTypeKind22["ZodReadonly"] = "ZodReadonly";
    })(ZodFirstPartyTypeKind || (ZodFirstPartyTypeKind = {}));
    stringType = ZodString.create;
    numberType = ZodNumber.create;
    nanType = ZodNaN.create;
    bigIntType = ZodBigInt.create;
    booleanType = ZodBoolean.create;
    dateType = ZodDate.create;
    symbolType = ZodSymbol.create;
    undefinedType = ZodUndefined.create;
    nullType = ZodNull.create;
    anyType = ZodAny.create;
    unknownType = ZodUnknown.create;
    neverType = ZodNever.create;
    voidType = ZodVoid.create;
    arrayType = ZodArray.create;
    objectType = ZodObject.create;
    strictObjectType = ZodObject.strictCreate;
    unionType = ZodUnion.create;
    discriminatedUnionType = ZodDiscriminatedUnion.create;
    intersectionType = ZodIntersection.create;
    tupleType = ZodTuple.create;
    recordType = ZodRecord.create;
    mapType = ZodMap.create;
    setType = ZodSet.create;
    functionType = ZodFunction.create;
    lazyType = ZodLazy.create;
    literalType = ZodLiteral.create;
    enumType = ZodEnum.create;
    nativeEnumType = ZodNativeEnum.create;
    promiseType = ZodPromise.create;
    effectsType = ZodEffects.create;
    optionalType = ZodOptional.create;
    nullableType = ZodNullable.create;
    preprocessType = ZodEffects.createWithPreprocess;
    pipelineType = ZodPipeline.create;
    paths = {};
    __name2(getTypeFromZodType, "getTypeFromZodType");
    __name2(getParameters, "getParameters");
    __name2(getRequestBody, "getRequestBody");
    __name2(getResponse, "getResponse");
    __name2(generator, "generator");
    getHTML = /* @__PURE__ */ __name2((apiReference, config2) => `<!doctype html>
<html>
  <head>
    <title>Scalar API Reference</title>
    <meta charset="utf-8" />
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1" />
  </head>
  <body>
    <script
      id="api-reference"
      type="application/json">
    ${JSON.stringify(apiReference)}
    <\/script>
	 <script>
      var configuration = {
	  	favicon: ${config2?.logo ? `data:image/svg+xml;utf8,${encodeURIComponent(config2.logo)}` : void 0} ,
	   	theme: ${config2?.theme || "saturn"},
        metaData: {
			title: ${config2?.title || "Open API Reference"},
			description: ${config2?.description || "Better Call Open API"},
		}
      }
      document.getElementById('api-reference').dataset.configuration =
        JSON.stringify(configuration)
    <\/script>
	  <script src="https://cdn.jsdelivr.net/npm/@scalar/api-reference"><\/script>
  </body>
</html>`, "getHTML");
    createRouter2 = /* @__PURE__ */ __name2((endpoints, config2) => {
      if (!config2?.openapi?.disabled) {
        const openapi = {
          path: "/api/reference",
          ...config2?.openapi
        };
        endpoints["openapi"] = createEndpoint2(
          openapi.path,
          {
            method: "GET"
          },
          async (c) => {
            const schema2 = await generator(endpoints);
            return new Response(getHTML(schema2, openapi.scalar), {
              headers: {
                "Content-Type": "text/html"
              }
            });
          }
        );
      }
      const router2 = createRouter();
      const middlewareRouter = createRouter();
      for (const endpoint of Object.values(endpoints)) {
        if (!endpoint.options) {
          continue;
        }
        if (endpoint.options?.metadata?.SERVER_ONLY) continue;
        const methods2 = Array.isArray(endpoint.options?.method) ? endpoint.options.method : [endpoint.options?.method];
        for (const method of methods2) {
          addRoute(router2, method, endpoint.path, endpoint);
        }
      }
      if (config2?.routerMiddleware?.length) {
        for (const { path, middleware } of config2.routerMiddleware) {
          addRoute(middlewareRouter, "*", path, middleware);
        }
      }
      const processRequest = /* @__PURE__ */ __name2(async (request) => {
        const url = new URL(request.url);
        const path = config2?.basePath ? url.pathname.split(config2.basePath)[1] : url.pathname;
        if (!path?.length) {
          config2?.onError?.(new Error("NOT_FOUND"));
          return new Response(null, { status: 404, statusText: "Not Found" });
        }
        const route = findRoute(router2, request.method, path);
        if (!route?.data) {
          return new Response(null, { status: 404, statusText: "Not Found" });
        }
        const query = {};
        url.searchParams.forEach((value, key) => {
          if (key in query) {
            if (Array.isArray(query[key])) {
              query[key].push(value);
            } else {
              query[key] = [query[key], value];
            }
          } else {
            query[key] = value;
          }
        });
        const handler = route.data;
        const context = {
          path,
          method: request.method,
          headers: request.headers,
          params: route.params ? JSON.parse(JSON.stringify(route.params)) : {},
          request,
          body: await getBody(handler.options.cloneRequest ? request.clone() : request),
          query,
          _flag: "router",
          asResponse: true,
          context: config2?.routerContext
        };
        try {
          const middlewareRoutes = findAllRoutes(middlewareRouter, "*", path);
          if (middlewareRoutes?.length) {
            for (const { data: middleware, params } of middlewareRoutes) {
              const res = await middleware({
                ...context,
                params,
                asResponse: false
              });
              if (res instanceof Response) return res;
            }
          }
          const response = await handler(context);
          return response;
        } catch (error2) {
          if (isAPIError(error2)) {
            return toResponse(error2);
          }
          console.error(`# SERVER_ERROR: `, error2);
          return new Response(null, {
            status: 500,
            statusText: "Internal Server Error"
          });
        }
      }, "processRequest");
      return {
        handler: /* @__PURE__ */ __name2(async (request) => {
          const onReq = await config2?.onRequest?.(request);
          if (onReq instanceof Response) {
            return onReq;
          }
          const req = onReq instanceof Request ? onReq : request;
          const res = await processRequest(req);
          const onRes = await config2?.onResponse?.(res);
          if (onRes instanceof Response) {
            return onRes;
          }
          return res;
        }, "handler"),
        endpoints
      };
    }, "createRouter");
  }
});
var util2;
var objectUtil2;
var ZodParsedType2;
var getParsedType2;
var init_util7 = __esm({
  "../node_modules/better-auth/node_modules/zod/dist/esm/v3/helpers/util.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    (function(util3) {
      util3.assertEqual = (_) => {
      };
      function assertIs(_arg) {
      }
      __name(assertIs, "assertIs");
      __name2(assertIs, "assertIs");
      util3.assertIs = assertIs;
      function assertNever(_x) {
        throw new Error();
      }
      __name(assertNever, "assertNever");
      __name2(assertNever, "assertNever");
      util3.assertNever = assertNever;
      util3.arrayToEnum = (items) => {
        const obj = {};
        for (const item of items) {
          obj[item] = item;
        }
        return obj;
      };
      util3.getValidEnumValues = (obj) => {
        const validKeys = util3.objectKeys(obj).filter((k) => typeof obj[obj[k]] !== "number");
        const filtered = {};
        for (const k of validKeys) {
          filtered[k] = obj[k];
        }
        return util3.objectValues(filtered);
      };
      util3.objectValues = (obj) => {
        return util3.objectKeys(obj).map(function(e) {
          return obj[e];
        });
      };
      util3.objectKeys = typeof Object.keys === "function" ? (obj) => Object.keys(obj) : (object3) => {
        const keys = [];
        for (const key in object3) {
          if (Object.prototype.hasOwnProperty.call(object3, key)) {
            keys.push(key);
          }
        }
        return keys;
      };
      util3.find = (arr, checker) => {
        for (const item of arr) {
          if (checker(item))
            return item;
        }
        return void 0;
      };
      util3.isInteger = typeof Number.isInteger === "function" ? (val) => Number.isInteger(val) : (val) => typeof val === "number" && Number.isFinite(val) && Math.floor(val) === val;
      function joinValues(array3, separator = " | ") {
        return array3.map((val) => typeof val === "string" ? `'${val}'` : val).join(separator);
      }
      __name(joinValues, "joinValues");
      __name2(joinValues, "joinValues");
      util3.joinValues = joinValues;
      util3.jsonStringifyReplacer = (_, value) => {
        if (typeof value === "bigint") {
          return value.toString();
        }
        return value;
      };
    })(util2 || (util2 = {}));
    (function(objectUtil3) {
      objectUtil3.mergeShapes = (first, second) => {
        return {
          ...first,
          ...second
          // second overwrites first
        };
      };
    })(objectUtil2 || (objectUtil2 = {}));
    ZodParsedType2 = util2.arrayToEnum([
      "string",
      "nan",
      "number",
      "integer",
      "float",
      "boolean",
      "date",
      "bigint",
      "symbol",
      "function",
      "undefined",
      "null",
      "array",
      "object",
      "unknown",
      "promise",
      "void",
      "never",
      "map",
      "set"
    ]);
    getParsedType2 = /* @__PURE__ */ __name2((data) => {
      const t = typeof data;
      switch (t) {
        case "undefined":
          return ZodParsedType2.undefined;
        case "string":
          return ZodParsedType2.string;
        case "number":
          return Number.isNaN(data) ? ZodParsedType2.nan : ZodParsedType2.number;
        case "boolean":
          return ZodParsedType2.boolean;
        case "function":
          return ZodParsedType2.function;
        case "bigint":
          return ZodParsedType2.bigint;
        case "symbol":
          return ZodParsedType2.symbol;
        case "object":
          if (Array.isArray(data)) {
            return ZodParsedType2.array;
          }
          if (data === null) {
            return ZodParsedType2.null;
          }
          if (data.then && typeof data.then === "function" && data.catch && typeof data.catch === "function") {
            return ZodParsedType2.promise;
          }
          if (typeof Map !== "undefined" && data instanceof Map) {
            return ZodParsedType2.map;
          }
          if (typeof Set !== "undefined" && data instanceof Set) {
            return ZodParsedType2.set;
          }
          if (typeof Date !== "undefined" && data instanceof Date) {
            return ZodParsedType2.date;
          }
          return ZodParsedType2.object;
        default:
          return ZodParsedType2.unknown;
      }
    }, "getParsedType");
  }
});
var ZodIssueCode2;
var quotelessJson;
var ZodError2;
var init_ZodError = __esm({
  "../node_modules/better-auth/node_modules/zod/dist/esm/v3/ZodError.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_util7();
    ZodIssueCode2 = util2.arrayToEnum([
      "invalid_type",
      "invalid_literal",
      "custom",
      "invalid_union",
      "invalid_union_discriminator",
      "invalid_enum_value",
      "unrecognized_keys",
      "invalid_arguments",
      "invalid_return_type",
      "invalid_date",
      "invalid_string",
      "too_small",
      "too_big",
      "invalid_intersection_types",
      "not_multiple_of",
      "not_finite"
    ]);
    quotelessJson = /* @__PURE__ */ __name2((obj) => {
      const json = JSON.stringify(obj, null, 2);
      return json.replace(/"([^"]+)":/g, "$1:");
    }, "quotelessJson");
    ZodError2 = class _ZodError2 extends Error {
      static {
        __name(this, "_ZodError2");
      }
      static {
        __name2(this, "ZodError");
      }
      get errors() {
        return this.issues;
      }
      constructor(issues) {
        super();
        this.issues = [];
        this.addIssue = (sub) => {
          this.issues = [...this.issues, sub];
        };
        this.addIssues = (subs = []) => {
          this.issues = [...this.issues, ...subs];
        };
        const actualProto = new.target.prototype;
        if (Object.setPrototypeOf) {
          Object.setPrototypeOf(this, actualProto);
        } else {
          this.__proto__ = actualProto;
        }
        this.name = "ZodError";
        this.issues = issues;
      }
      format(_mapper) {
        const mapper = _mapper || function(issue) {
          return issue.message;
        };
        const fieldErrors = { _errors: [] };
        const processError = /* @__PURE__ */ __name2((error2) => {
          for (const issue of error2.issues) {
            if (issue.code === "invalid_union") {
              issue.unionErrors.map(processError);
            } else if (issue.code === "invalid_return_type") {
              processError(issue.returnTypeError);
            } else if (issue.code === "invalid_arguments") {
              processError(issue.argumentsError);
            } else if (issue.path.length === 0) {
              fieldErrors._errors.push(mapper(issue));
            } else {
              let curr = fieldErrors;
              let i = 0;
              while (i < issue.path.length) {
                const el = issue.path[i];
                const terminal = i === issue.path.length - 1;
                if (!terminal) {
                  curr[el] = curr[el] || { _errors: [] };
                } else {
                  curr[el] = curr[el] || { _errors: [] };
                  curr[el]._errors.push(mapper(issue));
                }
                curr = curr[el];
                i++;
              }
            }
          }
        }, "processError");
        processError(this);
        return fieldErrors;
      }
      static assert(value) {
        if (!(value instanceof _ZodError2)) {
          throw new Error(`Not a ZodError: ${value}`);
        }
      }
      toString() {
        return this.message;
      }
      get message() {
        return JSON.stringify(this.issues, util2.jsonStringifyReplacer, 2);
      }
      get isEmpty() {
        return this.issues.length === 0;
      }
      flatten(mapper = (issue) => issue.message) {
        const fieldErrors = {};
        const formErrors = [];
        for (const sub of this.issues) {
          if (sub.path.length > 0) {
            fieldErrors[sub.path[0]] = fieldErrors[sub.path[0]] || [];
            fieldErrors[sub.path[0]].push(mapper(sub));
          } else {
            formErrors.push(mapper(sub));
          }
        }
        return { formErrors, fieldErrors };
      }
      get formErrors() {
        return this.flatten();
      }
    };
    ZodError2.create = (issues) => {
      const error2 = new ZodError2(issues);
      return error2;
    };
  }
});
var errorMap2;
var en_default;
var init_en = __esm({
  "../node_modules/better-auth/node_modules/zod/dist/esm/v3/locales/en.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_ZodError();
    init_util7();
    errorMap2 = /* @__PURE__ */ __name2((issue, _ctx) => {
      let message2;
      switch (issue.code) {
        case ZodIssueCode2.invalid_type:
          if (issue.received === ZodParsedType2.undefined) {
            message2 = "Required";
          } else {
            message2 = `Expected ${issue.expected}, received ${issue.received}`;
          }
          break;
        case ZodIssueCode2.invalid_literal:
          message2 = `Invalid literal value, expected ${JSON.stringify(issue.expected, util2.jsonStringifyReplacer)}`;
          break;
        case ZodIssueCode2.unrecognized_keys:
          message2 = `Unrecognized key(s) in object: ${util2.joinValues(issue.keys, ", ")}`;
          break;
        case ZodIssueCode2.invalid_union:
          message2 = `Invalid input`;
          break;
        case ZodIssueCode2.invalid_union_discriminator:
          message2 = `Invalid discriminator value. Expected ${util2.joinValues(issue.options)}`;
          break;
        case ZodIssueCode2.invalid_enum_value:
          message2 = `Invalid enum value. Expected ${util2.joinValues(issue.options)}, received '${issue.received}'`;
          break;
        case ZodIssueCode2.invalid_arguments:
          message2 = `Invalid function arguments`;
          break;
        case ZodIssueCode2.invalid_return_type:
          message2 = `Invalid function return type`;
          break;
        case ZodIssueCode2.invalid_date:
          message2 = `Invalid date`;
          break;
        case ZodIssueCode2.invalid_string:
          if (typeof issue.validation === "object") {
            if ("includes" in issue.validation) {
              message2 = `Invalid input: must include "${issue.validation.includes}"`;
              if (typeof issue.validation.position === "number") {
                message2 = `${message2} at one or more positions greater than or equal to ${issue.validation.position}`;
              }
            } else if ("startsWith" in issue.validation) {
              message2 = `Invalid input: must start with "${issue.validation.startsWith}"`;
            } else if ("endsWith" in issue.validation) {
              message2 = `Invalid input: must end with "${issue.validation.endsWith}"`;
            } else {
              util2.assertNever(issue.validation);
            }
          } else if (issue.validation !== "regex") {
            message2 = `Invalid ${issue.validation}`;
          } else {
            message2 = "Invalid";
          }
          break;
        case ZodIssueCode2.too_small:
          if (issue.type === "array")
            message2 = `Array must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;
          else if (issue.type === "string")
            message2 = `String must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;
          else if (issue.type === "number")
            message2 = `Number must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${issue.minimum}`;
          else if (issue.type === "date")
            message2 = `Date must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${new Date(Number(issue.minimum))}`;
          else
            message2 = "Invalid input";
          break;
        case ZodIssueCode2.too_big:
          if (issue.type === "array")
            message2 = `Array must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;
          else if (issue.type === "string")
            message2 = `String must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;
          else if (issue.type === "number")
            message2 = `Number must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;
          else if (issue.type === "bigint")
            message2 = `BigInt must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;
          else if (issue.type === "date")
            message2 = `Date must be ${issue.exact ? `exactly` : issue.inclusive ? `smaller than or equal to` : `smaller than`} ${new Date(Number(issue.maximum))}`;
          else
            message2 = "Invalid input";
          break;
        case ZodIssueCode2.custom:
          message2 = `Invalid input`;
          break;
        case ZodIssueCode2.invalid_intersection_types:
          message2 = `Intersection results could not be merged`;
          break;
        case ZodIssueCode2.not_multiple_of:
          message2 = `Number must be a multiple of ${issue.multipleOf}`;
          break;
        case ZodIssueCode2.not_finite:
          message2 = "Number must be finite";
          break;
        default:
          message2 = _ctx.defaultError;
          util2.assertNever(issue);
      }
      return { message: message2 };
    }, "errorMap");
    en_default = errorMap2;
  }
});
function setErrorMap(map2) {
  overrideErrorMap2 = map2;
}
__name(setErrorMap, "setErrorMap");
function getErrorMap2() {
  return overrideErrorMap2;
}
__name(getErrorMap2, "getErrorMap2");
var overrideErrorMap2;
var init_errors3 = __esm({
  "../node_modules/better-auth/node_modules/zod/dist/esm/v3/errors.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_en();
    overrideErrorMap2 = en_default;
    __name2(setErrorMap, "setErrorMap");
    __name2(getErrorMap2, "getErrorMap");
  }
});
function addIssueToContext2(ctx, issueData) {
  const overrideMap = getErrorMap2();
  const issue = makeIssue2({
    issueData,
    data: ctx.data,
    path: ctx.path,
    errorMaps: [
      ctx.common.contextualErrorMap,
      // contextual error map is first priority
      ctx.schemaErrorMap,
      // then schema-bound map if available
      overrideMap,
      // then global override map
      overrideMap === en_default ? void 0 : en_default
      // then global default map
    ].filter((x) => !!x)
  });
  ctx.common.issues.push(issue);
}
__name(addIssueToContext2, "addIssueToContext2");
var makeIssue2;
var EMPTY_PATH;
var ParseStatus2;
var INVALID2;
var DIRTY2;
var OK2;
var isAborted2;
var isDirty2;
var isValid3;
var isAsync2;
var init_parseUtil = __esm({
  "../node_modules/better-auth/node_modules/zod/dist/esm/v3/helpers/parseUtil.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_errors3();
    init_en();
    makeIssue2 = /* @__PURE__ */ __name2((params) => {
      const { data, path, errorMaps, issueData } = params;
      const fullPath = [...path, ...issueData.path || []];
      const fullIssue = {
        ...issueData,
        path: fullPath
      };
      if (issueData.message !== void 0) {
        return {
          ...issueData,
          path: fullPath,
          message: issueData.message
        };
      }
      let errorMessage = "";
      const maps = errorMaps.filter((m) => !!m).slice().reverse();
      for (const map2 of maps) {
        errorMessage = map2(fullIssue, { data, defaultError: errorMessage }).message;
      }
      return {
        ...issueData,
        path: fullPath,
        message: errorMessage
      };
    }, "makeIssue");
    EMPTY_PATH = [];
    __name2(addIssueToContext2, "addIssueToContext");
    ParseStatus2 = class _ParseStatus2 {
      static {
        __name(this, "_ParseStatus2");
      }
      static {
        __name2(this, "ParseStatus");
      }
      constructor() {
        this.value = "valid";
      }
      dirty() {
        if (this.value === "valid")
          this.value = "dirty";
      }
      abort() {
        if (this.value !== "aborted")
          this.value = "aborted";
      }
      static mergeArray(status, results) {
        const arrayValue = [];
        for (const s of results) {
          if (s.status === "aborted")
            return INVALID2;
          if (s.status === "dirty")
            status.dirty();
          arrayValue.push(s.value);
        }
        return { status: status.value, value: arrayValue };
      }
      static async mergeObjectAsync(status, pairs) {
        const syncPairs = [];
        for (const pair of pairs) {
          const key = await pair.key;
          const value = await pair.value;
          syncPairs.push({
            key,
            value
          });
        }
        return _ParseStatus2.mergeObjectSync(status, syncPairs);
      }
      static mergeObjectSync(status, pairs) {
        const finalObject = {};
        for (const pair of pairs) {
          const { key, value } = pair;
          if (key.status === "aborted")
            return INVALID2;
          if (value.status === "aborted")
            return INVALID2;
          if (key.status === "dirty")
            status.dirty();
          if (value.status === "dirty")
            status.dirty();
          if (key.value !== "__proto__" && (typeof value.value !== "undefined" || pair.alwaysSet)) {
            finalObject[key.value] = value.value;
          }
        }
        return { status: status.value, value: finalObject };
      }
    };
    INVALID2 = Object.freeze({
      status: "aborted"
    });
    DIRTY2 = /* @__PURE__ */ __name2((value) => ({ status: "dirty", value }), "DIRTY");
    OK2 = /* @__PURE__ */ __name2((value) => ({ status: "valid", value }), "OK");
    isAborted2 = /* @__PURE__ */ __name2((x) => x.status === "aborted", "isAborted");
    isDirty2 = /* @__PURE__ */ __name2((x) => x.status === "dirty", "isDirty");
    isValid3 = /* @__PURE__ */ __name2((x) => x.status === "valid", "isValid");
    isAsync2 = /* @__PURE__ */ __name2((x) => typeof Promise !== "undefined" && x instanceof Promise, "isAsync");
  }
});
var init_typeAliases = __esm({
  "../node_modules/better-auth/node_modules/zod/dist/esm/v3/helpers/typeAliases.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
  }
});
var errorUtil2;
var init_errorUtil = __esm({
  "../node_modules/better-auth/node_modules/zod/dist/esm/v3/helpers/errorUtil.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    (function(errorUtil3) {
      errorUtil3.errToObj = (message2) => typeof message2 === "string" ? { message: message2 } : message2 || {};
      errorUtil3.toString = (message2) => typeof message2 === "string" ? message2 : message2?.message;
    })(errorUtil2 || (errorUtil2 = {}));
  }
});
function processCreateParams2(params) {
  if (!params)
    return {};
  const { errorMap: errorMap3, invalid_type_error, required_error, description } = params;
  if (errorMap3 && (invalid_type_error || required_error)) {
    throw new Error(`Can't use "invalid_type_error" or "required_error" in conjunction with custom error map.`);
  }
  if (errorMap3)
    return { errorMap: errorMap3, description };
  const customMap = /* @__PURE__ */ __name2((iss, ctx) => {
    const { message: message2 } = params;
    if (iss.code === "invalid_enum_value") {
      return { message: message2 ?? ctx.defaultError };
    }
    if (typeof ctx.data === "undefined") {
      return { message: message2 ?? required_error ?? ctx.defaultError };
    }
    if (iss.code !== "invalid_type")
      return { message: ctx.defaultError };
    return { message: message2 ?? invalid_type_error ?? ctx.defaultError };
  }, "customMap");
  return { errorMap: customMap, description };
}
__name(processCreateParams2, "processCreateParams2");
function timeRegexSource2(args) {
  let secondsRegexSource = `[0-5]\\d`;
  if (args.precision) {
    secondsRegexSource = `${secondsRegexSource}\\.\\d{${args.precision}}`;
  } else if (args.precision == null) {
    secondsRegexSource = `${secondsRegexSource}(\\.\\d+)?`;
  }
  const secondsQuantifier = args.precision ? "+" : "?";
  return `([01]\\d|2[0-3]):[0-5]\\d(:${secondsRegexSource})${secondsQuantifier}`;
}
__name(timeRegexSource2, "timeRegexSource2");
function timeRegex2(args) {
  return new RegExp(`^${timeRegexSource2(args)}$`);
}
__name(timeRegex2, "timeRegex2");
function datetimeRegex2(args) {
  let regex = `${dateRegexSource2}T${timeRegexSource2(args)}`;
  const opts = [];
  opts.push(args.local ? `Z?` : `Z`);
  if (args.offset)
    opts.push(`([+-]\\d{2}:?\\d{2})`);
  regex = `${regex}(${opts.join("|")})`;
  return new RegExp(`^${regex}$`);
}
__name(datetimeRegex2, "datetimeRegex2");
function isValidIP2(ip, version2) {
  if ((version2 === "v4" || !version2) && ipv4Regex2.test(ip)) {
    return true;
  }
  if ((version2 === "v6" || !version2) && ipv6Regex2.test(ip)) {
    return true;
  }
  return false;
}
__name(isValidIP2, "isValidIP2");
function isValidJWT2(jwt, alg) {
  if (!jwtRegex2.test(jwt))
    return false;
  try {
    const [header] = jwt.split(".");
    const base642 = header.replace(/-/g, "+").replace(/_/g, "/").padEnd(header.length + (4 - header.length % 4) % 4, "=");
    const decoded = JSON.parse(atob(base642));
    if (typeof decoded !== "object" || decoded === null)
      return false;
    if ("typ" in decoded && decoded?.typ !== "JWT")
      return false;
    if (!decoded.alg)
      return false;
    if (alg && decoded.alg !== alg)
      return false;
    return true;
  } catch {
    return false;
  }
}
__name(isValidJWT2, "isValidJWT2");
function isValidCidr2(ip, version2) {
  if ((version2 === "v4" || !version2) && ipv4CidrRegex2.test(ip)) {
    return true;
  }
  if ((version2 === "v6" || !version2) && ipv6CidrRegex2.test(ip)) {
    return true;
  }
  return false;
}
__name(isValidCidr2, "isValidCidr2");
function floatSafeRemainder2(val, step) {
  const valDecCount = (val.toString().split(".")[1] || "").length;
  const stepDecCount = (step.toString().split(".")[1] || "").length;
  const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;
  const valInt = Number.parseInt(val.toFixed(decCount).replace(".", ""));
  const stepInt = Number.parseInt(step.toFixed(decCount).replace(".", ""));
  return valInt % stepInt / 10 ** decCount;
}
__name(floatSafeRemainder2, "floatSafeRemainder2");
function deepPartialify2(schema2) {
  if (schema2 instanceof ZodObject2) {
    const newShape = {};
    for (const key in schema2.shape) {
      const fieldSchema = schema2.shape[key];
      newShape[key] = ZodOptional2.create(deepPartialify2(fieldSchema));
    }
    return new ZodObject2({
      ...schema2._def,
      shape: /* @__PURE__ */ __name2(() => newShape, "shape")
    });
  } else if (schema2 instanceof ZodArray2) {
    return new ZodArray2({
      ...schema2._def,
      type: deepPartialify2(schema2.element)
    });
  } else if (schema2 instanceof ZodOptional2) {
    return ZodOptional2.create(deepPartialify2(schema2.unwrap()));
  } else if (schema2 instanceof ZodNullable2) {
    return ZodNullable2.create(deepPartialify2(schema2.unwrap()));
  } else if (schema2 instanceof ZodTuple2) {
    return ZodTuple2.create(schema2.items.map((item) => deepPartialify2(item)));
  } else {
    return schema2;
  }
}
__name(deepPartialify2, "deepPartialify2");
function mergeValues2(a, b) {
  const aType = getParsedType2(a);
  const bType = getParsedType2(b);
  if (a === b) {
    return { valid: true, data: a };
  } else if (aType === ZodParsedType2.object && bType === ZodParsedType2.object) {
    const bKeys = util2.objectKeys(b);
    const sharedKeys = util2.objectKeys(a).filter((key) => bKeys.indexOf(key) !== -1);
    const newObj = { ...a, ...b };
    for (const key of sharedKeys) {
      const sharedValue = mergeValues2(a[key], b[key]);
      if (!sharedValue.valid) {
        return { valid: false };
      }
      newObj[key] = sharedValue.data;
    }
    return { valid: true, data: newObj };
  } else if (aType === ZodParsedType2.array && bType === ZodParsedType2.array) {
    if (a.length !== b.length) {
      return { valid: false };
    }
    const newArray = [];
    for (let index = 0; index < a.length; index++) {
      const itemA = a[index];
      const itemB = b[index];
      const sharedValue = mergeValues2(itemA, itemB);
      if (!sharedValue.valid) {
        return { valid: false };
      }
      newArray.push(sharedValue.data);
    }
    return { valid: true, data: newArray };
  } else if (aType === ZodParsedType2.date && bType === ZodParsedType2.date && +a === +b) {
    return { valid: true, data: a };
  } else {
    return { valid: false };
  }
}
__name(mergeValues2, "mergeValues2");
function createZodEnum2(values, params) {
  return new ZodEnum2({
    values,
    typeName: ZodFirstPartyTypeKind2.ZodEnum,
    ...processCreateParams2(params)
  });
}
__name(createZodEnum2, "createZodEnum2");
function cleanParams(params, data) {
  const p = typeof params === "function" ? params(data) : typeof params === "string" ? { message: params } : params;
  const p2 = typeof p === "string" ? { message: p } : p;
  return p2;
}
__name(cleanParams, "cleanParams");
function custom(check, _params = {}, fatal) {
  if (check)
    return ZodAny2.create().superRefine((data, ctx) => {
      const r = check(data);
      if (r instanceof Promise) {
        return r.then((r2) => {
          if (!r2) {
            const params = cleanParams(_params, data);
            const _fatal = params.fatal ?? fatal ?? true;
            ctx.addIssue({ code: "custom", ...params, fatal: _fatal });
          }
        });
      }
      if (!r) {
        const params = cleanParams(_params, data);
        const _fatal = params.fatal ?? fatal ?? true;
        ctx.addIssue({ code: "custom", ...params, fatal: _fatal });
      }
      return;
    });
  return ZodAny2.create();
}
__name(custom, "custom");
var __classPrivateFieldGet2;
var __classPrivateFieldSet2;
var _ZodEnum_cache2;
var _ZodNativeEnum_cache2;
var ParseInputLazyPath2;
var handleResult2;
var ZodType2;
var cuidRegex2;
var cuid2Regex2;
var ulidRegex2;
var uuidRegex2;
var nanoidRegex2;
var jwtRegex2;
var durationRegex2;
var emailRegex2;
var _emojiRegex2;
var emojiRegex2;
var ipv4Regex2;
var ipv4CidrRegex2;
var ipv6Regex2;
var ipv6CidrRegex2;
var base64Regex2;
var base64urlRegex2;
var dateRegexSource2;
var dateRegex2;
var ZodString2;
var ZodNumber2;
var ZodBigInt2;
var ZodBoolean2;
var ZodDate2;
var ZodSymbol2;
var ZodUndefined2;
var ZodNull2;
var ZodAny2;
var ZodUnknown2;
var ZodNever2;
var ZodVoid2;
var ZodArray2;
var ZodObject2;
var ZodUnion2;
var getDiscriminator2;
var ZodDiscriminatedUnion2;
var ZodIntersection2;
var ZodTuple2;
var ZodRecord2;
var ZodMap2;
var ZodSet2;
var ZodFunction2;
var ZodLazy2;
var ZodLiteral2;
var ZodEnum2;
var ZodNativeEnum2;
var ZodPromise2;
var ZodEffects2;
var ZodOptional2;
var ZodNullable2;
var ZodDefault2;
var ZodCatch2;
var ZodNaN2;
var BRAND2;
var ZodBranded2;
var ZodPipeline2;
var ZodReadonly2;
var late2;
var ZodFirstPartyTypeKind2;
var instanceOfType;
var stringType2;
var numberType2;
var nanType2;
var bigIntType2;
var booleanType2;
var dateType2;
var symbolType2;
var undefinedType2;
var nullType2;
var anyType2;
var unknownType2;
var neverType2;
var voidType2;
var arrayType2;
var objectType2;
var strictObjectType2;
var unionType2;
var discriminatedUnionType2;
var intersectionType2;
var tupleType2;
var recordType2;
var mapType2;
var setType2;
var functionType2;
var lazyType2;
var literalType2;
var enumType2;
var nativeEnumType2;
var promiseType2;
var effectsType2;
var optionalType2;
var nullableType2;
var preprocessType2;
var pipelineType2;
var ostring;
var onumber;
var oboolean;
var coerce;
var NEVER;
var init_types = __esm({
  "../node_modules/better-auth/node_modules/zod/dist/esm/v3/types.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_ZodError();
    init_errors3();
    init_errorUtil();
    init_parseUtil();
    init_util7();
    __classPrivateFieldGet2 = /* @__PURE__ */ __name(function(receiver, state, kind, f) {
      if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }, "__classPrivateFieldGet2");
    __classPrivateFieldSet2 = /* @__PURE__ */ __name(function(receiver, state, value, kind, f) {
      if (kind === "m") throw new TypeError("Private method is not writable");
      if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    }, "__classPrivateFieldSet2");
    ParseInputLazyPath2 = class {
      static {
        __name(this, "ParseInputLazyPath2");
      }
      static {
        __name2(this, "ParseInputLazyPath");
      }
      constructor(parent, value, path, key) {
        this._cachedPath = [];
        this.parent = parent;
        this.data = value;
        this._path = path;
        this._key = key;
      }
      get path() {
        if (!this._cachedPath.length) {
          if (Array.isArray(this._key)) {
            this._cachedPath.push(...this._path, ...this._key);
          } else {
            this._cachedPath.push(...this._path, this._key);
          }
        }
        return this._cachedPath;
      }
    };
    handleResult2 = /* @__PURE__ */ __name2((ctx, result) => {
      if (isValid3(result)) {
        return { success: true, data: result.value };
      } else {
        if (!ctx.common.issues.length) {
          throw new Error("Validation failed but no issues detected.");
        }
        return {
          success: false,
          get error() {
            if (this._error)
              return this._error;
            const error2 = new ZodError2(ctx.common.issues);
            this._error = error2;
            return this._error;
          }
        };
      }
    }, "handleResult");
    __name2(processCreateParams2, "processCreateParams");
    ZodType2 = class {
      static {
        __name(this, "ZodType2");
      }
      static {
        __name2(this, "ZodType");
      }
      get description() {
        return this._def.description;
      }
      _getType(input) {
        return getParsedType2(input.data);
      }
      _getOrReturnCtx(input, ctx) {
        return ctx || {
          common: input.parent.common,
          data: input.data,
          parsedType: getParsedType2(input.data),
          schemaErrorMap: this._def.errorMap,
          path: input.path,
          parent: input.parent
        };
      }
      _processInputParams(input) {
        return {
          status: new ParseStatus2(),
          ctx: {
            common: input.parent.common,
            data: input.data,
            parsedType: getParsedType2(input.data),
            schemaErrorMap: this._def.errorMap,
            path: input.path,
            parent: input.parent
          }
        };
      }
      _parseSync(input) {
        const result = this._parse(input);
        if (isAsync2(result)) {
          throw new Error("Synchronous parse encountered promise.");
        }
        return result;
      }
      _parseAsync(input) {
        const result = this._parse(input);
        return Promise.resolve(result);
      }
      parse(data, params) {
        const result = this.safeParse(data, params);
        if (result.success)
          return result.data;
        throw result.error;
      }
      safeParse(data, params) {
        const ctx = {
          common: {
            issues: [],
            async: params?.async ?? false,
            contextualErrorMap: params?.errorMap
          },
          path: params?.path || [],
          schemaErrorMap: this._def.errorMap,
          parent: null,
          data,
          parsedType: getParsedType2(data)
        };
        const result = this._parseSync({ data, path: ctx.path, parent: ctx });
        return handleResult2(ctx, result);
      }
      "~validate"(data) {
        const ctx = {
          common: {
            issues: [],
            async: !!this["~standard"].async
          },
          path: [],
          schemaErrorMap: this._def.errorMap,
          parent: null,
          data,
          parsedType: getParsedType2(data)
        };
        if (!this["~standard"].async) {
          try {
            const result = this._parseSync({ data, path: [], parent: ctx });
            return isValid3(result) ? {
              value: result.value
            } : {
              issues: ctx.common.issues
            };
          } catch (err) {
            if (err?.message?.toLowerCase()?.includes("encountered")) {
              this["~standard"].async = true;
            }
            ctx.common = {
              issues: [],
              async: true
            };
          }
        }
        return this._parseAsync({ data, path: [], parent: ctx }).then((result) => isValid3(result) ? {
          value: result.value
        } : {
          issues: ctx.common.issues
        });
      }
      async parseAsync(data, params) {
        const result = await this.safeParseAsync(data, params);
        if (result.success)
          return result.data;
        throw result.error;
      }
      async safeParseAsync(data, params) {
        const ctx = {
          common: {
            issues: [],
            contextualErrorMap: params?.errorMap,
            async: true
          },
          path: params?.path || [],
          schemaErrorMap: this._def.errorMap,
          parent: null,
          data,
          parsedType: getParsedType2(data)
        };
        const maybeAsyncResult = this._parse({ data, path: ctx.path, parent: ctx });
        const result = await (isAsync2(maybeAsyncResult) ? maybeAsyncResult : Promise.resolve(maybeAsyncResult));
        return handleResult2(ctx, result);
      }
      refine(check, message2) {
        const getIssueProperties = /* @__PURE__ */ __name2((val) => {
          if (typeof message2 === "string" || typeof message2 === "undefined") {
            return { message: message2 };
          } else if (typeof message2 === "function") {
            return message2(val);
          } else {
            return message2;
          }
        }, "getIssueProperties");
        return this._refinement((val, ctx) => {
          const result = check(val);
          const setError = /* @__PURE__ */ __name2(() => ctx.addIssue({
            code: ZodIssueCode2.custom,
            ...getIssueProperties(val)
          }), "setError");
          if (typeof Promise !== "undefined" && result instanceof Promise) {
            return result.then((data) => {
              if (!data) {
                setError();
                return false;
              } else {
                return true;
              }
            });
          }
          if (!result) {
            setError();
            return false;
          } else {
            return true;
          }
        });
      }
      refinement(check, refinementData) {
        return this._refinement((val, ctx) => {
          if (!check(val)) {
            ctx.addIssue(typeof refinementData === "function" ? refinementData(val, ctx) : refinementData);
            return false;
          } else {
            return true;
          }
        });
      }
      _refinement(refinement) {
        return new ZodEffects2({
          schema: this,
          typeName: ZodFirstPartyTypeKind2.ZodEffects,
          effect: { type: "refinement", refinement }
        });
      }
      superRefine(refinement) {
        return this._refinement(refinement);
      }
      constructor(def) {
        this.spa = this.safeParseAsync;
        this._def = def;
        this.parse = this.parse.bind(this);
        this.safeParse = this.safeParse.bind(this);
        this.parseAsync = this.parseAsync.bind(this);
        this.safeParseAsync = this.safeParseAsync.bind(this);
        this.spa = this.spa.bind(this);
        this.refine = this.refine.bind(this);
        this.refinement = this.refinement.bind(this);
        this.superRefine = this.superRefine.bind(this);
        this.optional = this.optional.bind(this);
        this.nullable = this.nullable.bind(this);
        this.nullish = this.nullish.bind(this);
        this.array = this.array.bind(this);
        this.promise = this.promise.bind(this);
        this.or = this.or.bind(this);
        this.and = this.and.bind(this);
        this.transform = this.transform.bind(this);
        this.brand = this.brand.bind(this);
        this.default = this.default.bind(this);
        this.catch = this.catch.bind(this);
        this.describe = this.describe.bind(this);
        this.pipe = this.pipe.bind(this);
        this.readonly = this.readonly.bind(this);
        this.isNullable = this.isNullable.bind(this);
        this.isOptional = this.isOptional.bind(this);
        this["~standard"] = {
          version: 1,
          vendor: "zod",
          validate: /* @__PURE__ */ __name2((data) => this["~validate"](data), "validate")
        };
      }
      optional() {
        return ZodOptional2.create(this, this._def);
      }
      nullable() {
        return ZodNullable2.create(this, this._def);
      }
      nullish() {
        return this.nullable().optional();
      }
      array() {
        return ZodArray2.create(this);
      }
      promise() {
        return ZodPromise2.create(this, this._def);
      }
      or(option) {
        return ZodUnion2.create([this, option], this._def);
      }
      and(incoming) {
        return ZodIntersection2.create(this, incoming, this._def);
      }
      transform(transform2) {
        return new ZodEffects2({
          ...processCreateParams2(this._def),
          schema: this,
          typeName: ZodFirstPartyTypeKind2.ZodEffects,
          effect: { type: "transform", transform: transform2 }
        });
      }
      default(def) {
        const defaultValueFunc = typeof def === "function" ? def : () => def;
        return new ZodDefault2({
          ...processCreateParams2(this._def),
          innerType: this,
          defaultValue: defaultValueFunc,
          typeName: ZodFirstPartyTypeKind2.ZodDefault
        });
      }
      brand() {
        return new ZodBranded2({
          typeName: ZodFirstPartyTypeKind2.ZodBranded,
          type: this,
          ...processCreateParams2(this._def)
        });
      }
      catch(def) {
        const catchValueFunc = typeof def === "function" ? def : () => def;
        return new ZodCatch2({
          ...processCreateParams2(this._def),
          innerType: this,
          catchValue: catchValueFunc,
          typeName: ZodFirstPartyTypeKind2.ZodCatch
        });
      }
      describe(description) {
        const This = this.constructor;
        return new This({
          ...this._def,
          description
        });
      }
      pipe(target) {
        return ZodPipeline2.create(this, target);
      }
      readonly() {
        return ZodReadonly2.create(this);
      }
      isOptional() {
        return this.safeParse(void 0).success;
      }
      isNullable() {
        return this.safeParse(null).success;
      }
    };
    cuidRegex2 = /^c[^\s-]{8,}$/i;
    cuid2Regex2 = /^[0-9a-z]+$/;
    ulidRegex2 = /^[0-9A-HJKMNP-TV-Z]{26}$/i;
    uuidRegex2 = /^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/i;
    nanoidRegex2 = /^[a-z0-9_-]{21}$/i;
    jwtRegex2 = /^[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]*$/;
    durationRegex2 = /^[-+]?P(?!$)(?:(?:[-+]?\d+Y)|(?:[-+]?\d+[.,]\d+Y$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:(?:[-+]?\d+W)|(?:[-+]?\d+[.,]\d+W$))?(?:(?:[-+]?\d+D)|(?:[-+]?\d+[.,]\d+D$))?(?:T(?=[\d+-])(?:(?:[-+]?\d+H)|(?:[-+]?\d+[.,]\d+H$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:[-+]?\d+(?:[.,]\d+)?S)?)??$/;
    emailRegex2 = /^(?!\.)(?!.*\.\.)([A-Z0-9_'+\-\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\-]*\.)+[A-Z]{2,}$/i;
    _emojiRegex2 = `^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$`;
    ipv4Regex2 = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/;
    ipv4CidrRegex2 = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\/(3[0-2]|[12]?[0-9])$/;
    ipv6Regex2 = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/;
    ipv6CidrRegex2 = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/;
    base64Regex2 = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;
    base64urlRegex2 = /^([0-9a-zA-Z-_]{4})*(([0-9a-zA-Z-_]{2}(==)?)|([0-9a-zA-Z-_]{3}(=)?))?$/;
    dateRegexSource2 = `((\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\d|30)|(02)-(0[1-9]|1\\d|2[0-8])))`;
    dateRegex2 = new RegExp(`^${dateRegexSource2}$`);
    __name2(timeRegexSource2, "timeRegexSource");
    __name2(timeRegex2, "timeRegex");
    __name2(datetimeRegex2, "datetimeRegex");
    __name2(isValidIP2, "isValidIP");
    __name2(isValidJWT2, "isValidJWT");
    __name2(isValidCidr2, "isValidCidr");
    ZodString2 = class _ZodString2 extends ZodType2 {
      static {
        __name(this, "_ZodString2");
      }
      static {
        __name2(this, "ZodString");
      }
      _parse(input) {
        if (this._def.coerce) {
          input.data = String(input.data);
        }
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType2.string) {
          const ctx2 = this._getOrReturnCtx(input);
          addIssueToContext2(ctx2, {
            code: ZodIssueCode2.invalid_type,
            expected: ZodParsedType2.string,
            received: ctx2.parsedType
          });
          return INVALID2;
        }
        const status = new ParseStatus2();
        let ctx = void 0;
        for (const check of this._def.checks) {
          if (check.kind === "min") {
            if (input.data.length < check.value) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext2(ctx, {
                code: ZodIssueCode2.too_small,
                minimum: check.value,
                type: "string",
                inclusive: true,
                exact: false,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "max") {
            if (input.data.length > check.value) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext2(ctx, {
                code: ZodIssueCode2.too_big,
                maximum: check.value,
                type: "string",
                inclusive: true,
                exact: false,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "length") {
            const tooBig = input.data.length > check.value;
            const tooSmall = input.data.length < check.value;
            if (tooBig || tooSmall) {
              ctx = this._getOrReturnCtx(input, ctx);
              if (tooBig) {
                addIssueToContext2(ctx, {
                  code: ZodIssueCode2.too_big,
                  maximum: check.value,
                  type: "string",
                  inclusive: true,
                  exact: true,
                  message: check.message
                });
              } else if (tooSmall) {
                addIssueToContext2(ctx, {
                  code: ZodIssueCode2.too_small,
                  minimum: check.value,
                  type: "string",
                  inclusive: true,
                  exact: true,
                  message: check.message
                });
              }
              status.dirty();
            }
          } else if (check.kind === "email") {
            if (!emailRegex2.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext2(ctx, {
                validation: "email",
                code: ZodIssueCode2.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "emoji") {
            if (!emojiRegex2) {
              emojiRegex2 = new RegExp(_emojiRegex2, "u");
            }
            if (!emojiRegex2.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext2(ctx, {
                validation: "emoji",
                code: ZodIssueCode2.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "uuid") {
            if (!uuidRegex2.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext2(ctx, {
                validation: "uuid",
                code: ZodIssueCode2.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "nanoid") {
            if (!nanoidRegex2.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext2(ctx, {
                validation: "nanoid",
                code: ZodIssueCode2.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "cuid") {
            if (!cuidRegex2.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext2(ctx, {
                validation: "cuid",
                code: ZodIssueCode2.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "cuid2") {
            if (!cuid2Regex2.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext2(ctx, {
                validation: "cuid2",
                code: ZodIssueCode2.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "ulid") {
            if (!ulidRegex2.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext2(ctx, {
                validation: "ulid",
                code: ZodIssueCode2.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "url") {
            try {
              new URL(input.data);
            } catch {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext2(ctx, {
                validation: "url",
                code: ZodIssueCode2.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "regex") {
            check.regex.lastIndex = 0;
            const testResult = check.regex.test(input.data);
            if (!testResult) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext2(ctx, {
                validation: "regex",
                code: ZodIssueCode2.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "trim") {
            input.data = input.data.trim();
          } else if (check.kind === "includes") {
            if (!input.data.includes(check.value, check.position)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext2(ctx, {
                code: ZodIssueCode2.invalid_string,
                validation: { includes: check.value, position: check.position },
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "toLowerCase") {
            input.data = input.data.toLowerCase();
          } else if (check.kind === "toUpperCase") {
            input.data = input.data.toUpperCase();
          } else if (check.kind === "startsWith") {
            if (!input.data.startsWith(check.value)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext2(ctx, {
                code: ZodIssueCode2.invalid_string,
                validation: { startsWith: check.value },
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "endsWith") {
            if (!input.data.endsWith(check.value)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext2(ctx, {
                code: ZodIssueCode2.invalid_string,
                validation: { endsWith: check.value },
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "datetime") {
            const regex = datetimeRegex2(check);
            if (!regex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext2(ctx, {
                code: ZodIssueCode2.invalid_string,
                validation: "datetime",
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "date") {
            const regex = dateRegex2;
            if (!regex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext2(ctx, {
                code: ZodIssueCode2.invalid_string,
                validation: "date",
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "time") {
            const regex = timeRegex2(check);
            if (!regex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext2(ctx, {
                code: ZodIssueCode2.invalid_string,
                validation: "time",
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "duration") {
            if (!durationRegex2.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext2(ctx, {
                validation: "duration",
                code: ZodIssueCode2.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "ip") {
            if (!isValidIP2(input.data, check.version)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext2(ctx, {
                validation: "ip",
                code: ZodIssueCode2.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "jwt") {
            if (!isValidJWT2(input.data, check.alg)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext2(ctx, {
                validation: "jwt",
                code: ZodIssueCode2.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "cidr") {
            if (!isValidCidr2(input.data, check.version)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext2(ctx, {
                validation: "cidr",
                code: ZodIssueCode2.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "base64") {
            if (!base64Regex2.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext2(ctx, {
                validation: "base64",
                code: ZodIssueCode2.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "base64url") {
            if (!base64urlRegex2.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext2(ctx, {
                validation: "base64url",
                code: ZodIssueCode2.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else {
            util2.assertNever(check);
          }
        }
        return { status: status.value, value: input.data };
      }
      _regex(regex, validation, message2) {
        return this.refinement((data) => regex.test(data), {
          validation,
          code: ZodIssueCode2.invalid_string,
          ...errorUtil2.errToObj(message2)
        });
      }
      _addCheck(check) {
        return new _ZodString2({
          ...this._def,
          checks: [...this._def.checks, check]
        });
      }
      email(message2) {
        return this._addCheck({ kind: "email", ...errorUtil2.errToObj(message2) });
      }
      url(message2) {
        return this._addCheck({ kind: "url", ...errorUtil2.errToObj(message2) });
      }
      emoji(message2) {
        return this._addCheck({ kind: "emoji", ...errorUtil2.errToObj(message2) });
      }
      uuid(message2) {
        return this._addCheck({ kind: "uuid", ...errorUtil2.errToObj(message2) });
      }
      nanoid(message2) {
        return this._addCheck({ kind: "nanoid", ...errorUtil2.errToObj(message2) });
      }
      cuid(message2) {
        return this._addCheck({ kind: "cuid", ...errorUtil2.errToObj(message2) });
      }
      cuid2(message2) {
        return this._addCheck({ kind: "cuid2", ...errorUtil2.errToObj(message2) });
      }
      ulid(message2) {
        return this._addCheck({ kind: "ulid", ...errorUtil2.errToObj(message2) });
      }
      base64(message2) {
        return this._addCheck({ kind: "base64", ...errorUtil2.errToObj(message2) });
      }
      base64url(message2) {
        return this._addCheck({
          kind: "base64url",
          ...errorUtil2.errToObj(message2)
        });
      }
      jwt(options) {
        return this._addCheck({ kind: "jwt", ...errorUtil2.errToObj(options) });
      }
      ip(options) {
        return this._addCheck({ kind: "ip", ...errorUtil2.errToObj(options) });
      }
      cidr(options) {
        return this._addCheck({ kind: "cidr", ...errorUtil2.errToObj(options) });
      }
      datetime(options) {
        if (typeof options === "string") {
          return this._addCheck({
            kind: "datetime",
            precision: null,
            offset: false,
            local: false,
            message: options
          });
        }
        return this._addCheck({
          kind: "datetime",
          precision: typeof options?.precision === "undefined" ? null : options?.precision,
          offset: options?.offset ?? false,
          local: options?.local ?? false,
          ...errorUtil2.errToObj(options?.message)
        });
      }
      date(message2) {
        return this._addCheck({ kind: "date", message: message2 });
      }
      time(options) {
        if (typeof options === "string") {
          return this._addCheck({
            kind: "time",
            precision: null,
            message: options
          });
        }
        return this._addCheck({
          kind: "time",
          precision: typeof options?.precision === "undefined" ? null : options?.precision,
          ...errorUtil2.errToObj(options?.message)
        });
      }
      duration(message2) {
        return this._addCheck({ kind: "duration", ...errorUtil2.errToObj(message2) });
      }
      regex(regex, message2) {
        return this._addCheck({
          kind: "regex",
          regex,
          ...errorUtil2.errToObj(message2)
        });
      }
      includes(value, options) {
        return this._addCheck({
          kind: "includes",
          value,
          position: options?.position,
          ...errorUtil2.errToObj(options?.message)
        });
      }
      startsWith(value, message2) {
        return this._addCheck({
          kind: "startsWith",
          value,
          ...errorUtil2.errToObj(message2)
        });
      }
      endsWith(value, message2) {
        return this._addCheck({
          kind: "endsWith",
          value,
          ...errorUtil2.errToObj(message2)
        });
      }
      min(minLength, message2) {
        return this._addCheck({
          kind: "min",
          value: minLength,
          ...errorUtil2.errToObj(message2)
        });
      }
      max(maxLength, message2) {
        return this._addCheck({
          kind: "max",
          value: maxLength,
          ...errorUtil2.errToObj(message2)
        });
      }
      length(len, message2) {
        return this._addCheck({
          kind: "length",
          value: len,
          ...errorUtil2.errToObj(message2)
        });
      }
      /**
       * Equivalent to `.min(1)`
       */
      nonempty(message2) {
        return this.min(1, errorUtil2.errToObj(message2));
      }
      trim() {
        return new _ZodString2({
          ...this._def,
          checks: [...this._def.checks, { kind: "trim" }]
        });
      }
      toLowerCase() {
        return new _ZodString2({
          ...this._def,
          checks: [...this._def.checks, { kind: "toLowerCase" }]
        });
      }
      toUpperCase() {
        return new _ZodString2({
          ...this._def,
          checks: [...this._def.checks, { kind: "toUpperCase" }]
        });
      }
      get isDatetime() {
        return !!this._def.checks.find((ch) => ch.kind === "datetime");
      }
      get isDate() {
        return !!this._def.checks.find((ch) => ch.kind === "date");
      }
      get isTime() {
        return !!this._def.checks.find((ch) => ch.kind === "time");
      }
      get isDuration() {
        return !!this._def.checks.find((ch) => ch.kind === "duration");
      }
      get isEmail() {
        return !!this._def.checks.find((ch) => ch.kind === "email");
      }
      get isURL() {
        return !!this._def.checks.find((ch) => ch.kind === "url");
      }
      get isEmoji() {
        return !!this._def.checks.find((ch) => ch.kind === "emoji");
      }
      get isUUID() {
        return !!this._def.checks.find((ch) => ch.kind === "uuid");
      }
      get isNANOID() {
        return !!this._def.checks.find((ch) => ch.kind === "nanoid");
      }
      get isCUID() {
        return !!this._def.checks.find((ch) => ch.kind === "cuid");
      }
      get isCUID2() {
        return !!this._def.checks.find((ch) => ch.kind === "cuid2");
      }
      get isULID() {
        return !!this._def.checks.find((ch) => ch.kind === "ulid");
      }
      get isIP() {
        return !!this._def.checks.find((ch) => ch.kind === "ip");
      }
      get isCIDR() {
        return !!this._def.checks.find((ch) => ch.kind === "cidr");
      }
      get isBase64() {
        return !!this._def.checks.find((ch) => ch.kind === "base64");
      }
      get isBase64url() {
        return !!this._def.checks.find((ch) => ch.kind === "base64url");
      }
      get minLength() {
        let min = null;
        for (const ch of this._def.checks) {
          if (ch.kind === "min") {
            if (min === null || ch.value > min)
              min = ch.value;
          }
        }
        return min;
      }
      get maxLength() {
        let max = null;
        for (const ch of this._def.checks) {
          if (ch.kind === "max") {
            if (max === null || ch.value < max)
              max = ch.value;
          }
        }
        return max;
      }
    };
    ZodString2.create = (params) => {
      return new ZodString2({
        checks: [],
        typeName: ZodFirstPartyTypeKind2.ZodString,
        coerce: params?.coerce ?? false,
        ...processCreateParams2(params)
      });
    };
    __name2(floatSafeRemainder2, "floatSafeRemainder");
    ZodNumber2 = class _ZodNumber2 extends ZodType2 {
      static {
        __name(this, "_ZodNumber2");
      }
      static {
        __name2(this, "ZodNumber");
      }
      constructor() {
        super(...arguments);
        this.min = this.gte;
        this.max = this.lte;
        this.step = this.multipleOf;
      }
      _parse(input) {
        if (this._def.coerce) {
          input.data = Number(input.data);
        }
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType2.number) {
          const ctx2 = this._getOrReturnCtx(input);
          addIssueToContext2(ctx2, {
            code: ZodIssueCode2.invalid_type,
            expected: ZodParsedType2.number,
            received: ctx2.parsedType
          });
          return INVALID2;
        }
        let ctx = void 0;
        const status = new ParseStatus2();
        for (const check of this._def.checks) {
          if (check.kind === "int") {
            if (!util2.isInteger(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext2(ctx, {
                code: ZodIssueCode2.invalid_type,
                expected: "integer",
                received: "float",
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "min") {
            const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;
            if (tooSmall) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext2(ctx, {
                code: ZodIssueCode2.too_small,
                minimum: check.value,
                type: "number",
                inclusive: check.inclusive,
                exact: false,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "max") {
            const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;
            if (tooBig) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext2(ctx, {
                code: ZodIssueCode2.too_big,
                maximum: check.value,
                type: "number",
                inclusive: check.inclusive,
                exact: false,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "multipleOf") {
            if (floatSafeRemainder2(input.data, check.value) !== 0) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext2(ctx, {
                code: ZodIssueCode2.not_multiple_of,
                multipleOf: check.value,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "finite") {
            if (!Number.isFinite(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext2(ctx, {
                code: ZodIssueCode2.not_finite,
                message: check.message
              });
              status.dirty();
            }
          } else {
            util2.assertNever(check);
          }
        }
        return { status: status.value, value: input.data };
      }
      gte(value, message2) {
        return this.setLimit("min", value, true, errorUtil2.toString(message2));
      }
      gt(value, message2) {
        return this.setLimit("min", value, false, errorUtil2.toString(message2));
      }
      lte(value, message2) {
        return this.setLimit("max", value, true, errorUtil2.toString(message2));
      }
      lt(value, message2) {
        return this.setLimit("max", value, false, errorUtil2.toString(message2));
      }
      setLimit(kind, value, inclusive, message2) {
        return new _ZodNumber2({
          ...this._def,
          checks: [
            ...this._def.checks,
            {
              kind,
              value,
              inclusive,
              message: errorUtil2.toString(message2)
            }
          ]
        });
      }
      _addCheck(check) {
        return new _ZodNumber2({
          ...this._def,
          checks: [...this._def.checks, check]
        });
      }
      int(message2) {
        return this._addCheck({
          kind: "int",
          message: errorUtil2.toString(message2)
        });
      }
      positive(message2) {
        return this._addCheck({
          kind: "min",
          value: 0,
          inclusive: false,
          message: errorUtil2.toString(message2)
        });
      }
      negative(message2) {
        return this._addCheck({
          kind: "max",
          value: 0,
          inclusive: false,
          message: errorUtil2.toString(message2)
        });
      }
      nonpositive(message2) {
        return this._addCheck({
          kind: "max",
          value: 0,
          inclusive: true,
          message: errorUtil2.toString(message2)
        });
      }
      nonnegative(message2) {
        return this._addCheck({
          kind: "min",
          value: 0,
          inclusive: true,
          message: errorUtil2.toString(message2)
        });
      }
      multipleOf(value, message2) {
        return this._addCheck({
          kind: "multipleOf",
          value,
          message: errorUtil2.toString(message2)
        });
      }
      finite(message2) {
        return this._addCheck({
          kind: "finite",
          message: errorUtil2.toString(message2)
        });
      }
      safe(message2) {
        return this._addCheck({
          kind: "min",
          inclusive: true,
          value: Number.MIN_SAFE_INTEGER,
          message: errorUtil2.toString(message2)
        })._addCheck({
          kind: "max",
          inclusive: true,
          value: Number.MAX_SAFE_INTEGER,
          message: errorUtil2.toString(message2)
        });
      }
      get minValue() {
        let min = null;
        for (const ch of this._def.checks) {
          if (ch.kind === "min") {
            if (min === null || ch.value > min)
              min = ch.value;
          }
        }
        return min;
      }
      get maxValue() {
        let max = null;
        for (const ch of this._def.checks) {
          if (ch.kind === "max") {
            if (max === null || ch.value < max)
              max = ch.value;
          }
        }
        return max;
      }
      get isInt() {
        return !!this._def.checks.find((ch) => ch.kind === "int" || ch.kind === "multipleOf" && util2.isInteger(ch.value));
      }
      get isFinite() {
        let max = null;
        let min = null;
        for (const ch of this._def.checks) {
          if (ch.kind === "finite" || ch.kind === "int" || ch.kind === "multipleOf") {
            return true;
          } else if (ch.kind === "min") {
            if (min === null || ch.value > min)
              min = ch.value;
          } else if (ch.kind === "max") {
            if (max === null || ch.value < max)
              max = ch.value;
          }
        }
        return Number.isFinite(min) && Number.isFinite(max);
      }
    };
    ZodNumber2.create = (params) => {
      return new ZodNumber2({
        checks: [],
        typeName: ZodFirstPartyTypeKind2.ZodNumber,
        coerce: params?.coerce || false,
        ...processCreateParams2(params)
      });
    };
    ZodBigInt2 = class _ZodBigInt2 extends ZodType2 {
      static {
        __name(this, "_ZodBigInt2");
      }
      static {
        __name2(this, "ZodBigInt");
      }
      constructor() {
        super(...arguments);
        this.min = this.gte;
        this.max = this.lte;
      }
      _parse(input) {
        if (this._def.coerce) {
          try {
            input.data = BigInt(input.data);
          } catch {
            return this._getInvalidInput(input);
          }
        }
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType2.bigint) {
          return this._getInvalidInput(input);
        }
        let ctx = void 0;
        const status = new ParseStatus2();
        for (const check of this._def.checks) {
          if (check.kind === "min") {
            const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;
            if (tooSmall) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext2(ctx, {
                code: ZodIssueCode2.too_small,
                type: "bigint",
                minimum: check.value,
                inclusive: check.inclusive,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "max") {
            const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;
            if (tooBig) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext2(ctx, {
                code: ZodIssueCode2.too_big,
                type: "bigint",
                maximum: check.value,
                inclusive: check.inclusive,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "multipleOf") {
            if (input.data % check.value !== BigInt(0)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext2(ctx, {
                code: ZodIssueCode2.not_multiple_of,
                multipleOf: check.value,
                message: check.message
              });
              status.dirty();
            }
          } else {
            util2.assertNever(check);
          }
        }
        return { status: status.value, value: input.data };
      }
      _getInvalidInput(input) {
        const ctx = this._getOrReturnCtx(input);
        addIssueToContext2(ctx, {
          code: ZodIssueCode2.invalid_type,
          expected: ZodParsedType2.bigint,
          received: ctx.parsedType
        });
        return INVALID2;
      }
      gte(value, message2) {
        return this.setLimit("min", value, true, errorUtil2.toString(message2));
      }
      gt(value, message2) {
        return this.setLimit("min", value, false, errorUtil2.toString(message2));
      }
      lte(value, message2) {
        return this.setLimit("max", value, true, errorUtil2.toString(message2));
      }
      lt(value, message2) {
        return this.setLimit("max", value, false, errorUtil2.toString(message2));
      }
      setLimit(kind, value, inclusive, message2) {
        return new _ZodBigInt2({
          ...this._def,
          checks: [
            ...this._def.checks,
            {
              kind,
              value,
              inclusive,
              message: errorUtil2.toString(message2)
            }
          ]
        });
      }
      _addCheck(check) {
        return new _ZodBigInt2({
          ...this._def,
          checks: [...this._def.checks, check]
        });
      }
      positive(message2) {
        return this._addCheck({
          kind: "min",
          value: BigInt(0),
          inclusive: false,
          message: errorUtil2.toString(message2)
        });
      }
      negative(message2) {
        return this._addCheck({
          kind: "max",
          value: BigInt(0),
          inclusive: false,
          message: errorUtil2.toString(message2)
        });
      }
      nonpositive(message2) {
        return this._addCheck({
          kind: "max",
          value: BigInt(0),
          inclusive: true,
          message: errorUtil2.toString(message2)
        });
      }
      nonnegative(message2) {
        return this._addCheck({
          kind: "min",
          value: BigInt(0),
          inclusive: true,
          message: errorUtil2.toString(message2)
        });
      }
      multipleOf(value, message2) {
        return this._addCheck({
          kind: "multipleOf",
          value,
          message: errorUtil2.toString(message2)
        });
      }
      get minValue() {
        let min = null;
        for (const ch of this._def.checks) {
          if (ch.kind === "min") {
            if (min === null || ch.value > min)
              min = ch.value;
          }
        }
        return min;
      }
      get maxValue() {
        let max = null;
        for (const ch of this._def.checks) {
          if (ch.kind === "max") {
            if (max === null || ch.value < max)
              max = ch.value;
          }
        }
        return max;
      }
    };
    ZodBigInt2.create = (params) => {
      return new ZodBigInt2({
        checks: [],
        typeName: ZodFirstPartyTypeKind2.ZodBigInt,
        coerce: params?.coerce ?? false,
        ...processCreateParams2(params)
      });
    };
    ZodBoolean2 = class extends ZodType2 {
      static {
        __name(this, "ZodBoolean2");
      }
      static {
        __name2(this, "ZodBoolean");
      }
      _parse(input) {
        if (this._def.coerce) {
          input.data = Boolean(input.data);
        }
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType2.boolean) {
          const ctx = this._getOrReturnCtx(input);
          addIssueToContext2(ctx, {
            code: ZodIssueCode2.invalid_type,
            expected: ZodParsedType2.boolean,
            received: ctx.parsedType
          });
          return INVALID2;
        }
        return OK2(input.data);
      }
    };
    ZodBoolean2.create = (params) => {
      return new ZodBoolean2({
        typeName: ZodFirstPartyTypeKind2.ZodBoolean,
        coerce: params?.coerce || false,
        ...processCreateParams2(params)
      });
    };
    ZodDate2 = class _ZodDate2 extends ZodType2 {
      static {
        __name(this, "_ZodDate2");
      }
      static {
        __name2(this, "ZodDate");
      }
      _parse(input) {
        if (this._def.coerce) {
          input.data = new Date(input.data);
        }
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType2.date) {
          const ctx2 = this._getOrReturnCtx(input);
          addIssueToContext2(ctx2, {
            code: ZodIssueCode2.invalid_type,
            expected: ZodParsedType2.date,
            received: ctx2.parsedType
          });
          return INVALID2;
        }
        if (Number.isNaN(input.data.getTime())) {
          const ctx2 = this._getOrReturnCtx(input);
          addIssueToContext2(ctx2, {
            code: ZodIssueCode2.invalid_date
          });
          return INVALID2;
        }
        const status = new ParseStatus2();
        let ctx = void 0;
        for (const check of this._def.checks) {
          if (check.kind === "min") {
            if (input.data.getTime() < check.value) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext2(ctx, {
                code: ZodIssueCode2.too_small,
                message: check.message,
                inclusive: true,
                exact: false,
                minimum: check.value,
                type: "date"
              });
              status.dirty();
            }
          } else if (check.kind === "max") {
            if (input.data.getTime() > check.value) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext2(ctx, {
                code: ZodIssueCode2.too_big,
                message: check.message,
                inclusive: true,
                exact: false,
                maximum: check.value,
                type: "date"
              });
              status.dirty();
            }
          } else {
            util2.assertNever(check);
          }
        }
        return {
          status: status.value,
          value: new Date(input.data.getTime())
        };
      }
      _addCheck(check) {
        return new _ZodDate2({
          ...this._def,
          checks: [...this._def.checks, check]
        });
      }
      min(minDate, message2) {
        return this._addCheck({
          kind: "min",
          value: minDate.getTime(),
          message: errorUtil2.toString(message2)
        });
      }
      max(maxDate, message2) {
        return this._addCheck({
          kind: "max",
          value: maxDate.getTime(),
          message: errorUtil2.toString(message2)
        });
      }
      get minDate() {
        let min = null;
        for (const ch of this._def.checks) {
          if (ch.kind === "min") {
            if (min === null || ch.value > min)
              min = ch.value;
          }
        }
        return min != null ? new Date(min) : null;
      }
      get maxDate() {
        let max = null;
        for (const ch of this._def.checks) {
          if (ch.kind === "max") {
            if (max === null || ch.value < max)
              max = ch.value;
          }
        }
        return max != null ? new Date(max) : null;
      }
    };
    ZodDate2.create = (params) => {
      return new ZodDate2({
        checks: [],
        coerce: params?.coerce || false,
        typeName: ZodFirstPartyTypeKind2.ZodDate,
        ...processCreateParams2(params)
      });
    };
    ZodSymbol2 = class extends ZodType2 {
      static {
        __name(this, "ZodSymbol2");
      }
      static {
        __name2(this, "ZodSymbol");
      }
      _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType2.symbol) {
          const ctx = this._getOrReturnCtx(input);
          addIssueToContext2(ctx, {
            code: ZodIssueCode2.invalid_type,
            expected: ZodParsedType2.symbol,
            received: ctx.parsedType
          });
          return INVALID2;
        }
        return OK2(input.data);
      }
    };
    ZodSymbol2.create = (params) => {
      return new ZodSymbol2({
        typeName: ZodFirstPartyTypeKind2.ZodSymbol,
        ...processCreateParams2(params)
      });
    };
    ZodUndefined2 = class extends ZodType2 {
      static {
        __name(this, "ZodUndefined2");
      }
      static {
        __name2(this, "ZodUndefined");
      }
      _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType2.undefined) {
          const ctx = this._getOrReturnCtx(input);
          addIssueToContext2(ctx, {
            code: ZodIssueCode2.invalid_type,
            expected: ZodParsedType2.undefined,
            received: ctx.parsedType
          });
          return INVALID2;
        }
        return OK2(input.data);
      }
    };
    ZodUndefined2.create = (params) => {
      return new ZodUndefined2({
        typeName: ZodFirstPartyTypeKind2.ZodUndefined,
        ...processCreateParams2(params)
      });
    };
    ZodNull2 = class extends ZodType2 {
      static {
        __name(this, "ZodNull2");
      }
      static {
        __name2(this, "ZodNull");
      }
      _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType2.null) {
          const ctx = this._getOrReturnCtx(input);
          addIssueToContext2(ctx, {
            code: ZodIssueCode2.invalid_type,
            expected: ZodParsedType2.null,
            received: ctx.parsedType
          });
          return INVALID2;
        }
        return OK2(input.data);
      }
    };
    ZodNull2.create = (params) => {
      return new ZodNull2({
        typeName: ZodFirstPartyTypeKind2.ZodNull,
        ...processCreateParams2(params)
      });
    };
    ZodAny2 = class extends ZodType2 {
      static {
        __name(this, "ZodAny2");
      }
      static {
        __name2(this, "ZodAny");
      }
      constructor() {
        super(...arguments);
        this._any = true;
      }
      _parse(input) {
        return OK2(input.data);
      }
    };
    ZodAny2.create = (params) => {
      return new ZodAny2({
        typeName: ZodFirstPartyTypeKind2.ZodAny,
        ...processCreateParams2(params)
      });
    };
    ZodUnknown2 = class extends ZodType2 {
      static {
        __name(this, "ZodUnknown2");
      }
      static {
        __name2(this, "ZodUnknown");
      }
      constructor() {
        super(...arguments);
        this._unknown = true;
      }
      _parse(input) {
        return OK2(input.data);
      }
    };
    ZodUnknown2.create = (params) => {
      return new ZodUnknown2({
        typeName: ZodFirstPartyTypeKind2.ZodUnknown,
        ...processCreateParams2(params)
      });
    };
    ZodNever2 = class extends ZodType2 {
      static {
        __name(this, "ZodNever2");
      }
      static {
        __name2(this, "ZodNever");
      }
      _parse(input) {
        const ctx = this._getOrReturnCtx(input);
        addIssueToContext2(ctx, {
          code: ZodIssueCode2.invalid_type,
          expected: ZodParsedType2.never,
          received: ctx.parsedType
        });
        return INVALID2;
      }
    };
    ZodNever2.create = (params) => {
      return new ZodNever2({
        typeName: ZodFirstPartyTypeKind2.ZodNever,
        ...processCreateParams2(params)
      });
    };
    ZodVoid2 = class extends ZodType2 {
      static {
        __name(this, "ZodVoid2");
      }
      static {
        __name2(this, "ZodVoid");
      }
      _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType2.undefined) {
          const ctx = this._getOrReturnCtx(input);
          addIssueToContext2(ctx, {
            code: ZodIssueCode2.invalid_type,
            expected: ZodParsedType2.void,
            received: ctx.parsedType
          });
          return INVALID2;
        }
        return OK2(input.data);
      }
    };
    ZodVoid2.create = (params) => {
      return new ZodVoid2({
        typeName: ZodFirstPartyTypeKind2.ZodVoid,
        ...processCreateParams2(params)
      });
    };
    ZodArray2 = class _ZodArray2 extends ZodType2 {
      static {
        __name(this, "_ZodArray2");
      }
      static {
        __name2(this, "ZodArray");
      }
      _parse(input) {
        const { ctx, status } = this._processInputParams(input);
        const def = this._def;
        if (ctx.parsedType !== ZodParsedType2.array) {
          addIssueToContext2(ctx, {
            code: ZodIssueCode2.invalid_type,
            expected: ZodParsedType2.array,
            received: ctx.parsedType
          });
          return INVALID2;
        }
        if (def.exactLength !== null) {
          const tooBig = ctx.data.length > def.exactLength.value;
          const tooSmall = ctx.data.length < def.exactLength.value;
          if (tooBig || tooSmall) {
            addIssueToContext2(ctx, {
              code: tooBig ? ZodIssueCode2.too_big : ZodIssueCode2.too_small,
              minimum: tooSmall ? def.exactLength.value : void 0,
              maximum: tooBig ? def.exactLength.value : void 0,
              type: "array",
              inclusive: true,
              exact: true,
              message: def.exactLength.message
            });
            status.dirty();
          }
        }
        if (def.minLength !== null) {
          if (ctx.data.length < def.minLength.value) {
            addIssueToContext2(ctx, {
              code: ZodIssueCode2.too_small,
              minimum: def.minLength.value,
              type: "array",
              inclusive: true,
              exact: false,
              message: def.minLength.message
            });
            status.dirty();
          }
        }
        if (def.maxLength !== null) {
          if (ctx.data.length > def.maxLength.value) {
            addIssueToContext2(ctx, {
              code: ZodIssueCode2.too_big,
              maximum: def.maxLength.value,
              type: "array",
              inclusive: true,
              exact: false,
              message: def.maxLength.message
            });
            status.dirty();
          }
        }
        if (ctx.common.async) {
          return Promise.all([...ctx.data].map((item, i) => {
            return def.type._parseAsync(new ParseInputLazyPath2(ctx, item, ctx.path, i));
          })).then((result2) => {
            return ParseStatus2.mergeArray(status, result2);
          });
        }
        const result = [...ctx.data].map((item, i) => {
          return def.type._parseSync(new ParseInputLazyPath2(ctx, item, ctx.path, i));
        });
        return ParseStatus2.mergeArray(status, result);
      }
      get element() {
        return this._def.type;
      }
      min(minLength, message2) {
        return new _ZodArray2({
          ...this._def,
          minLength: { value: minLength, message: errorUtil2.toString(message2) }
        });
      }
      max(maxLength, message2) {
        return new _ZodArray2({
          ...this._def,
          maxLength: { value: maxLength, message: errorUtil2.toString(message2) }
        });
      }
      length(len, message2) {
        return new _ZodArray2({
          ...this._def,
          exactLength: { value: len, message: errorUtil2.toString(message2) }
        });
      }
      nonempty(message2) {
        return this.min(1, message2);
      }
    };
    ZodArray2.create = (schema2, params) => {
      return new ZodArray2({
        type: schema2,
        minLength: null,
        maxLength: null,
        exactLength: null,
        typeName: ZodFirstPartyTypeKind2.ZodArray,
        ...processCreateParams2(params)
      });
    };
    __name2(deepPartialify2, "deepPartialify");
    ZodObject2 = class _ZodObject2 extends ZodType2 {
      static {
        __name(this, "_ZodObject2");
      }
      static {
        __name2(this, "ZodObject");
      }
      constructor() {
        super(...arguments);
        this._cached = null;
        this.nonstrict = this.passthrough;
        this.augment = this.extend;
      }
      _getCached() {
        if (this._cached !== null)
          return this._cached;
        const shape = this._def.shape();
        const keys = util2.objectKeys(shape);
        this._cached = { shape, keys };
        return this._cached;
      }
      _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType2.object) {
          const ctx2 = this._getOrReturnCtx(input);
          addIssueToContext2(ctx2, {
            code: ZodIssueCode2.invalid_type,
            expected: ZodParsedType2.object,
            received: ctx2.parsedType
          });
          return INVALID2;
        }
        const { status, ctx } = this._processInputParams(input);
        const { shape, keys: shapeKeys } = this._getCached();
        const extraKeys = [];
        if (!(this._def.catchall instanceof ZodNever2 && this._def.unknownKeys === "strip")) {
          for (const key in ctx.data) {
            if (!shapeKeys.includes(key)) {
              extraKeys.push(key);
            }
          }
        }
        const pairs = [];
        for (const key of shapeKeys) {
          const keyValidator = shape[key];
          const value = ctx.data[key];
          pairs.push({
            key: { status: "valid", value: key },
            value: keyValidator._parse(new ParseInputLazyPath2(ctx, value, ctx.path, key)),
            alwaysSet: key in ctx.data
          });
        }
        if (this._def.catchall instanceof ZodNever2) {
          const unknownKeys = this._def.unknownKeys;
          if (unknownKeys === "passthrough") {
            for (const key of extraKeys) {
              pairs.push({
                key: { status: "valid", value: key },
                value: { status: "valid", value: ctx.data[key] }
              });
            }
          } else if (unknownKeys === "strict") {
            if (extraKeys.length > 0) {
              addIssueToContext2(ctx, {
                code: ZodIssueCode2.unrecognized_keys,
                keys: extraKeys
              });
              status.dirty();
            }
          } else if (unknownKeys === "strip") {
          } else {
            throw new Error(`Internal ZodObject error: invalid unknownKeys value.`);
          }
        } else {
          const catchall = this._def.catchall;
          for (const key of extraKeys) {
            const value = ctx.data[key];
            pairs.push({
              key: { status: "valid", value: key },
              value: catchall._parse(
                new ParseInputLazyPath2(ctx, value, ctx.path, key)
                //, ctx.child(key), value, getParsedType(value)
              ),
              alwaysSet: key in ctx.data
            });
          }
        }
        if (ctx.common.async) {
          return Promise.resolve().then(async () => {
            const syncPairs = [];
            for (const pair of pairs) {
              const key = await pair.key;
              const value = await pair.value;
              syncPairs.push({
                key,
                value,
                alwaysSet: pair.alwaysSet
              });
            }
            return syncPairs;
          }).then((syncPairs) => {
            return ParseStatus2.mergeObjectSync(status, syncPairs);
          });
        } else {
          return ParseStatus2.mergeObjectSync(status, pairs);
        }
      }
      get shape() {
        return this._def.shape();
      }
      strict(message2) {
        errorUtil2.errToObj;
        return new _ZodObject2({
          ...this._def,
          unknownKeys: "strict",
          ...message2 !== void 0 ? {
            errorMap: /* @__PURE__ */ __name2((issue, ctx) => {
              const defaultError = this._def.errorMap?.(issue, ctx).message ?? ctx.defaultError;
              if (issue.code === "unrecognized_keys")
                return {
                  message: errorUtil2.errToObj(message2).message ?? defaultError
                };
              return {
                message: defaultError
              };
            }, "errorMap")
          } : {}
        });
      }
      strip() {
        return new _ZodObject2({
          ...this._def,
          unknownKeys: "strip"
        });
      }
      passthrough() {
        return new _ZodObject2({
          ...this._def,
          unknownKeys: "passthrough"
        });
      }
      // const AugmentFactory =
      //   <Def extends ZodObjectDef>(def: Def) =>
      //   <Augmentation extends ZodRawShape>(
      //     augmentation: Augmentation
      //   ): ZodObject<
      //     extendShape<ReturnType<Def["shape"]>, Augmentation>,
      //     Def["unknownKeys"],
      //     Def["catchall"]
      //   > => {
      //     return new ZodObject({
      //       ...def,
      //       shape: () => ({
      //         ...def.shape(),
      //         ...augmentation,
      //       }),
      //     }) as any;
      //   };
      extend(augmentation) {
        return new _ZodObject2({
          ...this._def,
          shape: /* @__PURE__ */ __name2(() => ({
            ...this._def.shape(),
            ...augmentation
          }), "shape")
        });
      }
      /**
       * Prior to zod@1.0.12 there was a bug in the
       * inferred type of merged objects. Please
       * upgrade if you are experiencing issues.
       */
      merge(merging) {
        const merged = new _ZodObject2({
          unknownKeys: merging._def.unknownKeys,
          catchall: merging._def.catchall,
          shape: /* @__PURE__ */ __name2(() => ({
            ...this._def.shape(),
            ...merging._def.shape()
          }), "shape"),
          typeName: ZodFirstPartyTypeKind2.ZodObject
        });
        return merged;
      }
      // merge<
      //   Incoming extends AnyZodObject,
      //   Augmentation extends Incoming["shape"],
      //   NewOutput extends {
      //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation
      //       ? Augmentation[k]["_output"]
      //       : k extends keyof Output
      //       ? Output[k]
      //       : never;
      //   },
      //   NewInput extends {
      //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation
      //       ? Augmentation[k]["_input"]
      //       : k extends keyof Input
      //       ? Input[k]
      //       : never;
      //   }
      // >(
      //   merging: Incoming
      // ): ZodObject<
      //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
      //   Incoming["_def"]["unknownKeys"],
      //   Incoming["_def"]["catchall"],
      //   NewOutput,
      //   NewInput
      // > {
      //   const merged: any = new ZodObject({
      //     unknownKeys: merging._def.unknownKeys,
      //     catchall: merging._def.catchall,
      //     shape: () =>
      //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
      //     typeName: ZodFirstPartyTypeKind.ZodObject,
      //   }) as any;
      //   return merged;
      // }
      setKey(key, schema2) {
        return this.augment({ [key]: schema2 });
      }
      // merge<Incoming extends AnyZodObject>(
      //   merging: Incoming
      // ): //ZodObject<T & Incoming["_shape"], UnknownKeys, Catchall> = (merging) => {
      // ZodObject<
      //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
      //   Incoming["_def"]["unknownKeys"],
      //   Incoming["_def"]["catchall"]
      // > {
      //   // const mergedShape = objectUtil.mergeShapes(
      //   //   this._def.shape(),
      //   //   merging._def.shape()
      //   // );
      //   const merged: any = new ZodObject({
      //     unknownKeys: merging._def.unknownKeys,
      //     catchall: merging._def.catchall,
      //     shape: () =>
      //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
      //     typeName: ZodFirstPartyTypeKind.ZodObject,
      //   }) as any;
      //   return merged;
      // }
      catchall(index) {
        return new _ZodObject2({
          ...this._def,
          catchall: index
        });
      }
      pick(mask) {
        const shape = {};
        for (const key of util2.objectKeys(mask)) {
          if (mask[key] && this.shape[key]) {
            shape[key] = this.shape[key];
          }
        }
        return new _ZodObject2({
          ...this._def,
          shape: /* @__PURE__ */ __name2(() => shape, "shape")
        });
      }
      omit(mask) {
        const shape = {};
        for (const key of util2.objectKeys(this.shape)) {
          if (!mask[key]) {
            shape[key] = this.shape[key];
          }
        }
        return new _ZodObject2({
          ...this._def,
          shape: /* @__PURE__ */ __name2(() => shape, "shape")
        });
      }
      /**
       * @deprecated
       */
      deepPartial() {
        return deepPartialify2(this);
      }
      partial(mask) {
        const newShape = {};
        for (const key of util2.objectKeys(this.shape)) {
          const fieldSchema = this.shape[key];
          if (mask && !mask[key]) {
            newShape[key] = fieldSchema;
          } else {
            newShape[key] = fieldSchema.optional();
          }
        }
        return new _ZodObject2({
          ...this._def,
          shape: /* @__PURE__ */ __name2(() => newShape, "shape")
        });
      }
      required(mask) {
        const newShape = {};
        for (const key of util2.objectKeys(this.shape)) {
          if (mask && !mask[key]) {
            newShape[key] = this.shape[key];
          } else {
            const fieldSchema = this.shape[key];
            let newField = fieldSchema;
            while (newField instanceof ZodOptional2) {
              newField = newField._def.innerType;
            }
            newShape[key] = newField;
          }
        }
        return new _ZodObject2({
          ...this._def,
          shape: /* @__PURE__ */ __name2(() => newShape, "shape")
        });
      }
      keyof() {
        return createZodEnum2(util2.objectKeys(this.shape));
      }
    };
    ZodObject2.create = (shape, params) => {
      return new ZodObject2({
        shape: /* @__PURE__ */ __name2(() => shape, "shape"),
        unknownKeys: "strip",
        catchall: ZodNever2.create(),
        typeName: ZodFirstPartyTypeKind2.ZodObject,
        ...processCreateParams2(params)
      });
    };
    ZodObject2.strictCreate = (shape, params) => {
      return new ZodObject2({
        shape: /* @__PURE__ */ __name2(() => shape, "shape"),
        unknownKeys: "strict",
        catchall: ZodNever2.create(),
        typeName: ZodFirstPartyTypeKind2.ZodObject,
        ...processCreateParams2(params)
      });
    };
    ZodObject2.lazycreate = (shape, params) => {
      return new ZodObject2({
        shape,
        unknownKeys: "strip",
        catchall: ZodNever2.create(),
        typeName: ZodFirstPartyTypeKind2.ZodObject,
        ...processCreateParams2(params)
      });
    };
    ZodUnion2 = class extends ZodType2 {
      static {
        __name(this, "ZodUnion2");
      }
      static {
        __name2(this, "ZodUnion");
      }
      _parse(input) {
        const { ctx } = this._processInputParams(input);
        const options = this._def.options;
        function handleResults(results) {
          for (const result of results) {
            if (result.result.status === "valid") {
              return result.result;
            }
          }
          for (const result of results) {
            if (result.result.status === "dirty") {
              ctx.common.issues.push(...result.ctx.common.issues);
              return result.result;
            }
          }
          const unionErrors = results.map((result) => new ZodError2(result.ctx.common.issues));
          addIssueToContext2(ctx, {
            code: ZodIssueCode2.invalid_union,
            unionErrors
          });
          return INVALID2;
        }
        __name(handleResults, "handleResults");
        __name2(handleResults, "handleResults");
        if (ctx.common.async) {
          return Promise.all(options.map(async (option) => {
            const childCtx = {
              ...ctx,
              common: {
                ...ctx.common,
                issues: []
              },
              parent: null
            };
            return {
              result: await option._parseAsync({
                data: ctx.data,
                path: ctx.path,
                parent: childCtx
              }),
              ctx: childCtx
            };
          })).then(handleResults);
        } else {
          let dirty = void 0;
          const issues = [];
          for (const option of options) {
            const childCtx = {
              ...ctx,
              common: {
                ...ctx.common,
                issues: []
              },
              parent: null
            };
            const result = option._parseSync({
              data: ctx.data,
              path: ctx.path,
              parent: childCtx
            });
            if (result.status === "valid") {
              return result;
            } else if (result.status === "dirty" && !dirty) {
              dirty = { result, ctx: childCtx };
            }
            if (childCtx.common.issues.length) {
              issues.push(childCtx.common.issues);
            }
          }
          if (dirty) {
            ctx.common.issues.push(...dirty.ctx.common.issues);
            return dirty.result;
          }
          const unionErrors = issues.map((issues2) => new ZodError2(issues2));
          addIssueToContext2(ctx, {
            code: ZodIssueCode2.invalid_union,
            unionErrors
          });
          return INVALID2;
        }
      }
      get options() {
        return this._def.options;
      }
    };
    ZodUnion2.create = (types2, params) => {
      return new ZodUnion2({
        options: types2,
        typeName: ZodFirstPartyTypeKind2.ZodUnion,
        ...processCreateParams2(params)
      });
    };
    getDiscriminator2 = /* @__PURE__ */ __name2((type) => {
      if (type instanceof ZodLazy2) {
        return getDiscriminator2(type.schema);
      } else if (type instanceof ZodEffects2) {
        return getDiscriminator2(type.innerType());
      } else if (type instanceof ZodLiteral2) {
        return [type.value];
      } else if (type instanceof ZodEnum2) {
        return type.options;
      } else if (type instanceof ZodNativeEnum2) {
        return util2.objectValues(type.enum);
      } else if (type instanceof ZodDefault2) {
        return getDiscriminator2(type._def.innerType);
      } else if (type instanceof ZodUndefined2) {
        return [void 0];
      } else if (type instanceof ZodNull2) {
        return [null];
      } else if (type instanceof ZodOptional2) {
        return [void 0, ...getDiscriminator2(type.unwrap())];
      } else if (type instanceof ZodNullable2) {
        return [null, ...getDiscriminator2(type.unwrap())];
      } else if (type instanceof ZodBranded2) {
        return getDiscriminator2(type.unwrap());
      } else if (type instanceof ZodReadonly2) {
        return getDiscriminator2(type.unwrap());
      } else if (type instanceof ZodCatch2) {
        return getDiscriminator2(type._def.innerType);
      } else {
        return [];
      }
    }, "getDiscriminator");
    ZodDiscriminatedUnion2 = class _ZodDiscriminatedUnion2 extends ZodType2 {
      static {
        __name(this, "_ZodDiscriminatedUnion2");
      }
      static {
        __name2(this, "ZodDiscriminatedUnion");
      }
      _parse(input) {
        const { ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType2.object) {
          addIssueToContext2(ctx, {
            code: ZodIssueCode2.invalid_type,
            expected: ZodParsedType2.object,
            received: ctx.parsedType
          });
          return INVALID2;
        }
        const discriminator = this.discriminator;
        const discriminatorValue = ctx.data[discriminator];
        const option = this.optionsMap.get(discriminatorValue);
        if (!option) {
          addIssueToContext2(ctx, {
            code: ZodIssueCode2.invalid_union_discriminator,
            options: Array.from(this.optionsMap.keys()),
            path: [discriminator]
          });
          return INVALID2;
        }
        if (ctx.common.async) {
          return option._parseAsync({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
          });
        } else {
          return option._parseSync({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
          });
        }
      }
      get discriminator() {
        return this._def.discriminator;
      }
      get options() {
        return this._def.options;
      }
      get optionsMap() {
        return this._def.optionsMap;
      }
      /**
       * The constructor of the discriminated union schema. Its behaviour is very similar to that of the normal z.union() constructor.
       * However, it only allows a union of objects, all of which need to share a discriminator property. This property must
       * have a different value for each object in the union.
       * @param discriminator the name of the discriminator property
       * @param types an array of object schemas
       * @param params
       */
      static create(discriminator, options, params) {
        const optionsMap = /* @__PURE__ */ new Map();
        for (const type of options) {
          const discriminatorValues = getDiscriminator2(type.shape[discriminator]);
          if (!discriminatorValues.length) {
            throw new Error(`A discriminator value for key \`${discriminator}\` could not be extracted from all schema options`);
          }
          for (const value of discriminatorValues) {
            if (optionsMap.has(value)) {
              throw new Error(`Discriminator property ${String(discriminator)} has duplicate value ${String(value)}`);
            }
            optionsMap.set(value, type);
          }
        }
        return new _ZodDiscriminatedUnion2({
          typeName: ZodFirstPartyTypeKind2.ZodDiscriminatedUnion,
          discriminator,
          options,
          optionsMap,
          ...processCreateParams2(params)
        });
      }
    };
    __name2(mergeValues2, "mergeValues");
    ZodIntersection2 = class extends ZodType2 {
      static {
        __name(this, "ZodIntersection2");
      }
      static {
        __name2(this, "ZodIntersection");
      }
      _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        const handleParsed = /* @__PURE__ */ __name2((parsedLeft, parsedRight) => {
          if (isAborted2(parsedLeft) || isAborted2(parsedRight)) {
            return INVALID2;
          }
          const merged = mergeValues2(parsedLeft.value, parsedRight.value);
          if (!merged.valid) {
            addIssueToContext2(ctx, {
              code: ZodIssueCode2.invalid_intersection_types
            });
            return INVALID2;
          }
          if (isDirty2(parsedLeft) || isDirty2(parsedRight)) {
            status.dirty();
          }
          return { status: status.value, value: merged.data };
        }, "handleParsed");
        if (ctx.common.async) {
          return Promise.all([
            this._def.left._parseAsync({
              data: ctx.data,
              path: ctx.path,
              parent: ctx
            }),
            this._def.right._parseAsync({
              data: ctx.data,
              path: ctx.path,
              parent: ctx
            })
          ]).then(([left, right]) => handleParsed(left, right));
        } else {
          return handleParsed(this._def.left._parseSync({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
          }), this._def.right._parseSync({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
          }));
        }
      }
    };
    ZodIntersection2.create = (left, right, params) => {
      return new ZodIntersection2({
        left,
        right,
        typeName: ZodFirstPartyTypeKind2.ZodIntersection,
        ...processCreateParams2(params)
      });
    };
    ZodTuple2 = class _ZodTuple2 extends ZodType2 {
      static {
        __name(this, "_ZodTuple2");
      }
      static {
        __name2(this, "ZodTuple");
      }
      _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType2.array) {
          addIssueToContext2(ctx, {
            code: ZodIssueCode2.invalid_type,
            expected: ZodParsedType2.array,
            received: ctx.parsedType
          });
          return INVALID2;
        }
        if (ctx.data.length < this._def.items.length) {
          addIssueToContext2(ctx, {
            code: ZodIssueCode2.too_small,
            minimum: this._def.items.length,
            inclusive: true,
            exact: false,
            type: "array"
          });
          return INVALID2;
        }
        const rest = this._def.rest;
        if (!rest && ctx.data.length > this._def.items.length) {
          addIssueToContext2(ctx, {
            code: ZodIssueCode2.too_big,
            maximum: this._def.items.length,
            inclusive: true,
            exact: false,
            type: "array"
          });
          status.dirty();
        }
        const items = [...ctx.data].map((item, itemIndex) => {
          const schema2 = this._def.items[itemIndex] || this._def.rest;
          if (!schema2)
            return null;
          return schema2._parse(new ParseInputLazyPath2(ctx, item, ctx.path, itemIndex));
        }).filter((x) => !!x);
        if (ctx.common.async) {
          return Promise.all(items).then((results) => {
            return ParseStatus2.mergeArray(status, results);
          });
        } else {
          return ParseStatus2.mergeArray(status, items);
        }
      }
      get items() {
        return this._def.items;
      }
      rest(rest) {
        return new _ZodTuple2({
          ...this._def,
          rest
        });
      }
    };
    ZodTuple2.create = (schemas, params) => {
      if (!Array.isArray(schemas)) {
        throw new Error("You must pass an array of schemas to z.tuple([ ... ])");
      }
      return new ZodTuple2({
        items: schemas,
        typeName: ZodFirstPartyTypeKind2.ZodTuple,
        rest: null,
        ...processCreateParams2(params)
      });
    };
    ZodRecord2 = class _ZodRecord2 extends ZodType2 {
      static {
        __name(this, "_ZodRecord2");
      }
      static {
        __name2(this, "ZodRecord");
      }
      get keySchema() {
        return this._def.keyType;
      }
      get valueSchema() {
        return this._def.valueType;
      }
      _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType2.object) {
          addIssueToContext2(ctx, {
            code: ZodIssueCode2.invalid_type,
            expected: ZodParsedType2.object,
            received: ctx.parsedType
          });
          return INVALID2;
        }
        const pairs = [];
        const keyType = this._def.keyType;
        const valueType = this._def.valueType;
        for (const key in ctx.data) {
          pairs.push({
            key: keyType._parse(new ParseInputLazyPath2(ctx, key, ctx.path, key)),
            value: valueType._parse(new ParseInputLazyPath2(ctx, ctx.data[key], ctx.path, key)),
            alwaysSet: key in ctx.data
          });
        }
        if (ctx.common.async) {
          return ParseStatus2.mergeObjectAsync(status, pairs);
        } else {
          return ParseStatus2.mergeObjectSync(status, pairs);
        }
      }
      get element() {
        return this._def.valueType;
      }
      static create(first, second, third) {
        if (second instanceof ZodType2) {
          return new _ZodRecord2({
            keyType: first,
            valueType: second,
            typeName: ZodFirstPartyTypeKind2.ZodRecord,
            ...processCreateParams2(third)
          });
        }
        return new _ZodRecord2({
          keyType: ZodString2.create(),
          valueType: first,
          typeName: ZodFirstPartyTypeKind2.ZodRecord,
          ...processCreateParams2(second)
        });
      }
    };
    ZodMap2 = class extends ZodType2 {
      static {
        __name(this, "ZodMap2");
      }
      static {
        __name2(this, "ZodMap");
      }
      get keySchema() {
        return this._def.keyType;
      }
      get valueSchema() {
        return this._def.valueType;
      }
      _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType2.map) {
          addIssueToContext2(ctx, {
            code: ZodIssueCode2.invalid_type,
            expected: ZodParsedType2.map,
            received: ctx.parsedType
          });
          return INVALID2;
        }
        const keyType = this._def.keyType;
        const valueType = this._def.valueType;
        const pairs = [...ctx.data.entries()].map(([key, value], index) => {
          return {
            key: keyType._parse(new ParseInputLazyPath2(ctx, key, ctx.path, [index, "key"])),
            value: valueType._parse(new ParseInputLazyPath2(ctx, value, ctx.path, [index, "value"]))
          };
        });
        if (ctx.common.async) {
          const finalMap = /* @__PURE__ */ new Map();
          return Promise.resolve().then(async () => {
            for (const pair of pairs) {
              const key = await pair.key;
              const value = await pair.value;
              if (key.status === "aborted" || value.status === "aborted") {
                return INVALID2;
              }
              if (key.status === "dirty" || value.status === "dirty") {
                status.dirty();
              }
              finalMap.set(key.value, value.value);
            }
            return { status: status.value, value: finalMap };
          });
        } else {
          const finalMap = /* @__PURE__ */ new Map();
          for (const pair of pairs) {
            const key = pair.key;
            const value = pair.value;
            if (key.status === "aborted" || value.status === "aborted") {
              return INVALID2;
            }
            if (key.status === "dirty" || value.status === "dirty") {
              status.dirty();
            }
            finalMap.set(key.value, value.value);
          }
          return { status: status.value, value: finalMap };
        }
      }
    };
    ZodMap2.create = (keyType, valueType, params) => {
      return new ZodMap2({
        valueType,
        keyType,
        typeName: ZodFirstPartyTypeKind2.ZodMap,
        ...processCreateParams2(params)
      });
    };
    ZodSet2 = class _ZodSet2 extends ZodType2 {
      static {
        __name(this, "_ZodSet2");
      }
      static {
        __name2(this, "ZodSet");
      }
      _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType2.set) {
          addIssueToContext2(ctx, {
            code: ZodIssueCode2.invalid_type,
            expected: ZodParsedType2.set,
            received: ctx.parsedType
          });
          return INVALID2;
        }
        const def = this._def;
        if (def.minSize !== null) {
          if (ctx.data.size < def.minSize.value) {
            addIssueToContext2(ctx, {
              code: ZodIssueCode2.too_small,
              minimum: def.minSize.value,
              type: "set",
              inclusive: true,
              exact: false,
              message: def.minSize.message
            });
            status.dirty();
          }
        }
        if (def.maxSize !== null) {
          if (ctx.data.size > def.maxSize.value) {
            addIssueToContext2(ctx, {
              code: ZodIssueCode2.too_big,
              maximum: def.maxSize.value,
              type: "set",
              inclusive: true,
              exact: false,
              message: def.maxSize.message
            });
            status.dirty();
          }
        }
        const valueType = this._def.valueType;
        function finalizeSet(elements2) {
          const parsedSet = /* @__PURE__ */ new Set();
          for (const element of elements2) {
            if (element.status === "aborted")
              return INVALID2;
            if (element.status === "dirty")
              status.dirty();
            parsedSet.add(element.value);
          }
          return { status: status.value, value: parsedSet };
        }
        __name(finalizeSet, "finalizeSet");
        __name2(finalizeSet, "finalizeSet");
        const elements = [...ctx.data.values()].map((item, i) => valueType._parse(new ParseInputLazyPath2(ctx, item, ctx.path, i)));
        if (ctx.common.async) {
          return Promise.all(elements).then((elements2) => finalizeSet(elements2));
        } else {
          return finalizeSet(elements);
        }
      }
      min(minSize, message2) {
        return new _ZodSet2({
          ...this._def,
          minSize: { value: minSize, message: errorUtil2.toString(message2) }
        });
      }
      max(maxSize, message2) {
        return new _ZodSet2({
          ...this._def,
          maxSize: { value: maxSize, message: errorUtil2.toString(message2) }
        });
      }
      size(size, message2) {
        return this.min(size, message2).max(size, message2);
      }
      nonempty(message2) {
        return this.min(1, message2);
      }
    };
    ZodSet2.create = (valueType, params) => {
      return new ZodSet2({
        valueType,
        minSize: null,
        maxSize: null,
        typeName: ZodFirstPartyTypeKind2.ZodSet,
        ...processCreateParams2(params)
      });
    };
    ZodFunction2 = class _ZodFunction2 extends ZodType2 {
      static {
        __name(this, "_ZodFunction2");
      }
      static {
        __name2(this, "ZodFunction");
      }
      constructor() {
        super(...arguments);
        this.validate = this.implement;
      }
      _parse(input) {
        const { ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType2.function) {
          addIssueToContext2(ctx, {
            code: ZodIssueCode2.invalid_type,
            expected: ZodParsedType2.function,
            received: ctx.parsedType
          });
          return INVALID2;
        }
        function makeArgsIssue(args, error2) {
          return makeIssue2({
            data: args,
            path: ctx.path,
            errorMaps: [ctx.common.contextualErrorMap, ctx.schemaErrorMap, getErrorMap2(), en_default].filter((x) => !!x),
            issueData: {
              code: ZodIssueCode2.invalid_arguments,
              argumentsError: error2
            }
          });
        }
        __name(makeArgsIssue, "makeArgsIssue");
        __name2(makeArgsIssue, "makeArgsIssue");
        function makeReturnsIssue(returns, error2) {
          return makeIssue2({
            data: returns,
            path: ctx.path,
            errorMaps: [ctx.common.contextualErrorMap, ctx.schemaErrorMap, getErrorMap2(), en_default].filter((x) => !!x),
            issueData: {
              code: ZodIssueCode2.invalid_return_type,
              returnTypeError: error2
            }
          });
        }
        __name(makeReturnsIssue, "makeReturnsIssue");
        __name2(makeReturnsIssue, "makeReturnsIssue");
        const params = { errorMap: ctx.common.contextualErrorMap };
        const fn = ctx.data;
        if (this._def.returns instanceof ZodPromise2) {
          const me = this;
          return OK2(async function(...args) {
            const error2 = new ZodError2([]);
            const parsedArgs = await me._def.args.parseAsync(args, params).catch((e) => {
              error2.addIssue(makeArgsIssue(args, e));
              throw error2;
            });
            const result = await Reflect.apply(fn, this, parsedArgs);
            const parsedReturns = await me._def.returns._def.type.parseAsync(result, params).catch((e) => {
              error2.addIssue(makeReturnsIssue(result, e));
              throw error2;
            });
            return parsedReturns;
          });
        } else {
          const me = this;
          return OK2(function(...args) {
            const parsedArgs = me._def.args.safeParse(args, params);
            if (!parsedArgs.success) {
              throw new ZodError2([makeArgsIssue(args, parsedArgs.error)]);
            }
            const result = Reflect.apply(fn, this, parsedArgs.data);
            const parsedReturns = me._def.returns.safeParse(result, params);
            if (!parsedReturns.success) {
              throw new ZodError2([makeReturnsIssue(result, parsedReturns.error)]);
            }
            return parsedReturns.data;
          });
        }
      }
      parameters() {
        return this._def.args;
      }
      returnType() {
        return this._def.returns;
      }
      args(...items) {
        return new _ZodFunction2({
          ...this._def,
          args: ZodTuple2.create(items).rest(ZodUnknown2.create())
        });
      }
      returns(returnType) {
        return new _ZodFunction2({
          ...this._def,
          returns: returnType
        });
      }
      implement(func) {
        const validatedFunc = this.parse(func);
        return validatedFunc;
      }
      strictImplement(func) {
        const validatedFunc = this.parse(func);
        return validatedFunc;
      }
      static create(args, returns, params) {
        return new _ZodFunction2({
          args: args ? args : ZodTuple2.create([]).rest(ZodUnknown2.create()),
          returns: returns || ZodUnknown2.create(),
          typeName: ZodFirstPartyTypeKind2.ZodFunction,
          ...processCreateParams2(params)
        });
      }
    };
    ZodLazy2 = class extends ZodType2 {
      static {
        __name(this, "ZodLazy2");
      }
      static {
        __name2(this, "ZodLazy");
      }
      get schema() {
        return this._def.getter();
      }
      _parse(input) {
        const { ctx } = this._processInputParams(input);
        const lazySchema = this._def.getter();
        return lazySchema._parse({ data: ctx.data, path: ctx.path, parent: ctx });
      }
    };
    ZodLazy2.create = (getter, params) => {
      return new ZodLazy2({
        getter,
        typeName: ZodFirstPartyTypeKind2.ZodLazy,
        ...processCreateParams2(params)
      });
    };
    ZodLiteral2 = class extends ZodType2 {
      static {
        __name(this, "ZodLiteral2");
      }
      static {
        __name2(this, "ZodLiteral");
      }
      _parse(input) {
        if (input.data !== this._def.value) {
          const ctx = this._getOrReturnCtx(input);
          addIssueToContext2(ctx, {
            received: ctx.data,
            code: ZodIssueCode2.invalid_literal,
            expected: this._def.value
          });
          return INVALID2;
        }
        return { status: "valid", value: input.data };
      }
      get value() {
        return this._def.value;
      }
    };
    ZodLiteral2.create = (value, params) => {
      return new ZodLiteral2({
        value,
        typeName: ZodFirstPartyTypeKind2.ZodLiteral,
        ...processCreateParams2(params)
      });
    };
    __name2(createZodEnum2, "createZodEnum");
    ZodEnum2 = class _ZodEnum2 extends ZodType2 {
      static {
        __name(this, "_ZodEnum2");
      }
      static {
        __name2(this, "ZodEnum");
      }
      constructor() {
        super(...arguments);
        _ZodEnum_cache2.set(this, void 0);
      }
      _parse(input) {
        if (typeof input.data !== "string") {
          const ctx = this._getOrReturnCtx(input);
          const expectedValues = this._def.values;
          addIssueToContext2(ctx, {
            expected: util2.joinValues(expectedValues),
            received: ctx.parsedType,
            code: ZodIssueCode2.invalid_type
          });
          return INVALID2;
        }
        if (!__classPrivateFieldGet2(this, _ZodEnum_cache2, "f")) {
          __classPrivateFieldSet2(this, _ZodEnum_cache2, new Set(this._def.values), "f");
        }
        if (!__classPrivateFieldGet2(this, _ZodEnum_cache2, "f").has(input.data)) {
          const ctx = this._getOrReturnCtx(input);
          const expectedValues = this._def.values;
          addIssueToContext2(ctx, {
            received: ctx.data,
            code: ZodIssueCode2.invalid_enum_value,
            options: expectedValues
          });
          return INVALID2;
        }
        return OK2(input.data);
      }
      get options() {
        return this._def.values;
      }
      get enum() {
        const enumValues = {};
        for (const val of this._def.values) {
          enumValues[val] = val;
        }
        return enumValues;
      }
      get Values() {
        const enumValues = {};
        for (const val of this._def.values) {
          enumValues[val] = val;
        }
        return enumValues;
      }
      get Enum() {
        const enumValues = {};
        for (const val of this._def.values) {
          enumValues[val] = val;
        }
        return enumValues;
      }
      extract(values, newDef = this._def) {
        return _ZodEnum2.create(values, {
          ...this._def,
          ...newDef
        });
      }
      exclude(values, newDef = this._def) {
        return _ZodEnum2.create(this.options.filter((opt) => !values.includes(opt)), {
          ...this._def,
          ...newDef
        });
      }
    };
    _ZodEnum_cache2 = /* @__PURE__ */ new WeakMap();
    ZodEnum2.create = createZodEnum2;
    ZodNativeEnum2 = class extends ZodType2 {
      static {
        __name(this, "ZodNativeEnum2");
      }
      static {
        __name2(this, "ZodNativeEnum");
      }
      constructor() {
        super(...arguments);
        _ZodNativeEnum_cache2.set(this, void 0);
      }
      _parse(input) {
        const nativeEnumValues = util2.getValidEnumValues(this._def.values);
        const ctx = this._getOrReturnCtx(input);
        if (ctx.parsedType !== ZodParsedType2.string && ctx.parsedType !== ZodParsedType2.number) {
          const expectedValues = util2.objectValues(nativeEnumValues);
          addIssueToContext2(ctx, {
            expected: util2.joinValues(expectedValues),
            received: ctx.parsedType,
            code: ZodIssueCode2.invalid_type
          });
          return INVALID2;
        }
        if (!__classPrivateFieldGet2(this, _ZodNativeEnum_cache2, "f")) {
          __classPrivateFieldSet2(this, _ZodNativeEnum_cache2, new Set(util2.getValidEnumValues(this._def.values)), "f");
        }
        if (!__classPrivateFieldGet2(this, _ZodNativeEnum_cache2, "f").has(input.data)) {
          const expectedValues = util2.objectValues(nativeEnumValues);
          addIssueToContext2(ctx, {
            received: ctx.data,
            code: ZodIssueCode2.invalid_enum_value,
            options: expectedValues
          });
          return INVALID2;
        }
        return OK2(input.data);
      }
      get enum() {
        return this._def.values;
      }
    };
    _ZodNativeEnum_cache2 = /* @__PURE__ */ new WeakMap();
    ZodNativeEnum2.create = (values, params) => {
      return new ZodNativeEnum2({
        values,
        typeName: ZodFirstPartyTypeKind2.ZodNativeEnum,
        ...processCreateParams2(params)
      });
    };
    ZodPromise2 = class extends ZodType2 {
      static {
        __name(this, "ZodPromise2");
      }
      static {
        __name2(this, "ZodPromise");
      }
      unwrap() {
        return this._def.type;
      }
      _parse(input) {
        const { ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType2.promise && ctx.common.async === false) {
          addIssueToContext2(ctx, {
            code: ZodIssueCode2.invalid_type,
            expected: ZodParsedType2.promise,
            received: ctx.parsedType
          });
          return INVALID2;
        }
        const promisified = ctx.parsedType === ZodParsedType2.promise ? ctx.data : Promise.resolve(ctx.data);
        return OK2(promisified.then((data) => {
          return this._def.type.parseAsync(data, {
            path: ctx.path,
            errorMap: ctx.common.contextualErrorMap
          });
        }));
      }
    };
    ZodPromise2.create = (schema2, params) => {
      return new ZodPromise2({
        type: schema2,
        typeName: ZodFirstPartyTypeKind2.ZodPromise,
        ...processCreateParams2(params)
      });
    };
    ZodEffects2 = class extends ZodType2 {
      static {
        __name(this, "ZodEffects2");
      }
      static {
        __name2(this, "ZodEffects");
      }
      innerType() {
        return this._def.schema;
      }
      sourceType() {
        return this._def.schema._def.typeName === ZodFirstPartyTypeKind2.ZodEffects ? this._def.schema.sourceType() : this._def.schema;
      }
      _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        const effect = this._def.effect || null;
        const checkCtx = {
          addIssue: /* @__PURE__ */ __name2((arg) => {
            addIssueToContext2(ctx, arg);
            if (arg.fatal) {
              status.abort();
            } else {
              status.dirty();
            }
          }, "addIssue"),
          get path() {
            return ctx.path;
          }
        };
        checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);
        if (effect.type === "preprocess") {
          const processed = effect.transform(ctx.data, checkCtx);
          if (ctx.common.async) {
            return Promise.resolve(processed).then(async (processed2) => {
              if (status.value === "aborted")
                return INVALID2;
              const result = await this._def.schema._parseAsync({
                data: processed2,
                path: ctx.path,
                parent: ctx
              });
              if (result.status === "aborted")
                return INVALID2;
              if (result.status === "dirty")
                return DIRTY2(result.value);
              if (status.value === "dirty")
                return DIRTY2(result.value);
              return result;
            });
          } else {
            if (status.value === "aborted")
              return INVALID2;
            const result = this._def.schema._parseSync({
              data: processed,
              path: ctx.path,
              parent: ctx
            });
            if (result.status === "aborted")
              return INVALID2;
            if (result.status === "dirty")
              return DIRTY2(result.value);
            if (status.value === "dirty")
              return DIRTY2(result.value);
            return result;
          }
        }
        if (effect.type === "refinement") {
          const executeRefinement = /* @__PURE__ */ __name2((acc) => {
            const result = effect.refinement(acc, checkCtx);
            if (ctx.common.async) {
              return Promise.resolve(result);
            }
            if (result instanceof Promise) {
              throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");
            }
            return acc;
          }, "executeRefinement");
          if (ctx.common.async === false) {
            const inner = this._def.schema._parseSync({
              data: ctx.data,
              path: ctx.path,
              parent: ctx
            });
            if (inner.status === "aborted")
              return INVALID2;
            if (inner.status === "dirty")
              status.dirty();
            executeRefinement(inner.value);
            return { status: status.value, value: inner.value };
          } else {
            return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((inner) => {
              if (inner.status === "aborted")
                return INVALID2;
              if (inner.status === "dirty")
                status.dirty();
              return executeRefinement(inner.value).then(() => {
                return { status: status.value, value: inner.value };
              });
            });
          }
        }
        if (effect.type === "transform") {
          if (ctx.common.async === false) {
            const base = this._def.schema._parseSync({
              data: ctx.data,
              path: ctx.path,
              parent: ctx
            });
            if (!isValid3(base))
              return base;
            const result = effect.transform(base.value, checkCtx);
            if (result instanceof Promise) {
              throw new Error(`Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`);
            }
            return { status: status.value, value: result };
          } else {
            return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((base) => {
              if (!isValid3(base))
                return base;
              return Promise.resolve(effect.transform(base.value, checkCtx)).then((result) => ({
                status: status.value,
                value: result
              }));
            });
          }
        }
        util2.assertNever(effect);
      }
    };
    ZodEffects2.create = (schema2, effect, params) => {
      return new ZodEffects2({
        schema: schema2,
        typeName: ZodFirstPartyTypeKind2.ZodEffects,
        effect,
        ...processCreateParams2(params)
      });
    };
    ZodEffects2.createWithPreprocess = (preprocess, schema2, params) => {
      return new ZodEffects2({
        schema: schema2,
        effect: { type: "preprocess", transform: preprocess },
        typeName: ZodFirstPartyTypeKind2.ZodEffects,
        ...processCreateParams2(params)
      });
    };
    ZodOptional2 = class extends ZodType2 {
      static {
        __name(this, "ZodOptional2");
      }
      static {
        __name2(this, "ZodOptional");
      }
      _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType === ZodParsedType2.undefined) {
          return OK2(void 0);
        }
        return this._def.innerType._parse(input);
      }
      unwrap() {
        return this._def.innerType;
      }
    };
    ZodOptional2.create = (type, params) => {
      return new ZodOptional2({
        innerType: type,
        typeName: ZodFirstPartyTypeKind2.ZodOptional,
        ...processCreateParams2(params)
      });
    };
    ZodNullable2 = class extends ZodType2 {
      static {
        __name(this, "ZodNullable2");
      }
      static {
        __name2(this, "ZodNullable");
      }
      _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType === ZodParsedType2.null) {
          return OK2(null);
        }
        return this._def.innerType._parse(input);
      }
      unwrap() {
        return this._def.innerType;
      }
    };
    ZodNullable2.create = (type, params) => {
      return new ZodNullable2({
        innerType: type,
        typeName: ZodFirstPartyTypeKind2.ZodNullable,
        ...processCreateParams2(params)
      });
    };
    ZodDefault2 = class extends ZodType2 {
      static {
        __name(this, "ZodDefault2");
      }
      static {
        __name2(this, "ZodDefault");
      }
      _parse(input) {
        const { ctx } = this._processInputParams(input);
        let data = ctx.data;
        if (ctx.parsedType === ZodParsedType2.undefined) {
          data = this._def.defaultValue();
        }
        return this._def.innerType._parse({
          data,
          path: ctx.path,
          parent: ctx
        });
      }
      removeDefault() {
        return this._def.innerType;
      }
    };
    ZodDefault2.create = (type, params) => {
      return new ZodDefault2({
        innerType: type,
        typeName: ZodFirstPartyTypeKind2.ZodDefault,
        defaultValue: typeof params.default === "function" ? params.default : () => params.default,
        ...processCreateParams2(params)
      });
    };
    ZodCatch2 = class extends ZodType2 {
      static {
        __name(this, "ZodCatch2");
      }
      static {
        __name2(this, "ZodCatch");
      }
      _parse(input) {
        const { ctx } = this._processInputParams(input);
        const newCtx = {
          ...ctx,
          common: {
            ...ctx.common,
            issues: []
          }
        };
        const result = this._def.innerType._parse({
          data: newCtx.data,
          path: newCtx.path,
          parent: {
            ...newCtx
          }
        });
        if (isAsync2(result)) {
          return result.then((result2) => {
            return {
              status: "valid",
              value: result2.status === "valid" ? result2.value : this._def.catchValue({
                get error() {
                  return new ZodError2(newCtx.common.issues);
                },
                input: newCtx.data
              })
            };
          });
        } else {
          return {
            status: "valid",
            value: result.status === "valid" ? result.value : this._def.catchValue({
              get error() {
                return new ZodError2(newCtx.common.issues);
              },
              input: newCtx.data
            })
          };
        }
      }
      removeCatch() {
        return this._def.innerType;
      }
    };
    ZodCatch2.create = (type, params) => {
      return new ZodCatch2({
        innerType: type,
        typeName: ZodFirstPartyTypeKind2.ZodCatch,
        catchValue: typeof params.catch === "function" ? params.catch : () => params.catch,
        ...processCreateParams2(params)
      });
    };
    ZodNaN2 = class extends ZodType2 {
      static {
        __name(this, "ZodNaN2");
      }
      static {
        __name2(this, "ZodNaN");
      }
      _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType2.nan) {
          const ctx = this._getOrReturnCtx(input);
          addIssueToContext2(ctx, {
            code: ZodIssueCode2.invalid_type,
            expected: ZodParsedType2.nan,
            received: ctx.parsedType
          });
          return INVALID2;
        }
        return { status: "valid", value: input.data };
      }
    };
    ZodNaN2.create = (params) => {
      return new ZodNaN2({
        typeName: ZodFirstPartyTypeKind2.ZodNaN,
        ...processCreateParams2(params)
      });
    };
    BRAND2 = Symbol("zod_brand");
    ZodBranded2 = class extends ZodType2 {
      static {
        __name(this, "ZodBranded2");
      }
      static {
        __name2(this, "ZodBranded");
      }
      _parse(input) {
        const { ctx } = this._processInputParams(input);
        const data = ctx.data;
        return this._def.type._parse({
          data,
          path: ctx.path,
          parent: ctx
        });
      }
      unwrap() {
        return this._def.type;
      }
    };
    ZodPipeline2 = class _ZodPipeline2 extends ZodType2 {
      static {
        __name(this, "_ZodPipeline2");
      }
      static {
        __name2(this, "ZodPipeline");
      }
      _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.common.async) {
          const handleAsync = /* @__PURE__ */ __name2(async () => {
            const inResult = await this._def.in._parseAsync({
              data: ctx.data,
              path: ctx.path,
              parent: ctx
            });
            if (inResult.status === "aborted")
              return INVALID2;
            if (inResult.status === "dirty") {
              status.dirty();
              return DIRTY2(inResult.value);
            } else {
              return this._def.out._parseAsync({
                data: inResult.value,
                path: ctx.path,
                parent: ctx
              });
            }
          }, "handleAsync");
          return handleAsync();
        } else {
          const inResult = this._def.in._parseSync({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
          });
          if (inResult.status === "aborted")
            return INVALID2;
          if (inResult.status === "dirty") {
            status.dirty();
            return {
              status: "dirty",
              value: inResult.value
            };
          } else {
            return this._def.out._parseSync({
              data: inResult.value,
              path: ctx.path,
              parent: ctx
            });
          }
        }
      }
      static create(a, b) {
        return new _ZodPipeline2({
          in: a,
          out: b,
          typeName: ZodFirstPartyTypeKind2.ZodPipeline
        });
      }
    };
    ZodReadonly2 = class extends ZodType2 {
      static {
        __name(this, "ZodReadonly2");
      }
      static {
        __name2(this, "ZodReadonly");
      }
      _parse(input) {
        const result = this._def.innerType._parse(input);
        const freeze2 = /* @__PURE__ */ __name2((data) => {
          if (isValid3(data)) {
            data.value = Object.freeze(data.value);
          }
          return data;
        }, "freeze");
        return isAsync2(result) ? result.then((data) => freeze2(data)) : freeze2(result);
      }
      unwrap() {
        return this._def.innerType;
      }
    };
    ZodReadonly2.create = (type, params) => {
      return new ZodReadonly2({
        innerType: type,
        typeName: ZodFirstPartyTypeKind2.ZodReadonly,
        ...processCreateParams2(params)
      });
    };
    __name2(cleanParams, "cleanParams");
    __name2(custom, "custom");
    late2 = {
      object: ZodObject2.lazycreate
    };
    (function(ZodFirstPartyTypeKind3) {
      ZodFirstPartyTypeKind3["ZodString"] = "ZodString";
      ZodFirstPartyTypeKind3["ZodNumber"] = "ZodNumber";
      ZodFirstPartyTypeKind3["ZodNaN"] = "ZodNaN";
      ZodFirstPartyTypeKind3["ZodBigInt"] = "ZodBigInt";
      ZodFirstPartyTypeKind3["ZodBoolean"] = "ZodBoolean";
      ZodFirstPartyTypeKind3["ZodDate"] = "ZodDate";
      ZodFirstPartyTypeKind3["ZodSymbol"] = "ZodSymbol";
      ZodFirstPartyTypeKind3["ZodUndefined"] = "ZodUndefined";
      ZodFirstPartyTypeKind3["ZodNull"] = "ZodNull";
      ZodFirstPartyTypeKind3["ZodAny"] = "ZodAny";
      ZodFirstPartyTypeKind3["ZodUnknown"] = "ZodUnknown";
      ZodFirstPartyTypeKind3["ZodNever"] = "ZodNever";
      ZodFirstPartyTypeKind3["ZodVoid"] = "ZodVoid";
      ZodFirstPartyTypeKind3["ZodArray"] = "ZodArray";
      ZodFirstPartyTypeKind3["ZodObject"] = "ZodObject";
      ZodFirstPartyTypeKind3["ZodUnion"] = "ZodUnion";
      ZodFirstPartyTypeKind3["ZodDiscriminatedUnion"] = "ZodDiscriminatedUnion";
      ZodFirstPartyTypeKind3["ZodIntersection"] = "ZodIntersection";
      ZodFirstPartyTypeKind3["ZodTuple"] = "ZodTuple";
      ZodFirstPartyTypeKind3["ZodRecord"] = "ZodRecord";
      ZodFirstPartyTypeKind3["ZodMap"] = "ZodMap";
      ZodFirstPartyTypeKind3["ZodSet"] = "ZodSet";
      ZodFirstPartyTypeKind3["ZodFunction"] = "ZodFunction";
      ZodFirstPartyTypeKind3["ZodLazy"] = "ZodLazy";
      ZodFirstPartyTypeKind3["ZodLiteral"] = "ZodLiteral";
      ZodFirstPartyTypeKind3["ZodEnum"] = "ZodEnum";
      ZodFirstPartyTypeKind3["ZodEffects"] = "ZodEffects";
      ZodFirstPartyTypeKind3["ZodNativeEnum"] = "ZodNativeEnum";
      ZodFirstPartyTypeKind3["ZodOptional"] = "ZodOptional";
      ZodFirstPartyTypeKind3["ZodNullable"] = "ZodNullable";
      ZodFirstPartyTypeKind3["ZodDefault"] = "ZodDefault";
      ZodFirstPartyTypeKind3["ZodCatch"] = "ZodCatch";
      ZodFirstPartyTypeKind3["ZodPromise"] = "ZodPromise";
      ZodFirstPartyTypeKind3["ZodBranded"] = "ZodBranded";
      ZodFirstPartyTypeKind3["ZodPipeline"] = "ZodPipeline";
      ZodFirstPartyTypeKind3["ZodReadonly"] = "ZodReadonly";
    })(ZodFirstPartyTypeKind2 || (ZodFirstPartyTypeKind2 = {}));
    instanceOfType = /* @__PURE__ */ __name2((cls, params = {
      message: `Input not instance of ${cls.name}`
    }) => custom((data) => data instanceof cls, params), "instanceOfType");
    stringType2 = ZodString2.create;
    numberType2 = ZodNumber2.create;
    nanType2 = ZodNaN2.create;
    bigIntType2 = ZodBigInt2.create;
    booleanType2 = ZodBoolean2.create;
    dateType2 = ZodDate2.create;
    symbolType2 = ZodSymbol2.create;
    undefinedType2 = ZodUndefined2.create;
    nullType2 = ZodNull2.create;
    anyType2 = ZodAny2.create;
    unknownType2 = ZodUnknown2.create;
    neverType2 = ZodNever2.create;
    voidType2 = ZodVoid2.create;
    arrayType2 = ZodArray2.create;
    objectType2 = ZodObject2.create;
    strictObjectType2 = ZodObject2.strictCreate;
    unionType2 = ZodUnion2.create;
    discriminatedUnionType2 = ZodDiscriminatedUnion2.create;
    intersectionType2 = ZodIntersection2.create;
    tupleType2 = ZodTuple2.create;
    recordType2 = ZodRecord2.create;
    mapType2 = ZodMap2.create;
    setType2 = ZodSet2.create;
    functionType2 = ZodFunction2.create;
    lazyType2 = ZodLazy2.create;
    literalType2 = ZodLiteral2.create;
    enumType2 = ZodEnum2.create;
    nativeEnumType2 = ZodNativeEnum2.create;
    promiseType2 = ZodPromise2.create;
    effectsType2 = ZodEffects2.create;
    optionalType2 = ZodOptional2.create;
    nullableType2 = ZodNullable2.create;
    preprocessType2 = ZodEffects2.createWithPreprocess;
    pipelineType2 = ZodPipeline2.create;
    ostring = /* @__PURE__ */ __name2(() => stringType2().optional(), "ostring");
    onumber = /* @__PURE__ */ __name2(() => numberType2().optional(), "onumber");
    oboolean = /* @__PURE__ */ __name2(() => booleanType2().optional(), "oboolean");
    coerce = {
      string: /* @__PURE__ */ __name2((arg) => ZodString2.create({ ...arg, coerce: true }), "string"),
      number: /* @__PURE__ */ __name2((arg) => ZodNumber2.create({ ...arg, coerce: true }), "number"),
      boolean: /* @__PURE__ */ __name2((arg) => ZodBoolean2.create({
        ...arg,
        coerce: true
      }), "boolean"),
      bigint: /* @__PURE__ */ __name2((arg) => ZodBigInt2.create({ ...arg, coerce: true }), "bigint"),
      date: /* @__PURE__ */ __name2((arg) => ZodDate2.create({ ...arg, coerce: true }), "date")
    };
    NEVER = INVALID2;
  }
});
var external_exports = {};
__export(external_exports, {
  BRAND: /* @__PURE__ */ __name(() => BRAND2, "BRAND"),
  DIRTY: /* @__PURE__ */ __name(() => DIRTY2, "DIRTY"),
  EMPTY_PATH: /* @__PURE__ */ __name(() => EMPTY_PATH, "EMPTY_PATH"),
  INVALID: /* @__PURE__ */ __name(() => INVALID2, "INVALID"),
  NEVER: /* @__PURE__ */ __name(() => NEVER, "NEVER"),
  OK: /* @__PURE__ */ __name(() => OK2, "OK"),
  ParseStatus: /* @__PURE__ */ __name(() => ParseStatus2, "ParseStatus"),
  Schema: /* @__PURE__ */ __name(() => ZodType2, "Schema"),
  ZodAny: /* @__PURE__ */ __name(() => ZodAny2, "ZodAny"),
  ZodArray: /* @__PURE__ */ __name(() => ZodArray2, "ZodArray"),
  ZodBigInt: /* @__PURE__ */ __name(() => ZodBigInt2, "ZodBigInt"),
  ZodBoolean: /* @__PURE__ */ __name(() => ZodBoolean2, "ZodBoolean"),
  ZodBranded: /* @__PURE__ */ __name(() => ZodBranded2, "ZodBranded"),
  ZodCatch: /* @__PURE__ */ __name(() => ZodCatch2, "ZodCatch"),
  ZodDate: /* @__PURE__ */ __name(() => ZodDate2, "ZodDate"),
  ZodDefault: /* @__PURE__ */ __name(() => ZodDefault2, "ZodDefault"),
  ZodDiscriminatedUnion: /* @__PURE__ */ __name(() => ZodDiscriminatedUnion2, "ZodDiscriminatedUnion"),
  ZodEffects: /* @__PURE__ */ __name(() => ZodEffects2, "ZodEffects"),
  ZodEnum: /* @__PURE__ */ __name(() => ZodEnum2, "ZodEnum"),
  ZodError: /* @__PURE__ */ __name(() => ZodError2, "ZodError"),
  ZodFirstPartyTypeKind: /* @__PURE__ */ __name(() => ZodFirstPartyTypeKind2, "ZodFirstPartyTypeKind"),
  ZodFunction: /* @__PURE__ */ __name(() => ZodFunction2, "ZodFunction"),
  ZodIntersection: /* @__PURE__ */ __name(() => ZodIntersection2, "ZodIntersection"),
  ZodIssueCode: /* @__PURE__ */ __name(() => ZodIssueCode2, "ZodIssueCode"),
  ZodLazy: /* @__PURE__ */ __name(() => ZodLazy2, "ZodLazy"),
  ZodLiteral: /* @__PURE__ */ __name(() => ZodLiteral2, "ZodLiteral"),
  ZodMap: /* @__PURE__ */ __name(() => ZodMap2, "ZodMap"),
  ZodNaN: /* @__PURE__ */ __name(() => ZodNaN2, "ZodNaN"),
  ZodNativeEnum: /* @__PURE__ */ __name(() => ZodNativeEnum2, "ZodNativeEnum"),
  ZodNever: /* @__PURE__ */ __name(() => ZodNever2, "ZodNever"),
  ZodNull: /* @__PURE__ */ __name(() => ZodNull2, "ZodNull"),
  ZodNullable: /* @__PURE__ */ __name(() => ZodNullable2, "ZodNullable"),
  ZodNumber: /* @__PURE__ */ __name(() => ZodNumber2, "ZodNumber"),
  ZodObject: /* @__PURE__ */ __name(() => ZodObject2, "ZodObject"),
  ZodOptional: /* @__PURE__ */ __name(() => ZodOptional2, "ZodOptional"),
  ZodParsedType: /* @__PURE__ */ __name(() => ZodParsedType2, "ZodParsedType"),
  ZodPipeline: /* @__PURE__ */ __name(() => ZodPipeline2, "ZodPipeline"),
  ZodPromise: /* @__PURE__ */ __name(() => ZodPromise2, "ZodPromise"),
  ZodReadonly: /* @__PURE__ */ __name(() => ZodReadonly2, "ZodReadonly"),
  ZodRecord: /* @__PURE__ */ __name(() => ZodRecord2, "ZodRecord"),
  ZodSchema: /* @__PURE__ */ __name(() => ZodType2, "ZodSchema"),
  ZodSet: /* @__PURE__ */ __name(() => ZodSet2, "ZodSet"),
  ZodString: /* @__PURE__ */ __name(() => ZodString2, "ZodString"),
  ZodSymbol: /* @__PURE__ */ __name(() => ZodSymbol2, "ZodSymbol"),
  ZodTransformer: /* @__PURE__ */ __name(() => ZodEffects2, "ZodTransformer"),
  ZodTuple: /* @__PURE__ */ __name(() => ZodTuple2, "ZodTuple"),
  ZodType: /* @__PURE__ */ __name(() => ZodType2, "ZodType"),
  ZodUndefined: /* @__PURE__ */ __name(() => ZodUndefined2, "ZodUndefined"),
  ZodUnion: /* @__PURE__ */ __name(() => ZodUnion2, "ZodUnion"),
  ZodUnknown: /* @__PURE__ */ __name(() => ZodUnknown2, "ZodUnknown"),
  ZodVoid: /* @__PURE__ */ __name(() => ZodVoid2, "ZodVoid"),
  addIssueToContext: /* @__PURE__ */ __name(() => addIssueToContext2, "addIssueToContext"),
  any: /* @__PURE__ */ __name(() => anyType2, "any"),
  array: /* @__PURE__ */ __name(() => arrayType2, "array"),
  bigint: /* @__PURE__ */ __name(() => bigIntType2, "bigint"),
  boolean: /* @__PURE__ */ __name(() => booleanType2, "boolean"),
  coerce: /* @__PURE__ */ __name(() => coerce, "coerce"),
  custom: /* @__PURE__ */ __name(() => custom, "custom"),
  date: /* @__PURE__ */ __name(() => dateType2, "date"),
  datetimeRegex: /* @__PURE__ */ __name(() => datetimeRegex2, "datetimeRegex"),
  defaultErrorMap: /* @__PURE__ */ __name(() => en_default, "defaultErrorMap"),
  discriminatedUnion: /* @__PURE__ */ __name(() => discriminatedUnionType2, "discriminatedUnion"),
  effect: /* @__PURE__ */ __name(() => effectsType2, "effect"),
  enum: /* @__PURE__ */ __name(() => enumType2, "enum"),
  function: /* @__PURE__ */ __name(() => functionType2, "function"),
  getErrorMap: /* @__PURE__ */ __name(() => getErrorMap2, "getErrorMap"),
  getParsedType: /* @__PURE__ */ __name(() => getParsedType2, "getParsedType"),
  instanceof: /* @__PURE__ */ __name(() => instanceOfType, "instanceof"),
  intersection: /* @__PURE__ */ __name(() => intersectionType2, "intersection"),
  isAborted: /* @__PURE__ */ __name(() => isAborted2, "isAborted"),
  isAsync: /* @__PURE__ */ __name(() => isAsync2, "isAsync"),
  isDirty: /* @__PURE__ */ __name(() => isDirty2, "isDirty"),
  isValid: /* @__PURE__ */ __name(() => isValid3, "isValid"),
  late: /* @__PURE__ */ __name(() => late2, "late"),
  lazy: /* @__PURE__ */ __name(() => lazyType2, "lazy"),
  literal: /* @__PURE__ */ __name(() => literalType2, "literal"),
  makeIssue: /* @__PURE__ */ __name(() => makeIssue2, "makeIssue"),
  map: /* @__PURE__ */ __name(() => mapType2, "map"),
  nan: /* @__PURE__ */ __name(() => nanType2, "nan"),
  nativeEnum: /* @__PURE__ */ __name(() => nativeEnumType2, "nativeEnum"),
  never: /* @__PURE__ */ __name(() => neverType2, "never"),
  null: /* @__PURE__ */ __name(() => nullType2, "null"),
  nullable: /* @__PURE__ */ __name(() => nullableType2, "nullable"),
  number: /* @__PURE__ */ __name(() => numberType2, "number"),
  object: /* @__PURE__ */ __name(() => objectType2, "object"),
  objectUtil: /* @__PURE__ */ __name(() => objectUtil2, "objectUtil"),
  oboolean: /* @__PURE__ */ __name(() => oboolean, "oboolean"),
  onumber: /* @__PURE__ */ __name(() => onumber, "onumber"),
  optional: /* @__PURE__ */ __name(() => optionalType2, "optional"),
  ostring: /* @__PURE__ */ __name(() => ostring, "ostring"),
  pipeline: /* @__PURE__ */ __name(() => pipelineType2, "pipeline"),
  preprocess: /* @__PURE__ */ __name(() => preprocessType2, "preprocess"),
  promise: /* @__PURE__ */ __name(() => promiseType2, "promise"),
  quotelessJson: /* @__PURE__ */ __name(() => quotelessJson, "quotelessJson"),
  record: /* @__PURE__ */ __name(() => recordType2, "record"),
  set: /* @__PURE__ */ __name(() => setType2, "set"),
  setErrorMap: /* @__PURE__ */ __name(() => setErrorMap, "setErrorMap"),
  strictObject: /* @__PURE__ */ __name(() => strictObjectType2, "strictObject"),
  string: /* @__PURE__ */ __name(() => stringType2, "string"),
  symbol: /* @__PURE__ */ __name(() => symbolType2, "symbol"),
  transformer: /* @__PURE__ */ __name(() => effectsType2, "transformer"),
  tuple: /* @__PURE__ */ __name(() => tupleType2, "tuple"),
  undefined: /* @__PURE__ */ __name(() => undefinedType2, "undefined"),
  union: /* @__PURE__ */ __name(() => unionType2, "union"),
  unknown: /* @__PURE__ */ __name(() => unknownType2, "unknown"),
  util: /* @__PURE__ */ __name(() => util2, "util"),
  void: /* @__PURE__ */ __name(() => voidType2, "void")
});
var init_external = __esm({
  "../node_modules/better-auth/node_modules/zod/dist/esm/v3/external.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_errors3();
    init_parseUtil();
    init_typeAliases();
    init_util7();
    init_types();
    init_ZodError();
  }
});
var init_v3 = __esm({
  "../node_modules/better-auth/node_modules/zod/dist/esm/v3/index.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_external();
    init_external();
  }
});
var init_esm2 = __esm({
  "../node_modules/better-auth/node_modules/zod/dist/esm/index.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_v3();
    init_v3();
  }
});
var BetterAuthError;
var init_better_auth_DdzSJf_n = __esm({
  "../node_modules/better-auth/dist/shared/better-auth.DdzSJf-n.mjs"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    BetterAuthError = class extends Error {
      static {
        __name(this, "BetterAuthError");
      }
      static {
        __name2(this, "BetterAuthError");
      }
      constructor(message2, cause) {
        super(message2);
        this.name = "BetterAuthError";
        this.message = message2;
        this.cause = cause;
        this.stack = "";
      }
    };
  }
});
var getDate;
var init_better_auth_CW6D9eSx = __esm({
  "../node_modules/better-auth/dist/shared/better-auth.CW6D9eSx.mjs"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    getDate = /* @__PURE__ */ __name2((span, unit = "ms") => {
      return new Date(Date.now() + (unit === "sec" ? span * 1e3 : span));
    }, "getDate");
  }
});
function toBoolean(val) {
  return val ? val !== "false" : false;
}
__name(toBoolean, "toBoolean");
var _envShim;
var _getEnv;
var env;
var nodeENV;
var isProduction;
var isDevelopment;
var isTest;
var init_better_auth_8zoxzg_F = __esm({
  "../node_modules/better-auth/dist/shared/better-auth.8zoxzg-F.mjs"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    _envShim = /* @__PURE__ */ Object.create(null);
    _getEnv = /* @__PURE__ */ __name2((useShim) => globalThis.process?.env || //@ts-expect-error
    globalThis.Deno?.env.toObject() || //@ts-expect-error
    globalThis.__env__ || (useShim ? _envShim : globalThis), "_getEnv");
    env = new Proxy(_envShim, {
      get(_, prop) {
        const env2 = _getEnv();
        return env2[prop] ?? _envShim[prop];
      },
      has(_, prop) {
        const env2 = _getEnv();
        return prop in env2 || prop in _envShim;
      },
      set(_, prop, value) {
        const env2 = _getEnv(true);
        env2[prop] = value;
        return true;
      },
      deleteProperty(_, prop) {
        if (!prop) {
          return false;
        }
        const env2 = _getEnv(true);
        delete env2[prop];
        return true;
      },
      ownKeys() {
        const env2 = _getEnv(true);
        return Object.keys(env2);
      }
    });
    __name2(toBoolean, "toBoolean");
    nodeENV = typeof process !== "undefined" && process.env && "undefined" || "";
    isProduction = nodeENV === "production";
    isDevelopment = nodeENV === "dev" || nodeENV === "development";
    isTest = nodeENV === "test" || toBoolean(env.TEST);
  }
});
function getAlphabet(urlSafe) {
  return urlSafe ? "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_" : "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
}
__name(getAlphabet, "getAlphabet");
function base64Encode(data, alphabet, padding) {
  let result = "";
  let buffer = 0;
  let shift = 0;
  for (const byte of data) {
    buffer = buffer << 8 | byte;
    shift += 8;
    while (shift >= 6) {
      shift -= 6;
      result += alphabet[buffer >> shift & 63];
    }
  }
  if (shift > 0) {
    result += alphabet[buffer << 6 - shift & 63];
  }
  if (padding) {
    const padCount = (4 - result.length % 4) % 4;
    result += "=".repeat(padCount);
  }
  return result;
}
__name(base64Encode, "base64Encode");
function base64Decode(data, alphabet) {
  const decodeMap = /* @__PURE__ */ new Map();
  for (let i = 0; i < alphabet.length; i++) {
    decodeMap.set(alphabet[i], i);
  }
  const result = [];
  let buffer = 0;
  let bitsCollected = 0;
  for (const char of data) {
    if (char === "=")
      break;
    const value = decodeMap.get(char);
    if (value === void 0) {
      throw new Error(`Invalid Base64 character: ${char}`);
    }
    buffer = buffer << 6 | value;
    bitsCollected += 6;
    if (bitsCollected >= 8) {
      bitsCollected -= 8;
      result.push(buffer >> bitsCollected & 255);
    }
  }
  return Uint8Array.from(result);
}
__name(base64Decode, "base64Decode");
var base64;
var base64Url;
var init_base642 = __esm({
  "../node_modules/@better-auth/utils/dist/base64.mjs"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    __name2(getAlphabet, "getAlphabet");
    __name2(base64Encode, "base64Encode");
    __name2(base64Decode, "base64Decode");
    base64 = {
      encode(data, options = {}) {
        const alphabet = getAlphabet(false);
        const buffer = typeof data === "string" ? new TextEncoder().encode(data) : new Uint8Array(data);
        return base64Encode(buffer, alphabet, options.padding ?? true);
      },
      decode(data) {
        if (typeof data !== "string") {
          data = new TextDecoder().decode(data);
        }
        const urlSafe = data.includes("-") || data.includes("_");
        const alphabet = getAlphabet(urlSafe);
        return base64Decode(data, alphabet);
      }
    };
    base64Url = {
      encode(data, options = {}) {
        const alphabet = getAlphabet(true);
        const buffer = typeof data === "string" ? new TextEncoder().encode(data) : new Uint8Array(data);
        return base64Encode(buffer, alphabet, options.padding ?? true);
      },
      decode(data) {
        const urlSafe = data.includes("-") || data.includes("_");
        const alphabet = getAlphabet(urlSafe);
        return base64Decode(data, alphabet);
      }
    };
  }
});
var hexadecimal;
var hex;
var init_hex = __esm({
  "../node_modules/@better-auth/utils/dist/hex.mjs"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    hexadecimal = "0123456789abcdef";
    hex = {
      encode: /* @__PURE__ */ __name2((data) => {
        if (typeof data === "string") {
          data = new TextEncoder().encode(data);
        }
        if (data.byteLength === 0) {
          return "";
        }
        const buffer = new Uint8Array(data);
        let result = "";
        for (const byte of buffer) {
          result += byte.toString(16).padStart(2, "0");
        }
        return result;
      }, "encode"),
      decode: /* @__PURE__ */ __name2((data) => {
        if (!data) {
          return "";
        }
        if (typeof data === "string") {
          if (data.length % 2 !== 0) {
            throw new Error("Invalid hexadecimal string");
          }
          if (!new RegExp(`^[${hexadecimal}]+$`).test(data)) {
            throw new Error("Invalid hexadecimal string");
          }
          const result = new Uint8Array(data.length / 2);
          for (let i = 0; i < data.length; i += 2) {
            result[i / 2] = parseInt(data.slice(i, i + 2), 16);
          }
          return new TextDecoder().decode(result);
        }
        return new TextDecoder().decode(data);
      }, "decode")
    };
  }
});
var createHMAC;
var init_hmac = __esm({
  "../node_modules/@better-auth/utils/dist/hmac.mjs"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_crypto_web();
    init_hex();
    init_base642();
    createHMAC = /* @__PURE__ */ __name2((algorithm2 = "SHA-256", encoding = "none") => {
      const hmac2 = {
        importKey: /* @__PURE__ */ __name2(async (key, keyUsage) => {
          return subtle.importKey(
            "raw",
            typeof key === "string" ? new TextEncoder().encode(key) : key,
            { name: "HMAC", hash: { name: algorithm2 } },
            false,
            [keyUsage]
          );
        }, "importKey"),
        sign: /* @__PURE__ */ __name2(async (hmacKey, data) => {
          if (typeof hmacKey === "string") {
            hmacKey = await hmac2.importKey(hmacKey, "sign");
          }
          const signature = await subtle.sign(
            "HMAC",
            hmacKey,
            typeof data === "string" ? new TextEncoder().encode(data) : data
          );
          if (encoding === "hex") {
            return hex.encode(signature);
          }
          if (encoding === "base64" || encoding === "base64url" || encoding === "base64urlnopad") {
            return base64Url.encode(signature, {
              padding: encoding !== "base64urlnopad"
            });
          }
          return signature;
        }, "sign"),
        verify: /* @__PURE__ */ __name2(async (hmacKey, data, signature) => {
          if (typeof hmacKey === "string") {
            hmacKey = await hmac2.importKey(hmacKey, "verify");
          }
          if (encoding === "hex") {
            signature = hex.decode(signature);
          }
          if (encoding === "base64" || encoding === "base64url" || encoding === "base64urlnopad") {
            signature = await base64.decode(signature);
          }
          return subtle.verify(
            "HMAC",
            hmacKey,
            typeof signature === "string" ? new TextEncoder().encode(signature) : signature,
            typeof data === "string" ? new TextEncoder().encode(data) : data
          );
        }, "verify")
      };
      return hmac2;
    }, "createHMAC");
  }
});
function safeJSONParse(data) {
  function reviver(_, value) {
    if (typeof value === "string") {
      const iso8601Regex = /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(?:\.\d+)?Z$/;
      if (iso8601Regex.test(value)) {
        const date = new Date(value);
        if (!isNaN(date.getTime())) {
          return date;
        }
      }
    }
    return value;
  }
  __name(reviver, "reviver");
  __name2(reviver, "reviver");
  try {
    return JSON.parse(data, reviver);
  } catch {
    return null;
  }
}
__name(safeJSONParse, "safeJSONParse");
var init_better_auth_tB5eU6EY = __esm({
  "../node_modules/better-auth/dist/shared/better-auth.tB5eU6EY.mjs"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    __name2(safeJSONParse, "safeJSONParse");
  }
});
function checkHasPath(url) {
  try {
    const parsedUrl = new URL(url);
    return parsedUrl.pathname !== "/";
  } catch (error2) {
    throw new BetterAuthError(
      `Invalid base URL: ${url}. Please provide a valid base URL.`
    );
  }
}
__name(checkHasPath, "checkHasPath");
function withPath(url, path = "/api/auth") {
  const hasPath = checkHasPath(url);
  if (hasPath) {
    return url;
  }
  path = path.startsWith("/") ? path : `/${path}`;
  return `${url.replace(/\/+$/, "")}${path}`;
}
__name(withPath, "withPath");
function getBaseURL(url, path, request) {
  if (url) {
    return withPath(url, path);
  }
  const fromEnv = env.BETTER_AUTH_URL || env.NEXT_PUBLIC_BETTER_AUTH_URL || env.PUBLIC_BETTER_AUTH_URL || env.NUXT_PUBLIC_BETTER_AUTH_URL || env.NUXT_PUBLIC_AUTH_URL || (env.BASE_URL !== "/" ? env.BASE_URL : void 0);
  if (fromEnv) {
    return withPath(fromEnv, path);
  }
  const fromRequest = request?.headers.get("x-forwarded-host");
  const fromRequestProto = request?.headers.get("x-forwarded-proto");
  if (fromRequest && fromRequestProto) {
    return withPath(`${fromRequestProto}://${fromRequest}`, path);
  }
  if (request) {
    const url2 = getOrigin(request.url);
    if (!url2) {
      throw new BetterAuthError(
        "Could not get origin from request. Please provide a valid base URL."
      );
    }
    return withPath(url2, path);
  }
  if (typeof window !== "undefined" && window.location) {
    return withPath(window.location.origin, path);
  }
  return void 0;
}
__name(getBaseURL, "getBaseURL");
function getOrigin(url) {
  try {
    const parsedUrl = new URL(url);
    return parsedUrl.origin;
  } catch (error2) {
    return null;
  }
}
__name(getOrigin, "getOrigin");
function getProtocol(url) {
  try {
    const parsedUrl = new URL(url);
    return parsedUrl.protocol;
  } catch (error2) {
    return null;
  }
}
__name(getProtocol, "getProtocol");
function getHost(url) {
  try {
    const parsedUrl = new URL(url);
    return parsedUrl.host;
  } catch (error2) {
    return url;
  }
}
__name(getHost, "getHost");
var init_better_auth_VTXNLFMT = __esm({
  "../node_modules/better-auth/dist/shared/better-auth.VTXNLFMT.mjs"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_better_auth_8zoxzg_F();
    init_better_auth_DdzSJf_n();
    __name2(checkHasPath, "checkHasPath");
    __name2(withPath, "withPath");
    __name2(getBaseURL, "getBaseURL");
    __name2(getOrigin, "getOrigin");
    __name2(getProtocol, "getProtocol");
    __name2(getHost, "getHost");
  }
});
function createCookieGetter(options) {
  const secure = options.advanced?.useSecureCookies !== void 0 ? options.advanced?.useSecureCookies : options.baseURL !== void 0 ? options.baseURL.startsWith("https://") ? true : false : isProduction;
  const secureCookiePrefix = secure ? "__Secure-" : "";
  const crossSubdomainEnabled = !!options.advanced?.crossSubDomainCookies?.enabled;
  const domain = crossSubdomainEnabled ? options.advanced?.crossSubDomainCookies?.domain || (options.baseURL ? new URL(options.baseURL).hostname : void 0) : void 0;
  if (crossSubdomainEnabled && !domain) {
    throw new BetterAuthError(
      "baseURL is required when crossSubdomainCookies are enabled"
    );
  }
  function createCookie(cookieName, overrideAttributes = {}) {
    const prefix = options.advanced?.cookiePrefix || "better-auth";
    const name = options.advanced?.cookies?.[cookieName]?.name || `${prefix}.${cookieName}`;
    const attributes = options.advanced?.cookies?.[cookieName]?.attributes;
    return {
      name: `${secureCookiePrefix}${name}`,
      attributes: {
        secure: !!secureCookiePrefix,
        sameSite: "lax",
        path: "/",
        httpOnly: true,
        ...crossSubdomainEnabled ? { domain } : {},
        ...options.advanced?.defaultCookieAttributes,
        ...overrideAttributes,
        ...attributes
      }
    };
  }
  __name(createCookie, "createCookie");
  __name2(createCookie, "createCookie");
  return createCookie;
}
__name(createCookieGetter, "createCookieGetter");
function getCookies(options) {
  const createCookie = createCookieGetter(options);
  const sessionMaxAge = options.session?.expiresIn || createTime(7, "d").toSeconds();
  const sessionToken = createCookie("session_token", {
    maxAge: sessionMaxAge
  });
  const sessionData = createCookie("session_data", {
    maxAge: options.session?.cookieCache?.maxAge || 60 * 5
  });
  const dontRememberToken = createCookie("dont_remember");
  return {
    sessionToken: {
      name: sessionToken.name,
      options: sessionToken.attributes
    },
    /**
     * This cookie is used to store the session data in the cookie
     * This is useful for when you want to cache the session in the cookie
     */
    sessionData: {
      name: sessionData.name,
      options: sessionData.attributes
    },
    dontRememberToken: {
      name: dontRememberToken.name,
      options: dontRememberToken.attributes
    }
  };
}
__name(getCookies, "getCookies");
async function setCookieCache(ctx, session) {
  const shouldStoreSessionDataInCookie = ctx.context.options.session?.cookieCache?.enabled;
  if (shouldStoreSessionDataInCookie) {
    const filteredSession = Object.entries(session.session).reduce(
      (acc, [key, value]) => {
        const fieldConfig = ctx.context.options.session?.additionalFields?.[key];
        if (!fieldConfig || fieldConfig.returned !== false) {
          acc[key] = value;
        }
        return acc;
      },
      {}
    );
    const sessionData = { session: filteredSession, user: session.user };
    const data = base64Url.encode(
      JSON.stringify({
        session: sessionData,
        expiresAt: getDate(
          ctx.context.authCookies.sessionData.options.maxAge || 60,
          "sec"
        ).getTime(),
        signature: await createHMAC("SHA-256", "base64urlnopad").sign(
          ctx.context.secret,
          JSON.stringify({
            ...sessionData,
            expiresAt: getDate(
              ctx.context.authCookies.sessionData.options.maxAge || 60,
              "sec"
            ).getTime()
          })
        )
      }),
      {
        padding: false
      }
    );
    if (data.length > 4093) {
      throw new BetterAuthError(
        "Session data is too large to store in the cookie. Please disable session cookie caching or reduce the size of the session data"
      );
    }
    ctx.setCookie(
      ctx.context.authCookies.sessionData.name,
      data,
      ctx.context.authCookies.sessionData.options
    );
  }
}
__name(setCookieCache, "setCookieCache");
async function setSessionCookie(ctx, session, dontRememberMe, overrides) {
  const dontRememberMeCookie = await ctx.getSignedCookie(
    ctx.context.authCookies.dontRememberToken.name,
    ctx.context.secret
  );
  dontRememberMe = dontRememberMe !== void 0 ? dontRememberMe : !!dontRememberMeCookie;
  const options = ctx.context.authCookies.sessionToken.options;
  const maxAge = dontRememberMe ? void 0 : ctx.context.sessionConfig.expiresIn;
  await ctx.setSignedCookie(
    ctx.context.authCookies.sessionToken.name,
    session.session.token,
    ctx.context.secret,
    {
      ...options,
      maxAge,
      ...overrides
    }
  );
  if (dontRememberMe) {
    await ctx.setSignedCookie(
      ctx.context.authCookies.dontRememberToken.name,
      "true",
      ctx.context.secret,
      ctx.context.authCookies.dontRememberToken.options
    );
  }
  await setCookieCache(ctx, session);
  ctx.context.setNewSession(session);
  if (ctx.context.options.secondaryStorage) {
    await ctx.context.secondaryStorage?.set(
      session.session.token,
      JSON.stringify({
        user: session.user,
        session: session.session
      }),
      Math.floor(
        (new Date(session.session.expiresAt).getTime() - Date.now()) / 1e3
      )
    );
  }
}
__name(setSessionCookie, "setSessionCookie");
function deleteSessionCookie(ctx, skipDontRememberMe) {
  ctx.setCookie(ctx.context.authCookies.sessionToken.name, "", {
    ...ctx.context.authCookies.sessionToken.options,
    maxAge: 0
  });
  ctx.setCookie(ctx.context.authCookies.sessionData.name, "", {
    ...ctx.context.authCookies.sessionData.options,
    maxAge: 0
  });
  if (!skipDontRememberMe) {
    ctx.setCookie(ctx.context.authCookies.dontRememberToken.name, "", {
      ...ctx.context.authCookies.dontRememberToken.options,
      maxAge: 0
    });
  }
}
__name(deleteSessionCookie, "deleteSessionCookie");
var createTime;
var parseTime;
var init_cookies = __esm({
  "../node_modules/better-auth/dist/cookies/index.mjs"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_better_auth_DdzSJf_n();
    init_better_auth_CW6D9eSx();
    init_better_auth_8zoxzg_F();
    init_base642();
    init_hmac();
    init_better_auth_tB5eU6EY();
    init_better_auth_VTXNLFMT();
    createTime = /* @__PURE__ */ __name2((value, format) => {
      const toMilliseconds = /* @__PURE__ */ __name2(() => {
        switch (format) {
          case "ms":
            return value;
          case "s":
            return value * 1e3;
          case "m":
            return value * 1e3 * 60;
          case "h":
            return value * 1e3 * 60 * 60;
          case "d":
            return value * 1e3 * 60 * 60 * 24;
          case "w":
            return value * 1e3 * 60 * 60 * 24 * 7;
          case "y":
            return value * 1e3 * 60 * 60 * 24 * 365;
        }
      }, "toMilliseconds");
      const time = {
        t: `${value}${format}`,
        value,
        tFormat: format,
        toMilliseconds,
        toSeconds: /* @__PURE__ */ __name2(() => time.toMilliseconds() / 1e3, "toSeconds"),
        toMinutes: /* @__PURE__ */ __name2(() => time.toSeconds() / 60, "toMinutes"),
        toHours: /* @__PURE__ */ __name2(() => time.toMinutes() / 60, "toHours"),
        toDays: /* @__PURE__ */ __name2(() => time.toHours() / 24, "toDays"),
        toWeeks: /* @__PURE__ */ __name2(() => time.toDays() / 7, "toWeeks"),
        toYears: /* @__PURE__ */ __name2(() => time.toDays() / 365, "toYears"),
        getDate: /* @__PURE__ */ __name2(() => new Date(Date.now() + time.toMilliseconds()), "getDate"),
        add: /* @__PURE__ */ __name2((other) => {
          const otherMs = typeof other === "string" ? parseTime(other).toMilliseconds() : other.toMilliseconds();
          return createTime(time.toMilliseconds() + otherMs, "ms");
        }, "add"),
        subtract: /* @__PURE__ */ __name2((other) => {
          const otherMs = typeof other === "string" ? parseTime(other).toMilliseconds() : other.toMilliseconds();
          return createTime(time.toMilliseconds() - otherMs, "ms");
        }, "subtract"),
        multiply: /* @__PURE__ */ __name2((factor) => createTime(time.toMilliseconds() * factor, "ms"), "multiply"),
        divide: /* @__PURE__ */ __name2((divisor) => createTime(time.toMilliseconds() / divisor, "ms"), "divide"),
        equals: /* @__PURE__ */ __name2((other) => {
          const otherMs = typeof other === "string" ? parseTime(other).toMilliseconds() : other.toMilliseconds();
          return time.toMilliseconds() === otherMs;
        }, "equals"),
        lessThan: /* @__PURE__ */ __name2((other) => {
          const otherMs = typeof other === "string" ? parseTime(other).toMilliseconds() : other.toMilliseconds();
          return time.toMilliseconds() < otherMs;
        }, "lessThan"),
        greaterThan: /* @__PURE__ */ __name2((other) => {
          const otherMs = typeof other === "string" ? parseTime(other).toMilliseconds() : other.toMilliseconds();
          return time.toMilliseconds() > otherMs;
        }, "greaterThan"),
        format: /* @__PURE__ */ __name2((pattern) => {
          const date = time.getDate();
          return pattern.replace(/YYYY|MM|DD|HH|mm|ss/g, (match2) => {
            switch (match2) {
              case "YYYY":
                return date.getFullYear().toString();
              case "MM":
                return (date.getMonth() + 1).toString().padStart(2, "0");
              case "DD":
                return date.getDate().toString().padStart(2, "0");
              case "HH":
                return date.getHours().toString().padStart(2, "0");
              case "mm":
                return date.getMinutes().toString().padStart(2, "0");
              case "ss":
                return date.getSeconds().toString().padStart(2, "0");
              default:
                return match2;
            }
          });
        }, "format"),
        fromNow: /* @__PURE__ */ __name2(() => {
          const ms = time.toMilliseconds();
          if (ms < 0) return time.ago();
          if (ms < 1e3) return "in a few seconds";
          if (ms < 6e4) return `in ${Math.round(ms / 1e3)} seconds`;
          if (ms < 36e5) return `in ${Math.round(ms / 6e4)} minutes`;
          if (ms < 864e5) return `in ${Math.round(ms / 36e5)} hours`;
          if (ms < 6048e5) return `in ${Math.round(ms / 864e5)} days`;
          if (ms < 26298e5) return `in ${Math.round(ms / 6048e5)} weeks`;
          if (ms < 315576e5) return `in ${Math.round(ms / 26298e5)} months`;
          return `in ${Math.round(ms / 315576e5)} years`;
        }, "fromNow"),
        ago: /* @__PURE__ */ __name2(() => {
          const ms = -time.toMilliseconds();
          if (ms < 0) return time.fromNow();
          if (ms < 1e3) return "a few seconds ago";
          if (ms < 6e4) return `${Math.round(ms / 1e3)} seconds ago`;
          if (ms < 36e5) return `${Math.round(ms / 6e4)} minutes ago`;
          if (ms < 864e5) return `${Math.round(ms / 36e5)} hours ago`;
          if (ms < 6048e5) return `${Math.round(ms / 864e5)} days ago`;
          if (ms < 26298e5) return `${Math.round(ms / 6048e5)} weeks ago`;
          if (ms < 315576e5) return `${Math.round(ms / 26298e5)} months ago`;
          return `${Math.round(ms / 315576e5)} years ago`;
        }, "ago")
      };
      return time;
    }, "createTime");
    parseTime = /* @__PURE__ */ __name2((time) => {
      const match2 = time.match(/^(\d+)(ms|s|m|h|d|w|y)$/);
      if (!match2) throw new Error("Invalid time format");
      return createTime(parseInt(match2[1]), match2[2]);
    }, "parseTime");
    __name2(createCookieGetter, "createCookieGetter");
    __name2(getCookies, "getCookies");
    __name2(setCookieCache, "setCookieCache");
    __name2(setSessionCookie, "setSessionCookie");
    __name2(deleteSessionCookie, "deleteSessionCookie");
  }
});
function createRetryStrategy(options) {
  if (typeof options === "number") {
    return new LinearRetryStrategy({
      type: "linear",
      attempts: options,
      delay: 1e3
    });
  }
  switch (options.type) {
    case "linear":
      return new LinearRetryStrategy(options);
    case "exponential":
      return new ExponentialRetryStrategy(options);
    default:
      throw new Error("Invalid retry strategy");
  }
}
__name(createRetryStrategy, "createRetryStrategy");
function detectResponseType(request) {
  const _contentType = request.headers.get("content-type");
  const textTypes = /* @__PURE__ */ new Set([
    "image/svg",
    "application/xml",
    "application/xhtml",
    "application/html"
  ]);
  if (!_contentType) {
    return "json";
  }
  const contentType = _contentType.split(";").shift() || "";
  if (JSON_RE.test(contentType)) {
    return "json";
  }
  if (textTypes.has(contentType) || contentType.startsWith("text/")) {
    return "text";
  }
  return "blob";
}
__name(detectResponseType, "detectResponseType");
function isJSONParsable(value) {
  try {
    JSON.parse(value);
    return true;
  } catch (error2) {
    return false;
  }
}
__name(isJSONParsable, "isJSONParsable");
function isJSONSerializable2(value) {
  if (value === void 0) {
    return false;
  }
  const t = typeof value;
  if (t === "string" || t === "number" || t === "boolean" || t === null) {
    return true;
  }
  if (t !== "object") {
    return false;
  }
  if (Array.isArray(value)) {
    return true;
  }
  if (value.buffer) {
    return false;
  }
  return value.constructor && value.constructor.name === "Object" || typeof value.toJSON === "function";
}
__name(isJSONSerializable2, "isJSONSerializable2");
function jsonParse(text) {
  try {
    return JSON.parse(text);
  } catch (error2) {
    return text;
  }
}
__name(jsonParse, "jsonParse");
function isFunction2(value) {
  return typeof value === "function";
}
__name(isFunction2, "isFunction2");
function getFetch(options) {
  if (options == null ? void 0 : options.customFetchImpl) {
    return options.customFetchImpl;
  }
  if (typeof globalThis !== "undefined" && isFunction2(globalThis.fetch)) {
    return globalThis.fetch;
  }
  if (typeof window !== "undefined" && isFunction2(window.fetch)) {
    return window.fetch;
  }
  throw new Error("No fetch implementation found");
}
__name(getFetch, "getFetch");
async function getHeaders(opts) {
  const headers = new Headers(opts == null ? void 0 : opts.headers);
  const authHeader = await getAuthHeader(opts);
  for (const [key, value] of Object.entries(authHeader || {})) {
    headers.set(key, value);
  }
  if (!headers.has("content-type")) {
    const t = detectContentType(opts == null ? void 0 : opts.body);
    if (t) {
      headers.set("content-type", t);
    }
  }
  return headers;
}
__name(getHeaders, "getHeaders");
function detectContentType(body) {
  if (isJSONSerializable2(body)) {
    return "application/json";
  }
  return null;
}
__name(detectContentType, "detectContentType");
function getBody2(options) {
  if (!(options == null ? void 0 : options.body)) {
    return null;
  }
  const headers = new Headers(options == null ? void 0 : options.headers);
  if (isJSONSerializable2(options.body) && !headers.has("content-type")) {
    for (const [key, value] of Object.entries(options == null ? void 0 : options.body)) {
      if (value instanceof Date) {
        options.body[key] = value.toISOString();
      }
    }
    return JSON.stringify(options.body);
  }
  return options.body;
}
__name(getBody2, "getBody2");
function getMethod(url, options) {
  var _a;
  if (options == null ? void 0 : options.method) {
    return options.method.toUpperCase();
  }
  if (url.startsWith("@")) {
    const pMethod = (_a = url.split("@")[1]) == null ? void 0 : _a.split("/")[0];
    if (!methods.includes(pMethod)) {
      return (options == null ? void 0 : options.body) ? "POST" : "GET";
    }
    return pMethod.toUpperCase();
  }
  return (options == null ? void 0 : options.body) ? "POST" : "GET";
}
__name(getMethod, "getMethod");
function getTimeout(options, controller) {
  let abortTimeout;
  if (!(options == null ? void 0 : options.signal) && (options == null ? void 0 : options.timeout)) {
    abortTimeout = setTimeout(() => controller == null ? void 0 : controller.abort(), options == null ? void 0 : options.timeout);
  }
  return {
    abortTimeout,
    clearTimeout: /* @__PURE__ */ __name2(() => {
      if (abortTimeout) {
        clearTimeout(abortTimeout);
      }
    }, "clearTimeout")
  };
}
__name(getTimeout, "getTimeout");
async function parseStandardSchema(schema2, input) {
  let result = await schema2["~standard"].validate(input);
  if (result.issues) {
    throw new ValidationError(result.issues);
  }
  return result.value;
}
__name(parseStandardSchema, "parseStandardSchema");
function getURL2(url, option) {
  let { baseURL, params, query } = option || {
    query: {},
    params: {},
    baseURL: ""
  };
  let basePath = url.startsWith("http") ? url.split("/").slice(0, 3).join("/") : baseURL || "";
  if (url.startsWith("@")) {
    const m = url.toString().split("@")[1].split("/")[0];
    if (methods.includes(m)) {
      url = url.replace(`@${m}/`, "/");
    }
  }
  if (!basePath.endsWith("/")) basePath += "/";
  let [path, urlQuery] = url.replace(basePath, "").split("?");
  const queryParams = new URLSearchParams(urlQuery);
  for (const [key, value] of Object.entries(query || {})) {
    if (value == null) continue;
    queryParams.set(key, String(value));
  }
  if (params) {
    if (Array.isArray(params)) {
      const paramPaths = path.split("/").filter((p) => p.startsWith(":"));
      for (const [index, key] of paramPaths.entries()) {
        const value = params[index];
        path = path.replace(key, value);
      }
    } else {
      for (const [key, value] of Object.entries(params)) {
        path = path.replace(`:${key}`, String(value));
      }
    }
  }
  path = path.split("/").map(encodeURIComponent).join("/");
  if (path.startsWith("/")) path = path.slice(1);
  let queryParamString = queryParams.toString();
  queryParamString = queryParamString.length > 0 ? `?${queryParamString}`.replace(/\+/g, "%20") : "";
  if (!basePath.startsWith("http")) {
    return `${basePath}${path}${queryParamString}`;
  }
  const _url = new URL(`${path}${queryParamString}`, basePath);
  return _url;
}
__name(getURL2, "getURL2");
var __defProp22;
var __defProps;
var __getOwnPropDescs;
var __getOwnPropSymbols;
var __hasOwnProp2;
var __propIsEnum;
var __defNormalProp;
var __spreadValues;
var __spreadProps;
var BetterFetchError;
var initializePlugins;
var LinearRetryStrategy;
var ExponentialRetryStrategy;
var getAuthHeader;
var JSON_RE;
var ValidationError;
var methods;
var betterFetch;
var init_dist3 = __esm({
  "../node_modules/@better-fetch/fetch/dist/index.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    __defProp22 = Object.defineProperty;
    __defProps = Object.defineProperties;
    __getOwnPropDescs = Object.getOwnPropertyDescriptors;
    __getOwnPropSymbols = Object.getOwnPropertySymbols;
    __hasOwnProp2 = Object.prototype.hasOwnProperty;
    __propIsEnum = Object.prototype.propertyIsEnumerable;
    __defNormalProp = /* @__PURE__ */ __name2((obj, key, value) => key in obj ? __defProp22(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value, "__defNormalProp");
    __spreadValues = /* @__PURE__ */ __name2((a, b) => {
      for (var prop in b || (b = {}))
        if (__hasOwnProp2.call(b, prop))
          __defNormalProp(a, prop, b[prop]);
      if (__getOwnPropSymbols)
        for (var prop of __getOwnPropSymbols(b)) {
          if (__propIsEnum.call(b, prop))
            __defNormalProp(a, prop, b[prop]);
        }
      return a;
    }, "__spreadValues");
    __spreadProps = /* @__PURE__ */ __name2((a, b) => __defProps(a, __getOwnPropDescs(b)), "__spreadProps");
    BetterFetchError = class extends Error {
      static {
        __name(this, "BetterFetchError");
      }
      static {
        __name2(this, "BetterFetchError");
      }
      constructor(status, statusText, error2) {
        super(statusText || status.toString(), {
          cause: error2
        });
        this.status = status;
        this.statusText = statusText;
        this.error = error2;
      }
    };
    initializePlugins = /* @__PURE__ */ __name2(async (url, options) => {
      var _a, _b, _c, _d, _e, _f;
      let opts = options || {};
      const hooks = {
        onRequest: [options == null ? void 0 : options.onRequest],
        onResponse: [options == null ? void 0 : options.onResponse],
        onSuccess: [options == null ? void 0 : options.onSuccess],
        onError: [options == null ? void 0 : options.onError],
        onRetry: [options == null ? void 0 : options.onRetry]
      };
      if (!options || !(options == null ? void 0 : options.plugins)) {
        return {
          url,
          options: opts,
          hooks
        };
      }
      for (const plugin of (options == null ? void 0 : options.plugins) || []) {
        if (plugin.init) {
          const pluginRes = await ((_a = plugin.init) == null ? void 0 : _a.call(plugin, url.toString(), options));
          opts = pluginRes.options || opts;
          url = pluginRes.url;
        }
        hooks.onRequest.push((_b = plugin.hooks) == null ? void 0 : _b.onRequest);
        hooks.onResponse.push((_c = plugin.hooks) == null ? void 0 : _c.onResponse);
        hooks.onSuccess.push((_d = plugin.hooks) == null ? void 0 : _d.onSuccess);
        hooks.onError.push((_e = plugin.hooks) == null ? void 0 : _e.onError);
        hooks.onRetry.push((_f = plugin.hooks) == null ? void 0 : _f.onRetry);
      }
      return {
        url,
        options: opts,
        hooks
      };
    }, "initializePlugins");
    LinearRetryStrategy = class {
      static {
        __name(this, "LinearRetryStrategy");
      }
      static {
        __name2(this, "LinearRetryStrategy");
      }
      constructor(options) {
        this.options = options;
      }
      shouldAttemptRetry(attempt, response) {
        if (this.options.shouldRetry) {
          return Promise.resolve(
            attempt < this.options.attempts && this.options.shouldRetry(response)
          );
        }
        return Promise.resolve(attempt < this.options.attempts);
      }
      getDelay() {
        return this.options.delay;
      }
    };
    ExponentialRetryStrategy = class {
      static {
        __name(this, "ExponentialRetryStrategy");
      }
      static {
        __name2(this, "ExponentialRetryStrategy");
      }
      constructor(options) {
        this.options = options;
      }
      shouldAttemptRetry(attempt, response) {
        if (this.options.shouldRetry) {
          return Promise.resolve(
            attempt < this.options.attempts && this.options.shouldRetry(response)
          );
        }
        return Promise.resolve(attempt < this.options.attempts);
      }
      getDelay(attempt) {
        const delay = Math.min(
          this.options.maxDelay,
          this.options.baseDelay * 2 ** attempt
        );
        return delay;
      }
    };
    __name2(createRetryStrategy, "createRetryStrategy");
    getAuthHeader = /* @__PURE__ */ __name2(async (options) => {
      const headers = {};
      const getValue = /* @__PURE__ */ __name2(async (value) => typeof value === "function" ? await value() : value, "getValue");
      if (options == null ? void 0 : options.auth) {
        if (options.auth.type === "Bearer") {
          const token = await getValue(options.auth.token);
          if (!token) {
            return headers;
          }
          headers["authorization"] = `Bearer ${token}`;
        } else if (options.auth.type === "Basic") {
          const username = getValue(options.auth.username);
          const password = getValue(options.auth.password);
          if (!username || !password) {
            return headers;
          }
          headers["authorization"] = `Basic ${btoa(`${username}:${password}`)}`;
        } else if (options.auth.type === "Custom") {
          const value = getValue(options.auth.value);
          if (!value) {
            return headers;
          }
          headers["authorization"] = `${getValue(options.auth.prefix)} ${value}`;
        }
      }
      return headers;
    }, "getAuthHeader");
    JSON_RE = /^application\/(?:[\w!#$%&*.^`~-]*\+)?json(;.+)?$/i;
    __name2(detectResponseType, "detectResponseType");
    __name2(isJSONParsable, "isJSONParsable");
    __name2(isJSONSerializable2, "isJSONSerializable");
    __name2(jsonParse, "jsonParse");
    __name2(isFunction2, "isFunction");
    __name2(getFetch, "getFetch");
    __name2(getHeaders, "getHeaders");
    __name2(detectContentType, "detectContentType");
    __name2(getBody2, "getBody");
    __name2(getMethod, "getMethod");
    __name2(getTimeout, "getTimeout");
    ValidationError = class _ValidationError extends Error {
      static {
        __name(this, "_ValidationError");
      }
      static {
        __name2(this, "_ValidationError");
      }
      constructor(issues, message2) {
        super(message2 || JSON.stringify(issues, null, 2));
        this.issues = issues;
        Object.setPrototypeOf(this, _ValidationError.prototype);
      }
    };
    __name2(parseStandardSchema, "parseStandardSchema");
    methods = ["get", "post", "put", "patch", "delete"];
    __name2(getURL2, "getURL2");
    betterFetch = /* @__PURE__ */ __name2(async (url, options) => {
      var _a, _b, _c, _d, _e, _f, _g, _h;
      const {
        hooks,
        url: __url,
        options: opts
      } = await initializePlugins(url, options);
      const fetch2 = getFetch(opts);
      const controller = new AbortController();
      const signal = (_a = opts.signal) != null ? _a : controller.signal;
      const _url = getURL2(__url, opts);
      const body = getBody2(opts);
      const headers = await getHeaders(opts);
      const method = getMethod(__url, opts);
      let context = __spreadProps(__spreadValues({}, opts), {
        url: _url,
        headers,
        body,
        method,
        signal
      });
      for (const onRequest10 of hooks.onRequest) {
        if (onRequest10) {
          const res = await onRequest10(context);
          if (res instanceof Object) {
            context = res;
          }
        }
      }
      if ("pipeTo" in context && typeof context.pipeTo === "function" || typeof ((_b = options == null ? void 0 : options.body) == null ? void 0 : _b.pipe) === "function") {
        if (!("duplex" in context)) {
          context.duplex = "half";
        }
      }
      const { clearTimeout: clearTimeout2 } = getTimeout(opts, controller);
      let response = await fetch2(context.url, context);
      clearTimeout2();
      const responseContext = {
        response,
        request: context
      };
      for (const onResponse of hooks.onResponse) {
        if (onResponse) {
          const r = await onResponse(__spreadProps(__spreadValues({}, responseContext), {
            response: ((_c = options == null ? void 0 : options.hookOptions) == null ? void 0 : _c.cloneResponse) ? response.clone() : response
          }));
          if (r instanceof Response) {
            response = r;
          } else if (r instanceof Object) {
            response = r.response;
          }
        }
      }
      if (response.ok) {
        const hasBody = context.method !== "HEAD";
        if (!hasBody) {
          return {
            data: "",
            error: null
          };
        }
        const responseType = detectResponseType(response);
        const successContext = {
          data: "",
          response,
          request: context
        };
        if (responseType === "json" || responseType === "text") {
          const text = await response.text();
          const parser2 = (_d = context.jsonParser) != null ? _d : jsonParse;
          const data = await parser2(text);
          successContext.data = data;
        } else {
          successContext.data = await response[responseType]();
        }
        if (context == null ? void 0 : context.output) {
          if (context.output && !context.disableValidation) {
            successContext.data = await parseStandardSchema(
              context.output,
              successContext.data
            );
          }
        }
        for (const onSuccess of hooks.onSuccess) {
          if (onSuccess) {
            await onSuccess(__spreadProps(__spreadValues({}, successContext), {
              response: ((_e = options == null ? void 0 : options.hookOptions) == null ? void 0 : _e.cloneResponse) ? response.clone() : response
            }));
          }
        }
        if (options == null ? void 0 : options.throw) {
          return successContext.data;
        }
        return {
          data: successContext.data,
          error: null
        };
      }
      const parser = (_f = options == null ? void 0 : options.jsonParser) != null ? _f : jsonParse;
      const responseText = await response.text();
      const isJSONResponse = isJSONParsable(responseText);
      const errorObject = isJSONResponse ? await parser(responseText) : null;
      const errorContext = {
        response,
        responseText,
        request: context,
        error: __spreadProps(__spreadValues({}, errorObject), {
          status: response.status,
          statusText: response.statusText
        })
      };
      for (const onError of hooks.onError) {
        if (onError) {
          await onError(__spreadProps(__spreadValues({}, errorContext), {
            response: ((_g = options == null ? void 0 : options.hookOptions) == null ? void 0 : _g.cloneResponse) ? response.clone() : response
          }));
        }
      }
      if (options == null ? void 0 : options.retry) {
        const retryStrategy = createRetryStrategy(options.retry);
        const _retryAttempt = (_h = options.retryAttempt) != null ? _h : 0;
        if (await retryStrategy.shouldAttemptRetry(_retryAttempt, response)) {
          for (const onRetry of hooks.onRetry) {
            if (onRetry) {
              await onRetry(responseContext);
            }
          }
          const delay = retryStrategy.getDelay(_retryAttempt);
          await new Promise((resolve) => setTimeout(resolve, delay));
          return await betterFetch(url, __spreadProps(__spreadValues({}, options), {
            retryAttempt: _retryAttempt + 1
          }));
        }
      }
      if (options == null ? void 0 : options.throw) {
        throw new BetterFetchError(
          response.status,
          response.statusText,
          isJSONResponse ? errorObject : responseText
        );
      }
      return {
        data: null,
        error: __spreadProps(__spreadValues({}, errorObject), {
          status: response.status,
          statusText: response.statusText
        })
      };
    }, "betterFetch");
  }
});
var webcrypto_default;
var isCryptoKey;
var init_webcrypto = __esm({
  "../node_modules/jose/dist/browser/runtime/webcrypto.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    webcrypto_default = crypto;
    isCryptoKey = /* @__PURE__ */ __name2((key) => key instanceof CryptoKey, "isCryptoKey");
  }
});
function concat(...buffers) {
  const size = buffers.reduce((acc, { length }) => acc + length, 0);
  const buf = new Uint8Array(size);
  let i = 0;
  for (const buffer of buffers) {
    buf.set(buffer, i);
    i += buffer.length;
  }
  return buf;
}
__name(concat, "concat");
var encoder;
var decoder;
var MAX_INT32;
var init_buffer_utils = __esm({
  "../node_modules/jose/dist/browser/lib/buffer_utils.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    encoder = new TextEncoder();
    decoder = new TextDecoder();
    MAX_INT32 = 2 ** 32;
    __name2(concat, "concat");
  }
});
var encodeBase64;
var encode2;
var decodeBase64;
var decode2;
var init_base64url = __esm({
  "../node_modules/jose/dist/browser/runtime/base64url.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_buffer_utils();
    encodeBase64 = /* @__PURE__ */ __name2((input) => {
      let unencoded = input;
      if (typeof unencoded === "string") {
        unencoded = encoder.encode(unencoded);
      }
      const CHUNK_SIZE = 32768;
      const arr = [];
      for (let i = 0; i < unencoded.length; i += CHUNK_SIZE) {
        arr.push(String.fromCharCode.apply(null, unencoded.subarray(i, i + CHUNK_SIZE)));
      }
      return btoa(arr.join(""));
    }, "encodeBase64");
    encode2 = /* @__PURE__ */ __name2((input) => {
      return encodeBase64(input).replace(/=/g, "").replace(/\+/g, "-").replace(/\//g, "_");
    }, "encode");
    decodeBase64 = /* @__PURE__ */ __name2((encoded) => {
      const binary2 = atob(encoded);
      const bytes = new Uint8Array(binary2.length);
      for (let i = 0; i < binary2.length; i++) {
        bytes[i] = binary2.charCodeAt(i);
      }
      return bytes;
    }, "decodeBase64");
    decode2 = /* @__PURE__ */ __name2((input) => {
      let encoded = input;
      if (encoded instanceof Uint8Array) {
        encoded = decoder.decode(encoded);
      }
      encoded = encoded.replace(/-/g, "+").replace(/_/g, "/").replace(/\s/g, "");
      try {
        return decodeBase64(encoded);
      } catch {
        throw new TypeError("The input to be decoded is not correctly encoded.");
      }
    }, "decode");
  }
});
var JOSEError;
var JWTClaimValidationFailed;
var JWTExpired;
var JOSEAlgNotAllowed;
var JOSENotSupported;
var JWEDecryptionFailed;
var JWEInvalid;
var JWSInvalid;
var JWTInvalid;
var JWKInvalid;
var JWKSInvalid;
var JWKSNoMatchingKey;
var JWKSMultipleMatchingKeys;
var JWKSTimeout;
var JWSSignatureVerificationFailed;
var init_errors4 = __esm({
  "../node_modules/jose/dist/browser/util/errors.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    JOSEError = class extends Error {
      static {
        __name(this, "JOSEError");
      }
      static {
        __name2(this, "JOSEError");
      }
      constructor(message2, options) {
        super(message2, options);
        this.code = "ERR_JOSE_GENERIC";
        this.name = this.constructor.name;
        Error.captureStackTrace?.(this, this.constructor);
      }
    };
    JOSEError.code = "ERR_JOSE_GENERIC";
    JWTClaimValidationFailed = class extends JOSEError {
      static {
        __name(this, "JWTClaimValidationFailed");
      }
      static {
        __name2(this, "JWTClaimValidationFailed");
      }
      constructor(message2, payload, claim = "unspecified", reason = "unspecified") {
        super(message2, { cause: { claim, reason, payload } });
        this.code = "ERR_JWT_CLAIM_VALIDATION_FAILED";
        this.claim = claim;
        this.reason = reason;
        this.payload = payload;
      }
    };
    JWTClaimValidationFailed.code = "ERR_JWT_CLAIM_VALIDATION_FAILED";
    JWTExpired = class extends JOSEError {
      static {
        __name(this, "JWTExpired");
      }
      static {
        __name2(this, "JWTExpired");
      }
      constructor(message2, payload, claim = "unspecified", reason = "unspecified") {
        super(message2, { cause: { claim, reason, payload } });
        this.code = "ERR_JWT_EXPIRED";
        this.claim = claim;
        this.reason = reason;
        this.payload = payload;
      }
    };
    JWTExpired.code = "ERR_JWT_EXPIRED";
    JOSEAlgNotAllowed = class extends JOSEError {
      static {
        __name(this, "JOSEAlgNotAllowed");
      }
      static {
        __name2(this, "JOSEAlgNotAllowed");
      }
      constructor() {
        super(...arguments);
        this.code = "ERR_JOSE_ALG_NOT_ALLOWED";
      }
    };
    JOSEAlgNotAllowed.code = "ERR_JOSE_ALG_NOT_ALLOWED";
    JOSENotSupported = class extends JOSEError {
      static {
        __name(this, "JOSENotSupported");
      }
      static {
        __name2(this, "JOSENotSupported");
      }
      constructor() {
        super(...arguments);
        this.code = "ERR_JOSE_NOT_SUPPORTED";
      }
    };
    JOSENotSupported.code = "ERR_JOSE_NOT_SUPPORTED";
    JWEDecryptionFailed = class extends JOSEError {
      static {
        __name(this, "JWEDecryptionFailed");
      }
      static {
        __name2(this, "JWEDecryptionFailed");
      }
      constructor(message2 = "decryption operation failed", options) {
        super(message2, options);
        this.code = "ERR_JWE_DECRYPTION_FAILED";
      }
    };
    JWEDecryptionFailed.code = "ERR_JWE_DECRYPTION_FAILED";
    JWEInvalid = class extends JOSEError {
      static {
        __name(this, "JWEInvalid");
      }
      static {
        __name2(this, "JWEInvalid");
      }
      constructor() {
        super(...arguments);
        this.code = "ERR_JWE_INVALID";
      }
    };
    JWEInvalid.code = "ERR_JWE_INVALID";
    JWSInvalid = class extends JOSEError {
      static {
        __name(this, "JWSInvalid");
      }
      static {
        __name2(this, "JWSInvalid");
      }
      constructor() {
        super(...arguments);
        this.code = "ERR_JWS_INVALID";
      }
    };
    JWSInvalid.code = "ERR_JWS_INVALID";
    JWTInvalid = class extends JOSEError {
      static {
        __name(this, "JWTInvalid");
      }
      static {
        __name2(this, "JWTInvalid");
      }
      constructor() {
        super(...arguments);
        this.code = "ERR_JWT_INVALID";
      }
    };
    JWTInvalid.code = "ERR_JWT_INVALID";
    JWKInvalid = class extends JOSEError {
      static {
        __name(this, "JWKInvalid");
      }
      static {
        __name2(this, "JWKInvalid");
      }
      constructor() {
        super(...arguments);
        this.code = "ERR_JWK_INVALID";
      }
    };
    JWKInvalid.code = "ERR_JWK_INVALID";
    JWKSInvalid = class extends JOSEError {
      static {
        __name(this, "JWKSInvalid");
      }
      static {
        __name2(this, "JWKSInvalid");
      }
      constructor() {
        super(...arguments);
        this.code = "ERR_JWKS_INVALID";
      }
    };
    JWKSInvalid.code = "ERR_JWKS_INVALID";
    JWKSNoMatchingKey = class extends JOSEError {
      static {
        __name(this, "JWKSNoMatchingKey");
      }
      static {
        __name2(this, "JWKSNoMatchingKey");
      }
      constructor(message2 = "no applicable key found in the JSON Web Key Set", options) {
        super(message2, options);
        this.code = "ERR_JWKS_NO_MATCHING_KEY";
      }
    };
    JWKSNoMatchingKey.code = "ERR_JWKS_NO_MATCHING_KEY";
    JWKSMultipleMatchingKeys = class extends JOSEError {
      static {
        __name(this, "JWKSMultipleMatchingKeys");
      }
      static {
        __name2(this, "JWKSMultipleMatchingKeys");
      }
      constructor(message2 = "multiple matching keys found in the JSON Web Key Set", options) {
        super(message2, options);
        this.code = "ERR_JWKS_MULTIPLE_MATCHING_KEYS";
      }
    };
    JWKSMultipleMatchingKeys.code = "ERR_JWKS_MULTIPLE_MATCHING_KEYS";
    JWKSTimeout = class extends JOSEError {
      static {
        __name(this, "JWKSTimeout");
      }
      static {
        __name2(this, "JWKSTimeout");
      }
      constructor(message2 = "request timed out", options) {
        super(message2, options);
        this.code = "ERR_JWKS_TIMEOUT";
      }
    };
    JWKSTimeout.code = "ERR_JWKS_TIMEOUT";
    JWSSignatureVerificationFailed = class extends JOSEError {
      static {
        __name(this, "JWSSignatureVerificationFailed");
      }
      static {
        __name2(this, "JWSSignatureVerificationFailed");
      }
      constructor(message2 = "signature verification failed", options) {
        super(message2, options);
        this.code = "ERR_JWS_SIGNATURE_VERIFICATION_FAILED";
      }
    };
    JWSSignatureVerificationFailed.code = "ERR_JWS_SIGNATURE_VERIFICATION_FAILED";
  }
});
function unusable(name, prop = "algorithm.name") {
  return new TypeError(`CryptoKey does not support this operation, its ${prop} must be ${name}`);
}
__name(unusable, "unusable");
function isAlgorithm(algorithm2, name) {
  return algorithm2.name === name;
}
__name(isAlgorithm, "isAlgorithm");
function getHashLength(hash) {
  return parseInt(hash.name.slice(4), 10);
}
__name(getHashLength, "getHashLength");
function getNamedCurve(alg) {
  switch (alg) {
    case "ES256":
      return "P-256";
    case "ES384":
      return "P-384";
    case "ES512":
      return "P-521";
    default:
      throw new Error("unreachable");
  }
}
__name(getNamedCurve, "getNamedCurve");
function checkUsage(key, usages) {
  if (usages.length && !usages.some((expected) => key.usages.includes(expected))) {
    let msg = "CryptoKey does not support this operation, its usages must include ";
    if (usages.length > 2) {
      const last = usages.pop();
      msg += `one of ${usages.join(", ")}, or ${last}.`;
    } else if (usages.length === 2) {
      msg += `one of ${usages[0]} or ${usages[1]}.`;
    } else {
      msg += `${usages[0]}.`;
    }
    throw new TypeError(msg);
  }
}
__name(checkUsage, "checkUsage");
function checkSigCryptoKey(key, alg, ...usages) {
  switch (alg) {
    case "HS256":
    case "HS384":
    case "HS512": {
      if (!isAlgorithm(key.algorithm, "HMAC"))
        throw unusable("HMAC");
      const expected = parseInt(alg.slice(2), 10);
      const actual = getHashLength(key.algorithm.hash);
      if (actual !== expected)
        throw unusable(`SHA-${expected}`, "algorithm.hash");
      break;
    }
    case "RS256":
    case "RS384":
    case "RS512": {
      if (!isAlgorithm(key.algorithm, "RSASSA-PKCS1-v1_5"))
        throw unusable("RSASSA-PKCS1-v1_5");
      const expected = parseInt(alg.slice(2), 10);
      const actual = getHashLength(key.algorithm.hash);
      if (actual !== expected)
        throw unusable(`SHA-${expected}`, "algorithm.hash");
      break;
    }
    case "PS256":
    case "PS384":
    case "PS512": {
      if (!isAlgorithm(key.algorithm, "RSA-PSS"))
        throw unusable("RSA-PSS");
      const expected = parseInt(alg.slice(2), 10);
      const actual = getHashLength(key.algorithm.hash);
      if (actual !== expected)
        throw unusable(`SHA-${expected}`, "algorithm.hash");
      break;
    }
    case "EdDSA": {
      if (key.algorithm.name !== "Ed25519" && key.algorithm.name !== "Ed448") {
        throw unusable("Ed25519 or Ed448");
      }
      break;
    }
    case "Ed25519": {
      if (!isAlgorithm(key.algorithm, "Ed25519"))
        throw unusable("Ed25519");
      break;
    }
    case "ES256":
    case "ES384":
    case "ES512": {
      if (!isAlgorithm(key.algorithm, "ECDSA"))
        throw unusable("ECDSA");
      const expected = getNamedCurve(alg);
      const actual = key.algorithm.namedCurve;
      if (actual !== expected)
        throw unusable(expected, "algorithm.namedCurve");
      break;
    }
    default:
      throw new TypeError("CryptoKey does not support this operation");
  }
  checkUsage(key, usages);
}
__name(checkSigCryptoKey, "checkSigCryptoKey");
var init_crypto_key = __esm({
  "../node_modules/jose/dist/browser/lib/crypto_key.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    __name2(unusable, "unusable");
    __name2(isAlgorithm, "isAlgorithm");
    __name2(getHashLength, "getHashLength");
    __name2(getNamedCurve, "getNamedCurve");
    __name2(checkUsage, "checkUsage");
    __name2(checkSigCryptoKey, "checkSigCryptoKey");
  }
});
function message(msg, actual, ...types2) {
  types2 = types2.filter(Boolean);
  if (types2.length > 2) {
    const last = types2.pop();
    msg += `one of type ${types2.join(", ")}, or ${last}.`;
  } else if (types2.length === 2) {
    msg += `one of type ${types2[0]} or ${types2[1]}.`;
  } else {
    msg += `of type ${types2[0]}.`;
  }
  if (actual == null) {
    msg += ` Received ${actual}`;
  } else if (typeof actual === "function" && actual.name) {
    msg += ` Received function ${actual.name}`;
  } else if (typeof actual === "object" && actual != null) {
    if (actual.constructor?.name) {
      msg += ` Received an instance of ${actual.constructor.name}`;
    }
  }
  return msg;
}
__name(message, "message");
function withAlg(alg, actual, ...types2) {
  return message(`Key for the ${alg} algorithm must be `, actual, ...types2);
}
__name(withAlg, "withAlg");
var invalid_key_input_default;
var init_invalid_key_input = __esm({
  "../node_modules/jose/dist/browser/lib/invalid_key_input.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    __name2(message, "message");
    invalid_key_input_default = /* @__PURE__ */ __name2((actual, ...types2) => {
      return message("Key must be ", actual, ...types2);
    }, "default");
    __name2(withAlg, "withAlg");
  }
});
var is_key_like_default;
var types;
var init_is_key_like = __esm({
  "../node_modules/jose/dist/browser/runtime/is_key_like.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_webcrypto();
    is_key_like_default = /* @__PURE__ */ __name2((key) => {
      if (isCryptoKey(key)) {
        return true;
      }
      return key?.[Symbol.toStringTag] === "KeyObject";
    }, "default");
    types = ["CryptoKey"];
  }
});
var isDisjoint;
var is_disjoint_default;
var init_is_disjoint = __esm({
  "../node_modules/jose/dist/browser/lib/is_disjoint.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    isDisjoint = /* @__PURE__ */ __name2((...headers) => {
      const sources = headers.filter(Boolean);
      if (sources.length === 0 || sources.length === 1) {
        return true;
      }
      let acc;
      for (const header of sources) {
        const parameters = Object.keys(header);
        if (!acc || acc.size === 0) {
          acc = new Set(parameters);
          continue;
        }
        for (const parameter of parameters) {
          if (acc.has(parameter)) {
            return false;
          }
          acc.add(parameter);
        }
      }
      return true;
    }, "isDisjoint");
    is_disjoint_default = isDisjoint;
  }
});
function isObjectLike(value) {
  return typeof value === "object" && value !== null;
}
__name(isObjectLike, "isObjectLike");
function isObject2(input) {
  if (!isObjectLike(input) || Object.prototype.toString.call(input) !== "[object Object]") {
    return false;
  }
  if (Object.getPrototypeOf(input) === null) {
    return true;
  }
  let proto = input;
  while (Object.getPrototypeOf(proto) !== null) {
    proto = Object.getPrototypeOf(proto);
  }
  return Object.getPrototypeOf(input) === proto;
}
__name(isObject2, "isObject2");
var init_is_object = __esm({
  "../node_modules/jose/dist/browser/lib/is_object.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    __name2(isObjectLike, "isObjectLike");
    __name2(isObject2, "isObject");
  }
});
var check_key_length_default;
var init_check_key_length = __esm({
  "../node_modules/jose/dist/browser/runtime/check_key_length.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    check_key_length_default = /* @__PURE__ */ __name2((alg, key) => {
      if (alg.startsWith("RS") || alg.startsWith("PS")) {
        const { modulusLength } = key.algorithm;
        if (typeof modulusLength !== "number" || modulusLength < 2048) {
          throw new TypeError(`${alg} requires key modulusLength to be 2048 bits or larger`);
        }
      }
    }, "default");
  }
});
function isJWK(key) {
  return isObject2(key) && typeof key.kty === "string";
}
__name(isJWK, "isJWK");
function isPrivateJWK(key) {
  return key.kty !== "oct" && typeof key.d === "string";
}
__name(isPrivateJWK, "isPrivateJWK");
function isPublicJWK(key) {
  return key.kty !== "oct" && typeof key.d === "undefined";
}
__name(isPublicJWK, "isPublicJWK");
function isSecretJWK(key) {
  return isJWK(key) && key.kty === "oct" && typeof key.k === "string";
}
__name(isSecretJWK, "isSecretJWK");
var init_is_jwk = __esm({
  "../node_modules/jose/dist/browser/lib/is_jwk.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_is_object();
    __name2(isJWK, "isJWK");
    __name2(isPrivateJWK, "isPrivateJWK");
    __name2(isPublicJWK, "isPublicJWK");
    __name2(isSecretJWK, "isSecretJWK");
  }
});
function subtleMapping(jwk) {
  let algorithm2;
  let keyUsages;
  switch (jwk.kty) {
    case "RSA": {
      switch (jwk.alg) {
        case "PS256":
        case "PS384":
        case "PS512":
          algorithm2 = { name: "RSA-PSS", hash: `SHA-${jwk.alg.slice(-3)}` };
          keyUsages = jwk.d ? ["sign"] : ["verify"];
          break;
        case "RS256":
        case "RS384":
        case "RS512":
          algorithm2 = { name: "RSASSA-PKCS1-v1_5", hash: `SHA-${jwk.alg.slice(-3)}` };
          keyUsages = jwk.d ? ["sign"] : ["verify"];
          break;
        case "RSA-OAEP":
        case "RSA-OAEP-256":
        case "RSA-OAEP-384":
        case "RSA-OAEP-512":
          algorithm2 = {
            name: "RSA-OAEP",
            hash: `SHA-${parseInt(jwk.alg.slice(-3), 10) || 1}`
          };
          keyUsages = jwk.d ? ["decrypt", "unwrapKey"] : ["encrypt", "wrapKey"];
          break;
        default:
          throw new JOSENotSupported('Invalid or unsupported JWK "alg" (Algorithm) Parameter value');
      }
      break;
    }
    case "EC": {
      switch (jwk.alg) {
        case "ES256":
          algorithm2 = { name: "ECDSA", namedCurve: "P-256" };
          keyUsages = jwk.d ? ["sign"] : ["verify"];
          break;
        case "ES384":
          algorithm2 = { name: "ECDSA", namedCurve: "P-384" };
          keyUsages = jwk.d ? ["sign"] : ["verify"];
          break;
        case "ES512":
          algorithm2 = { name: "ECDSA", namedCurve: "P-521" };
          keyUsages = jwk.d ? ["sign"] : ["verify"];
          break;
        case "ECDH-ES":
        case "ECDH-ES+A128KW":
        case "ECDH-ES+A192KW":
        case "ECDH-ES+A256KW":
          algorithm2 = { name: "ECDH", namedCurve: jwk.crv };
          keyUsages = jwk.d ? ["deriveBits"] : [];
          break;
        default:
          throw new JOSENotSupported('Invalid or unsupported JWK "alg" (Algorithm) Parameter value');
      }
      break;
    }
    case "OKP": {
      switch (jwk.alg) {
        case "Ed25519":
          algorithm2 = { name: "Ed25519" };
          keyUsages = jwk.d ? ["sign"] : ["verify"];
          break;
        case "EdDSA":
          algorithm2 = { name: jwk.crv };
          keyUsages = jwk.d ? ["sign"] : ["verify"];
          break;
        case "ECDH-ES":
        case "ECDH-ES+A128KW":
        case "ECDH-ES+A192KW":
        case "ECDH-ES+A256KW":
          algorithm2 = { name: jwk.crv };
          keyUsages = jwk.d ? ["deriveBits"] : [];
          break;
        default:
          throw new JOSENotSupported('Invalid or unsupported JWK "alg" (Algorithm) Parameter value');
      }
      break;
    }
    default:
      throw new JOSENotSupported('Invalid or unsupported JWK "kty" (Key Type) Parameter value');
  }
  return { algorithm: algorithm2, keyUsages };
}
__name(subtleMapping, "subtleMapping");
var parse;
var jwk_to_key_default;
var init_jwk_to_key = __esm({
  "../node_modules/jose/dist/browser/runtime/jwk_to_key.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_webcrypto();
    init_errors4();
    __name2(subtleMapping, "subtleMapping");
    parse = /* @__PURE__ */ __name2(async (jwk) => {
      if (!jwk.alg) {
        throw new TypeError('"alg" argument is required when "jwk.alg" is not present');
      }
      const { algorithm: algorithm2, keyUsages } = subtleMapping(jwk);
      const rest = [
        algorithm2,
        jwk.ext ?? false,
        jwk.key_ops ?? keyUsages
      ];
      const keyData = { ...jwk };
      delete keyData.alg;
      delete keyData.use;
      return webcrypto_default.subtle.importKey("jwk", keyData, ...rest);
    }, "parse");
    jwk_to_key_default = parse;
  }
});
var exportKeyValue;
var privCache;
var pubCache;
var isKeyObject;
var importAndCache;
var normalizePublicKey;
var normalizePrivateKey;
var normalize_key_default;
var init_normalize_key = __esm({
  "../node_modules/jose/dist/browser/runtime/normalize_key.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_is_jwk();
    init_base64url();
    init_jwk_to_key();
    exportKeyValue = /* @__PURE__ */ __name2((k) => decode2(k), "exportKeyValue");
    isKeyObject = /* @__PURE__ */ __name2((key) => {
      return key?.[Symbol.toStringTag] === "KeyObject";
    }, "isKeyObject");
    importAndCache = /* @__PURE__ */ __name2(async (cache, key, jwk, alg, freeze2 = false) => {
      let cached = cache.get(key);
      if (cached?.[alg]) {
        return cached[alg];
      }
      const cryptoKey = await jwk_to_key_default({ ...jwk, alg });
      if (freeze2)
        Object.freeze(key);
      if (!cached) {
        cache.set(key, { [alg]: cryptoKey });
      } else {
        cached[alg] = cryptoKey;
      }
      return cryptoKey;
    }, "importAndCache");
    normalizePublicKey = /* @__PURE__ */ __name2((key, alg) => {
      if (isKeyObject(key)) {
        let jwk = key.export({ format: "jwk" });
        delete jwk.d;
        delete jwk.dp;
        delete jwk.dq;
        delete jwk.p;
        delete jwk.q;
        delete jwk.qi;
        if (jwk.k) {
          return exportKeyValue(jwk.k);
        }
        pubCache || (pubCache = /* @__PURE__ */ new WeakMap());
        return importAndCache(pubCache, key, jwk, alg);
      }
      if (isJWK(key)) {
        if (key.k)
          return decode2(key.k);
        pubCache || (pubCache = /* @__PURE__ */ new WeakMap());
        const cryptoKey = importAndCache(pubCache, key, key, alg, true);
        return cryptoKey;
      }
      return key;
    }, "normalizePublicKey");
    normalizePrivateKey = /* @__PURE__ */ __name2((key, alg) => {
      if (isKeyObject(key)) {
        let jwk = key.export({ format: "jwk" });
        if (jwk.k) {
          return exportKeyValue(jwk.k);
        }
        privCache || (privCache = /* @__PURE__ */ new WeakMap());
        return importAndCache(privCache, key, jwk, alg);
      }
      if (isJWK(key)) {
        if (key.k)
          return decode2(key.k);
        privCache || (privCache = /* @__PURE__ */ new WeakMap());
        const cryptoKey = importAndCache(privCache, key, key, alg, true);
        return cryptoKey;
      }
      return key;
    }, "normalizePrivateKey");
    normalize_key_default = { normalizePublicKey, normalizePrivateKey };
  }
});
async function importJWK(jwk, alg) {
  if (!isObject2(jwk)) {
    throw new TypeError("JWK must be an object");
  }
  alg || (alg = jwk.alg);
  switch (jwk.kty) {
    case "oct":
      if (typeof jwk.k !== "string" || !jwk.k) {
        throw new TypeError('missing "k" (Key Value) Parameter value');
      }
      return decode2(jwk.k);
    case "RSA":
      if ("oth" in jwk && jwk.oth !== void 0) {
        throw new JOSENotSupported('RSA JWK "oth" (Other Primes Info) Parameter value is not supported');
      }
    case "EC":
    case "OKP":
      return jwk_to_key_default({ ...jwk, alg });
    default:
      throw new JOSENotSupported('Unsupported "kty" (Key Type) Parameter value');
  }
}
__name(importJWK, "importJWK");
var init_import = __esm({
  "../node_modules/jose/dist/browser/key/import.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_base64url();
    init_jwk_to_key();
    init_errors4();
    init_is_object();
    __name2(importJWK, "importJWK");
  }
});
function checkKeyType(allowJwk, alg, key, usage) {
  const symmetric = alg.startsWith("HS") || alg === "dir" || alg.startsWith("PBES2") || /^A\d{3}(?:GCM)?KW$/.test(alg);
  if (symmetric) {
    symmetricTypeCheck(alg, key, usage, allowJwk);
  } else {
    asymmetricTypeCheck(alg, key, usage, allowJwk);
  }
}
__name(checkKeyType, "checkKeyType");
var tag;
var jwkMatchesOp;
var symmetricTypeCheck;
var asymmetricTypeCheck;
var check_key_type_default;
var checkKeyTypeWithJwk;
var init_check_key_type = __esm({
  "../node_modules/jose/dist/browser/lib/check_key_type.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_invalid_key_input();
    init_is_key_like();
    init_is_jwk();
    tag = /* @__PURE__ */ __name2((key) => key?.[Symbol.toStringTag], "tag");
    jwkMatchesOp = /* @__PURE__ */ __name2((alg, key, usage) => {
      if (key.use !== void 0 && key.use !== "sig") {
        throw new TypeError("Invalid key for this operation, when present its use must be sig");
      }
      if (key.key_ops !== void 0 && key.key_ops.includes?.(usage) !== true) {
        throw new TypeError(`Invalid key for this operation, when present its key_ops must include ${usage}`);
      }
      if (key.alg !== void 0 && key.alg !== alg) {
        throw new TypeError(`Invalid key for this operation, when present its alg must be ${alg}`);
      }
      return true;
    }, "jwkMatchesOp");
    symmetricTypeCheck = /* @__PURE__ */ __name2((alg, key, usage, allowJwk) => {
      if (key instanceof Uint8Array)
        return;
      if (allowJwk && isJWK(key)) {
        if (isSecretJWK(key) && jwkMatchesOp(alg, key, usage))
          return;
        throw new TypeError(`JSON Web Key for symmetric algorithms must have JWK "kty" (Key Type) equal to "oct" and the JWK "k" (Key Value) present`);
      }
      if (!is_key_like_default(key)) {
        throw new TypeError(withAlg(alg, key, ...types, "Uint8Array", allowJwk ? "JSON Web Key" : null));
      }
      if (key.type !== "secret") {
        throw new TypeError(`${tag(key)} instances for symmetric algorithms must be of type "secret"`);
      }
    }, "symmetricTypeCheck");
    asymmetricTypeCheck = /* @__PURE__ */ __name2((alg, key, usage, allowJwk) => {
      if (allowJwk && isJWK(key)) {
        switch (usage) {
          case "sign":
            if (isPrivateJWK(key) && jwkMatchesOp(alg, key, usage))
              return;
            throw new TypeError(`JSON Web Key for this operation be a private JWK`);
          case "verify":
            if (isPublicJWK(key) && jwkMatchesOp(alg, key, usage))
              return;
            throw new TypeError(`JSON Web Key for this operation be a public JWK`);
        }
      }
      if (!is_key_like_default(key)) {
        throw new TypeError(withAlg(alg, key, ...types, allowJwk ? "JSON Web Key" : null));
      }
      if (key.type === "secret") {
        throw new TypeError(`${tag(key)} instances for asymmetric algorithms must not be of type "secret"`);
      }
      if (usage === "sign" && key.type === "public") {
        throw new TypeError(`${tag(key)} instances for asymmetric algorithm signing must be of type "private"`);
      }
      if (usage === "decrypt" && key.type === "public") {
        throw new TypeError(`${tag(key)} instances for asymmetric algorithm decryption must be of type "private"`);
      }
      if (key.algorithm && usage === "verify" && key.type === "private") {
        throw new TypeError(`${tag(key)} instances for asymmetric algorithm verifying must be of type "public"`);
      }
      if (key.algorithm && usage === "encrypt" && key.type === "private") {
        throw new TypeError(`${tag(key)} instances for asymmetric algorithm encryption must be of type "public"`);
      }
    }, "asymmetricTypeCheck");
    __name2(checkKeyType, "checkKeyType");
    check_key_type_default = checkKeyType.bind(void 0, false);
    checkKeyTypeWithJwk = checkKeyType.bind(void 0, true);
  }
});
function validateCrit(Err, recognizedDefault, recognizedOption, protectedHeader, joseHeader) {
  if (joseHeader.crit !== void 0 && protectedHeader?.crit === void 0) {
    throw new Err('"crit" (Critical) Header Parameter MUST be integrity protected');
  }
  if (!protectedHeader || protectedHeader.crit === void 0) {
    return /* @__PURE__ */ new Set();
  }
  if (!Array.isArray(protectedHeader.crit) || protectedHeader.crit.length === 0 || protectedHeader.crit.some((input) => typeof input !== "string" || input.length === 0)) {
    throw new Err('"crit" (Critical) Header Parameter MUST be an array of non-empty strings when present');
  }
  let recognized;
  if (recognizedOption !== void 0) {
    recognized = new Map([...Object.entries(recognizedOption), ...recognizedDefault.entries()]);
  } else {
    recognized = recognizedDefault;
  }
  for (const parameter of protectedHeader.crit) {
    if (!recognized.has(parameter)) {
      throw new JOSENotSupported(`Extension Header Parameter "${parameter}" is not recognized`);
    }
    if (joseHeader[parameter] === void 0) {
      throw new Err(`Extension Header Parameter "${parameter}" is missing`);
    }
    if (recognized.get(parameter) && protectedHeader[parameter] === void 0) {
      throw new Err(`Extension Header Parameter "${parameter}" MUST be integrity protected`);
    }
  }
  return new Set(protectedHeader.crit);
}
__name(validateCrit, "validateCrit");
var validate_crit_default;
var init_validate_crit = __esm({
  "../node_modules/jose/dist/browser/lib/validate_crit.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_errors4();
    __name2(validateCrit, "validateCrit");
    validate_crit_default = validateCrit;
  }
});
var validateAlgorithms;
var validate_algorithms_default;
var init_validate_algorithms = __esm({
  "../node_modules/jose/dist/browser/lib/validate_algorithms.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    validateAlgorithms = /* @__PURE__ */ __name2((option, algorithms) => {
      if (algorithms !== void 0 && (!Array.isArray(algorithms) || algorithms.some((s) => typeof s !== "string"))) {
        throw new TypeError(`"${option}" option must be an array of strings`);
      }
      if (!algorithms) {
        return void 0;
      }
      return new Set(algorithms);
    }, "validateAlgorithms");
    validate_algorithms_default = validateAlgorithms;
  }
});
function subtleDsa(alg, algorithm2) {
  const hash = `SHA-${alg.slice(-3)}`;
  switch (alg) {
    case "HS256":
    case "HS384":
    case "HS512":
      return { hash, name: "HMAC" };
    case "PS256":
    case "PS384":
    case "PS512":
      return { hash, name: "RSA-PSS", saltLength: alg.slice(-3) >> 3 };
    case "RS256":
    case "RS384":
    case "RS512":
      return { hash, name: "RSASSA-PKCS1-v1_5" };
    case "ES256":
    case "ES384":
    case "ES512":
      return { hash, name: "ECDSA", namedCurve: algorithm2.namedCurve };
    case "Ed25519":
      return { name: "Ed25519" };
    case "EdDSA":
      return { name: algorithm2.name };
    default:
      throw new JOSENotSupported(`alg ${alg} is not supported either by JOSE or your javascript runtime`);
  }
}
__name(subtleDsa, "subtleDsa");
var init_subtle_dsa = __esm({
  "../node_modules/jose/dist/browser/runtime/subtle_dsa.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_errors4();
    __name2(subtleDsa, "subtleDsa");
  }
});
async function getCryptoKey2(alg, key, usage) {
  if (usage === "sign") {
    key = await normalize_key_default.normalizePrivateKey(key, alg);
  }
  if (usage === "verify") {
    key = await normalize_key_default.normalizePublicKey(key, alg);
  }
  if (isCryptoKey(key)) {
    checkSigCryptoKey(key, alg, usage);
    return key;
  }
  if (key instanceof Uint8Array) {
    if (!alg.startsWith("HS")) {
      throw new TypeError(invalid_key_input_default(key, ...types));
    }
    return webcrypto_default.subtle.importKey("raw", key, { hash: `SHA-${alg.slice(-3)}`, name: "HMAC" }, false, [usage]);
  }
  throw new TypeError(invalid_key_input_default(key, ...types, "Uint8Array", "JSON Web Key"));
}
__name(getCryptoKey2, "getCryptoKey2");
var init_get_sign_verify_key = __esm({
  "../node_modules/jose/dist/browser/runtime/get_sign_verify_key.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_webcrypto();
    init_crypto_key();
    init_invalid_key_input();
    init_is_key_like();
    init_normalize_key();
    __name2(getCryptoKey2, "getCryptoKey");
  }
});
var verify;
var verify_default;
var init_verify = __esm({
  "../node_modules/jose/dist/browser/runtime/verify.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_subtle_dsa();
    init_webcrypto();
    init_check_key_length();
    init_get_sign_verify_key();
    verify = /* @__PURE__ */ __name2(async (alg, key, signature, data) => {
      const cryptoKey = await getCryptoKey2(alg, key, "verify");
      check_key_length_default(alg, cryptoKey);
      const algorithm2 = subtleDsa(alg, cryptoKey.algorithm);
      try {
        return await webcrypto_default.subtle.verify(algorithm2, cryptoKey, signature, data);
      } catch {
        return false;
      }
    }, "verify");
    verify_default = verify;
  }
});
async function flattenedVerify(jws, key, options) {
  if (!isObject2(jws)) {
    throw new JWSInvalid("Flattened JWS must be an object");
  }
  if (jws.protected === void 0 && jws.header === void 0) {
    throw new JWSInvalid('Flattened JWS must have either of the "protected" or "header" members');
  }
  if (jws.protected !== void 0 && typeof jws.protected !== "string") {
    throw new JWSInvalid("JWS Protected Header incorrect type");
  }
  if (jws.payload === void 0) {
    throw new JWSInvalid("JWS Payload missing");
  }
  if (typeof jws.signature !== "string") {
    throw new JWSInvalid("JWS Signature missing or incorrect type");
  }
  if (jws.header !== void 0 && !isObject2(jws.header)) {
    throw new JWSInvalid("JWS Unprotected Header incorrect type");
  }
  let parsedProt = {};
  if (jws.protected) {
    try {
      const protectedHeader = decode2(jws.protected);
      parsedProt = JSON.parse(decoder.decode(protectedHeader));
    } catch {
      throw new JWSInvalid("JWS Protected Header is invalid");
    }
  }
  if (!is_disjoint_default(parsedProt, jws.header)) {
    throw new JWSInvalid("JWS Protected and JWS Unprotected Header Parameter names must be disjoint");
  }
  const joseHeader = {
    ...parsedProt,
    ...jws.header
  };
  const extensions = validate_crit_default(JWSInvalid, /* @__PURE__ */ new Map([["b64", true]]), options?.crit, parsedProt, joseHeader);
  let b64 = true;
  if (extensions.has("b64")) {
    b64 = parsedProt.b64;
    if (typeof b64 !== "boolean") {
      throw new JWSInvalid('The "b64" (base64url-encode payload) Header Parameter must be a boolean');
    }
  }
  const { alg } = joseHeader;
  if (typeof alg !== "string" || !alg) {
    throw new JWSInvalid('JWS "alg" (Algorithm) Header Parameter missing or invalid');
  }
  const algorithms = options && validate_algorithms_default("algorithms", options.algorithms);
  if (algorithms && !algorithms.has(alg)) {
    throw new JOSEAlgNotAllowed('"alg" (Algorithm) Header Parameter value not allowed');
  }
  if (b64) {
    if (typeof jws.payload !== "string") {
      throw new JWSInvalid("JWS Payload must be a string");
    }
  } else if (typeof jws.payload !== "string" && !(jws.payload instanceof Uint8Array)) {
    throw new JWSInvalid("JWS Payload must be a string or an Uint8Array instance");
  }
  let resolvedKey = false;
  if (typeof key === "function") {
    key = await key(parsedProt, jws);
    resolvedKey = true;
    checkKeyTypeWithJwk(alg, key, "verify");
    if (isJWK(key)) {
      key = await importJWK(key, alg);
    }
  } else {
    checkKeyTypeWithJwk(alg, key, "verify");
  }
  const data = concat(encoder.encode(jws.protected ?? ""), encoder.encode("."), typeof jws.payload === "string" ? encoder.encode(jws.payload) : jws.payload);
  let signature;
  try {
    signature = decode2(jws.signature);
  } catch {
    throw new JWSInvalid("Failed to base64url decode the signature");
  }
  const verified = await verify_default(alg, key, signature, data);
  if (!verified) {
    throw new JWSSignatureVerificationFailed();
  }
  let payload;
  if (b64) {
    try {
      payload = decode2(jws.payload);
    } catch {
      throw new JWSInvalid("Failed to base64url decode the payload");
    }
  } else if (typeof jws.payload === "string") {
    payload = encoder.encode(jws.payload);
  } else {
    payload = jws.payload;
  }
  const result = { payload };
  if (jws.protected !== void 0) {
    result.protectedHeader = parsedProt;
  }
  if (jws.header !== void 0) {
    result.unprotectedHeader = jws.header;
  }
  if (resolvedKey) {
    return { ...result, key };
  }
  return result;
}
__name(flattenedVerify, "flattenedVerify");
var init_verify2 = __esm({
  "../node_modules/jose/dist/browser/jws/flattened/verify.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_base64url();
    init_verify();
    init_errors4();
    init_buffer_utils();
    init_is_disjoint();
    init_is_object();
    init_check_key_type();
    init_validate_crit();
    init_validate_algorithms();
    init_is_jwk();
    init_import();
    __name2(flattenedVerify, "flattenedVerify");
  }
});
async function compactVerify(jws, key, options) {
  if (jws instanceof Uint8Array) {
    jws = decoder.decode(jws);
  }
  if (typeof jws !== "string") {
    throw new JWSInvalid("Compact JWS must be a string or Uint8Array");
  }
  const { 0: protectedHeader, 1: payload, 2: signature, length } = jws.split(".");
  if (length !== 3) {
    throw new JWSInvalid("Invalid Compact JWS");
  }
  const verified = await flattenedVerify({ payload, protected: protectedHeader, signature }, key, options);
  const result = { payload: verified.payload, protectedHeader: verified.protectedHeader };
  if (typeof key === "function") {
    return { ...result, key: verified.key };
  }
  return result;
}
__name(compactVerify, "compactVerify");
var init_verify3 = __esm({
  "../node_modules/jose/dist/browser/jws/compact/verify.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_verify2();
    init_errors4();
    init_buffer_utils();
    __name2(compactVerify, "compactVerify");
  }
});
var epoch_default;
var init_epoch = __esm({
  "../node_modules/jose/dist/browser/lib/epoch.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    epoch_default = /* @__PURE__ */ __name2((date) => Math.floor(date.getTime() / 1e3), "default");
  }
});
var minute;
var hour;
var day;
var week;
var year;
var REGEX;
var secs_default;
var init_secs = __esm({
  "../node_modules/jose/dist/browser/lib/secs.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    minute = 60;
    hour = minute * 60;
    day = hour * 24;
    week = day * 7;
    year = day * 365.25;
    REGEX = /^(\+|\-)? ?(\d+|\d+\.\d+) ?(seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)(?: (ago|from now))?$/i;
    secs_default = /* @__PURE__ */ __name2((str) => {
      const matched = REGEX.exec(str);
      if (!matched || matched[4] && matched[1]) {
        throw new TypeError("Invalid time period format");
      }
      const value = parseFloat(matched[2]);
      const unit = matched[3].toLowerCase();
      let numericDate;
      switch (unit) {
        case "sec":
        case "secs":
        case "second":
        case "seconds":
        case "s":
          numericDate = Math.round(value);
          break;
        case "minute":
        case "minutes":
        case "min":
        case "mins":
        case "m":
          numericDate = Math.round(value * minute);
          break;
        case "hour":
        case "hours":
        case "hr":
        case "hrs":
        case "h":
          numericDate = Math.round(value * hour);
          break;
        case "day":
        case "days":
        case "d":
          numericDate = Math.round(value * day);
          break;
        case "week":
        case "weeks":
        case "w":
          numericDate = Math.round(value * week);
          break;
        default:
          numericDate = Math.round(value * year);
          break;
      }
      if (matched[1] === "-" || matched[4] === "ago") {
        return -numericDate;
      }
      return numericDate;
    }, "default");
  }
});
var normalizeTyp;
var checkAudiencePresence;
var jwt_claims_set_default;
var init_jwt_claims_set = __esm({
  "../node_modules/jose/dist/browser/lib/jwt_claims_set.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_errors4();
    init_buffer_utils();
    init_epoch();
    init_secs();
    init_is_object();
    normalizeTyp = /* @__PURE__ */ __name2((value) => value.toLowerCase().replace(/^application\//, ""), "normalizeTyp");
    checkAudiencePresence = /* @__PURE__ */ __name2((audPayload, audOption) => {
      if (typeof audPayload === "string") {
        return audOption.includes(audPayload);
      }
      if (Array.isArray(audPayload)) {
        return audOption.some(Set.prototype.has.bind(new Set(audPayload)));
      }
      return false;
    }, "checkAudiencePresence");
    jwt_claims_set_default = /* @__PURE__ */ __name2((protectedHeader, encodedPayload, options = {}) => {
      let payload;
      try {
        payload = JSON.parse(decoder.decode(encodedPayload));
      } catch {
      }
      if (!isObject2(payload)) {
        throw new JWTInvalid("JWT Claims Set must be a top-level JSON object");
      }
      const { typ } = options;
      if (typ && (typeof protectedHeader.typ !== "string" || normalizeTyp(protectedHeader.typ) !== normalizeTyp(typ))) {
        throw new JWTClaimValidationFailed('unexpected "typ" JWT header value', payload, "typ", "check_failed");
      }
      const { requiredClaims = [], issuer, subject, audience, maxTokenAge } = options;
      const presenceCheck = [...requiredClaims];
      if (maxTokenAge !== void 0)
        presenceCheck.push("iat");
      if (audience !== void 0)
        presenceCheck.push("aud");
      if (subject !== void 0)
        presenceCheck.push("sub");
      if (issuer !== void 0)
        presenceCheck.push("iss");
      for (const claim of new Set(presenceCheck.reverse())) {
        if (!(claim in payload)) {
          throw new JWTClaimValidationFailed(`missing required "${claim}" claim`, payload, claim, "missing");
        }
      }
      if (issuer && !(Array.isArray(issuer) ? issuer : [issuer]).includes(payload.iss)) {
        throw new JWTClaimValidationFailed('unexpected "iss" claim value', payload, "iss", "check_failed");
      }
      if (subject && payload.sub !== subject) {
        throw new JWTClaimValidationFailed('unexpected "sub" claim value', payload, "sub", "check_failed");
      }
      if (audience && !checkAudiencePresence(payload.aud, typeof audience === "string" ? [audience] : audience)) {
        throw new JWTClaimValidationFailed('unexpected "aud" claim value', payload, "aud", "check_failed");
      }
      let tolerance;
      switch (typeof options.clockTolerance) {
        case "string":
          tolerance = secs_default(options.clockTolerance);
          break;
        case "number":
          tolerance = options.clockTolerance;
          break;
        case "undefined":
          tolerance = 0;
          break;
        default:
          throw new TypeError("Invalid clockTolerance option type");
      }
      const { currentDate } = options;
      const now = epoch_default(currentDate || /* @__PURE__ */ new Date());
      if ((payload.iat !== void 0 || maxTokenAge) && typeof payload.iat !== "number") {
        throw new JWTClaimValidationFailed('"iat" claim must be a number', payload, "iat", "invalid");
      }
      if (payload.nbf !== void 0) {
        if (typeof payload.nbf !== "number") {
          throw new JWTClaimValidationFailed('"nbf" claim must be a number', payload, "nbf", "invalid");
        }
        if (payload.nbf > now + tolerance) {
          throw new JWTClaimValidationFailed('"nbf" claim timestamp check failed', payload, "nbf", "check_failed");
        }
      }
      if (payload.exp !== void 0) {
        if (typeof payload.exp !== "number") {
          throw new JWTClaimValidationFailed('"exp" claim must be a number', payload, "exp", "invalid");
        }
        if (payload.exp <= now - tolerance) {
          throw new JWTExpired('"exp" claim timestamp check failed', payload, "exp", "check_failed");
        }
      }
      if (maxTokenAge) {
        const age = now - payload.iat;
        const max = typeof maxTokenAge === "number" ? maxTokenAge : secs_default(maxTokenAge);
        if (age - tolerance > max) {
          throw new JWTExpired('"iat" claim timestamp check failed (too far in the past)', payload, "iat", "check_failed");
        }
        if (age < 0 - tolerance) {
          throw new JWTClaimValidationFailed('"iat" claim timestamp check failed (it should be in the past)', payload, "iat", "check_failed");
        }
      }
      return payload;
    }, "default");
  }
});
async function jwtVerify(jwt, key, options) {
  const verified = await compactVerify(jwt, key, options);
  if (verified.protectedHeader.crit?.includes("b64") && verified.protectedHeader.b64 === false) {
    throw new JWTInvalid("JWTs MUST NOT use unencoded payload");
  }
  const payload = jwt_claims_set_default(verified.protectedHeader, verified.payload, options);
  const result = { payload, protectedHeader: verified.protectedHeader };
  if (typeof key === "function") {
    return { ...result, key: verified.key };
  }
  return result;
}
__name(jwtVerify, "jwtVerify");
var init_verify4 = __esm({
  "../node_modules/jose/dist/browser/jwt/verify.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_verify3();
    init_jwt_claims_set();
    init_errors4();
    __name2(jwtVerify, "jwtVerify");
  }
});
var sign;
var sign_default;
var init_sign = __esm({
  "../node_modules/jose/dist/browser/runtime/sign.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_subtle_dsa();
    init_webcrypto();
    init_check_key_length();
    init_get_sign_verify_key();
    sign = /* @__PURE__ */ __name2(async (alg, key, data) => {
      const cryptoKey = await getCryptoKey2(alg, key, "sign");
      check_key_length_default(alg, cryptoKey);
      const signature = await webcrypto_default.subtle.sign(subtleDsa(alg, cryptoKey.algorithm), cryptoKey, data);
      return new Uint8Array(signature);
    }, "sign");
    sign_default = sign;
  }
});
var FlattenedSign;
var init_sign2 = __esm({
  "../node_modules/jose/dist/browser/jws/flattened/sign.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_base64url();
    init_sign();
    init_is_disjoint();
    init_errors4();
    init_buffer_utils();
    init_check_key_type();
    init_validate_crit();
    FlattenedSign = class {
      static {
        __name(this, "FlattenedSign");
      }
      static {
        __name2(this, "FlattenedSign");
      }
      constructor(payload) {
        if (!(payload instanceof Uint8Array)) {
          throw new TypeError("payload must be an instance of Uint8Array");
        }
        this._payload = payload;
      }
      setProtectedHeader(protectedHeader) {
        if (this._protectedHeader) {
          throw new TypeError("setProtectedHeader can only be called once");
        }
        this._protectedHeader = protectedHeader;
        return this;
      }
      setUnprotectedHeader(unprotectedHeader) {
        if (this._unprotectedHeader) {
          throw new TypeError("setUnprotectedHeader can only be called once");
        }
        this._unprotectedHeader = unprotectedHeader;
        return this;
      }
      async sign(key, options) {
        if (!this._protectedHeader && !this._unprotectedHeader) {
          throw new JWSInvalid("either setProtectedHeader or setUnprotectedHeader must be called before #sign()");
        }
        if (!is_disjoint_default(this._protectedHeader, this._unprotectedHeader)) {
          throw new JWSInvalid("JWS Protected and JWS Unprotected Header Parameter names must be disjoint");
        }
        const joseHeader = {
          ...this._protectedHeader,
          ...this._unprotectedHeader
        };
        const extensions = validate_crit_default(JWSInvalid, /* @__PURE__ */ new Map([["b64", true]]), options?.crit, this._protectedHeader, joseHeader);
        let b64 = true;
        if (extensions.has("b64")) {
          b64 = this._protectedHeader.b64;
          if (typeof b64 !== "boolean") {
            throw new JWSInvalid('The "b64" (base64url-encode payload) Header Parameter must be a boolean');
          }
        }
        const { alg } = joseHeader;
        if (typeof alg !== "string" || !alg) {
          throw new JWSInvalid('JWS "alg" (Algorithm) Header Parameter missing or invalid');
        }
        checkKeyTypeWithJwk(alg, key, "sign");
        let payload = this._payload;
        if (b64) {
          payload = encoder.encode(encode2(payload));
        }
        let protectedHeader;
        if (this._protectedHeader) {
          protectedHeader = encoder.encode(encode2(JSON.stringify(this._protectedHeader)));
        } else {
          protectedHeader = encoder.encode("");
        }
        const data = concat(protectedHeader, encoder.encode("."), payload);
        const signature = await sign_default(alg, key, data);
        const jws = {
          signature: encode2(signature),
          payload: ""
        };
        if (b64) {
          jws.payload = decoder.decode(payload);
        }
        if (this._unprotectedHeader) {
          jws.header = this._unprotectedHeader;
        }
        if (this._protectedHeader) {
          jws.protected = decoder.decode(protectedHeader);
        }
        return jws;
      }
    };
  }
});
var CompactSign;
var init_sign3 = __esm({
  "../node_modules/jose/dist/browser/jws/compact/sign.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_sign2();
    CompactSign = class {
      static {
        __name(this, "CompactSign");
      }
      static {
        __name2(this, "CompactSign");
      }
      constructor(payload) {
        this._flattened = new FlattenedSign(payload);
      }
      setProtectedHeader(protectedHeader) {
        this._flattened.setProtectedHeader(protectedHeader);
        return this;
      }
      async sign(key, options) {
        const jws = await this._flattened.sign(key, options);
        if (jws.payload === void 0) {
          throw new TypeError("use the flattened module for creating JWS with b64: false");
        }
        return `${jws.protected}.${jws.payload}.${jws.signature}`;
      }
    };
  }
});
function validateInput(label, input) {
  if (!Number.isFinite(input)) {
    throw new TypeError(`Invalid ${label} input`);
  }
  return input;
}
__name(validateInput, "validateInput");
var ProduceJWT;
var init_produce = __esm({
  "../node_modules/jose/dist/browser/jwt/produce.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_epoch();
    init_is_object();
    init_secs();
    __name2(validateInput, "validateInput");
    ProduceJWT = class {
      static {
        __name(this, "ProduceJWT");
      }
      static {
        __name2(this, "ProduceJWT");
      }
      constructor(payload = {}) {
        if (!isObject2(payload)) {
          throw new TypeError("JWT Claims Set MUST be an object");
        }
        this._payload = payload;
      }
      setIssuer(issuer) {
        this._payload = { ...this._payload, iss: issuer };
        return this;
      }
      setSubject(subject) {
        this._payload = { ...this._payload, sub: subject };
        return this;
      }
      setAudience(audience) {
        this._payload = { ...this._payload, aud: audience };
        return this;
      }
      setJti(jwtId) {
        this._payload = { ...this._payload, jti: jwtId };
        return this;
      }
      setNotBefore(input) {
        if (typeof input === "number") {
          this._payload = { ...this._payload, nbf: validateInput("setNotBefore", input) };
        } else if (input instanceof Date) {
          this._payload = { ...this._payload, nbf: validateInput("setNotBefore", epoch_default(input)) };
        } else {
          this._payload = { ...this._payload, nbf: epoch_default(/* @__PURE__ */ new Date()) + secs_default(input) };
        }
        return this;
      }
      setExpirationTime(input) {
        if (typeof input === "number") {
          this._payload = { ...this._payload, exp: validateInput("setExpirationTime", input) };
        } else if (input instanceof Date) {
          this._payload = { ...this._payload, exp: validateInput("setExpirationTime", epoch_default(input)) };
        } else {
          this._payload = { ...this._payload, exp: epoch_default(/* @__PURE__ */ new Date()) + secs_default(input) };
        }
        return this;
      }
      setIssuedAt(input) {
        if (typeof input === "undefined") {
          this._payload = { ...this._payload, iat: epoch_default(/* @__PURE__ */ new Date()) };
        } else if (input instanceof Date) {
          this._payload = { ...this._payload, iat: validateInput("setIssuedAt", epoch_default(input)) };
        } else if (typeof input === "string") {
          this._payload = {
            ...this._payload,
            iat: validateInput("setIssuedAt", epoch_default(/* @__PURE__ */ new Date()) + secs_default(input))
          };
        } else {
          this._payload = { ...this._payload, iat: validateInput("setIssuedAt", input) };
        }
        return this;
      }
    };
  }
});
var SignJWT;
var init_sign4 = __esm({
  "../node_modules/jose/dist/browser/jwt/sign.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_sign3();
    init_errors4();
    init_buffer_utils();
    init_produce();
    SignJWT = class extends ProduceJWT {
      static {
        __name(this, "SignJWT");
      }
      static {
        __name2(this, "SignJWT");
      }
      setProtectedHeader(protectedHeader) {
        this._protectedHeader = protectedHeader;
        return this;
      }
      async sign(key, options) {
        const sig = new CompactSign(encoder.encode(JSON.stringify(this._payload)));
        sig.setProtectedHeader(this._protectedHeader);
        if (Array.isArray(this._protectedHeader?.crit) && this._protectedHeader.crit.includes("b64") && this._protectedHeader.b64 === false) {
          throw new JWTInvalid("JWTs MUST NOT use unencoded payload");
        }
        return sig.sign(key, options);
      }
    };
  }
});
function getKtyFromAlg(alg) {
  switch (typeof alg === "string" && alg.slice(0, 2)) {
    case "RS":
    case "PS":
      return "RSA";
    case "ES":
      return "EC";
    case "Ed":
      return "OKP";
    default:
      throw new JOSENotSupported('Unsupported "alg" value for a JSON Web Key Set');
  }
}
__name(getKtyFromAlg, "getKtyFromAlg");
function isJWKSLike(jwks) {
  return jwks && typeof jwks === "object" && Array.isArray(jwks.keys) && jwks.keys.every(isJWKLike);
}
__name(isJWKSLike, "isJWKSLike");
function isJWKLike(key) {
  return isObject2(key);
}
__name(isJWKLike, "isJWKLike");
function clone(obj) {
  if (typeof structuredClone === "function") {
    return structuredClone(obj);
  }
  return JSON.parse(JSON.stringify(obj));
}
__name(clone, "clone");
async function importWithAlgCache(cache, jwk, alg) {
  const cached = cache.get(jwk) || cache.set(jwk, {}).get(jwk);
  if (cached[alg] === void 0) {
    const key = await importJWK({ ...jwk, ext: true }, alg);
    if (key instanceof Uint8Array || key.type !== "public") {
      throw new JWKSInvalid("JSON Web Key Set members must be public keys");
    }
    cached[alg] = key;
  }
  return cached[alg];
}
__name(importWithAlgCache, "importWithAlgCache");
function createLocalJWKSet(jwks) {
  const set = new LocalJWKSet(jwks);
  const localJWKSet = /* @__PURE__ */ __name2(async (protectedHeader, token) => set.getKey(protectedHeader, token), "localJWKSet");
  Object.defineProperties(localJWKSet, {
    jwks: {
      value: /* @__PURE__ */ __name2(() => clone(set._jwks), "value"),
      enumerable: true,
      configurable: false,
      writable: false
    }
  });
  return localJWKSet;
}
__name(createLocalJWKSet, "createLocalJWKSet");
var LocalJWKSet;
var init_local = __esm({
  "../node_modules/jose/dist/browser/jwks/local.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_import();
    init_errors4();
    init_is_object();
    __name2(getKtyFromAlg, "getKtyFromAlg");
    __name2(isJWKSLike, "isJWKSLike");
    __name2(isJWKLike, "isJWKLike");
    __name2(clone, "clone");
    LocalJWKSet = class {
      static {
        __name(this, "LocalJWKSet");
      }
      static {
        __name2(this, "LocalJWKSet");
      }
      constructor(jwks) {
        this._cached = /* @__PURE__ */ new WeakMap();
        if (!isJWKSLike(jwks)) {
          throw new JWKSInvalid("JSON Web Key Set malformed");
        }
        this._jwks = clone(jwks);
      }
      async getKey(protectedHeader, token) {
        const { alg, kid } = { ...protectedHeader, ...token?.header };
        const kty = getKtyFromAlg(alg);
        const candidates = this._jwks.keys.filter((jwk2) => {
          let candidate = kty === jwk2.kty;
          if (candidate && typeof kid === "string") {
            candidate = kid === jwk2.kid;
          }
          if (candidate && typeof jwk2.alg === "string") {
            candidate = alg === jwk2.alg;
          }
          if (candidate && typeof jwk2.use === "string") {
            candidate = jwk2.use === "sig";
          }
          if (candidate && Array.isArray(jwk2.key_ops)) {
            candidate = jwk2.key_ops.includes("verify");
          }
          if (candidate) {
            switch (alg) {
              case "ES256":
                candidate = jwk2.crv === "P-256";
                break;
              case "ES256K":
                candidate = jwk2.crv === "secp256k1";
                break;
              case "ES384":
                candidate = jwk2.crv === "P-384";
                break;
              case "ES512":
                candidate = jwk2.crv === "P-521";
                break;
              case "Ed25519":
                candidate = jwk2.crv === "Ed25519";
                break;
              case "EdDSA":
                candidate = jwk2.crv === "Ed25519" || jwk2.crv === "Ed448";
                break;
            }
          }
          return candidate;
        });
        const { 0: jwk, length } = candidates;
        if (length === 0) {
          throw new JWKSNoMatchingKey();
        }
        if (length !== 1) {
          const error2 = new JWKSMultipleMatchingKeys();
          const { _cached } = this;
          error2[Symbol.asyncIterator] = async function* () {
            for (const jwk2 of candidates) {
              try {
                yield await importWithAlgCache(_cached, jwk2, alg);
              } catch {
              }
            }
          };
          throw error2;
        }
        return importWithAlgCache(this._cached, jwk, alg);
      }
    };
    __name2(importWithAlgCache, "importWithAlgCache");
    __name2(createLocalJWKSet, "createLocalJWKSet");
  }
});
var fetchJwks;
var fetch_jwks_default;
var init_fetch_jwks = __esm({
  "../node_modules/jose/dist/browser/runtime/fetch_jwks.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_errors4();
    fetchJwks = /* @__PURE__ */ __name2(async (url, timeout, options) => {
      let controller;
      let id;
      let timedOut = false;
      if (typeof AbortController === "function") {
        controller = new AbortController();
        id = setTimeout(() => {
          timedOut = true;
          controller.abort();
        }, timeout);
      }
      const response = await fetch(url.href, {
        signal: controller ? controller.signal : void 0,
        redirect: "manual",
        headers: options.headers
      }).catch((err) => {
        if (timedOut)
          throw new JWKSTimeout();
        throw err;
      });
      if (id !== void 0)
        clearTimeout(id);
      if (response.status !== 200) {
        throw new JOSEError("Expected 200 OK from the JSON Web Key Set HTTP response");
      }
      try {
        return await response.json();
      } catch {
        throw new JOSEError("Failed to parse the JSON Web Key Set HTTP response as JSON");
      }
    }, "fetchJwks");
    fetch_jwks_default = fetchJwks;
  }
});
function isCloudflareWorkers() {
  return typeof WebSocketPair !== "undefined" || typeof navigator !== "undefined" && true || typeof EdgeRuntime !== "undefined" && EdgeRuntime === "vercel";
}
__name(isCloudflareWorkers, "isCloudflareWorkers");
function isFreshJwksCache(input, cacheMaxAge) {
  if (typeof input !== "object" || input === null) {
    return false;
  }
  if (!("uat" in input) || typeof input.uat !== "number" || Date.now() - input.uat >= cacheMaxAge) {
    return false;
  }
  if (!("jwks" in input) || !isObject2(input.jwks) || !Array.isArray(input.jwks.keys) || !Array.prototype.every.call(input.jwks.keys, isObject2)) {
    return false;
  }
  return true;
}
__name(isFreshJwksCache, "isFreshJwksCache");
function createRemoteJWKSet(url, options) {
  const set = new RemoteJWKSet(url, options);
  const remoteJWKSet = /* @__PURE__ */ __name2(async (protectedHeader, token) => set.getKey(protectedHeader, token), "remoteJWKSet");
  Object.defineProperties(remoteJWKSet, {
    coolingDown: {
      get: /* @__PURE__ */ __name2(() => set.coolingDown(), "get"),
      enumerable: true,
      configurable: false
    },
    fresh: {
      get: /* @__PURE__ */ __name2(() => set.fresh(), "get"),
      enumerable: true,
      configurable: false
    },
    reload: {
      value: /* @__PURE__ */ __name2(() => set.reload(), "value"),
      enumerable: true,
      configurable: false,
      writable: false
    },
    reloading: {
      get: /* @__PURE__ */ __name2(() => !!set._pendingFetch, "get"),
      enumerable: true,
      configurable: false
    },
    jwks: {
      value: /* @__PURE__ */ __name2(() => set._local?.jwks(), "value"),
      enumerable: true,
      configurable: false,
      writable: false
    }
  });
  return remoteJWKSet;
}
__name(createRemoteJWKSet, "createRemoteJWKSet");
var USER_AGENT;
var jwksCache;
var RemoteJWKSet;
var init_remote = __esm({
  "../node_modules/jose/dist/browser/jwks/remote.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_fetch_jwks();
    init_errors4();
    init_local();
    init_is_object();
    __name2(isCloudflareWorkers, "isCloudflareWorkers");
    if (typeof navigator === "undefined" || !"Cloudflare-Workers"?.startsWith?.("Mozilla/5.0 ")) {
      const NAME = "jose";
      const VERSION2 = "v5.10.0";
      USER_AGENT = `${NAME}/${VERSION2}`;
    }
    jwksCache = Symbol();
    __name2(isFreshJwksCache, "isFreshJwksCache");
    RemoteJWKSet = class {
      static {
        __name(this, "RemoteJWKSet");
      }
      static {
        __name2(this, "RemoteJWKSet");
      }
      constructor(url, options) {
        if (!(url instanceof URL)) {
          throw new TypeError("url must be an instance of URL");
        }
        this._url = new URL(url.href);
        this._options = { agent: options?.agent, headers: options?.headers };
        this._timeoutDuration = typeof options?.timeoutDuration === "number" ? options?.timeoutDuration : 5e3;
        this._cooldownDuration = typeof options?.cooldownDuration === "number" ? options?.cooldownDuration : 3e4;
        this._cacheMaxAge = typeof options?.cacheMaxAge === "number" ? options?.cacheMaxAge : 6e5;
        if (options?.[jwksCache] !== void 0) {
          this._cache = options?.[jwksCache];
          if (isFreshJwksCache(options?.[jwksCache], this._cacheMaxAge)) {
            this._jwksTimestamp = this._cache.uat;
            this._local = createLocalJWKSet(this._cache.jwks);
          }
        }
      }
      coolingDown() {
        return typeof this._jwksTimestamp === "number" ? Date.now() < this._jwksTimestamp + this._cooldownDuration : false;
      }
      fresh() {
        return typeof this._jwksTimestamp === "number" ? Date.now() < this._jwksTimestamp + this._cacheMaxAge : false;
      }
      async getKey(protectedHeader, token) {
        if (!this._local || !this.fresh()) {
          await this.reload();
        }
        try {
          return await this._local(protectedHeader, token);
        } catch (err) {
          if (err instanceof JWKSNoMatchingKey) {
            if (this.coolingDown() === false) {
              await this.reload();
              return this._local(protectedHeader, token);
            }
          }
          throw err;
        }
      }
      async reload() {
        if (this._pendingFetch && isCloudflareWorkers()) {
          this._pendingFetch = void 0;
        }
        const headers = new Headers(this._options.headers);
        if (USER_AGENT && !headers.has("User-Agent")) {
          headers.set("User-Agent", USER_AGENT);
          this._options.headers = Object.fromEntries(headers.entries());
        }
        this._pendingFetch || (this._pendingFetch = fetch_jwks_default(this._url, this._timeoutDuration, this._options).then((json) => {
          this._local = createLocalJWKSet(json);
          if (this._cache) {
            this._cache.uat = Date.now();
            this._cache.jwks = json;
          }
          this._jwksTimestamp = Date.now();
          this._pendingFetch = void 0;
        }).catch((err) => {
          this._pendingFetch = void 0;
          throw err;
        }));
        await this._pendingFetch;
      }
    };
    __name2(createRemoteJWKSet, "createRemoteJWKSet");
  }
});
var decode3;
var init_base64url2 = __esm({
  "../node_modules/jose/dist/browser/util/base64url.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_base64url();
    decode3 = decode2;
  }
});
function decodeProtectedHeader(token) {
  let protectedB64u;
  if (typeof token === "string") {
    const parts = token.split(".");
    if (parts.length === 3 || parts.length === 5) {
      ;
      [protectedB64u] = parts;
    }
  } else if (typeof token === "object" && token) {
    if ("protected" in token) {
      protectedB64u = token.protected;
    } else {
      throw new TypeError("Token does not contain a Protected Header");
    }
  }
  try {
    if (typeof protectedB64u !== "string" || !protectedB64u) {
      throw new Error();
    }
    const result = JSON.parse(decoder.decode(decode3(protectedB64u)));
    if (!isObject2(result)) {
      throw new Error();
    }
    return result;
  } catch {
    throw new TypeError("Invalid Token or Protected Header formatting");
  }
}
__name(decodeProtectedHeader, "decodeProtectedHeader");
var init_decode_protected_header = __esm({
  "../node_modules/jose/dist/browser/util/decode_protected_header.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_base64url2();
    init_buffer_utils();
    init_is_object();
    __name2(decodeProtectedHeader, "decodeProtectedHeader");
  }
});
function decodeJwt(jwt) {
  if (typeof jwt !== "string")
    throw new JWTInvalid("JWTs must use Compact JWS serialization, JWT must be a string");
  const { 1: payload, length } = jwt.split(".");
  if (length === 5)
    throw new JWTInvalid("Only JWTs using Compact JWS serialization can be decoded");
  if (length !== 3)
    throw new JWTInvalid("Invalid JWT");
  if (!payload)
    throw new JWTInvalid("JWTs must contain a payload");
  let decoded;
  try {
    decoded = decode3(payload);
  } catch {
    throw new JWTInvalid("Failed to base64url decode the payload");
  }
  let result;
  try {
    result = JSON.parse(decoder.decode(decoded));
  } catch {
    throw new JWTInvalid("Failed to parse the decoded payload as JSON");
  }
  if (!isObject2(result))
    throw new JWTInvalid("Invalid JWT Claims Set");
  return result;
}
__name(decodeJwt, "decodeJwt");
var init_decode_jwt = __esm({
  "../node_modules/jose/dist/browser/util/decode_jwt.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_base64url2();
    init_buffer_utils();
    init_is_object();
    init_errors4();
    __name2(decodeJwt, "decodeJwt");
  }
});
var init_browser = __esm({
  "../node_modules/jose/dist/browser/index.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_verify4();
    init_sign4();
    init_remote();
    init_import();
    init_decode_protected_header();
    init_decode_jwt();
    init_errors4();
    init_base64url2();
  }
});
function createHash(algorithm2, encoding) {
  return {
    digest: /* @__PURE__ */ __name2(async (input) => {
      const encoder3 = new TextEncoder();
      const data = typeof input === "string" ? encoder3.encode(input) : input;
      const hashBuffer = await subtle.digest(algorithm2, data);
      if (encoding === "hex") {
        const hashArray = Array.from(new Uint8Array(hashBuffer));
        const hashHex = hashArray.map((b) => b.toString(16).padStart(2, "0")).join("");
        return hashHex;
      }
      if (encoding === "base64" || encoding === "base64url" || encoding === "base64urlnopad") {
        if (encoding.includes("url")) {
          return base64Url.encode(hashBuffer, {
            padding: encoding !== "base64urlnopad"
          });
        }
        const hashBase64 = base64.encode(hashBuffer);
        return hashBase64;
      }
      return hashBuffer;
    }, "digest")
  };
}
__name(createHash, "createHash");
var init_hash = __esm({
  "../node_modules/@better-auth/utils/dist/hash.mjs"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_crypto_web();
    init_base642();
    __name2(createHash, "createHash");
  }
});
async function generateCodeChallenge(codeVerifier) {
  const codeChallengeBytes = await createHash("SHA-256").digest(codeVerifier);
  return base64Url.encode(new Uint8Array(codeChallengeBytes), {
    padding: false
  });
}
__name(generateCodeChallenge, "generateCodeChallenge");
function getOAuth2Tokens(data) {
  return {
    tokenType: data.token_type,
    accessToken: data.access_token,
    refreshToken: data.refresh_token,
    accessTokenExpiresAt: data.expires_in ? getDate(data.expires_in, "sec") : void 0,
    scopes: data?.scope ? typeof data.scope === "string" ? data.scope.split(" ") : data.scope : [],
    idToken: data.id_token
  };
}
__name(getOAuth2Tokens, "getOAuth2Tokens");
async function createAuthorizationURL({
  id,
  options,
  authorizationEndpoint,
  state,
  codeVerifier,
  scopes,
  claims,
  redirectURI,
  duration,
  prompt,
  accessType,
  responseType,
  display,
  loginHint,
  hd,
  responseMode,
  additionalParams,
  scopeJoiner
}) {
  const url = new URL(authorizationEndpoint);
  url.searchParams.set("response_type", responseType || "code");
  url.searchParams.set("client_id", options.clientId);
  url.searchParams.set("state", state);
  url.searchParams.set("scope", scopes.join(scopeJoiner || " "));
  url.searchParams.set("redirect_uri", options.redirectURI || redirectURI);
  duration && url.searchParams.set("duration", duration);
  display && url.searchParams.set("display", display);
  loginHint && url.searchParams.set("login_hint", loginHint);
  prompt && url.searchParams.set("prompt", prompt);
  hd && url.searchParams.set("hd", hd);
  accessType && url.searchParams.set("access_type", accessType);
  responseMode && url.searchParams.set("response_mode", responseMode);
  if (codeVerifier) {
    const codeChallenge = await generateCodeChallenge(codeVerifier);
    url.searchParams.set("code_challenge_method", "S256");
    url.searchParams.set("code_challenge", codeChallenge);
  }
  if (claims) {
    const claimsObj = claims.reduce(
      (acc, claim) => {
        acc[claim] = null;
        return acc;
      },
      {}
    );
    url.searchParams.set(
      "claims",
      JSON.stringify({
        id_token: { email: null, email_verified: null, ...claimsObj }
      })
    );
  }
  if (additionalParams) {
    Object.entries(additionalParams).forEach(([key, value]) => {
      url.searchParams.set(key, value);
    });
  }
  return url;
}
__name(createAuthorizationURL, "createAuthorizationURL");
async function validateAuthorizationCode({
  code,
  codeVerifier,
  redirectURI,
  options,
  tokenEndpoint,
  authentication,
  deviceId,
  headers
}) {
  const body = new URLSearchParams();
  const requestHeaders = {
    "content-type": "application/x-www-form-urlencoded",
    accept: "application/json",
    "user-agent": "better-auth",
    ...headers
  };
  body.set("grant_type", "authorization_code");
  body.set("code", code);
  codeVerifier && body.set("code_verifier", codeVerifier);
  options.clientKey && body.set("client_key", options.clientKey);
  deviceId && body.set("device_id", deviceId);
  body.set("redirect_uri", options.redirectURI || redirectURI);
  if (authentication === "basic") {
    const encodedCredentials = base64Url.encode(
      `${options.clientId}:${options.clientSecret}`
    );
    requestHeaders["authorization"] = `Basic ${encodedCredentials}`;
  } else {
    body.set("client_id", options.clientId);
    body.set("client_secret", options.clientSecret);
  }
  const { data, error: error2 } = await betterFetch(tokenEndpoint, {
    method: "POST",
    body,
    headers: requestHeaders
  });
  if (error2) {
    throw error2;
  }
  const tokens = getOAuth2Tokens(data);
  return tokens;
}
__name(validateAuthorizationCode, "validateAuthorizationCode");
async function refreshAccessToken({
  refreshToken: refreshToken2,
  options,
  tokenEndpoint,
  authentication,
  extraParams,
  grantType = "refresh_token"
}) {
  const body = new URLSearchParams();
  const headers = {
    "content-type": "application/x-www-form-urlencoded",
    accept: "application/json"
  };
  body.set("grant_type", grantType);
  body.set("refresh_token", refreshToken2);
  if (authentication === "basic") {
    const encodedCredentials = base64Url.encode(
      `${options.clientId}:${options.clientSecret}`
    );
    headers["authorization"] = `Basic ${encodedCredentials}`;
  } else {
    body.set("client_id", options.clientId);
    body.set("client_secret", options.clientSecret);
  }
  if (extraParams) {
    for (const [key, value] of Object.entries(extraParams)) {
      body.set(key, value);
    }
  }
  const { data, error: error2 } = await betterFetch(tokenEndpoint, {
    method: "POST",
    body,
    headers
  });
  if (error2) {
    throw error2;
  }
  const tokens = {
    accessToken: data.access_token,
    refreshToken: data.refresh_token,
    tokenType: data.token_type,
    scopes: data.scope?.split(" "),
    idToken: data.id_token
  };
  if (data.expires_in) {
    const now = /* @__PURE__ */ new Date();
    tokens.accessTokenExpiresAt = new Date(
      now.getTime() + data.expires_in * 1e3
    );
  }
  return tokens;
}
__name(refreshAccessToken, "refreshAccessToken");
var init_better_auth_DufyW0qf = __esm({
  "../node_modules/better-auth/dist/shared/better-auth.DufyW0qf.mjs"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_base642();
    init_dist3();
    init_better_auth_CW6D9eSx();
    init_hash();
    __name2(generateCodeChallenge, "generateCodeChallenge");
    __name2(getOAuth2Tokens, "getOAuth2Tokens");
    __name2(createAuthorizationURL, "createAuthorizationURL");
    __name2(validateAuthorizationCode, "validateAuthorizationCode");
    __name2(refreshAccessToken, "refreshAccessToken");
  }
});
function isBytes(a) {
  return a instanceof Uint8Array || ArrayBuffer.isView(a) && a.constructor.name === "Uint8Array";
}
__name(isBytes, "isBytes");
function anumber(n) {
  if (!Number.isSafeInteger(n) || n < 0)
    throw new Error("positive integer expected, got " + n);
}
__name(anumber, "anumber");
function abytes(b, ...lengths) {
  if (!isBytes(b))
    throw new Error("Uint8Array expected");
  if (lengths.length > 0 && !lengths.includes(b.length))
    throw new Error("Uint8Array expected of length " + lengths + ", got length=" + b.length);
}
__name(abytes, "abytes");
function ahash(h) {
  if (typeof h !== "function" || typeof h.create !== "function")
    throw new Error("Hash should be wrapped by utils.createHasher");
  anumber(h.outputLen);
  anumber(h.blockLen);
}
__name(ahash, "ahash");
function aexists(instance, checkFinished = true) {
  if (instance.destroyed)
    throw new Error("Hash instance has been destroyed");
  if (checkFinished && instance.finished)
    throw new Error("Hash#digest() has already been called");
}
__name(aexists, "aexists");
function aoutput(out, instance) {
  abytes(out);
  const min = instance.outputLen;
  if (out.length < min) {
    throw new Error("digestInto() expects output buffer of length at least " + min);
  }
}
__name(aoutput, "aoutput");
function u32(arr) {
  return new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));
}
__name(u32, "u32");
function clean(...arrays) {
  for (let i = 0; i < arrays.length; i++) {
    arrays[i].fill(0);
  }
}
__name(clean, "clean");
function createView(arr) {
  return new DataView(arr.buffer, arr.byteOffset, arr.byteLength);
}
__name(createView, "createView");
function rotr(word, shift) {
  return word << 32 - shift | word >>> shift;
}
__name(rotr, "rotr");
function rotl(word, shift) {
  return word << shift | word >>> 32 - shift >>> 0;
}
__name(rotl, "rotl");
function byteSwap(word) {
  return word << 24 & 4278190080 | word << 8 & 16711680 | word >>> 8 & 65280 | word >>> 24 & 255;
}
__name(byteSwap, "byteSwap");
function byteSwap32(arr) {
  for (let i = 0; i < arr.length; i++) {
    arr[i] = byteSwap(arr[i]);
  }
  return arr;
}
__name(byteSwap32, "byteSwap32");
function asciiToBase16(ch) {
  if (ch >= asciis._0 && ch <= asciis._9)
    return ch - asciis._0;
  if (ch >= asciis.A && ch <= asciis.F)
    return ch - (asciis.A - 10);
  if (ch >= asciis.a && ch <= asciis.f)
    return ch - (asciis.a - 10);
  return;
}
__name(asciiToBase16, "asciiToBase16");
function hexToBytes(hex2) {
  if (typeof hex2 !== "string")
    throw new Error("hex string expected, got " + typeof hex2);
  if (hasHexBuiltin)
    return Uint8Array.fromHex(hex2);
  const hl = hex2.length;
  const al = hl / 2;
  if (hl % 2)
    throw new Error("hex string expected, got unpadded hex of length " + hl);
  const array3 = new Uint8Array(al);
  for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {
    const n1 = asciiToBase16(hex2.charCodeAt(hi));
    const n2 = asciiToBase16(hex2.charCodeAt(hi + 1));
    if (n1 === void 0 || n2 === void 0) {
      const char = hex2[hi] + hex2[hi + 1];
      throw new Error('hex string expected, got non-hex character "' + char + '" at index ' + hi);
    }
    array3[ai] = n1 * 16 + n2;
  }
  return array3;
}
__name(hexToBytes, "hexToBytes");
async function asyncLoop(iters, tick, cb) {
  let ts = Date.now();
  for (let i = 0; i < iters; i++) {
    cb(i);
    const diff = Date.now() - ts;
    if (diff >= 0 && diff < tick)
      continue;
    await nextTick();
    ts += diff;
  }
}
__name(asyncLoop, "asyncLoop");
function utf8ToBytes(str) {
  if (typeof str !== "string")
    throw new Error("string expected");
  return new Uint8Array(new TextEncoder().encode(str));
}
__name(utf8ToBytes, "utf8ToBytes");
function toBytes(data) {
  if (typeof data === "string")
    data = utf8ToBytes(data);
  abytes(data);
  return data;
}
__name(toBytes, "toBytes");
function kdfInputToBytes(data) {
  if (typeof data === "string")
    data = utf8ToBytes(data);
  abytes(data);
  return data;
}
__name(kdfInputToBytes, "kdfInputToBytes");
function checkOpts(defaults, opts) {
  if (opts !== void 0 && {}.toString.call(opts) !== "[object Object]")
    throw new Error("options should be object or undefined");
  const merged = Object.assign(defaults, opts);
  return merged;
}
__name(checkOpts, "checkOpts");
function createHasher(hashCons) {
  const hashC = /* @__PURE__ */ __name2((msg) => hashCons().update(toBytes(msg)).digest(), "hashC");
  const tmp = hashCons();
  hashC.outputLen = tmp.outputLen;
  hashC.blockLen = tmp.blockLen;
  hashC.create = () => hashCons();
  return hashC;
}
__name(createHasher, "createHasher");
var isLE;
var swap32IfBE;
var hasHexBuiltin;
var asciis;
var nextTick;
var Hash;
var init_utils = __esm({
  "../node_modules/@noble/hashes/esm/utils.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    __name2(isBytes, "isBytes");
    __name2(anumber, "anumber");
    __name2(abytes, "abytes");
    __name2(ahash, "ahash");
    __name2(aexists, "aexists");
    __name2(aoutput, "aoutput");
    __name2(u32, "u32");
    __name2(clean, "clean");
    __name2(createView, "createView");
    __name2(rotr, "rotr");
    __name2(rotl, "rotl");
    isLE = /* @__PURE__ */ (() => new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68)();
    __name2(byteSwap, "byteSwap");
    __name2(byteSwap32, "byteSwap32");
    swap32IfBE = isLE ? (u) => u : byteSwap32;
    hasHexBuiltin = /* @__PURE__ */ (() => (
      // @ts-ignore
      typeof Uint8Array.from([]).toHex === "function" && typeof Uint8Array.fromHex === "function"
    ))();
    asciis = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 };
    __name2(asciiToBase16, "asciiToBase16");
    __name2(hexToBytes, "hexToBytes");
    nextTick = /* @__PURE__ */ __name2(async () => {
    }, "nextTick");
    __name2(asyncLoop, "asyncLoop");
    __name2(utf8ToBytes, "utf8ToBytes");
    __name2(toBytes, "toBytes");
    __name2(kdfInputToBytes, "kdfInputToBytes");
    __name2(checkOpts, "checkOpts");
    Hash = class {
      static {
        __name(this, "Hash");
      }
      static {
        __name2(this, "Hash");
      }
    };
    __name2(createHasher, "createHasher");
  }
});
var HMAC;
var hmac;
var init_hmac2 = __esm({
  "../node_modules/@noble/hashes/esm/hmac.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_utils();
    HMAC = class extends Hash {
      static {
        __name(this, "HMAC");
      }
      static {
        __name2(this, "HMAC");
      }
      constructor(hash, _key) {
        super();
        this.finished = false;
        this.destroyed = false;
        ahash(hash);
        const key = toBytes(_key);
        this.iHash = hash.create();
        if (typeof this.iHash.update !== "function")
          throw new Error("Expected instance of class which extends utils.Hash");
        this.blockLen = this.iHash.blockLen;
        this.outputLen = this.iHash.outputLen;
        const blockLen = this.blockLen;
        const pad = new Uint8Array(blockLen);
        pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);
        for (let i = 0; i < pad.length; i++)
          pad[i] ^= 54;
        this.iHash.update(pad);
        this.oHash = hash.create();
        for (let i = 0; i < pad.length; i++)
          pad[i] ^= 54 ^ 92;
        this.oHash.update(pad);
        clean(pad);
      }
      update(buf) {
        aexists(this);
        this.iHash.update(buf);
        return this;
      }
      digestInto(out) {
        aexists(this);
        abytes(out, this.outputLen);
        this.finished = true;
        this.iHash.digestInto(out);
        this.oHash.update(out);
        this.oHash.digestInto(out);
        this.destroy();
      }
      digest() {
        const out = new Uint8Array(this.oHash.outputLen);
        this.digestInto(out);
        return out;
      }
      _cloneInto(to) {
        to || (to = Object.create(Object.getPrototypeOf(this), {}));
        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;
        to = to;
        to.finished = finished;
        to.destroyed = destroyed;
        to.blockLen = blockLen;
        to.outputLen = outputLen;
        to.oHash = oHash._cloneInto(to.oHash);
        to.iHash = iHash._cloneInto(to.iHash);
        return to;
      }
      clone() {
        return this._cloneInto();
      }
      destroy() {
        this.destroyed = true;
        this.oHash.destroy();
        this.iHash.destroy();
      }
    };
    hmac = /* @__PURE__ */ __name2((hash, key, message2) => new HMAC(hash, key).update(message2).digest(), "hmac");
    hmac.create = (hash, key) => new HMAC(hash, key);
  }
});
function pbkdf2Init(hash, _password, _salt, _opts) {
  ahash(hash);
  const opts = checkOpts({ dkLen: 32, asyncTick: 10 }, _opts);
  const { c, dkLen, asyncTick } = opts;
  anumber(c);
  anumber(dkLen);
  anumber(asyncTick);
  if (c < 1)
    throw new Error("iterations (c) should be >= 1");
  const password = kdfInputToBytes(_password);
  const salt = kdfInputToBytes(_salt);
  const DK = new Uint8Array(dkLen);
  const PRF = hmac.create(hash, password);
  const PRFSalt = PRF._cloneInto().update(salt);
  return { c, dkLen, asyncTick, DK, PRF, PRFSalt };
}
__name(pbkdf2Init, "pbkdf2Init");
function pbkdf2Output(PRF, PRFSalt, DK, prfW, u) {
  PRF.destroy();
  PRFSalt.destroy();
  if (prfW)
    prfW.destroy();
  clean(u);
  return DK;
}
__name(pbkdf2Output, "pbkdf2Output");
function pbkdf2(hash, password, salt, opts) {
  const { c, dkLen, DK, PRF, PRFSalt } = pbkdf2Init(hash, password, salt, opts);
  let prfW;
  const arr = new Uint8Array(4);
  const view = createView(arr);
  const u = new Uint8Array(PRF.outputLen);
  for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {
    const Ti = DK.subarray(pos, pos + PRF.outputLen);
    view.setInt32(0, ti, false);
    (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);
    Ti.set(u.subarray(0, Ti.length));
    for (let ui = 1; ui < c; ui++) {
      PRF._cloneInto(prfW).update(u).digestInto(u);
      for (let i = 0; i < Ti.length; i++)
        Ti[i] ^= u[i];
    }
  }
  return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);
}
__name(pbkdf2, "pbkdf2");
var init_pbkdf2 = __esm({
  "../node_modules/@noble/hashes/esm/pbkdf2.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_hmac2();
    init_utils();
    __name2(pbkdf2Init, "pbkdf2Init");
    __name2(pbkdf2Output, "pbkdf2Output");
    __name2(pbkdf2, "pbkdf2");
  }
});
function setBigUint64(view, byteOffset, value, isLE2) {
  if (typeof view.setBigUint64 === "function")
    return view.setBigUint64(byteOffset, value, isLE2);
  const _32n = BigInt(32);
  const _u32_max = BigInt(4294967295);
  const wh = Number(value >> _32n & _u32_max);
  const wl = Number(value & _u32_max);
  const h = isLE2 ? 4 : 0;
  const l = isLE2 ? 0 : 4;
  view.setUint32(byteOffset + h, wh, isLE2);
  view.setUint32(byteOffset + l, wl, isLE2);
}
__name(setBigUint64, "setBigUint64");
function Chi(a, b, c) {
  return a & b ^ ~a & c;
}
__name(Chi, "Chi");
function Maj(a, b, c) {
  return a & b ^ a & c ^ b & c;
}
__name(Maj, "Maj");
var HashMD;
var SHA256_IV;
var init_md = __esm({
  "../node_modules/@noble/hashes/esm/_md.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_utils();
    __name2(setBigUint64, "setBigUint64");
    __name2(Chi, "Chi");
    __name2(Maj, "Maj");
    HashMD = class extends Hash {
      static {
        __name(this, "HashMD");
      }
      static {
        __name2(this, "HashMD");
      }
      constructor(blockLen, outputLen, padOffset, isLE2) {
        super();
        this.finished = false;
        this.length = 0;
        this.pos = 0;
        this.destroyed = false;
        this.blockLen = blockLen;
        this.outputLen = outputLen;
        this.padOffset = padOffset;
        this.isLE = isLE2;
        this.buffer = new Uint8Array(blockLen);
        this.view = createView(this.buffer);
      }
      update(data) {
        aexists(this);
        data = toBytes(data);
        abytes(data);
        const { view, buffer, blockLen } = this;
        const len = data.length;
        for (let pos = 0; pos < len; ) {
          const take = Math.min(blockLen - this.pos, len - pos);
          if (take === blockLen) {
            const dataView = createView(data);
            for (; blockLen <= len - pos; pos += blockLen)
              this.process(dataView, pos);
            continue;
          }
          buffer.set(data.subarray(pos, pos + take), this.pos);
          this.pos += take;
          pos += take;
          if (this.pos === blockLen) {
            this.process(view, 0);
            this.pos = 0;
          }
        }
        this.length += data.length;
        this.roundClean();
        return this;
      }
      digestInto(out) {
        aexists(this);
        aoutput(out, this);
        this.finished = true;
        const { buffer, view, blockLen, isLE: isLE2 } = this;
        let { pos } = this;
        buffer[pos++] = 128;
        clean(this.buffer.subarray(pos));
        if (this.padOffset > blockLen - pos) {
          this.process(view, 0);
          pos = 0;
        }
        for (let i = pos; i < blockLen; i++)
          buffer[i] = 0;
        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE2);
        this.process(view, 0);
        const oview = createView(out);
        const len = this.outputLen;
        if (len % 4)
          throw new Error("_sha2: outputLen should be aligned to 32bit");
        const outLen = len / 4;
        const state = this.get();
        if (outLen > state.length)
          throw new Error("_sha2: outputLen bigger than state");
        for (let i = 0; i < outLen; i++)
          oview.setUint32(4 * i, state[i], isLE2);
      }
      digest() {
        const { buffer, outputLen } = this;
        this.digestInto(buffer);
        const res = buffer.slice(0, outputLen);
        this.destroy();
        return res;
      }
      _cloneInto(to) {
        to || (to = new this.constructor());
        to.set(...this.get());
        const { blockLen, buffer, length, finished, destroyed, pos } = this;
        to.destroyed = destroyed;
        to.finished = finished;
        to.length = length;
        to.pos = pos;
        if (length % blockLen)
          to.buffer.set(buffer);
        return to;
      }
      clone() {
        return this._cloneInto();
      }
    };
    SHA256_IV = /* @__PURE__ */ Uint32Array.from([
      1779033703,
      3144134277,
      1013904242,
      2773480762,
      1359893119,
      2600822924,
      528734635,
      1541459225
    ]);
  }
});
var SHA256_K;
var SHA256_W;
var SHA256;
var sha256;
var init_sha2 = __esm({
  "../node_modules/@noble/hashes/esm/sha2.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_md();
    init_utils();
    SHA256_K = /* @__PURE__ */ Uint32Array.from([
      1116352408,
      1899447441,
      3049323471,
      3921009573,
      961987163,
      1508970993,
      2453635748,
      2870763221,
      3624381080,
      310598401,
      607225278,
      1426881987,
      1925078388,
      2162078206,
      2614888103,
      3248222580,
      3835390401,
      4022224774,
      264347078,
      604807628,
      770255983,
      1249150122,
      1555081692,
      1996064986,
      2554220882,
      2821834349,
      2952996808,
      3210313671,
      3336571891,
      3584528711,
      113926993,
      338241895,
      666307205,
      773529912,
      1294757372,
      1396182291,
      1695183700,
      1986661051,
      2177026350,
      2456956037,
      2730485921,
      2820302411,
      3259730800,
      3345764771,
      3516065817,
      3600352804,
      4094571909,
      275423344,
      430227734,
      506948616,
      659060556,
      883997877,
      958139571,
      1322822218,
      1537002063,
      1747873779,
      1955562222,
      2024104815,
      2227730452,
      2361852424,
      2428436474,
      2756734187,
      3204031479,
      3329325298
    ]);
    SHA256_W = /* @__PURE__ */ new Uint32Array(64);
    SHA256 = class extends HashMD {
      static {
        __name(this, "SHA256");
      }
      static {
        __name2(this, "SHA256");
      }
      constructor(outputLen = 32) {
        super(64, outputLen, 8, false);
        this.A = SHA256_IV[0] | 0;
        this.B = SHA256_IV[1] | 0;
        this.C = SHA256_IV[2] | 0;
        this.D = SHA256_IV[3] | 0;
        this.E = SHA256_IV[4] | 0;
        this.F = SHA256_IV[5] | 0;
        this.G = SHA256_IV[6] | 0;
        this.H = SHA256_IV[7] | 0;
      }
      get() {
        const { A, B, C, D, E, F, G, H } = this;
        return [A, B, C, D, E, F, G, H];
      }
      // prettier-ignore
      set(A, B, C, D, E, F, G, H) {
        this.A = A | 0;
        this.B = B | 0;
        this.C = C | 0;
        this.D = D | 0;
        this.E = E | 0;
        this.F = F | 0;
        this.G = G | 0;
        this.H = H | 0;
      }
      process(view, offset) {
        for (let i = 0; i < 16; i++, offset += 4)
          SHA256_W[i] = view.getUint32(offset, false);
        for (let i = 16; i < 64; i++) {
          const W15 = SHA256_W[i - 15];
          const W2 = SHA256_W[i - 2];
          const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ W15 >>> 3;
          const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ W2 >>> 10;
          SHA256_W[i] = s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16] | 0;
        }
        let { A, B, C, D, E, F, G, H } = this;
        for (let i = 0; i < 64; i++) {
          const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);
          const T1 = H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i] | 0;
          const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);
          const T2 = sigma0 + Maj(A, B, C) | 0;
          H = G;
          G = F;
          F = E;
          E = D + T1 | 0;
          D = C;
          C = B;
          B = A;
          A = T1 + T2 | 0;
        }
        A = A + this.A | 0;
        B = B + this.B | 0;
        C = C + this.C | 0;
        D = D + this.D | 0;
        E = E + this.E | 0;
        F = F + this.F | 0;
        G = G + this.G | 0;
        H = H + this.H | 0;
        this.set(A, B, C, D, E, F, G, H);
      }
      roundClean() {
        clean(SHA256_W);
      }
      destroy() {
        this.set(0, 0, 0, 0, 0, 0, 0, 0);
        clean(this.buffer);
      }
    };
    sha256 = /* @__PURE__ */ createHasher(() => new SHA256());
  }
});
function XorAndSalsa(prev, pi, input, ii, out, oi) {
  let y00 = prev[pi++] ^ input[ii++], y01 = prev[pi++] ^ input[ii++];
  let y02 = prev[pi++] ^ input[ii++], y03 = prev[pi++] ^ input[ii++];
  let y04 = prev[pi++] ^ input[ii++], y05 = prev[pi++] ^ input[ii++];
  let y06 = prev[pi++] ^ input[ii++], y07 = prev[pi++] ^ input[ii++];
  let y08 = prev[pi++] ^ input[ii++], y09 = prev[pi++] ^ input[ii++];
  let y10 = prev[pi++] ^ input[ii++], y11 = prev[pi++] ^ input[ii++];
  let y12 = prev[pi++] ^ input[ii++], y13 = prev[pi++] ^ input[ii++];
  let y14 = prev[pi++] ^ input[ii++], y15 = prev[pi++] ^ input[ii++];
  let x00 = y00, x01 = y01, x02 = y02, x03 = y03, x04 = y04, x05 = y05, x06 = y06, x07 = y07, x08 = y08, x09 = y09, x10 = y10, x11 = y11, x12 = y12, x13 = y13, x14 = y14, x15 = y15;
  for (let i = 0; i < 8; i += 2) {
    x04 ^= rotl(x00 + x12 | 0, 7);
    x08 ^= rotl(x04 + x00 | 0, 9);
    x12 ^= rotl(x08 + x04 | 0, 13);
    x00 ^= rotl(x12 + x08 | 0, 18);
    x09 ^= rotl(x05 + x01 | 0, 7);
    x13 ^= rotl(x09 + x05 | 0, 9);
    x01 ^= rotl(x13 + x09 | 0, 13);
    x05 ^= rotl(x01 + x13 | 0, 18);
    x14 ^= rotl(x10 + x06 | 0, 7);
    x02 ^= rotl(x14 + x10 | 0, 9);
    x06 ^= rotl(x02 + x14 | 0, 13);
    x10 ^= rotl(x06 + x02 | 0, 18);
    x03 ^= rotl(x15 + x11 | 0, 7);
    x07 ^= rotl(x03 + x15 | 0, 9);
    x11 ^= rotl(x07 + x03 | 0, 13);
    x15 ^= rotl(x11 + x07 | 0, 18);
    x01 ^= rotl(x00 + x03 | 0, 7);
    x02 ^= rotl(x01 + x00 | 0, 9);
    x03 ^= rotl(x02 + x01 | 0, 13);
    x00 ^= rotl(x03 + x02 | 0, 18);
    x06 ^= rotl(x05 + x04 | 0, 7);
    x07 ^= rotl(x06 + x05 | 0, 9);
    x04 ^= rotl(x07 + x06 | 0, 13);
    x05 ^= rotl(x04 + x07 | 0, 18);
    x11 ^= rotl(x10 + x09 | 0, 7);
    x08 ^= rotl(x11 + x10 | 0, 9);
    x09 ^= rotl(x08 + x11 | 0, 13);
    x10 ^= rotl(x09 + x08 | 0, 18);
    x12 ^= rotl(x15 + x14 | 0, 7);
    x13 ^= rotl(x12 + x15 | 0, 9);
    x14 ^= rotl(x13 + x12 | 0, 13);
    x15 ^= rotl(x14 + x13 | 0, 18);
  }
  out[oi++] = y00 + x00 | 0;
  out[oi++] = y01 + x01 | 0;
  out[oi++] = y02 + x02 | 0;
  out[oi++] = y03 + x03 | 0;
  out[oi++] = y04 + x04 | 0;
  out[oi++] = y05 + x05 | 0;
  out[oi++] = y06 + x06 | 0;
  out[oi++] = y07 + x07 | 0;
  out[oi++] = y08 + x08 | 0;
  out[oi++] = y09 + x09 | 0;
  out[oi++] = y10 + x10 | 0;
  out[oi++] = y11 + x11 | 0;
  out[oi++] = y12 + x12 | 0;
  out[oi++] = y13 + x13 | 0;
  out[oi++] = y14 + x14 | 0;
  out[oi++] = y15 + x15 | 0;
}
__name(XorAndSalsa, "XorAndSalsa");
function BlockMix(input, ii, out, oi, r) {
  let head = oi + 0;
  let tail = oi + 16 * r;
  for (let i = 0; i < 16; i++)
    out[tail + i] = input[ii + (2 * r - 1) * 16 + i];
  for (let i = 0; i < r; i++, head += 16, ii += 16) {
    XorAndSalsa(out, tail, input, ii, out, head);
    if (i > 0)
      tail += 16;
    XorAndSalsa(out, head, input, ii += 16, out, tail);
  }
}
__name(BlockMix, "BlockMix");
function scryptInit(password, salt, _opts) {
  const opts = checkOpts({
    dkLen: 32,
    asyncTick: 10,
    maxmem: 1024 ** 3 + 1024
  }, _opts);
  const { N, r, p, dkLen, asyncTick, maxmem, onProgress } = opts;
  anumber(N);
  anumber(r);
  anumber(p);
  anumber(dkLen);
  anumber(asyncTick);
  anumber(maxmem);
  if (onProgress !== void 0 && typeof onProgress !== "function")
    throw new Error("progressCb should be function");
  const blockSize = 128 * r;
  const blockSize32 = blockSize / 4;
  const pow32 = Math.pow(2, 32);
  if (N <= 1 || (N & N - 1) !== 0 || N > pow32) {
    throw new Error("Scrypt: N must be larger than 1, a power of 2, and less than 2^32");
  }
  if (p < 0 || p > (pow32 - 1) * 32 / blockSize) {
    throw new Error("Scrypt: p must be a positive integer less than or equal to ((2^32 - 1) * 32) / (128 * r)");
  }
  if (dkLen < 0 || dkLen > (pow32 - 1) * 32) {
    throw new Error("Scrypt: dkLen should be positive integer less than or equal to (2^32 - 1) * 32");
  }
  const memUsed = blockSize * (N + p);
  if (memUsed > maxmem) {
    throw new Error("Scrypt: memused is bigger than maxMem. Expected 128 * r * (N + p) > maxmem of " + maxmem);
  }
  const B = pbkdf2(sha256, password, salt, { c: 1, dkLen: blockSize * p });
  const B32 = u32(B);
  const V = u32(new Uint8Array(blockSize * N));
  const tmp = u32(new Uint8Array(blockSize));
  let blockMixCb = /* @__PURE__ */ __name2(() => {
  }, "blockMixCb");
  if (onProgress) {
    const totalBlockMix = 2 * N * p;
    const callbackPer = Math.max(Math.floor(totalBlockMix / 1e4), 1);
    let blockMixCnt = 0;
    blockMixCb = /* @__PURE__ */ __name2(() => {
      blockMixCnt++;
      if (onProgress && (!(blockMixCnt % callbackPer) || blockMixCnt === totalBlockMix))
        onProgress(blockMixCnt / totalBlockMix);
    }, "blockMixCb");
  }
  return { N, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb, asyncTick };
}
__name(scryptInit, "scryptInit");
function scryptOutput(password, dkLen, B, V, tmp) {
  const res = pbkdf2(sha256, password, B, { c: 1, dkLen });
  clean(B, V, tmp);
  return res;
}
__name(scryptOutput, "scryptOutput");
async function scryptAsync(password, salt, opts) {
  const { N, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb, asyncTick } = scryptInit(password, salt, opts);
  swap32IfBE(B32);
  for (let pi = 0; pi < p; pi++) {
    const Pi = blockSize32 * pi;
    for (let i = 0; i < blockSize32; i++)
      V[i] = B32[Pi + i];
    let pos = 0;
    await asyncLoop(N - 1, asyncTick, () => {
      BlockMix(V, pos, V, pos += blockSize32, r);
      blockMixCb();
    });
    BlockMix(V, (N - 1) * blockSize32, B32, Pi, r);
    blockMixCb();
    await asyncLoop(N, asyncTick, () => {
      const j = B32[Pi + blockSize32 - 16] % N;
      for (let k = 0; k < blockSize32; k++)
        tmp[k] = B32[Pi + k] ^ V[j * blockSize32 + k];
      BlockMix(tmp, 0, B32, Pi, r);
      blockMixCb();
    });
  }
  swap32IfBE(B32);
  return scryptOutput(password, dkLen, B, V, tmp);
}
__name(scryptAsync, "scryptAsync");
var init_scrypt = __esm({
  "../node_modules/@noble/hashes/esm/scrypt.js"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_pbkdf2();
    init_sha2();
    init_utils();
    __name2(XorAndSalsa, "XorAndSalsa");
    __name2(BlockMix, "BlockMix");
    __name2(scryptInit, "scryptInit");
    __name2(scryptOutput, "scryptOutput");
    __name2(scryptAsync, "scryptAsync");
  }
});
var init_dist4 = __esm({
  "../node_modules/@better-auth/utils/dist/index.mjs"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_crypto_web();
  }
});
function expandAlphabet(alphabet) {
  switch (alphabet) {
    case "a-z":
      return "abcdefghijklmnopqrstuvwxyz";
    case "A-Z":
      return "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    case "0-9":
      return "0123456789";
    case "-_":
      return "-_";
    default:
      throw new Error(`Unsupported alphabet: ${alphabet}`);
  }
}
__name(expandAlphabet, "expandAlphabet");
function createRandomStringGenerator(...baseAlphabets) {
  const baseCharSet = baseAlphabets.map(expandAlphabet).join("");
  if (baseCharSet.length === 0) {
    throw new Error(
      "No valid characters provided for random string generation."
    );
  }
  const baseCharSetLength = baseCharSet.length;
  return (length, ...alphabets) => {
    if (length <= 0) {
      throw new Error("Length must be a positive integer.");
    }
    let charSet = baseCharSet;
    let charSetLength = baseCharSetLength;
    if (alphabets.length > 0) {
      charSet = alphabets.map(expandAlphabet).join("");
      charSetLength = charSet.length;
    }
    const maxValid = Math.floor(256 / charSetLength) * charSetLength;
    const buf = new Uint8Array(length * 2);
    const bufLength = buf.length;
    let result = "";
    let bufIndex = bufLength;
    let rand;
    while (result.length < length) {
      if (bufIndex >= bufLength) {
        getRandomValues(buf);
        bufIndex = 0;
      }
      rand = buf[bufIndex++];
      if (rand < maxValid) {
        result += charSet[rand % charSetLength];
      }
    }
    return result;
  };
}
__name(createRandomStringGenerator, "createRandomStringGenerator");
var init_random = __esm({
  "../node_modules/@better-auth/utils/dist/random.mjs"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_crypto_web();
    __name2(expandAlphabet, "expandAlphabet");
    __name2(createRandomStringGenerator, "createRandomStringGenerator");
  }
});
var generateRandomString;
var init_better_auth_B4Qoxdgc = __esm({
  "../node_modules/better-auth/dist/shared/better-auth.B4Qoxdgc.mjs"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_random();
    generateRandomString = createRandomStringGenerator(
      "a-z",
      "0-9",
      "A-Z",
      "-_"
    );
  }
});
function shouldPublishLog(currentLogLevel, logLevel) {
  return levels.indexOf(logLevel) <= levels.indexOf(currentLogLevel);
}
__name(shouldPublishLog, "shouldPublishLog");
var levels;
var colors;
var levelColors;
var formatMessage;
var createLogger;
var logger;
var init_better_auth_Cqykj82J = __esm({
  "../node_modules/better-auth/dist/shared/better-auth.Cqykj82J.mjs"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    levels = ["info", "success", "warn", "error", "debug"];
    __name2(shouldPublishLog, "shouldPublishLog");
    colors = {
      reset: "\x1B[0m",
      bright: "\x1B[1m",
      dim: "\x1B[2m",
      fg: {
        red: "\x1B[31m",
        green: "\x1B[32m",
        yellow: "\x1B[33m",
        blue: "\x1B[34m",
        magenta: "\x1B[35m"
      }
    };
    levelColors = {
      info: colors.fg.blue,
      success: colors.fg.green,
      warn: colors.fg.yellow,
      error: colors.fg.red,
      debug: colors.fg.magenta
    };
    formatMessage = /* @__PURE__ */ __name2((level, message2) => {
      const timestamp = (/* @__PURE__ */ new Date()).toISOString();
      return `${colors.dim}${timestamp}${colors.reset} ${levelColors[level]}${level.toUpperCase()}${colors.reset} ${colors.bright}[Better Auth]:${colors.reset} ${message2}`;
    }, "formatMessage");
    createLogger = /* @__PURE__ */ __name2((options) => {
      const enabled = options?.disabled !== true;
      const logLevel = options?.level ?? "error";
      const LogFunc = /* @__PURE__ */ __name2((level, message2, args = []) => {
        if (!enabled || !shouldPublishLog(logLevel, level)) {
          return;
        }
        const formattedMessage = formatMessage(level, message2);
        if (!options || typeof options.log !== "function") {
          if (level === "error") {
            console.error(formattedMessage, ...args);
          } else if (level === "warn") {
            console.warn(formattedMessage, ...args);
          } else {
            console.log(formattedMessage, ...args);
          }
          return;
        }
        options.log(level === "success" ? "info" : level, message2, ...args);
      }, "LogFunc");
      return Object.fromEntries(
        levels.map((level) => [
          level,
          (...[message2, ...args]) => LogFunc(level, message2, args)
        ])
      );
    }, "createLogger");
    logger = createLogger();
  }
});
var apple;
var getApplePublicKey;
var discord;
var facebook;
var github;
var google;
var microsoft;
var spotify;
var twitch;
var twitter;
var dropbox;
var linkedin;
var cleanDoubleSlashes;
var issuerToEndpoints;
var gitlab;
var tiktok;
var reddit;
var roblox;
var vk;
var kick;
var zoom;
var socialProviders;
var socialProviderList;
var SocialProviderListEnum;
var init_social_providers = __esm({
  "../node_modules/better-auth/dist/social-providers/index.mjs"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_dist3();
    init_dist2();
    init_browser();
    init_better_auth_DufyW0qf();
    init_hash();
    init_base642();
    init_esm2();
    init_dist4();
    init_hex();
    init_better_auth_B4Qoxdgc();
    init_better_auth_DdzSJf_n();
    init_better_auth_Cqykj82J();
    init_random();
    init_better_auth_CW6D9eSx();
    apple = /* @__PURE__ */ __name2((options) => {
      const tokenEndpoint = "https://appleid.apple.com/auth/token";
      return {
        id: "apple",
        name: "Apple",
        async createAuthorizationURL({ state, scopes, redirectURI }) {
          const _scope = options.disableDefaultScope ? [] : ["email", "name"];
          options.scope && _scope.push(...options.scope);
          scopes && _scope.push(...scopes);
          const url = await createAuthorizationURL({
            id: "apple",
            options,
            authorizationEndpoint: "https://appleid.apple.com/auth/authorize",
            scopes: _scope,
            state,
            redirectURI,
            responseMode: "form_post"
          });
          return url;
        },
        validateAuthorizationCode: /* @__PURE__ */ __name2(async ({ code, codeVerifier, redirectURI }) => {
          return validateAuthorizationCode({
            code,
            codeVerifier,
            redirectURI,
            options,
            tokenEndpoint
          });
        }, "validateAuthorizationCode"),
        async verifyIdToken(token, nonce) {
          if (options.disableIdTokenSignIn) {
            return false;
          }
          if (options.verifyIdToken) {
            return options.verifyIdToken(token, nonce);
          }
          const decodedHeader = decodeProtectedHeader(token);
          const { kid, alg: jwtAlg } = decodedHeader;
          if (!kid || !jwtAlg) return false;
          const publicKey = await getApplePublicKey(kid);
          const { payload: jwtClaims } = await jwtVerify(token, publicKey, {
            algorithms: [jwtAlg],
            issuer: "https://appleid.apple.com",
            audience: options.appBundleIdentifier || options.clientId,
            maxTokenAge: "1h"
          });
          ["email_verified", "is_private_email"].forEach((field) => {
            if (jwtClaims[field] !== void 0) {
              jwtClaims[field] = Boolean(jwtClaims[field]);
            }
          });
          if (nonce && jwtClaims.nonce !== nonce) {
            return false;
          }
          return !!jwtClaims;
        },
        refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken2) => {
          return refreshAccessToken({
            refreshToken: refreshToken2,
            options: {
              clientId: options.clientId,
              clientKey: options.clientKey,
              clientSecret: options.clientSecret
            },
            tokenEndpoint: "https://appleid.apple.com/auth/token"
          });
        },
        async getUserInfo(token) {
          if (options.getUserInfo) {
            return options.getUserInfo(token);
          }
          if (!token.idToken) {
            return null;
          }
          const profile = decodeJwt(token.idToken);
          if (!profile) {
            return null;
          }
          const name = token.user ? `${token.user.name?.firstName} ${token.user.name?.lastName}` : profile.name || profile.email;
          const userMap = await options.mapProfileToUser?.(profile);
          return {
            user: {
              id: profile.sub,
              name,
              emailVerified: false,
              email: profile.email,
              ...userMap
            },
            data: profile
          };
        },
        options
      };
    }, "apple");
    getApplePublicKey = /* @__PURE__ */ __name2(async (kid) => {
      const APPLE_BASE_URL = "https://appleid.apple.com";
      const JWKS_APPLE_URI = "/auth/keys";
      const { data } = await betterFetch(`${APPLE_BASE_URL}${JWKS_APPLE_URI}`);
      if (!data?.keys) {
        throw new APIError("BAD_REQUEST", {
          message: "Keys not found"
        });
      }
      const jwk = data.keys.find((key) => key.kid === kid);
      if (!jwk) {
        throw new Error(`JWK with kid ${kid} not found`);
      }
      return await importJWK(jwk, jwk.alg);
    }, "getApplePublicKey");
    discord = /* @__PURE__ */ __name2((options) => {
      return {
        id: "discord",
        name: "Discord",
        createAuthorizationURL({ state, scopes, redirectURI }) {
          const _scopes = options.disableDefaultScope ? [] : ["identify", "email"];
          scopes && _scopes.push(...scopes);
          options.scope && _scopes.push(...options.scope);
          return new URL(
            `https://discord.com/api/oauth2/authorize?scope=${_scopes.join(
              "+"
            )}&response_type=code&client_id=${options.clientId}&redirect_uri=${encodeURIComponent(
              options.redirectURI || redirectURI
            )}&state=${state}&prompt=${options.prompt || "none"}`
          );
        },
        validateAuthorizationCode: /* @__PURE__ */ __name2(async ({ code, redirectURI }) => {
          return validateAuthorizationCode({
            code,
            redirectURI,
            options,
            tokenEndpoint: "https://discord.com/api/oauth2/token"
          });
        }, "validateAuthorizationCode"),
        refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken2) => {
          return refreshAccessToken({
            refreshToken: refreshToken2,
            options: {
              clientId: options.clientId,
              clientKey: options.clientKey,
              clientSecret: options.clientSecret
            },
            tokenEndpoint: "https://discord.com/api/oauth2/token"
          });
        },
        async getUserInfo(token) {
          if (options.getUserInfo) {
            return options.getUserInfo(token);
          }
          const { data: profile, error: error2 } = await betterFetch(
            "https://discord.com/api/users/@me",
            {
              headers: {
                authorization: `Bearer ${token.accessToken}`
              }
            }
          );
          if (error2) {
            return null;
          }
          if (profile.avatar === null) {
            const defaultAvatarNumber = profile.discriminator === "0" ? Number(BigInt(profile.id) >> BigInt(22)) % 6 : parseInt(profile.discriminator) % 5;
            profile.image_url = `https://cdn.discordapp.com/embed/avatars/${defaultAvatarNumber}.png`;
          } else {
            const format = profile.avatar.startsWith("a_") ? "gif" : "png";
            profile.image_url = `https://cdn.discordapp.com/avatars/${profile.id}/${profile.avatar}.${format}`;
          }
          const userMap = await options.mapProfileToUser?.(profile);
          return {
            user: {
              id: profile.id,
              name: profile.global_name || profile.username || "",
              email: profile.email,
              emailVerified: profile.verified,
              image: profile.image_url,
              ...userMap
            },
            data: profile
          };
        },
        options
      };
    }, "discord");
    facebook = /* @__PURE__ */ __name2((options) => {
      return {
        id: "facebook",
        name: "Facebook",
        async createAuthorizationURL({ state, scopes, redirectURI, loginHint }) {
          const _scopes = options.disableDefaultScope ? [] : ["email", "public_profile"];
          options.scope && _scopes.push(...options.scope);
          scopes && _scopes.push(...scopes);
          return await createAuthorizationURL({
            id: "facebook",
            options,
            authorizationEndpoint: "https://www.facebook.com/v21.0/dialog/oauth",
            scopes: _scopes,
            state,
            redirectURI,
            loginHint,
            additionalParams: options.configId ? {
              config_id: options.configId
            } : {}
          });
        },
        validateAuthorizationCode: /* @__PURE__ */ __name2(async ({ code, redirectURI }) => {
          return validateAuthorizationCode({
            code,
            redirectURI,
            options,
            tokenEndpoint: "https://graph.facebook.com/oauth/access_token"
          });
        }, "validateAuthorizationCode"),
        async verifyIdToken(token, nonce) {
          if (options.disableIdTokenSignIn) {
            return false;
          }
          if (options.verifyIdToken) {
            return options.verifyIdToken(token, nonce);
          }
          if (token.split(".").length) {
            try {
              const { payload: jwtClaims } = await jwtVerify(
                token,
                createRemoteJWKSet(
                  new URL("https://www.facebook.com/.well-known/oauth/openid/jwks")
                ),
                {
                  algorithms: ["RS256"],
                  audience: options.clientId,
                  issuer: "https://www.facebook.com"
                }
              );
              if (nonce && jwtClaims.nonce !== nonce) {
                return false;
              }
              return !!jwtClaims;
            } catch (error2) {
              return false;
            }
          }
          return true;
        },
        refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken2) => {
          return refreshAccessToken({
            refreshToken: refreshToken2,
            options: {
              clientId: options.clientId,
              clientKey: options.clientKey,
              clientSecret: options.clientSecret
            },
            tokenEndpoint: "https://graph.facebook.com/v18.0/oauth/access_token"
          });
        },
        async getUserInfo(token) {
          if (options.getUserInfo) {
            return options.getUserInfo(token);
          }
          if (token.idToken) {
            const profile2 = decodeJwt(token.idToken);
            const user = {
              id: profile2.sub,
              name: profile2.name,
              email: profile2.email,
              picture: {
                data: {
                  url: profile2.picture,
                  height: 100,
                  width: 100,
                  is_silhouette: false
                }
              }
            };
            const userMap2 = await options.mapProfileToUser?.({
              ...user,
              email_verified: true
            });
            return {
              user: {
                ...user,
                emailVerified: true,
                ...userMap2
              },
              data: profile2
            };
          }
          const fields = [
            "id",
            "name",
            "email",
            "picture",
            ...options?.fields || []
          ];
          const { data: profile, error: error2 } = await betterFetch(
            "https://graph.facebook.com/me?fields=" + fields.join(","),
            {
              auth: {
                type: "Bearer",
                token: token.accessToken
              }
            }
          );
          if (error2) {
            return null;
          }
          const userMap = await options.mapProfileToUser?.(profile);
          return {
            user: {
              id: profile.id,
              name: profile.name,
              email: profile.email,
              image: profile.picture.data.url,
              emailVerified: profile.email_verified,
              ...userMap
            },
            data: profile
          };
        },
        options
      };
    }, "facebook");
    github = /* @__PURE__ */ __name2((options) => {
      const tokenEndpoint = "https://github.com/login/oauth/access_token";
      return {
        id: "github",
        name: "GitHub",
        createAuthorizationURL({ state, scopes, loginHint, redirectURI }) {
          const _scopes = options.disableDefaultScope ? [] : ["read:user", "user:email"];
          options.scope && _scopes.push(...options.scope);
          scopes && _scopes.push(...scopes);
          return createAuthorizationURL({
            id: "github",
            options,
            authorizationEndpoint: "https://github.com/login/oauth/authorize",
            scopes: _scopes,
            state,
            redirectURI,
            loginHint
          });
        },
        validateAuthorizationCode: /* @__PURE__ */ __name2(async ({ code, redirectURI }) => {
          return validateAuthorizationCode({
            code,
            redirectURI,
            options,
            tokenEndpoint
          });
        }, "validateAuthorizationCode"),
        refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken2) => {
          return refreshAccessToken({
            refreshToken: refreshToken2,
            options: {
              clientId: options.clientId,
              clientKey: options.clientKey,
              clientSecret: options.clientSecret
            },
            tokenEndpoint: "https://github.com/login/oauth/token"
          });
        },
        async getUserInfo(token) {
          if (options.getUserInfo) {
            return options.getUserInfo(token);
          }
          const { data: profile, error: error2 } = await betterFetch(
            "https://api.github.com/user",
            {
              headers: {
                "User-Agent": "better-auth",
                authorization: `Bearer ${token.accessToken}`
              }
            }
          );
          if (error2) {
            return null;
          }
          const { data: emails } = await betterFetch("https://api.github.com/user/emails", {
            headers: {
              Authorization: `Bearer ${token.accessToken}`,
              "User-Agent": "better-auth"
            }
          });
          if (!profile.email && emails) {
            profile.email = (emails.find((e) => e.primary) ?? emails[0])?.email;
          }
          const emailVerified = emails?.find((e) => e.email === profile.email)?.verified ?? false;
          const userMap = await options.mapProfileToUser?.(profile);
          return {
            user: {
              id: profile.id.toString(),
              name: profile.name || profile.login,
              email: profile.email,
              image: profile.avatar_url,
              emailVerified,
              ...userMap
            },
            data: profile
          };
        },
        options
      };
    }, "github");
    google = /* @__PURE__ */ __name2((options) => {
      return {
        id: "google",
        name: "Google",
        async createAuthorizationURL({
          state,
          scopes,
          codeVerifier,
          redirectURI,
          loginHint,
          display
        }) {
          if (!options.clientId || !options.clientSecret) {
            logger.error(
              "Client Id and Client Secret is required for Google. Make sure to provide them in the options."
            );
            throw new BetterAuthError("CLIENT_ID_AND_SECRET_REQUIRED");
          }
          if (!codeVerifier) {
            throw new BetterAuthError("codeVerifier is required for Google");
          }
          const _scopes = options.disableDefaultScope ? [] : ["email", "profile", "openid"];
          options.scope && _scopes.push(...options.scope);
          scopes && _scopes.push(...scopes);
          const url = await createAuthorizationURL({
            id: "google",
            options,
            authorizationEndpoint: "https://accounts.google.com/o/oauth2/auth",
            scopes: _scopes,
            state,
            codeVerifier,
            redirectURI,
            prompt: options.prompt,
            accessType: options.accessType,
            display: display || options.display,
            loginHint,
            hd: options.hd
          });
          return url;
        },
        validateAuthorizationCode: /* @__PURE__ */ __name2(async ({ code, codeVerifier, redirectURI }) => {
          return validateAuthorizationCode({
            code,
            codeVerifier,
            redirectURI,
            options,
            tokenEndpoint: "https://oauth2.googleapis.com/token"
          });
        }, "validateAuthorizationCode"),
        refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken2) => {
          return refreshAccessToken({
            refreshToken: refreshToken2,
            options: {
              clientId: options.clientId,
              clientKey: options.clientKey,
              clientSecret: options.clientSecret
            },
            tokenEndpoint: "https://www.googleapis.com/oauth2/v4/token"
          });
        },
        async verifyIdToken(token, nonce) {
          if (options.disableIdTokenSignIn) {
            return false;
          }
          if (options.verifyIdToken) {
            return options.verifyIdToken(token, nonce);
          }
          const googlePublicKeyUrl = `https://www.googleapis.com/oauth2/v3/tokeninfo?id_token=${token}`;
          const { data: tokenInfo } = await betterFetch(googlePublicKeyUrl);
          if (!tokenInfo) {
            return false;
          }
          const isValid4 = tokenInfo.aud === options.clientId && (tokenInfo.iss === "https://accounts.google.com" || tokenInfo.iss === "accounts.google.com");
          return isValid4;
        },
        async getUserInfo(token) {
          if (options.getUserInfo) {
            return options.getUserInfo(token);
          }
          if (!token.idToken) {
            return null;
          }
          const user = decodeJwt(token.idToken);
          const userMap = await options.mapProfileToUser?.(user);
          return {
            user: {
              id: user.sub,
              name: user.name,
              email: user.email,
              image: user.picture,
              emailVerified: user.email_verified,
              ...userMap
            },
            data: user
          };
        },
        options
      };
    }, "google");
    microsoft = /* @__PURE__ */ __name2((options) => {
      const tenant = options.tenantId || "common";
      const authorizationEndpoint = `https://login.microsoftonline.com/${tenant}/oauth2/v2.0/authorize`;
      const tokenEndpoint = `https://login.microsoftonline.com/${tenant}/oauth2/v2.0/token`;
      return {
        id: "microsoft",
        name: "Microsoft EntraID",
        createAuthorizationURL(data) {
          const scopes = options.disableDefaultScope ? [] : ["openid", "profile", "email", "User.Read"];
          options.scope && scopes.push(...options.scope);
          data.scopes && scopes.push(...scopes);
          return createAuthorizationURL({
            id: "microsoft",
            options,
            authorizationEndpoint,
            state: data.state,
            codeVerifier: data.codeVerifier,
            scopes,
            redirectURI: data.redirectURI,
            prompt: options.prompt
          });
        },
        validateAuthorizationCode({ code, codeVerifier, redirectURI }) {
          return validateAuthorizationCode({
            code,
            codeVerifier,
            redirectURI,
            options,
            tokenEndpoint
          });
        },
        async getUserInfo(token) {
          if (options.getUserInfo) {
            return options.getUserInfo(token);
          }
          if (!token.idToken) {
            return null;
          }
          const user = decodeJwt(token.idToken);
          const profilePhotoSize = options.profilePhotoSize || 48;
          await betterFetch(
            `https://graph.microsoft.com/v1.0/me/photos/${profilePhotoSize}x${profilePhotoSize}/$value`,
            {
              headers: {
                Authorization: `Bearer ${token.accessToken}`
              },
              async onResponse(context) {
                if (options.disableProfilePhoto || !context.response.ok) {
                  return;
                }
                try {
                  const response = context.response.clone();
                  const pictureBuffer = await response.arrayBuffer();
                  const pictureBase64 = base64.encode(pictureBuffer);
                  user.picture = `data:image/jpeg;base64, ${pictureBase64}`;
                } catch (e) {
                  logger.error(
                    e && typeof e === "object" && "name" in e ? e.name : "",
                    e
                  );
                }
              }
            }
          );
          const userMap = await options.mapProfileToUser?.(user);
          return {
            user: {
              id: user.sub,
              name: user.name,
              email: user.email,
              image: user.picture,
              emailVerified: true,
              ...userMap
            },
            data: user
          };
        },
        refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken2) => {
          return refreshAccessToken({
            refreshToken: refreshToken2,
            options: {
              clientId: options.clientId,
              clientKey: options.clientKey,
              clientSecret: options.clientSecret
            },
            tokenEndpoint
          });
        },
        options
      };
    }, "microsoft");
    spotify = /* @__PURE__ */ __name2((options) => {
      return {
        id: "spotify",
        name: "Spotify",
        createAuthorizationURL({ state, scopes, codeVerifier, redirectURI }) {
          const _scopes = options.disableDefaultScope ? [] : ["user-read-email"];
          options.scope && _scopes.push(...options.scope);
          scopes && _scopes.push(...scopes);
          return createAuthorizationURL({
            id: "spotify",
            options,
            authorizationEndpoint: "https://accounts.spotify.com/authorize",
            scopes: _scopes,
            state,
            codeVerifier,
            redirectURI
          });
        },
        validateAuthorizationCode: /* @__PURE__ */ __name2(async ({ code, codeVerifier, redirectURI }) => {
          return validateAuthorizationCode({
            code,
            codeVerifier,
            redirectURI,
            options,
            tokenEndpoint: "https://accounts.spotify.com/api/token"
          });
        }, "validateAuthorizationCode"),
        refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken2) => {
          return refreshAccessToken({
            refreshToken: refreshToken2,
            options: {
              clientId: options.clientId,
              clientKey: options.clientKey,
              clientSecret: options.clientSecret
            },
            tokenEndpoint: "https://accounts.spotify.com/api/token"
          });
        },
        async getUserInfo(token) {
          if (options.getUserInfo) {
            return options.getUserInfo(token);
          }
          const { data: profile, error: error2 } = await betterFetch(
            "https://api.spotify.com/v1/me",
            {
              method: "GET",
              headers: {
                Authorization: `Bearer ${token.accessToken}`
              }
            }
          );
          if (error2) {
            return null;
          }
          const userMap = await options.mapProfileToUser?.(profile);
          return {
            user: {
              id: profile.id,
              name: profile.display_name,
              email: profile.email,
              image: profile.images[0]?.url,
              emailVerified: false,
              ...userMap
            },
            data: profile
          };
        },
        options
      };
    }, "spotify");
    twitch = /* @__PURE__ */ __name2((options) => {
      return {
        id: "twitch",
        name: "Twitch",
        createAuthorizationURL({ state, scopes, redirectURI }) {
          const _scopes = options.disableDefaultScope ? [] : ["user:read:email", "openid"];
          options.scope && _scopes.push(...options.scope);
          scopes && _scopes.push(...scopes);
          return createAuthorizationURL({
            id: "twitch",
            redirectURI,
            options,
            authorizationEndpoint: "https://id.twitch.tv/oauth2/authorize",
            scopes: _scopes,
            state,
            claims: options.claims || [
              "email",
              "email_verified",
              "preferred_username",
              "picture"
            ]
          });
        },
        validateAuthorizationCode: /* @__PURE__ */ __name2(async ({ code, redirectURI }) => {
          return validateAuthorizationCode({
            code,
            redirectURI,
            options,
            tokenEndpoint: "https://id.twitch.tv/oauth2/token"
          });
        }, "validateAuthorizationCode"),
        refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken2) => {
          return refreshAccessToken({
            refreshToken: refreshToken2,
            options: {
              clientId: options.clientId,
              clientKey: options.clientKey,
              clientSecret: options.clientSecret
            },
            tokenEndpoint: "https://id.twitch.tv/oauth2/token"
          });
        },
        async getUserInfo(token) {
          if (options.getUserInfo) {
            return options.getUserInfo(token);
          }
          const idToken = token.idToken;
          if (!idToken) {
            logger.error("No idToken found in token");
            return null;
          }
          const profile = decodeJwt(idToken);
          const userMap = await options.mapProfileToUser?.(profile);
          return {
            user: {
              id: profile.sub,
              name: profile.preferred_username,
              email: profile.email,
              image: profile.picture,
              emailVerified: false,
              ...userMap
            },
            data: profile
          };
        },
        options
      };
    }, "twitch");
    twitter = /* @__PURE__ */ __name2((options) => {
      return {
        id: "twitter",
        name: "Twitter",
        createAuthorizationURL(data) {
          const _scopes = options.disableDefaultScope ? [] : ["users.read", "tweet.read", "offline.access", "users.email"];
          options.scope && _scopes.push(...options.scope);
          data.scopes && _scopes.push(...data.scopes);
          return createAuthorizationURL({
            id: "twitter",
            options,
            authorizationEndpoint: "https://x.com/i/oauth2/authorize",
            scopes: _scopes,
            state: data.state,
            codeVerifier: data.codeVerifier,
            redirectURI: data.redirectURI
          });
        },
        validateAuthorizationCode: /* @__PURE__ */ __name2(async ({ code, codeVerifier, redirectURI }) => {
          return validateAuthorizationCode({
            code,
            codeVerifier,
            authentication: "basic",
            redirectURI,
            options,
            tokenEndpoint: "https://api.x.com/2/oauth2/token"
          });
        }, "validateAuthorizationCode"),
        refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken2) => {
          return refreshAccessToken({
            refreshToken: refreshToken2,
            options: {
              clientId: options.clientId,
              clientKey: options.clientKey,
              clientSecret: options.clientSecret
            },
            tokenEndpoint: "https://api.twitter.com/2/oauth2/token"
          });
        },
        async getUserInfo(token) {
          if (options.getUserInfo) {
            return options.getUserInfo(token);
          }
          const { data: profile, error: profileError } = await betterFetch(
            "https://api.x.com/2/users/me?user.fields=profile_image_url",
            {
              method: "GET",
              headers: {
                Authorization: `Bearer ${token.accessToken}`
              }
            }
          );
          if (profileError) {
            return null;
          }
          const { data: emailData, error: emailError } = await betterFetch("https://api.x.com/2/users/me?user.fields=confirmed_email", {
            method: "GET",
            headers: {
              Authorization: `Bearer ${token.accessToken}`
            }
          });
          if (!emailError && emailData?.data?.confirmed_email) {
            profile.data.email = emailData.data.confirmed_email;
          }
          const userMap = await options.mapProfileToUser?.(profile);
          return {
            user: {
              id: profile.data.id,
              name: profile.data.name,
              email: profile.data.email || profile.data.username || null,
              image: profile.data.profile_image_url,
              emailVerified: profile.data.verified || false,
              ...userMap
            },
            data: profile
          };
        },
        options
      };
    }, "twitter");
    dropbox = /* @__PURE__ */ __name2((options) => {
      const tokenEndpoint = "https://api.dropboxapi.com/oauth2/token";
      return {
        id: "dropbox",
        name: "Dropbox",
        createAuthorizationURL: /* @__PURE__ */ __name2(async ({
          state,
          scopes,
          codeVerifier,
          redirectURI
        }) => {
          const _scopes = options.disableDefaultScope ? [] : ["account_info.read"];
          options.scope && _scopes.push(...options.scope);
          scopes && _scopes.push(...scopes);
          return await createAuthorizationURL({
            id: "dropbox",
            options,
            authorizationEndpoint: "https://www.dropbox.com/oauth2/authorize",
            scopes: _scopes,
            state,
            redirectURI,
            codeVerifier
          });
        }, "createAuthorizationURL"),
        validateAuthorizationCode: /* @__PURE__ */ __name2(async ({ code, codeVerifier, redirectURI }) => {
          return await validateAuthorizationCode({
            code,
            codeVerifier,
            redirectURI,
            options,
            tokenEndpoint
          });
        }, "validateAuthorizationCode"),
        refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken2) => {
          return refreshAccessToken({
            refreshToken: refreshToken2,
            options: {
              clientId: options.clientId,
              clientKey: options.clientKey,
              clientSecret: options.clientSecret
            },
            tokenEndpoint: "https://api.dropbox.com/oauth2/token"
          });
        },
        async getUserInfo(token) {
          if (options.getUserInfo) {
            return options.getUserInfo(token);
          }
          const { data: profile, error: error2 } = await betterFetch(
            "https://api.dropboxapi.com/2/users/get_current_account",
            {
              method: "POST",
              headers: {
                Authorization: `Bearer ${token.accessToken}`
              }
            }
          );
          if (error2) {
            return null;
          }
          const userMap = await options.mapProfileToUser?.(profile);
          return {
            user: {
              id: profile.account_id,
              name: profile.name?.display_name,
              email: profile.email,
              emailVerified: profile.email_verified || false,
              image: profile.profile_photo_url,
              ...userMap
            },
            data: profile
          };
        },
        options
      };
    }, "dropbox");
    linkedin = /* @__PURE__ */ __name2((options) => {
      const authorizationEndpoint = "https://www.linkedin.com/oauth/v2/authorization";
      const tokenEndpoint = "https://www.linkedin.com/oauth/v2/accessToken";
      return {
        id: "linkedin",
        name: "Linkedin",
        createAuthorizationURL: /* @__PURE__ */ __name2(async ({
          state,
          scopes,
          redirectURI,
          loginHint
        }) => {
          const _scopes = options.disableDefaultScope ? [] : ["profile", "email", "openid"];
          options.scope && _scopes.push(...options.scope);
          scopes && _scopes.push(...scopes);
          return await createAuthorizationURL({
            id: "linkedin",
            options,
            authorizationEndpoint,
            scopes: _scopes,
            state,
            loginHint,
            redirectURI
          });
        }, "createAuthorizationURL"),
        validateAuthorizationCode: /* @__PURE__ */ __name2(async ({ code, redirectURI }) => {
          return await validateAuthorizationCode({
            code,
            redirectURI,
            options,
            tokenEndpoint
          });
        }, "validateAuthorizationCode"),
        refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken2) => {
          return refreshAccessToken({
            refreshToken: refreshToken2,
            options: {
              clientId: options.clientId,
              clientKey: options.clientKey,
              clientSecret: options.clientSecret
            },
            tokenEndpoint
          });
        },
        async getUserInfo(token) {
          if (options.getUserInfo) {
            return options.getUserInfo(token);
          }
          const { data: profile, error: error2 } = await betterFetch(
            "https://api.linkedin.com/v2/userinfo",
            {
              method: "GET",
              headers: {
                Authorization: `Bearer ${token.accessToken}`
              }
            }
          );
          if (error2) {
            return null;
          }
          const userMap = await options.mapProfileToUser?.(profile);
          return {
            user: {
              id: profile.sub,
              name: profile.name,
              email: profile.email,
              emailVerified: profile.email_verified || false,
              image: profile.picture,
              ...userMap
            },
            data: profile
          };
        },
        options
      };
    }, "linkedin");
    cleanDoubleSlashes = /* @__PURE__ */ __name2((input = "") => {
      return input.split("://").map((str) => str.replace(/\/{2,}/g, "/")).join("://");
    }, "cleanDoubleSlashes");
    issuerToEndpoints = /* @__PURE__ */ __name2((issuer) => {
      let baseUrl = issuer || "https://gitlab.com";
      return {
        authorizationEndpoint: cleanDoubleSlashes(`${baseUrl}/oauth/authorize`),
        tokenEndpoint: cleanDoubleSlashes(`${baseUrl}/oauth/token`),
        userinfoEndpoint: cleanDoubleSlashes(`${baseUrl}/api/v4/user`)
      };
    }, "issuerToEndpoints");
    gitlab = /* @__PURE__ */ __name2((options) => {
      const { authorizationEndpoint, tokenEndpoint, userinfoEndpoint } = issuerToEndpoints(options.issuer);
      const issuerId = "gitlab";
      const issuerName = "Gitlab";
      return {
        id: issuerId,
        name: issuerName,
        createAuthorizationURL: /* @__PURE__ */ __name2(async ({
          state,
          scopes,
          codeVerifier,
          loginHint,
          redirectURI
        }) => {
          const _scopes = options.disableDefaultScope ? [] : ["read_user"];
          options.scope && _scopes.push(...options.scope);
          scopes && _scopes.push(...scopes);
          return await createAuthorizationURL({
            id: issuerId,
            options,
            authorizationEndpoint,
            scopes: _scopes,
            state,
            redirectURI,
            codeVerifier,
            loginHint
          });
        }, "createAuthorizationURL"),
        validateAuthorizationCode: /* @__PURE__ */ __name2(async ({ code, redirectURI, codeVerifier }) => {
          return validateAuthorizationCode({
            code,
            redirectURI,
            options,
            codeVerifier,
            tokenEndpoint
          });
        }, "validateAuthorizationCode"),
        refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken2) => {
          return refreshAccessToken({
            refreshToken: refreshToken2,
            options: {
              clientId: options.clientId,
              clientKey: options.clientKey,
              clientSecret: options.clientSecret
            },
            tokenEndpoint: "https://gitlab.com/oauth/token"
          });
        },
        async getUserInfo(token) {
          if (options.getUserInfo) {
            return options.getUserInfo(token);
          }
          const { data: profile, error: error2 } = await betterFetch(
            userinfoEndpoint,
            { headers: { authorization: `Bearer ${token.accessToken}` } }
          );
          if (error2 || profile.state !== "active" || profile.locked) {
            return null;
          }
          const userMap = await options.mapProfileToUser?.(profile);
          return {
            user: {
              id: profile.id.toString(),
              name: profile.name ?? profile.username,
              email: profile.email,
              image: profile.avatar_url,
              emailVerified: true,
              ...userMap
            },
            data: profile
          };
        },
        options
      };
    }, "gitlab");
    tiktok = /* @__PURE__ */ __name2((options) => {
      return {
        id: "tiktok",
        name: "TikTok",
        createAuthorizationURL({ state, scopes, redirectURI }) {
          const _scopes = options.disableDefaultScope ? [] : ["user.info.profile"];
          options.scope && _scopes.push(...options.scope);
          scopes && _scopes.push(...scopes);
          return new URL(
            `https://www.tiktok.com/v2/auth/authorize?scope=${_scopes.join(
              ","
            )}&response_type=code&client_key=${options.clientKey}&client_secret=${options.clientSecret}&redirect_uri=${encodeURIComponent(
              options.redirectURI || redirectURI
            )}&state=${state}`
          );
        },
        validateAuthorizationCode: /* @__PURE__ */ __name2(async ({ code, redirectURI }) => {
          return validateAuthorizationCode({
            code,
            redirectURI: options.redirectURI || redirectURI,
            options,
            tokenEndpoint: "https://open.tiktokapis.com/v2/oauth/token/"
          });
        }, "validateAuthorizationCode"),
        refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken2) => {
          return refreshAccessToken({
            refreshToken: refreshToken2,
            options: {
              clientId: options.clientId,
              clientKey: options.clientKey,
              clientSecret: options.clientSecret
            },
            tokenEndpoint: "https://open.tiktokapis.com/v2/oauth/token/"
          });
        },
        async getUserInfo(token) {
          if (options.getUserInfo) {
            return options.getUserInfo(token);
          }
          const fields = [
            "open_id",
            "avatar_large_url",
            "display_name",
            "username"
          ];
          const { data: profile, error: error2 } = await betterFetch(
            `https://open.tiktokapis.com/v2/user/info/?fields=${fields.join(",")}`,
            {
              headers: {
                authorization: `Bearer ${token.accessToken}`
              }
            }
          );
          if (error2) {
            return null;
          }
          return {
            user: {
              email: profile.data.user.email || profile.data.user.username,
              id: profile.data.user.open_id,
              name: profile.data.user.display_name || profile.data.user.username,
              image: profile.data.user.avatar_large_url,
              /** @note Tiktok does not provide emailVerified or even email*/
              emailVerified: profile.data.user.email ? true : false
            },
            data: profile
          };
        },
        options
      };
    }, "tiktok");
    reddit = /* @__PURE__ */ __name2((options) => {
      return {
        id: "reddit",
        name: "Reddit",
        createAuthorizationURL({ state, scopes, redirectURI }) {
          const _scopes = options.disableDefaultScope ? [] : ["identity"];
          options.scope && _scopes.push(...options.scope);
          scopes && _scopes.push(...scopes);
          return createAuthorizationURL({
            id: "reddit",
            options,
            authorizationEndpoint: "https://www.reddit.com/api/v1/authorize",
            scopes: _scopes,
            state,
            redirectURI,
            duration: options.duration
          });
        },
        validateAuthorizationCode: /* @__PURE__ */ __name2(async ({ code, redirectURI }) => {
          const body = new URLSearchParams({
            grant_type: "authorization_code",
            code,
            redirect_uri: options.redirectURI || redirectURI
          });
          const headers = {
            "content-type": "application/x-www-form-urlencoded",
            accept: "text/plain",
            "user-agent": "better-auth",
            Authorization: `Basic ${base64.encode(
              `${options.clientId}:${options.clientSecret}`
            )}`
          };
          const { data, error: error2 } = await betterFetch(
            "https://www.reddit.com/api/v1/access_token",
            {
              method: "POST",
              headers,
              body: body.toString()
            }
          );
          if (error2) {
            throw error2;
          }
          return getOAuth2Tokens(data);
        }, "validateAuthorizationCode"),
        refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken2) => {
          return refreshAccessToken({
            refreshToken: refreshToken2,
            options: {
              clientId: options.clientId,
              clientKey: options.clientKey,
              clientSecret: options.clientSecret
            },
            tokenEndpoint: "https://www.reddit.com/api/v1/access_token"
          });
        },
        async getUserInfo(token) {
          if (options.getUserInfo) {
            return options.getUserInfo(token);
          }
          const { data: profile, error: error2 } = await betterFetch(
            "https://oauth.reddit.com/api/v1/me",
            {
              headers: {
                Authorization: `Bearer ${token.accessToken}`,
                "User-Agent": "better-auth"
              }
            }
          );
          if (error2) {
            return null;
          }
          const userMap = await options.mapProfileToUser?.(profile);
          return {
            user: {
              id: profile.id,
              name: profile.name,
              email: profile.oauth_client_id,
              emailVerified: profile.has_verified_email,
              image: profile.icon_img?.split("?")[0],
              ...userMap
            },
            data: profile
          };
        },
        options
      };
    }, "reddit");
    roblox = /* @__PURE__ */ __name2((options) => {
      return {
        id: "roblox",
        name: "Roblox",
        createAuthorizationURL({ state, scopes, redirectURI }) {
          const _scopes = options.disableDefaultScope ? [] : ["openid", "profile"];
          options.scope && _scopes.push(...options.scope);
          scopes && _scopes.push(...scopes);
          return new URL(
            `https://apis.roblox.com/oauth/v1/authorize?scope=${_scopes.join(
              "+"
            )}&response_type=code&client_id=${options.clientId}&redirect_uri=${encodeURIComponent(
              options.redirectURI || redirectURI
            )}&state=${state}&prompt=${options.prompt || "select_account+consent"}`
          );
        },
        validateAuthorizationCode: /* @__PURE__ */ __name2(async ({ code, redirectURI }) => {
          return validateAuthorizationCode({
            code,
            redirectURI: options.redirectURI || redirectURI,
            options,
            tokenEndpoint: "https://apis.roblox.com/oauth/v1/token",
            authentication: "post"
          });
        }, "validateAuthorizationCode"),
        refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken2) => {
          return refreshAccessToken({
            refreshToken: refreshToken2,
            options: {
              clientId: options.clientId,
              clientKey: options.clientKey,
              clientSecret: options.clientSecret
            },
            tokenEndpoint: "https://apis.roblox.com/oauth/v1/token"
          });
        },
        async getUserInfo(token) {
          if (options.getUserInfo) {
            return options.getUserInfo(token);
          }
          const { data: profile, error: error2 } = await betterFetch(
            "https://apis.roblox.com/oauth/v1/userinfo",
            {
              headers: {
                authorization: `Bearer ${token.accessToken}`
              }
            }
          );
          if (error2) {
            return null;
          }
          const userMap = await options.mapProfileToUser?.(profile);
          return {
            user: {
              id: profile.sub,
              name: profile.nickname || profile.preferred_username || "",
              image: profile.picture,
              email: profile.preferred_username || null,
              // Roblox does not provide email
              emailVerified: true,
              ...userMap
            },
            data: {
              ...profile
            }
          };
        },
        options
      };
    }, "roblox");
    vk = /* @__PURE__ */ __name2((options) => {
      return {
        id: "vk",
        name: "VK",
        async createAuthorizationURL({ state, scopes, codeVerifier, redirectURI }) {
          const _scopes = options.disableDefaultScope ? [] : ["email", "phone"];
          options.scope && _scopes.push(...options.scope);
          scopes && _scopes.push(...scopes);
          const authorizationEndpoint = "https://id.vk.com/authorize";
          return createAuthorizationURL({
            id: "vk",
            options,
            authorizationEndpoint,
            scopes: _scopes,
            state,
            redirectURI,
            codeVerifier
          });
        },
        validateAuthorizationCode: /* @__PURE__ */ __name2(async ({
          code,
          codeVerifier,
          redirectURI,
          deviceId
        }) => {
          return validateAuthorizationCode({
            code,
            codeVerifier,
            redirectURI: options.redirectURI || redirectURI,
            options,
            deviceId,
            tokenEndpoint: "https://id.vk.com/oauth2/auth"
          });
        }, "validateAuthorizationCode"),
        refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken2) => {
          return refreshAccessToken({
            refreshToken: refreshToken2,
            options: {
              clientId: options.clientId,
              clientKey: options.clientKey,
              clientSecret: options.clientSecret
            },
            tokenEndpoint: "https://id.vk.com/oauth2/auth"
          });
        },
        async getUserInfo(data) {
          if (options.getUserInfo) {
            return options.getUserInfo(data);
          }
          if (!data.accessToken) {
            return null;
          }
          const formBody = new URLSearchParams({
            access_token: data.accessToken,
            client_id: options.clientId
          }).toString();
          const { data: profile, error: error2 } = await betterFetch(
            "https://id.vk.com/oauth2/user_info",
            {
              method: "POST",
              headers: {
                "Content-Type": "application/x-www-form-urlencoded"
              },
              body: formBody
            }
          );
          if (error2) {
            return null;
          }
          if (!profile.user.email) {
            return null;
          }
          const userMap = await options.mapProfileToUser?.(profile);
          return {
            user: {
              id: profile.user.user_id,
              first_name: profile.user.first_name,
              last_name: profile.user.last_name,
              email: profile.user.email,
              image: profile.user.avatar,
              /** @note VK does not provide emailVerified*/
              emailVerified: !!profile.user.email,
              birthday: profile.user.birthday,
              sex: profile.user.sex,
              ...userMap
            },
            data: profile
          };
        },
        options
      };
    }, "vk");
    kick = /* @__PURE__ */ __name2((options) => {
      return {
        id: "kick",
        name: "Kick",
        createAuthorizationURL({ state, scopes, redirectURI, codeVerifier }) {
          const _scopes = options.disableDefaultScope ? [] : ["user:read"];
          options.scope && _scopes.push(...options.scope);
          scopes && _scopes.push(...scopes);
          return createAuthorizationURL({
            id: "kick",
            redirectURI,
            options,
            authorizationEndpoint: "https://id.kick.com/oauth/authorize",
            scopes: _scopes,
            codeVerifier,
            state
          });
        },
        async validateAuthorizationCode({ code, redirectURI, codeVerifier }) {
          return validateAuthorizationCode({
            code,
            redirectURI,
            options,
            tokenEndpoint: "https://id.kick.com/oauth/token",
            codeVerifier
          });
        },
        async getUserInfo(token) {
          if (options.getUserInfo) {
            return options.getUserInfo(token);
          }
          const { data, error: error2 } = await betterFetch("https://api.kick.com/public/v1/users", {
            method: "GET",
            headers: {
              Authorization: `Bearer ${token.accessToken}`
            }
          });
          if (error2) {
            return null;
          }
          const profile = data.data[0];
          const userMap = await options.mapProfileToUser?.(profile);
          return {
            user: {
              id: profile.user_id,
              name: profile.name,
              email: profile.email,
              image: profile.profile_picture,
              emailVerified: true,
              ...userMap
            },
            data: profile
          };
        },
        options
      };
    }, "kick");
    zoom = /* @__PURE__ */ __name2((userOptions) => {
      const options = {
        pkce: true,
        ...userOptions
      };
      return {
        id: "zoom",
        name: "Zoom",
        createAuthorizationURL: /* @__PURE__ */ __name2(async ({ state, redirectURI, codeVerifier }) => {
          const params = new URLSearchParams({
            response_type: "code",
            redirect_uri: options.redirectURI ? options.redirectURI : redirectURI,
            client_id: options.clientId,
            state
          });
          if (options.pkce) {
            const codeChallenge = await generateCodeChallenge(codeVerifier);
            params.set("code_challenge_method", "S256");
            params.set("code_challenge", codeChallenge);
          }
          const url = new URL("https://zoom.us/oauth/authorize");
          url.search = params.toString();
          return url;
        }, "createAuthorizationURL"),
        validateAuthorizationCode: /* @__PURE__ */ __name2(async ({ code, redirectURI, codeVerifier }) => {
          return validateAuthorizationCode({
            code,
            redirectURI: options.redirectURI || redirectURI,
            codeVerifier,
            options,
            tokenEndpoint: "https://zoom.us/oauth/token",
            authentication: "post"
          });
        }, "validateAuthorizationCode"),
        async getUserInfo(token) {
          if (options.getUserInfo) {
            return options.getUserInfo(token);
          }
          const { data: profile, error: error2 } = await betterFetch(
            "https://api.zoom.us/v2/users/me",
            {
              headers: {
                authorization: `Bearer ${token.accessToken}`
              }
            }
          );
          if (error2) {
            return null;
          }
          const userMap = await options.mapProfileToUser?.(profile);
          return {
            user: {
              id: profile.id,
              name: profile.display_name,
              image: profile.pic_url,
              email: profile.email,
              emailVerified: Boolean(profile.verified),
              ...userMap
            },
            data: {
              ...profile
            }
          };
        }
      };
    }, "zoom");
    socialProviders = {
      apple,
      discord,
      facebook,
      github,
      microsoft,
      google,
      spotify,
      twitch,
      twitter,
      dropbox,
      kick,
      linkedin,
      gitlab,
      tiktok,
      reddit,
      roblox,
      vk,
      zoom
    };
    socialProviderList = Object.keys(socialProviders);
    SocialProviderListEnum = external_exports.enum(socialProviderList, {
      description: "OAuth2 provider to use"
    });
  }
});
async function generateState(c, link) {
  const callbackURL = c.body?.callbackURL || c.context.options.baseURL;
  if (!callbackURL) {
    throw new APIError("BAD_REQUEST", {
      message: "callbackURL is required"
    });
  }
  const codeVerifier = generateRandomString(128);
  const state = generateRandomString(32);
  const data = JSON.stringify({
    callbackURL,
    codeVerifier,
    errorURL: c.body?.errorCallbackURL,
    newUserURL: c.body?.newUserCallbackURL,
    link,
    /**
     * This is the actual expiry time of the state
     */
    expiresAt: Date.now() + 10 * 60 * 1e3,
    requestSignUp: c.body?.requestSignUp
  });
  const expiresAt = /* @__PURE__ */ new Date();
  expiresAt.setMinutes(expiresAt.getMinutes() + 10);
  const verification = await c.context.internalAdapter.createVerificationValue(
    {
      value: data,
      identifier: state,
      expiresAt
    },
    c
  );
  if (!verification) {
    c.context.logger.error(
      "Unable to create verification. Make sure the database adapter is properly working and there is a verification table in the database"
    );
    throw new APIError("INTERNAL_SERVER_ERROR", {
      message: "Unable to create verification"
    });
  }
  return {
    state: verification.identifier,
    codeVerifier
  };
}
__name(generateState, "generateState");
async function parseState(c) {
  const state = c.query.state || c.body.state;
  const data = await c.context.internalAdapter.findVerificationValue(state);
  if (!data) {
    c.context.logger.error("State Mismatch. Verification not found", {
      state
    });
    throw c.redirect(
      `${c.context.baseURL}/error?error=please_restart_the_process`
    );
  }
  const parsedData = external_exports.object({
    callbackURL: external_exports.string(),
    codeVerifier: external_exports.string(),
    errorURL: external_exports.string().optional(),
    newUserURL: external_exports.string().optional(),
    expiresAt: external_exports.number(),
    link: external_exports.object({
      email: external_exports.string(),
      userId: external_exports.coerce.string()
    }).optional(),
    requestSignUp: external_exports.boolean().optional()
  }).parse(JSON.parse(data.value));
  if (!parsedData.errorURL) {
    parsedData.errorURL = `${c.context.baseURL}/error`;
  }
  if (parsedData.expiresAt < Date.now()) {
    await c.context.internalAdapter.deleteVerificationValue(data.id);
    throw c.redirect(
      `${c.context.baseURL}/error?error=please_restart_the_process`
    );
  }
  await c.context.internalAdapter.deleteVerificationValue(data.id);
  return parsedData;
}
__name(parseState, "parseState");
var init_better_auth_dn8_oqOu = __esm({
  "../node_modules/better-auth/dist/shared/better-auth.dn8_oqOu.mjs"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_esm2();
    init_dist2();
    init_hash();
    init_base642();
    init_dist4();
    init_hex();
    init_better_auth_B4Qoxdgc();
    __name2(generateState, "generateState");
    __name2(parseState, "parseState");
  }
});
var generateId;
var init_better_auth_BUPPRXfK = __esm({
  "../node_modules/better-auth/dist/shared/better-auth.BUPPRXfK.mjs"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_random();
    generateId = /* @__PURE__ */ __name2((size) => {
      return createRandomStringGenerator("a-z", "A-Z", "0-9")(size || 32);
    }, "generateId");
  }
});
function parseOutputData(data, schema2) {
  const fields = schema2.fields;
  const parsedData = {};
  for (const key in data) {
    const field = fields[key];
    if (!field) {
      parsedData[key] = data[key];
      continue;
    }
    if (field.returned === false) {
      continue;
    }
    parsedData[key] = data[key];
  }
  return parsedData;
}
__name(parseOutputData, "parseOutputData");
function getAllFields(options, table) {
  let schema2 = {
    ...table === "user" ? options.user?.additionalFields : {},
    ...table === "session" ? options.session?.additionalFields : {}
  };
  for (const plugin of options.plugins || []) {
    if (plugin.schema && plugin.schema[table]) {
      schema2 = {
        ...schema2,
        ...plugin.schema[table].fields
      };
    }
  }
  return schema2;
}
__name(getAllFields, "getAllFields");
function parseUserOutput(options, user) {
  const schema2 = getAllFields(options, "user");
  return parseOutputData(user, { fields: schema2 });
}
__name(parseUserOutput, "parseUserOutput");
function parseSessionOutput(options, session) {
  const schema2 = getAllFields(options, "session");
  return parseOutputData(session, { fields: schema2 });
}
__name(parseSessionOutput, "parseSessionOutput");
function parseInputData(data, schema2) {
  const action = schema2.action || "create";
  const fields = schema2.fields;
  const parsedData = {};
  for (const key in fields) {
    if (key in data) {
      if (fields[key].input === false) {
        if (fields[key].defaultValue) {
          parsedData[key] = fields[key].defaultValue;
          continue;
        }
        continue;
      }
      if (fields[key].validator?.input && data[key] !== void 0) {
        parsedData[key] = fields[key].validator.input.parse(data[key]);
        continue;
      }
      if (fields[key].transform?.input && data[key] !== void 0) {
        parsedData[key] = fields[key].transform?.input(data[key]);
        continue;
      }
      parsedData[key] = data[key];
      continue;
    }
    if (fields[key].defaultValue && action === "create") {
      parsedData[key] = fields[key].defaultValue;
      continue;
    }
    if (fields[key].required && action === "create") {
      throw new APIError("BAD_REQUEST", {
        message: `${key} is required`
      });
    }
  }
  return parsedData;
}
__name(parseInputData, "parseInputData");
function parseUserInput(options, user, action) {
  const schema2 = getAllFields(options, "user");
  return parseInputData(user || {}, { fields: schema2, action });
}
__name(parseUserInput, "parseUserInput");
var accountSchema;
var userSchema;
var sessionSchema;
var verificationSchema;
var init_better_auth_Cc72UxUH = __esm({
  "../node_modules/better-auth/dist/shared/better-auth.Cc72UxUH.mjs"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_esm2();
    init_dist2();
    accountSchema = external_exports.object({
      id: external_exports.string(),
      providerId: external_exports.string(),
      accountId: external_exports.string(),
      userId: external_exports.coerce.string(),
      accessToken: external_exports.string().nullish(),
      refreshToken: external_exports.string().nullish(),
      idToken: external_exports.string().nullish(),
      /**
       * Access token expires at
       */
      accessTokenExpiresAt: external_exports.date().nullish(),
      /**
       * Refresh token expires at
       */
      refreshTokenExpiresAt: external_exports.date().nullish(),
      /**
       * The scopes that the user has authorized
       */
      scope: external_exports.string().nullish(),
      /**
       * Password is only stored in the credential provider
       */
      password: external_exports.string().nullish(),
      createdAt: external_exports.date().default(() => /* @__PURE__ */ new Date()),
      updatedAt: external_exports.date().default(() => /* @__PURE__ */ new Date())
    });
    userSchema = external_exports.object({
      id: external_exports.string(),
      email: external_exports.string().transform((val) => val.toLowerCase()),
      emailVerified: external_exports.boolean().default(false),
      name: external_exports.string(),
      image: external_exports.string().nullish(),
      createdAt: external_exports.date().default(() => /* @__PURE__ */ new Date()),
      updatedAt: external_exports.date().default(() => /* @__PURE__ */ new Date())
    });
    sessionSchema = external_exports.object({
      id: external_exports.string(),
      userId: external_exports.coerce.string(),
      expiresAt: external_exports.date(),
      createdAt: external_exports.date().default(() => /* @__PURE__ */ new Date()),
      updatedAt: external_exports.date().default(() => /* @__PURE__ */ new Date()),
      token: external_exports.string(),
      ipAddress: external_exports.string().nullish(),
      userAgent: external_exports.string().nullish()
    });
    verificationSchema = external_exports.object({
      id: external_exports.string(),
      value: external_exports.string(),
      createdAt: external_exports.date().default(() => /* @__PURE__ */ new Date()),
      updatedAt: external_exports.date().default(() => /* @__PURE__ */ new Date()),
      expiresAt: external_exports.date(),
      identifier: external_exports.string()
    });
    __name2(parseOutputData, "parseOutputData");
    __name2(getAllFields, "getAllFields");
    __name2(parseUserOutput, "parseUserOutput");
    __name2(parseSessionOutput, "parseSessionOutput");
    __name2(parseInputData, "parseInputData");
    __name2(parseUserInput, "parseUserInput");
  }
});
function isPlainObject(value) {
  if (value === null || typeof value !== "object") {
    return false;
  }
  const prototype = Object.getPrototypeOf(value);
  if (prototype !== null && prototype !== Object.prototype && Object.getPrototypeOf(prototype) !== null) {
    return false;
  }
  if (Symbol.iterator in value) {
    return false;
  }
  if (Symbol.toStringTag in value) {
    return Object.prototype.toString.call(value) === "[object Module]";
  }
  return true;
}
__name(isPlainObject, "isPlainObject");
function _defu(baseObject, defaults, namespace = ".", merger) {
  if (!isPlainObject(defaults)) {
    return _defu(baseObject, {}, namespace, merger);
  }
  const object3 = Object.assign({}, defaults);
  for (const key in baseObject) {
    if (key === "__proto__" || key === "constructor") {
      continue;
    }
    const value = baseObject[key];
    if (value === null || value === void 0) {
      continue;
    }
    if (merger && merger(object3, key, value, namespace)) {
      continue;
    }
    if (Array.isArray(value) && Array.isArray(object3[key])) {
      object3[key] = [...value, ...object3[key]];
    } else if (isPlainObject(value) && isPlainObject(object3[key])) {
      object3[key] = _defu(
        value,
        object3[key],
        (namespace ? `${namespace}.` : "") + key.toString(),
        merger
      );
    } else {
      object3[key] = value;
    }
  }
  return object3;
}
__name(_defu, "_defu");
function createDefu(merger) {
  return (...arguments_) => (
    // eslint-disable-next-line unicorn/no-array-reduce
    arguments_.reduce((p, c) => _defu(p, c, "", merger), {})
  );
}
__name(createDefu, "createDefu");
var defu;
var defuFn;
var defuArrayFn;
var init_defu = __esm({
  "../node_modules/defu/dist/defu.mjs"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    __name2(isPlainObject, "isPlainObject");
    __name2(_defu, "_defu");
    __name2(createDefu, "createDefu");
    defu = createDefu();
    defuFn = createDefu((object3, key, currentValue) => {
      if (object3[key] !== void 0 && typeof currentValue === "function") {
        object3[key] = currentValue(object3[key]);
        return true;
      }
    });
    defuArrayFn = createDefu((object3, key, currentValue) => {
      if (Array.isArray(object3[key]) && typeof currentValue === "function") {
        object3[key] = currentValue(object3[key]);
        return true;
      }
    });
  }
});
async function signJWT(payload, secret, expiresIn = 3600) {
  const jwt = await new SignJWT(payload).setProtectedHeader({ alg: "HS256" }).setIssuedAt().setExpirationTime(Math.floor(Date.now() / 1e3) + expiresIn).sign(new TextEncoder().encode(secret));
  return jwt;
}
__name(signJWT, "signJWT");
var init_better_auth_DDEbWX_S = __esm({
  "../node_modules/better-auth/dist/shared/better-auth.DDEbWX-S.mjs"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_browser();
    __name2(signJWT, "signJWT");
  }
});
var decoders;
var encoder2;
var binary;
var init_binary = __esm({
  "../node_modules/@better-auth/utils/dist/binary.mjs"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    decoders = /* @__PURE__ */ new Map();
    encoder2 = new TextEncoder();
    binary = {
      decode: /* @__PURE__ */ __name2((data, encoding = "utf-8") => {
        if (!decoders.has(encoding)) {
          decoders.set(encoding, new TextDecoder(encoding));
        }
        const decoder2 = decoders.get(encoding);
        return decoder2.decode(data);
      }, "decode"),
      encode: encoder2.encode
    };
  }
});
function escapeRegExpChar(char) {
  if (char === "-" || char === "^" || char === "$" || char === "+" || char === "." || char === "(" || char === ")" || char === "|" || char === "[" || char === "]" || char === "{" || char === "}" || char === "*" || char === "?" || char === "\\") {
    return `\\${char}`;
  } else {
    return char;
  }
}
__name(escapeRegExpChar, "escapeRegExpChar");
function escapeRegExpString(str) {
  let result = "";
  for (let i = 0; i < str.length; i++) {
    result += escapeRegExpChar(str[i]);
  }
  return result;
}
__name(escapeRegExpString, "escapeRegExpString");
function transform(pattern, separator = true) {
  if (Array.isArray(pattern)) {
    let regExpPatterns = pattern.map((p) => `^${transform(p, separator)}$`);
    return `(?:${regExpPatterns.join("|")})`;
  }
  let separatorSplitter = "";
  let separatorMatcher = "";
  let wildcard = ".";
  if (separator === true) {
    separatorSplitter = "/";
    separatorMatcher = "[/\\\\]";
    wildcard = "[^/\\\\]";
  } else if (separator) {
    separatorSplitter = separator;
    separatorMatcher = escapeRegExpString(separatorSplitter);
    if (separatorMatcher.length > 1) {
      separatorMatcher = `(?:${separatorMatcher})`;
      wildcard = `((?!${separatorMatcher}).)`;
    } else {
      wildcard = `[^${separatorMatcher}]`;
    }
  }
  let requiredSeparator = separator ? `${separatorMatcher}+?` : "";
  let optionalSeparator = separator ? `${separatorMatcher}*?` : "";
  let segments = separator ? pattern.split(separatorSplitter) : [pattern];
  let result = "";
  for (let s = 0; s < segments.length; s++) {
    let segment = segments[s];
    let nextSegment = segments[s + 1];
    let currentSeparator = "";
    if (!segment && s > 0) {
      continue;
    }
    if (separator) {
      if (s === segments.length - 1) {
        currentSeparator = optionalSeparator;
      } else if (nextSegment !== "**") {
        currentSeparator = requiredSeparator;
      } else {
        currentSeparator = "";
      }
    }
    if (separator && segment === "**") {
      if (currentSeparator) {
        result += s === 0 ? "" : currentSeparator;
        result += `(?:${wildcard}*?${currentSeparator})*?`;
      }
      continue;
    }
    for (let c = 0; c < segment.length; c++) {
      let char = segment[c];
      if (char === "\\") {
        if (c < segment.length - 1) {
          result += escapeRegExpChar(segment[c + 1]);
          c++;
        }
      } else if (char === "?") {
        result += wildcard;
      } else if (char === "*") {
        result += `${wildcard}*?`;
      } else {
        result += escapeRegExpChar(char);
      }
    }
    result += currentSeparator;
  }
  return result;
}
__name(transform, "transform");
function isMatch(regexp, sample) {
  if (typeof sample !== "string") {
    throw new TypeError(`Sample must be a string, but ${typeof sample} given`);
  }
  return regexp.test(sample);
}
__name(isMatch, "isMatch");
function wildcardMatch(pattern, options) {
  if (typeof pattern !== "string" && !Array.isArray(pattern)) {
    throw new TypeError(
      `The first argument must be a single pattern string or an array of patterns, but ${typeof pattern} given`
    );
  }
  if (typeof options === "string" || typeof options === "boolean") {
    options = { separator: options };
  }
  if (arguments.length === 2 && !(typeof options === "undefined" || typeof options === "object" && options !== null && !Array.isArray(options))) {
    throw new TypeError(
      `The second argument must be an options object or a string/boolean separator, but ${typeof options} given`
    );
  }
  options = options || {};
  if (options.separator === "\\") {
    throw new Error(
      "\\ is not a valid separator because it is used for escaping. Try setting the separator to `true` instead"
    );
  }
  let regexpPattern = transform(pattern, options.separator);
  let regexp = new RegExp(`^${regexpPattern}$`, options.flags);
  let fn = isMatch.bind(null, regexp);
  fn.options = options;
  fn.pattern = pattern;
  fn.regexp = regexp;
  return fn;
}
__name(wildcardMatch, "wildcardMatch");
async function createEmailVerificationToken(secret, email, updateTo, expiresIn = 3600) {
  const token = await signJWT(
    {
      email: email.toLowerCase(),
      updateTo
    },
    secret,
    expiresIn
  );
  return token;
}
__name(createEmailVerificationToken, "createEmailVerificationToken");
async function sendVerificationEmailFn(ctx, user) {
  if (!ctx.context.options.emailVerification?.sendVerificationEmail) {
    ctx.context.logger.error("Verification email isn't enabled.");
    throw new APIError("BAD_REQUEST", {
      message: "Verification email isn't enabled"
    });
  }
  const token = await createEmailVerificationToken(
    ctx.context.secret,
    user.email,
    void 0,
    ctx.context.options.emailVerification?.expiresIn
  );
  const url = `${ctx.context.baseURL}/verify-email?token=${token}&callbackURL=${ctx.body.callbackURL || "/"}`;
  await ctx.context.options.emailVerification.sendVerificationEmail(
    {
      user,
      url,
      token
    },
    ctx.request
  );
}
__name(sendVerificationEmailFn, "sendVerificationEmailFn");
async function handleOAuthUserInfo(c, {
  userInfo,
  account,
  callbackURL,
  disableSignUp,
  overrideUserInfo
}) {
  const dbUser = await c.context.internalAdapter.findOAuthUser(
    userInfo.email.toLowerCase(),
    account.accountId,
    account.providerId
  ).catch((e) => {
    logger.error(
      "Better auth was unable to query your database.\nError: ",
      e
    );
    throw c.redirect(
      `${c.context.baseURL}/error?error=internal_server_error`
    );
  });
  let user = dbUser?.user;
  let isRegister = !user;
  if (dbUser) {
    const hasBeenLinked = dbUser.accounts.find(
      (a) => a.providerId === account.providerId
    );
    if (!hasBeenLinked) {
      const trustedProviders = c.context.options.account?.accountLinking?.trustedProviders;
      const isTrustedProvider = trustedProviders?.includes(
        account.providerId
      );
      if (!isTrustedProvider && !userInfo.emailVerified || c.context.options.account?.accountLinking?.enabled === false) {
        if (isDevelopment) {
          logger.warn(
            `User already exist but account isn't linked to ${account.providerId}. To read more about how account linking works in Better Auth see https://www.better-auth.com/docs/concepts/users-accounts#account-linking.`
          );
        }
        return {
          error: "account not linked",
          data: null
        };
      }
      try {
        await c.context.internalAdapter.linkAccount(
          {
            providerId: account.providerId,
            accountId: userInfo.id.toString(),
            userId: dbUser.user.id,
            accessToken: account.accessToken,
            idToken: account.idToken,
            refreshToken: account.refreshToken,
            accessTokenExpiresAt: account.accessTokenExpiresAt,
            refreshTokenExpiresAt: account.refreshTokenExpiresAt,
            scope: account.scope
          },
          c
        );
      } catch (e) {
        logger.error("Unable to link account", e);
        return {
          error: "unable to link account",
          data: null
        };
      }
    } else {
      if (c.context.options.account?.updateAccountOnSignIn !== false) {
        const updateData = Object.fromEntries(
          Object.entries({
            accessToken: account.accessToken,
            idToken: account.idToken,
            refreshToken: account.refreshToken,
            accessTokenExpiresAt: account.accessTokenExpiresAt,
            refreshTokenExpiresAt: account.refreshTokenExpiresAt,
            scope: account.scope
          }).filter(([_, value]) => value !== void 0)
        );
        if (Object.keys(updateData).length > 0) {
          await c.context.internalAdapter.updateAccount(
            hasBeenLinked.id,
            updateData,
            c
          );
        }
      }
    }
    if (overrideUserInfo) {
      const { id: _, ...restUserInfo } = userInfo;
      await c.context.internalAdapter.updateUser(dbUser.user.id, {
        ...restUserInfo,
        email: userInfo.email.toLowerCase(),
        emailVerified: userInfo.email.toLowerCase() === dbUser.user.email ? dbUser.user.emailVerified || userInfo.emailVerified : userInfo.emailVerified
      });
    }
  } else {
    if (disableSignUp) {
      return {
        error: "signup disabled",
        data: null,
        isRegister: false
      };
    }
    try {
      const { id: _, ...restUserInfo } = userInfo;
      user = await c.context.internalAdapter.createOAuthUser(
        {
          ...restUserInfo,
          email: userInfo.email.toLowerCase()
        },
        {
          accessToken: account.accessToken,
          idToken: account.idToken,
          refreshToken: account.refreshToken,
          accessTokenExpiresAt: account.accessTokenExpiresAt,
          refreshTokenExpiresAt: account.refreshTokenExpiresAt,
          scope: account.scope,
          providerId: account.providerId,
          accountId: userInfo.id.toString()
        },
        c
      ).then((res) => res?.user);
      if (!userInfo.emailVerified && user && c.context.options.emailVerification?.sendOnSignUp) {
        const token = await createEmailVerificationToken(
          c.context.secret,
          user.email,
          void 0,
          c.context.options.emailVerification?.expiresIn
        );
        const url = `${c.context.baseURL}/verify-email?token=${token}&callbackURL=${callbackURL}`;
        await c.context.options.emailVerification?.sendVerificationEmail?.(
          {
            user,
            url,
            token
          },
          c.request
        );
      }
    } catch (e) {
      logger.error(e);
      if (e instanceof APIError) {
        return {
          error: e.message,
          data: null,
          isRegister: false
        };
      }
      return {
        error: "unable to create user",
        data: null,
        isRegister: false
      };
    }
  }
  if (!user) {
    return {
      error: "unable to create user",
      data: null,
      isRegister: false
    };
  }
  const session = await c.context.internalAdapter.createSession(user.id, c);
  if (!session) {
    return {
      error: "unable to create session",
      data: null,
      isRegister: false
    };
  }
  return {
    data: {
      session,
      user
    },
    error: null,
    isRegister
  };
}
__name(handleOAuthUserInfo, "handleOAuthUserInfo");
function redirectError(ctx, callbackURL, query) {
  const url = callbackURL ? new URL(callbackURL, ctx.baseURL) : new URL(`${ctx.baseURL}/error`);
  if (query)
    Object.entries(query).forEach(([k, v]) => url.searchParams.set(k, v));
  return url.href;
}
__name(redirectError, "redirectError");
function redirectCallback(ctx, callbackURL, query) {
  const url = new URL(callbackURL, ctx.baseURL);
  if (query)
    Object.entries(query).forEach(([k, v]) => url.searchParams.set(k, v));
  return url.href;
}
__name(redirectCallback, "redirectCallback");
function sanitize(input) {
  return input.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#39;");
}
__name(sanitize, "sanitize");
var optionsMiddleware;
var createAuthMiddleware;
var createAuthEndpoint;
var originCheckMiddleware;
var originCheck;
var HIDE_METADATA;
var BASE_ERROR_CODES;
var getSession;
var getSessionFromCtx;
var sessionMiddleware;
var requestOnlySessionMiddleware;
var freshSessionMiddleware;
var listSessions;
var revokeSession;
var revokeSessions;
var revokeOtherSessions;
var sendVerificationEmail;
var verifyEmail;
var signInSocial;
var signInEmail;
var schema;
var callbackOAuth;
var signOut;
var forgetPassword;
var forgetPasswordCallback;
var resetPassword;
var updateUser;
var changePassword;
var setPassword;
var deleteUser;
var deleteUserCallback;
var changeEmail;
var html;
var error;
var ok;
var listUserAccounts;
var linkSocialAccount;
var unlinkAccount;
var getAccessToken;
var refreshToken;
var init_better_auth_Dvh_YFwT = __esm({
  "../node_modules/better-auth/dist/shared/better-auth.Dvh-YFwT.mjs"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_esm2();
    init_cookies();
    init_dist2();
    init_social_providers();
    init_random();
    init_better_auth_dn8_oqOu();
    init_better_auth_Cqykj82J();
    init_better_auth_tB5eU6EY();
    init_better_auth_CW6D9eSx();
    init_better_auth_BUPPRXfK();
    init_hash();
    init_base642();
    init_browser();
    init_dist4();
    init_hex();
    init_better_auth_B4Qoxdgc();
    init_better_auth_Cc72UxUH();
    init_better_auth_8zoxzg_F();
    init_hmac();
    init_dist3();
    init_defu();
    init_better_auth_DDEbWX_S();
    init_better_auth_VTXNLFMT();
    init_errors4();
    init_binary();
    optionsMiddleware = createMiddleware(async () => {
      return {};
    });
    createAuthMiddleware = createMiddleware.create({
      use: [
        optionsMiddleware,
        /**
         * Only use for post hooks
         */
        createMiddleware(async () => {
          return {};
        })
      ]
    });
    createAuthEndpoint = createEndpoint2.create({
      use: [optionsMiddleware]
    });
    __name2(escapeRegExpChar, "escapeRegExpChar");
    __name2(escapeRegExpString, "escapeRegExpString");
    __name2(transform, "transform");
    __name2(isMatch, "isMatch");
    __name2(wildcardMatch, "wildcardMatch");
    originCheckMiddleware = createAuthMiddleware(async (ctx) => {
      if (ctx.request?.method !== "POST" || !ctx.request) {
        return;
      }
      const { body, query, context } = ctx;
      const originHeader = ctx.headers?.get("origin") || ctx.headers?.get("referer") || "";
      const callbackURL = body?.callbackURL || query?.callbackURL;
      const redirectURL = body?.redirectTo;
      const errorCallbackURL = body?.errorCallbackURL;
      const newUserCallbackURL = body?.newUserCallbackURL;
      const trustedOrigins = Array.isArray(context.options.trustedOrigins) ? context.trustedOrigins : [
        ...context.trustedOrigins,
        ...await context.options.trustedOrigins?.(ctx.request) || []
      ];
      const usesCookies = ctx.headers?.has("cookie");
      const matchesPattern = /* @__PURE__ */ __name2((url, pattern) => {
        if (url.startsWith("/")) {
          return false;
        }
        if (pattern.includes("*")) {
          return wildcardMatch(pattern)(getHost(url));
        }
        const protocol = getProtocol(url);
        return protocol === "http:" || protocol === "https:" || !protocol ? pattern === getOrigin(url) : url.startsWith(pattern);
      }, "matchesPattern");
      const validateURL = /* @__PURE__ */ __name2((url, label) => {
        if (!url) {
          return;
        }
        const isTrustedOrigin = trustedOrigins.some(
          (origin) => matchesPattern(url, origin) || url?.startsWith("/") && label !== "origin" && /^\/(?!\/|\\|%2f|%5c)[\w\-.\+/@]*(?:\?[\w\-.\+/=&%@]*)?$/.test(url)
        );
        if (!isTrustedOrigin) {
          ctx.context.logger.error(`Invalid ${label}: ${url}`);
          ctx.context.logger.info(
            `If it's a valid URL, please add ${url} to trustedOrigins in your auth config
`,
            `Current list of trustedOrigins: ${trustedOrigins}`
          );
          throw new APIError("FORBIDDEN", { message: `Invalid ${label}` });
        }
      }, "validateURL");
      if (usesCookies && !ctx.context.options.advanced?.disableCSRFCheck) {
        validateURL(originHeader, "origin");
      }
      callbackURL && validateURL(callbackURL, "callbackURL");
      redirectURL && validateURL(redirectURL, "redirectURL");
      errorCallbackURL && validateURL(errorCallbackURL, "errorCallbackURL");
      newUserCallbackURL && validateURL(newUserCallbackURL, "newUserCallbackURL");
    });
    originCheck = /* @__PURE__ */ __name2((getValue) => createAuthMiddleware(async (ctx) => {
      if (!ctx.request) {
        return;
      }
      const { context } = ctx;
      const callbackURL = getValue(ctx);
      const trustedOrigins = Array.isArray(
        context.options.trustedOrigins
      ) ? context.trustedOrigins : [
        ...context.trustedOrigins,
        ...await context.options.trustedOrigins?.(ctx.request) || []
      ];
      const matchesPattern = /* @__PURE__ */ __name2((url, pattern) => {
        if (url.startsWith("/")) {
          return false;
        }
        if (pattern.includes("*")) {
          return wildcardMatch(pattern)(getHost(url));
        }
        return url.startsWith(pattern);
      }, "matchesPattern");
      const validateURL = /* @__PURE__ */ __name2((url, label) => {
        if (!url) {
          return;
        }
        const isTrustedOrigin = trustedOrigins.some(
          (origin) => matchesPattern(url, origin) || url?.startsWith("/") && label !== "origin" && /^\/(?!\/|\\|%2f|%5c)[\w\-.\+/@]*(?:\?[\w\-.\+/=&%@]*)?$/.test(
            url
          )
        );
        if (!isTrustedOrigin) {
          ctx.context.logger.error(`Invalid ${label}: ${url}`);
          ctx.context.logger.info(
            `If it's a valid URL, please add ${url} to trustedOrigins in your auth config
`,
            `Current list of trustedOrigins: ${trustedOrigins}`
          );
          throw new APIError("FORBIDDEN", { message: `Invalid ${label}` });
        }
      }, "validateURL");
      const callbacks = Array.isArray(callbackURL) ? callbackURL : [callbackURL];
      for (const url of callbacks) {
        validateURL(url, "callbackURL");
      }
    }), "originCheck");
    HIDE_METADATA = {
      isAction: false
    };
    BASE_ERROR_CODES = {
      USER_NOT_FOUND: "User not found",
      FAILED_TO_CREATE_USER: "Failed to create user",
      FAILED_TO_CREATE_SESSION: "Failed to create session",
      FAILED_TO_UPDATE_USER: "Failed to update user",
      FAILED_TO_GET_SESSION: "Failed to get session",
      INVALID_PASSWORD: "Invalid password",
      INVALID_EMAIL: "Invalid email",
      INVALID_EMAIL_OR_PASSWORD: "Invalid email or password",
      SOCIAL_ACCOUNT_ALREADY_LINKED: "Social account already linked",
      PROVIDER_NOT_FOUND: "Provider not found",
      INVALID_TOKEN: "invalid token",
      ID_TOKEN_NOT_SUPPORTED: "id_token not supported",
      FAILED_TO_GET_USER_INFO: "Failed to get user info",
      USER_EMAIL_NOT_FOUND: "User email not found",
      EMAIL_NOT_VERIFIED: "Email not verified",
      PASSWORD_TOO_SHORT: "Password too short",
      PASSWORD_TOO_LONG: "Password too long",
      USER_ALREADY_EXISTS: "User already exists",
      EMAIL_CAN_NOT_BE_UPDATED: "Email can not be updated",
      CREDENTIAL_ACCOUNT_NOT_FOUND: "Credential account not found",
      SESSION_EXPIRED: "Session expired. Re-authenticate to perform this action.",
      FAILED_TO_UNLINK_LAST_ACCOUNT: "You can't unlink your last account",
      ACCOUNT_NOT_FOUND: "Account not found"
    };
    getSession = /* @__PURE__ */ __name2(() => createAuthEndpoint(
      "/get-session",
      {
        method: "GET",
        query: external_exports.optional(
          external_exports.object({
            /**
             * If cookie cache is enabled, it will disable the cache
             * and fetch the session from the database
             */
            disableCookieCache: external_exports.optional(
              external_exports.boolean({
                description: "Disable cookie cache and fetch session from database"
              }).or(external_exports.string().transform((v) => v === "true"))
            ).optional(),
            disableRefresh: external_exports.boolean({
              description: "Disable session refresh. Useful for checking session status, without updating the session"
            }).or(external_exports.string().transform((v) => v === "true")).optional()
          })
        ),
        requireHeaders: true,
        metadata: {
          openapi: {
            description: "Get the current session",
            responses: {
              "200": {
                description: "Success",
                content: {
                  "application/json": {
                    schema: {
                      type: "object",
                      properties: {
                        session: {
                          $ref: "#/components/schemas/Session"
                        },
                        user: {
                          $ref: "#/components/schemas/User"
                        }
                      },
                      required: ["session", "user"]
                    }
                  }
                }
              }
            }
          }
        }
      },
      async (ctx) => {
        try {
          const sessionCookieToken = await ctx.getSignedCookie(
            ctx.context.authCookies.sessionToken.name,
            ctx.context.secret
          );
          if (!sessionCookieToken) {
            return null;
          }
          const sessionDataCookie = ctx.getCookie(
            ctx.context.authCookies.sessionData.name
          );
          const sessionDataPayload = sessionDataCookie ? safeJSONParse(binary.decode(base64.decode(sessionDataCookie))) : null;
          if (sessionDataPayload) {
            const isValid4 = await createHMAC("SHA-256", "base64urlnopad").verify(
              ctx.context.secret,
              JSON.stringify({
                ...sessionDataPayload.session,
                expiresAt: sessionDataPayload.expiresAt
              }),
              sessionDataPayload.signature
            );
            if (!isValid4) {
              const dataCookie = ctx.context.authCookies.sessionData.name;
              ctx.setCookie(dataCookie, "", {
                maxAge: 0
              });
              return ctx.json(null);
            }
          }
          const dontRememberMe = await ctx.getSignedCookie(
            ctx.context.authCookies.dontRememberToken.name,
            ctx.context.secret
          );
          if (sessionDataPayload?.session && ctx.context.options.session?.cookieCache?.enabled && !ctx.query?.disableCookieCache) {
            const session2 = sessionDataPayload.session;
            const hasExpired = sessionDataPayload.expiresAt < Date.now() || session2.session.expiresAt < /* @__PURE__ */ new Date();
            if (!hasExpired) {
              return ctx.json(
                session2
              );
            } else {
              const dataCookie = ctx.context.authCookies.sessionData.name;
              ctx.setCookie(dataCookie, "", {
                maxAge: 0
              });
            }
          }
          const session = await ctx.context.internalAdapter.findSession(sessionCookieToken);
          ctx.context.session = session;
          if (!session || session.session.expiresAt < /* @__PURE__ */ new Date()) {
            deleteSessionCookie(ctx);
            if (session) {
              await ctx.context.internalAdapter.deleteSession(
                session.session.token
              );
            }
            return ctx.json(null);
          }
          if (dontRememberMe || ctx.query?.disableRefresh) {
            return ctx.json(
              session
            );
          }
          const expiresIn = ctx.context.sessionConfig.expiresIn;
          const updateAge = ctx.context.sessionConfig.updateAge;
          const sessionIsDueToBeUpdatedDate = session.session.expiresAt.valueOf() - expiresIn * 1e3 + updateAge * 1e3;
          const shouldBeUpdated = sessionIsDueToBeUpdatedDate <= Date.now();
          if (shouldBeUpdated && (!ctx.query?.disableRefresh || !ctx.context.options.session?.disableSessionRefresh)) {
            const updatedSession = await ctx.context.internalAdapter.updateSession(
              session.session.token,
              {
                expiresAt: getDate(ctx.context.sessionConfig.expiresIn, "sec")
              }
            );
            if (!updatedSession) {
              deleteSessionCookie(ctx);
              return ctx.json(null, { status: 401 });
            }
            const maxAge = (updatedSession.expiresAt.valueOf() - Date.now()) / 1e3;
            await setSessionCookie(
              ctx,
              {
                session: updatedSession,
                user: session.user
              },
              false,
              {
                maxAge
              }
            );
            return ctx.json({
              session: updatedSession,
              user: session.user
            });
          }
          await setCookieCache(ctx, session);
          return ctx.json(
            session
          );
        } catch (error2) {
          ctx.context.logger.error("INTERNAL_SERVER_ERROR", error2);
          throw new APIError("INTERNAL_SERVER_ERROR", {
            message: BASE_ERROR_CODES.FAILED_TO_GET_SESSION
          });
        }
      }
    ), "getSession");
    getSessionFromCtx = /* @__PURE__ */ __name2(async (ctx, config2) => {
      if (ctx.context.session) {
        return ctx.context.session;
      }
      const session = await getSession()({
        ...ctx,
        asResponse: false,
        headers: ctx.headers,
        returnHeaders: false,
        query: {
          ...config2,
          ...ctx.query
        }
      }).catch((e) => {
        return null;
      });
      ctx.context.session = session;
      return session;
    }, "getSessionFromCtx");
    sessionMiddleware = createAuthMiddleware(async (ctx) => {
      const session = await getSessionFromCtx(ctx);
      if (!session?.session) {
        throw new APIError("UNAUTHORIZED");
      }
      return {
        session
      };
    });
    requestOnlySessionMiddleware = createAuthMiddleware(
      async (ctx) => {
        const session = await getSessionFromCtx(ctx);
        if (!session?.session && (ctx.request || ctx.headers)) {
          throw new APIError("UNAUTHORIZED");
        }
        return { session };
      }
    );
    freshSessionMiddleware = createAuthMiddleware(async (ctx) => {
      const session = await getSessionFromCtx(ctx);
      if (!session?.session) {
        throw new APIError("UNAUTHORIZED");
      }
      if (ctx.context.sessionConfig.freshAge === 0) {
        return {
          session
        };
      }
      const freshAge = ctx.context.sessionConfig.freshAge;
      const lastUpdated = session.session.updatedAt?.valueOf() || session.session.createdAt.valueOf();
      const now = Date.now();
      const isFresh = now - lastUpdated < freshAge * 1e3;
      if (!isFresh) {
        throw new APIError("FORBIDDEN", {
          message: "Session is not fresh"
        });
      }
      return {
        session
      };
    });
    listSessions = /* @__PURE__ */ __name2(() => createAuthEndpoint(
      "/list-sessions",
      {
        method: "GET",
        use: [sessionMiddleware],
        requireHeaders: true,
        metadata: {
          openapi: {
            description: "List all active sessions for the user",
            responses: {
              "200": {
                description: "Success",
                content: {
                  "application/json": {
                    schema: {
                      type: "array",
                      items: {
                        $ref: "#/components/schemas/Session"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      async (ctx) => {
        try {
          const sessions = await ctx.context.internalAdapter.listSessions(
            ctx.context.session.user.id
          );
          const activeSessions = sessions.filter((session) => {
            return session.expiresAt > /* @__PURE__ */ new Date();
          });
          return ctx.json(
            activeSessions
          );
        } catch (e) {
          ctx.context.logger.error(e);
          throw ctx.error("INTERNAL_SERVER_ERROR");
        }
      }
    ), "listSessions");
    revokeSession = createAuthEndpoint(
      "/revoke-session",
      {
        method: "POST",
        body: external_exports.object({
          token: external_exports.string({
            description: "The token to revoke"
          })
        }),
        use: [sessionMiddleware],
        requireHeaders: true,
        metadata: {
          openapi: {
            description: "Revoke a single session",
            requestBody: {
              content: {
                "application/json": {
                  schema: {
                    type: "object",
                    properties: {
                      token: {
                        type: "string",
                        description: "The token to revoke"
                      }
                    },
                    required: ["token"]
                  }
                }
              }
            },
            responses: {
              "200": {
                description: "Success",
                content: {
                  "application/json": {
                    schema: {
                      type: "object",
                      properties: {
                        status: {
                          type: "boolean",
                          description: "Indicates if the session was revoked successfully"
                        }
                      },
                      required: ["status"]
                    }
                  }
                }
              }
            }
          }
        }
      },
      async (ctx) => {
        const token = ctx.body.token;
        const findSession = await ctx.context.internalAdapter.findSession(token);
        if (!findSession) {
          throw new APIError("BAD_REQUEST", {
            message: "Session not found"
          });
        }
        if (findSession.session.userId !== ctx.context.session.user.id) {
          throw new APIError("UNAUTHORIZED");
        }
        try {
          await ctx.context.internalAdapter.deleteSession(token);
        } catch (error2) {
          ctx.context.logger.error(
            error2 && typeof error2 === "object" && "name" in error2 ? error2.name : "",
            error2
          );
          throw new APIError("INTERNAL_SERVER_ERROR");
        }
        return ctx.json({
          status: true
        });
      }
    );
    revokeSessions = createAuthEndpoint(
      "/revoke-sessions",
      {
        method: "POST",
        use: [sessionMiddleware],
        requireHeaders: true,
        metadata: {
          openapi: {
            description: "Revoke all sessions for the user",
            responses: {
              "200": {
                description: "Success",
                content: {
                  "application/json": {
                    schema: {
                      type: "object",
                      properties: {
                        status: {
                          type: "boolean",
                          description: "Indicates if all sessions were revoked successfully"
                        }
                      },
                      required: ["status"]
                    }
                  }
                }
              }
            }
          }
        }
      },
      async (ctx) => {
        try {
          await ctx.context.internalAdapter.deleteSessions(
            ctx.context.session.user.id
          );
        } catch (error2) {
          ctx.context.logger.error(
            error2 && typeof error2 === "object" && "name" in error2 ? error2.name : "",
            error2
          );
          throw new APIError("INTERNAL_SERVER_ERROR");
        }
        return ctx.json({
          status: true
        });
      }
    );
    revokeOtherSessions = createAuthEndpoint(
      "/revoke-other-sessions",
      {
        method: "POST",
        requireHeaders: true,
        use: [sessionMiddleware],
        metadata: {
          openapi: {
            description: "Revoke all other sessions for the user except the current one",
            responses: {
              "200": {
                description: "Success",
                content: {
                  "application/json": {
                    schema: {
                      type: "object",
                      properties: {
                        status: {
                          type: "boolean",
                          description: "Indicates if all other sessions were revoked successfully"
                        }
                      },
                      required: ["status"]
                    }
                  }
                }
              }
            }
          }
        }
      },
      async (ctx) => {
        const session = ctx.context.session;
        if (!session.user) {
          throw new APIError("UNAUTHORIZED");
        }
        const sessions = await ctx.context.internalAdapter.listSessions(
          session.user.id
        );
        const activeSessions = sessions.filter((session2) => {
          return session2.expiresAt > /* @__PURE__ */ new Date();
        });
        const otherSessions = activeSessions.filter(
          (session2) => session2.token !== ctx.context.session.session.token
        );
        await Promise.all(
          otherSessions.map(
            (session2) => ctx.context.internalAdapter.deleteSession(session2.token)
          )
        );
        return ctx.json({
          status: true
        });
      }
    );
    __name2(createEmailVerificationToken, "createEmailVerificationToken");
    __name2(sendVerificationEmailFn, "sendVerificationEmailFn");
    sendVerificationEmail = createAuthEndpoint(
      "/send-verification-email",
      {
        method: "POST",
        body: external_exports.object({
          email: external_exports.string({
            description: "The email to send the verification email to"
          }).email(),
          callbackURL: external_exports.string({
            description: "The URL to use for email verification callback"
          }).optional()
        }),
        metadata: {
          openapi: {
            description: "Send a verification email to the user",
            requestBody: {
              content: {
                "application/json": {
                  schema: {
                    type: "object",
                    properties: {
                      email: {
                        type: "string",
                        description: "The email to send the verification email to",
                        example: "user@example.com"
                      },
                      callbackURL: {
                        type: "string",
                        description: "The URL to use for email verification callback",
                        example: "https://example.com/callback",
                        nullable: true
                      }
                    },
                    required: ["email"]
                  }
                }
              }
            },
            responses: {
              "200": {
                description: "Success",
                content: {
                  "application/json": {
                    schema: {
                      type: "object",
                      properties: {
                        status: {
                          type: "boolean",
                          description: "Indicates if the email was sent successfully",
                          example: true
                        }
                      }
                    }
                  }
                }
              },
              "400": {
                description: "Bad Request",
                content: {
                  "application/json": {
                    schema: {
                      type: "object",
                      properties: {
                        message: {
                          type: "string",
                          description: "Error message",
                          example: "Verification email isn't enabled"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      async (ctx) => {
        if (!ctx.context.options.emailVerification?.sendVerificationEmail) {
          ctx.context.logger.error("Verification email isn't enabled.");
          throw new APIError("BAD_REQUEST", {
            message: "Verification email isn't enabled"
          });
        }
        const { email } = ctx.body;
        const user = await ctx.context.internalAdapter.findUserByEmail(email);
        if (!user) {
          throw new APIError("BAD_REQUEST", {
            message: BASE_ERROR_CODES.USER_NOT_FOUND
          });
        }
        await sendVerificationEmailFn(ctx, user.user);
        return ctx.json({
          status: true
        });
      }
    );
    verifyEmail = createAuthEndpoint(
      "/verify-email",
      {
        method: "GET",
        query: external_exports.object({
          token: external_exports.string({
            description: "The token to verify the email"
          }),
          callbackURL: external_exports.string({
            description: "The URL to redirect to after email verification"
          }).optional()
        }),
        use: [originCheck((ctx) => ctx.query.callbackURL)],
        metadata: {
          openapi: {
            description: "Verify the email of the user",
            parameters: [
              {
                name: "token",
                in: "query",
                description: "The token to verify the email",
                required: true,
                schema: {
                  type: "string"
                }
              },
              {
                name: "callbackURL",
                in: "query",
                description: "The URL to redirect to after email verification",
                required: false,
                schema: {
                  type: "string"
                }
              }
            ],
            responses: {
              "200": {
                description: "Success",
                content: {
                  "application/json": {
                    schema: {
                      type: "object",
                      properties: {
                        user: {
                          type: "object",
                          properties: {
                            id: {
                              type: "string",
                              description: "User ID"
                            },
                            email: {
                              type: "string",
                              description: "User email"
                            },
                            name: {
                              type: "string",
                              description: "User name"
                            },
                            image: {
                              type: "string",
                              description: "User image URL"
                            },
                            emailVerified: {
                              type: "boolean",
                              description: "Indicates if the user email is verified"
                            },
                            createdAt: {
                              type: "string",
                              description: "User creation date"
                            },
                            updatedAt: {
                              type: "string",
                              description: "User update date"
                            }
                          },
                          required: [
                            "id",
                            "email",
                            "name",
                            "image",
                            "emailVerified",
                            "createdAt",
                            "updatedAt"
                          ]
                        },
                        status: {
                          type: "boolean",
                          description: "Indicates if the email was verified successfully"
                        }
                      },
                      required: ["user", "status"]
                    }
                  }
                }
              }
            }
          }
        }
      },
      async (ctx) => {
        function redirectOnError(error2) {
          if (ctx.query.callbackURL) {
            if (ctx.query.callbackURL.includes("?")) {
              throw ctx.redirect(`${ctx.query.callbackURL}&error=${error2}`);
            }
            throw ctx.redirect(`${ctx.query.callbackURL}?error=${error2}`);
          }
          throw new APIError("UNAUTHORIZED", {
            message: error2
          });
        }
        __name(redirectOnError, "redirectOnError");
        __name2(redirectOnError, "redirectOnError");
        const { token } = ctx.query;
        let jwt;
        try {
          jwt = await jwtVerify(
            token,
            new TextEncoder().encode(ctx.context.secret),
            {
              algorithms: ["HS256"]
            }
          );
        } catch (e) {
          if (e instanceof JWTExpired) {
            return redirectOnError("token_expired");
          }
          return redirectOnError("invalid_token");
        }
        const schema2 = external_exports.object({
          email: external_exports.string().email(),
          updateTo: external_exports.string().optional()
        });
        const parsed = schema2.parse(jwt.payload);
        const user = await ctx.context.internalAdapter.findUserByEmail(
          parsed.email
        );
        if (!user) {
          return redirectOnError("user_not_found");
        }
        if (parsed.updateTo) {
          const session = await getSessionFromCtx(ctx);
          if (!session) {
            if (ctx.query.callbackURL) {
              throw ctx.redirect(`${ctx.query.callbackURL}?error=unauthorized`);
            }
            return redirectOnError("unauthorized");
          }
          if (session.user.email !== parsed.email) {
            if (ctx.query.callbackURL) {
              throw ctx.redirect(`${ctx.query.callbackURL}?error=unauthorized`);
            }
            return redirectOnError("unauthorized");
          }
          const updatedUser = await ctx.context.internalAdapter.updateUserByEmail(
            parsed.email,
            {
              email: parsed.updateTo,
              emailVerified: false
            },
            ctx
          );
          const newToken = await createEmailVerificationToken(
            ctx.context.secret,
            parsed.updateTo
          );
          await ctx.context.options.emailVerification?.sendVerificationEmail?.(
            {
              user: updatedUser,
              url: `${ctx.context.baseURL}/verify-email?token=${newToken}&callbackURL=${ctx.query.callbackURL || "/"}`,
              token: newToken
            },
            ctx.request
          );
          await setSessionCookie(ctx, {
            session: session.session,
            user: {
              ...session.user,
              email: parsed.updateTo,
              emailVerified: false
            }
          });
          if (ctx.query.callbackURL) {
            throw ctx.redirect(ctx.query.callbackURL);
          }
          return ctx.json({
            status: true,
            user: {
              id: updatedUser.id,
              email: updatedUser.email,
              name: updatedUser.name,
              image: updatedUser.image,
              emailVerified: updatedUser.emailVerified,
              createdAt: updatedUser.createdAt,
              updatedAt: updatedUser.updatedAt
            }
          });
        }
        await ctx.context.options.emailVerification?.onEmailVerification?.(
          user.user,
          ctx.request
        );
        await ctx.context.internalAdapter.updateUserByEmail(
          parsed.email,
          {
            emailVerified: true
          },
          ctx
        );
        if (ctx.context.options.emailVerification?.autoSignInAfterVerification) {
          const currentSession = await getSessionFromCtx(ctx);
          if (!currentSession || currentSession.user.email !== parsed.email) {
            const session = await ctx.context.internalAdapter.createSession(
              user.user.id,
              ctx
            );
            if (!session) {
              throw new APIError("INTERNAL_SERVER_ERROR", {
                message: "Failed to create session"
              });
            }
            await setSessionCookie(ctx, {
              session,
              user: {
                ...user.user,
                emailVerified: true
              }
            });
          } else {
            await setSessionCookie(ctx, {
              session: currentSession.session,
              user: {
                ...currentSession.user,
                emailVerified: true
              }
            });
          }
        }
        if (ctx.query.callbackURL) {
          throw ctx.redirect(ctx.query.callbackURL);
        }
        return ctx.json({
          status: true,
          user: null
        });
      }
    );
    __name2(handleOAuthUserInfo, "handleOAuthUserInfo");
    signInSocial = createAuthEndpoint(
      "/sign-in/social",
      {
        method: "POST",
        body: external_exports.object({
          /**
           * Callback URL to redirect to after the user
           * has signed in.
           */
          callbackURL: external_exports.string({
            description: "Callback URL to redirect to after the user has signed in"
          }).optional(),
          /**
           * callback url to redirect if the user is newly registered.
           *
           * useful if you have different routes for existing users and new users
           */
          newUserCallbackURL: external_exports.string().optional(),
          /**
           * Callback url to redirect to if an error happens
           *
           * If it's initiated from the client sdk this defaults to
           * the current url.
           */
          errorCallbackURL: external_exports.string({
            description: "Callback URL to redirect to if an error happens"
          }).optional(),
          /**
           * OAuth2 provider to use`
           */
          provider: SocialProviderListEnum,
          /**
           * Disable automatic redirection to the provider
           *
           * This is useful if you want to handle the redirection
           * yourself like in a popup or a different tab.
           */
          disableRedirect: external_exports.boolean({
            description: "Disable automatic redirection to the provider. Useful for handling the redirection yourself"
          }).optional(),
          /**
           * ID token from the provider
           *
           * This is used to sign in the user
           * if the user is already signed in with the
           * provider in the frontend.
           *
           * Only applicable if the provider supports
           * it. Currently only `apple` and `google` is
           * supported out of the box.
           */
          idToken: external_exports.optional(
            external_exports.object({
              /**
               * ID token from the provider
               */
              token: external_exports.string({
                description: "ID token from the provider"
              }),
              /**
               * The nonce used to generate the token
               */
              nonce: external_exports.string({
                description: "Nonce used to generate the token"
              }).optional(),
              /**
               * Access token from the provider
               */
              accessToken: external_exports.string({
                description: "Access token from the provider"
              }).optional(),
              /**
               * Refresh token from the provider
               */
              refreshToken: external_exports.string({
                description: "Refresh token from the provider"
              }).optional(),
              /**
               * Expiry date of the token
               */
              expiresAt: external_exports.number({
                description: "Expiry date of the token"
              }).optional()
            }),
            {
              description: "ID token from the provider to sign in the user with id token"
            }
          ),
          scopes: external_exports.array(external_exports.string(), {
            description: "Array of scopes to request from the provider. This will override the default scopes passed."
          }).optional(),
          /**
           * Explicitly request sign-up
           *
           * Should be used to allow sign up when
           * disableImplicitSignUp for this provider is
           * true
           */
          requestSignUp: external_exports.boolean({
            description: "Explicitly request sign-up. Useful when disableImplicitSignUp is true for this provider"
          }).optional(),
          /**
           * The login hint to use for the authorization code request
           */
          loginHint: external_exports.string({
            description: "The login hint to use for the authorization code request"
          }).optional()
        }),
        metadata: {
          openapi: {
            description: "Sign in with a social provider",
            operationId: "socialSignIn",
            responses: {
              "200": {
                description: "Success - Returns either session details or redirect URL",
                content: {
                  "application/json": {
                    schema: {
                      // todo: we need support for multiple schema
                      type: "object",
                      description: "Session response when idToken is provided",
                      properties: {
                        redirect: {
                          type: "boolean",
                          enum: [false]
                        },
                        token: {
                          type: "string",
                          description: "Session token",
                          url: {
                            type: "null",
                            nullable: true
                          },
                          user: {
                            type: "object",
                            properties: {
                              id: { type: "string" },
                              email: { type: "string" },
                              name: {
                                type: "string",
                                nullable: true
                              },
                              image: {
                                type: "string",
                                nullable: true
                              },
                              emailVerified: {
                                type: "boolean"
                              },
                              createdAt: {
                                type: "string",
                                format: "date-time"
                              },
                              updatedAt: {
                                type: "string",
                                format: "date-time"
                              }
                            },
                            required: [
                              "id",
                              "email",
                              "emailVerified",
                              "createdAt",
                              "updatedAt"
                            ]
                          }
                        }
                      },
                      required: ["redirect", "token", "user"]
                    }
                  }
                }
              }
            }
          }
        }
      },
      async (c) => {
        const provider = c.context.socialProviders.find(
          (p) => p.id === c.body.provider
        );
        if (!provider) {
          c.context.logger.error(
            "Provider not found. Make sure to add the provider in your auth config",
            {
              provider: c.body.provider
            }
          );
          throw new APIError("NOT_FOUND", {
            message: BASE_ERROR_CODES.PROVIDER_NOT_FOUND
          });
        }
        if (c.body.idToken) {
          if (!provider.verifyIdToken) {
            c.context.logger.error(
              "Provider does not support id token verification",
              {
                provider: c.body.provider
              }
            );
            throw new APIError("NOT_FOUND", {
              message: BASE_ERROR_CODES.ID_TOKEN_NOT_SUPPORTED
            });
          }
          const { token, nonce } = c.body.idToken;
          const valid = await provider.verifyIdToken(token, nonce);
          if (!valid) {
            c.context.logger.error("Invalid id token", {
              provider: c.body.provider
            });
            throw new APIError("UNAUTHORIZED", {
              message: BASE_ERROR_CODES.INVALID_TOKEN
            });
          }
          const userInfo = await provider.getUserInfo({
            idToken: token,
            accessToken: c.body.idToken.accessToken,
            refreshToken: c.body.idToken.refreshToken
          });
          if (!userInfo || !userInfo?.user) {
            c.context.logger.error("Failed to get user info", {
              provider: c.body.provider
            });
            throw new APIError("UNAUTHORIZED", {
              message: BASE_ERROR_CODES.FAILED_TO_GET_USER_INFO
            });
          }
          if (!userInfo.user.email) {
            c.context.logger.error("User email not found", {
              provider: c.body.provider
            });
            throw new APIError("UNAUTHORIZED", {
              message: BASE_ERROR_CODES.USER_EMAIL_NOT_FOUND
            });
          }
          const data = await handleOAuthUserInfo(c, {
            userInfo: {
              ...userInfo.user,
              email: userInfo.user.email,
              id: userInfo.user.id,
              name: userInfo.user.name || "",
              image: userInfo.user.image,
              emailVerified: userInfo.user.emailVerified || false
            },
            account: {
              providerId: provider.id,
              accountId: userInfo.user.id,
              accessToken: c.body.idToken.accessToken
            },
            disableSignUp: provider.disableImplicitSignUp && !c.body.requestSignUp || provider.disableSignUp
          });
          if (data.error) {
            throw new APIError("UNAUTHORIZED", {
              message: data.error
            });
          }
          await setSessionCookie(c, data.data);
          return c.json({
            redirect: false,
            token: data.data.session.token,
            url: void 0,
            user: {
              id: data.data.user.id,
              email: data.data.user.email,
              name: data.data.user.name,
              image: data.data.user.image,
              emailVerified: data.data.user.emailVerified,
              createdAt: data.data.user.createdAt,
              updatedAt: data.data.user.updatedAt
            }
          });
        }
        const { codeVerifier, state } = await generateState(c);
        const url = await provider.createAuthorizationURL({
          state,
          codeVerifier,
          redirectURI: `${c.context.baseURL}/callback/${provider.id}`,
          scopes: c.body.scopes,
          loginHint: c.body.loginHint
        });
        return c.json({
          url: url.toString(),
          redirect: !c.body.disableRedirect
        });
      }
    );
    signInEmail = createAuthEndpoint(
      "/sign-in/email",
      {
        method: "POST",
        body: external_exports.object({
          /**
           * Email of the user
           */
          email: external_exports.string({
            description: "Email of the user"
          }),
          /**
           * Password of the user
           */
          password: external_exports.string({
            description: "Password of the user"
          }),
          /**
           * Callback URL to use as a redirect for email
           * verification and for possible redirects
           */
          callbackURL: external_exports.string({
            description: "Callback URL to use as a redirect for email verification"
          }).optional(),
          /**
           * If this is false, the session will not be remembered
           * @default true
           */
          rememberMe: external_exports.boolean({
            description: "If this is false, the session will not be remembered. Default is `true`."
          }).default(true).optional()
        }),
        metadata: {
          openapi: {
            description: "Sign in with email and password",
            responses: {
              "200": {
                description: "Success - Returns either session details or redirect URL",
                content: {
                  "application/json": {
                    schema: {
                      // todo: we need support for multiple schema
                      type: "object",
                      description: "Session response when idToken is provided",
                      properties: {
                        redirect: {
                          type: "boolean",
                          enum: [false]
                        },
                        token: {
                          type: "string",
                          description: "Session token"
                        },
                        url: {
                          type: "null",
                          nullable: true
                        },
                        user: {
                          type: "object",
                          properties: {
                            id: { type: "string" },
                            email: { type: "string" },
                            name: {
                              type: "string",
                              nullable: true
                            },
                            image: {
                              type: "string",
                              nullable: true
                            },
                            emailVerified: {
                              type: "boolean"
                            },
                            createdAt: {
                              type: "string",
                              format: "date-time"
                            },
                            updatedAt: {
                              type: "string",
                              format: "date-time"
                            }
                          },
                          required: [
                            "id",
                            "email",
                            "emailVerified",
                            "createdAt",
                            "updatedAt"
                          ]
                        }
                      },
                      required: ["redirect", "token", "user"]
                    }
                  }
                }
              }
            }
          }
        }
      },
      async (ctx) => {
        if (!ctx.context.options?.emailAndPassword?.enabled) {
          ctx.context.logger.error(
            "Email and password is not enabled. Make sure to enable it in the options on you `auth.ts` file. Check `https://better-auth.com/docs/authentication/email-password` for more!"
          );
          throw new APIError("BAD_REQUEST", {
            message: "Email and password is not enabled"
          });
        }
        const { email, password } = ctx.body;
        const isValidEmail = external_exports.string().email().safeParse(email);
        if (!isValidEmail.success) {
          throw new APIError("BAD_REQUEST", {
            message: BASE_ERROR_CODES.INVALID_EMAIL
          });
        }
        const user = await ctx.context.internalAdapter.findUserByEmail(email, {
          includeAccounts: true
        });
        if (!user) {
          await ctx.context.password.hash(password);
          ctx.context.logger.error("User not found", { email });
          throw new APIError("UNAUTHORIZED", {
            message: BASE_ERROR_CODES.INVALID_EMAIL_OR_PASSWORD
          });
        }
        const credentialAccount = user.accounts.find(
          (a) => a.providerId === "credential"
        );
        if (!credentialAccount) {
          ctx.context.logger.error("Credential account not found", { email });
          throw new APIError("UNAUTHORIZED", {
            message: BASE_ERROR_CODES.INVALID_EMAIL_OR_PASSWORD
          });
        }
        const currentPassword = credentialAccount?.password;
        if (!currentPassword) {
          ctx.context.logger.error("Password not found", { email });
          throw new APIError("UNAUTHORIZED", {
            message: BASE_ERROR_CODES.INVALID_EMAIL_OR_PASSWORD
          });
        }
        const validPassword = await ctx.context.password.verify({
          hash: currentPassword,
          password
        });
        if (!validPassword) {
          ctx.context.logger.error("Invalid password");
          throw new APIError("UNAUTHORIZED", {
            message: BASE_ERROR_CODES.INVALID_EMAIL_OR_PASSWORD
          });
        }
        if (ctx.context.options?.emailAndPassword?.requireEmailVerification && !user.user.emailVerified) {
          if (!ctx.context.options?.emailVerification?.sendVerificationEmail) {
            throw new APIError("FORBIDDEN", {
              message: BASE_ERROR_CODES.EMAIL_NOT_VERIFIED
            });
          }
          const token = await createEmailVerificationToken(
            ctx.context.secret,
            user.user.email,
            void 0,
            ctx.context.options.emailVerification?.expiresIn
          );
          const url = `${ctx.context.baseURL}/verify-email?token=${token}&callbackURL=${ctx.body.callbackURL || "/"}`;
          await ctx.context.options.emailVerification.sendVerificationEmail(
            {
              user: user.user,
              url,
              token
            },
            ctx.request
          );
          throw new APIError("FORBIDDEN", {
            message: BASE_ERROR_CODES.EMAIL_NOT_VERIFIED
          });
        }
        const session = await ctx.context.internalAdapter.createSession(
          user.user.id,
          ctx,
          ctx.body.rememberMe === false
        );
        if (!session) {
          ctx.context.logger.error("Failed to create session");
          throw new APIError("UNAUTHORIZED", {
            message: BASE_ERROR_CODES.FAILED_TO_CREATE_SESSION
          });
        }
        await setSessionCookie(
          ctx,
          {
            session,
            user: user.user
          },
          ctx.body.rememberMe === false
        );
        return ctx.json({
          redirect: !!ctx.body.callbackURL,
          token: session.token,
          url: ctx.body.callbackURL,
          user: {
            id: user.user.id,
            email: user.user.email,
            name: user.user.name,
            image: user.user.image,
            emailVerified: user.user.emailVerified,
            createdAt: user.user.createdAt,
            updatedAt: user.user.updatedAt
          }
        });
      }
    );
    schema = external_exports.object({
      code: external_exports.string().optional(),
      error: external_exports.string().optional(),
      device_id: external_exports.string().optional(),
      error_description: external_exports.string().optional(),
      state: external_exports.string().optional(),
      user: external_exports.string().optional()
    });
    callbackOAuth = createAuthEndpoint(
      "/callback/:id",
      {
        method: ["GET", "POST"],
        body: schema.optional(),
        query: schema.optional(),
        metadata: HIDE_METADATA
      },
      async (c) => {
        let queryOrBody;
        const defaultErrorURL = c.context.options.onAPIError?.errorURL || `${c.context.baseURL}/error`;
        try {
          if (c.method === "GET") {
            queryOrBody = schema.parse(c.query);
          } else if (c.method === "POST") {
            queryOrBody = schema.parse(c.body);
          } else {
            throw new Error("Unsupported method");
          }
        } catch (e) {
          c.context.logger.error("INVALID_CALLBACK_REQUEST", e);
          throw c.redirect(`${defaultErrorURL}?error=invalid_callback_request`);
        }
        const { code, error: error2, state, error_description, device_id } = queryOrBody;
        if (error2) {
          throw c.redirect(
            `${defaultErrorURL}?error=${error2}&error_description=${error_description}`
          );
        }
        if (!state) {
          c.context.logger.error("State not found", error2);
          throw c.redirect(`${defaultErrorURL}?error=state_not_found`);
        }
        const {
          codeVerifier,
          callbackURL,
          link,
          errorURL,
          newUserURL,
          requestSignUp
        } = await parseState(c);
        function redirectOnError(error22) {
          let url = errorURL || defaultErrorURL;
          if (url.includes("?")) {
            url = `${url}&error=${error22}`;
          } else {
            url = `${url}?error=${error22}`;
          }
          throw c.redirect(url);
        }
        __name(redirectOnError, "redirectOnError");
        __name2(redirectOnError, "redirectOnError");
        if (!code) {
          c.context.logger.error("Code not found");
          throw redirectOnError("no_code");
        }
        const provider = c.context.socialProviders.find(
          (p) => p.id === c.params.id
        );
        if (!provider) {
          c.context.logger.error(
            "Oauth provider with id",
            c.params.id,
            "not found"
          );
          throw redirectOnError("oauth_provider_not_found");
        }
        let tokens;
        try {
          tokens = await provider.validateAuthorizationCode({
            code,
            codeVerifier,
            deviceId: device_id,
            redirectURI: `${c.context.baseURL}/callback/${provider.id}`
          });
        } catch (e) {
          c.context.logger.error("", e);
          throw redirectOnError("invalid_code");
        }
        const userInfo = await provider.getUserInfo({
          ...tokens,
          user: c.body?.user ? safeJSONParse(c.body.user) : void 0
        }).then((res) => res?.user);
        if (!userInfo) {
          c.context.logger.error("Unable to get user info");
          return redirectOnError("unable_to_get_user_info");
        }
        if (!userInfo.email) {
          c.context.logger.error(
            "Provider did not return email. This could be due to misconfiguration in the provider settings."
          );
          return redirectOnError("email_not_found");
        }
        if (!callbackURL) {
          c.context.logger.error("No callback URL found");
          throw redirectOnError("no_callback_url");
        }
        if (link) {
          const existingAccount = await c.context.internalAdapter.findAccount(
            userInfo.id
          );
          if (existingAccount) {
            if (existingAccount.userId.toString() !== link.userId.toString()) {
              return redirectOnError("account_already_linked_to_different_user");
            }
            const updateData = Object.fromEntries(
              Object.entries({
                accessToken: tokens.accessToken,
                idToken: tokens.idToken,
                refreshToken: tokens.refreshToken,
                accessTokenExpiresAt: tokens.accessTokenExpiresAt,
                refreshTokenExpiresAt: tokens.refreshTokenExpiresAt,
                scope: tokens.scopes?.join(",")
              }).filter(([_, value]) => value !== void 0)
            );
            await c.context.internalAdapter.updateAccount(
              existingAccount.id,
              updateData
            );
          } else {
            const newAccount = await c.context.internalAdapter.createAccount(
              {
                userId: link.userId,
                providerId: provider.id,
                accountId: userInfo.id,
                ...tokens,
                scope: tokens.scopes?.join(",")
              },
              c
            );
            if (!newAccount) {
              return redirectOnError("unable_to_link_account");
            }
          }
          let toRedirectTo2;
          try {
            const url = callbackURL;
            toRedirectTo2 = url.toString();
          } catch {
            toRedirectTo2 = callbackURL;
          }
          throw c.redirect(toRedirectTo2);
        }
        const result = await handleOAuthUserInfo(c, {
          userInfo: {
            ...userInfo,
            email: userInfo.email,
            name: userInfo.name || userInfo.email
          },
          account: {
            providerId: provider.id,
            accountId: userInfo.id,
            ...tokens,
            scope: tokens.scopes?.join(",")
          },
          callbackURL,
          disableSignUp: provider.disableImplicitSignUp && !requestSignUp || provider.options?.disableSignUp,
          overrideUserInfo: provider.options?.overrideUserInfoOnSignIn
        });
        if (result.error) {
          c.context.logger.error(result.error.split(" ").join("_"));
          return redirectOnError(result.error.split(" ").join("_"));
        }
        const { session, user } = result.data;
        await setSessionCookie(c, {
          session,
          user
        });
        let toRedirectTo;
        try {
          const url = result.isRegister ? newUserURL || callbackURL : callbackURL;
          toRedirectTo = url.toString();
        } catch {
          toRedirectTo = result.isRegister ? newUserURL || callbackURL : callbackURL;
        }
        throw c.redirect(toRedirectTo);
      }
    );
    signOut = createAuthEndpoint(
      "/sign-out",
      {
        method: "POST",
        requireHeaders: true,
        metadata: {
          openapi: {
            description: "Sign out the current user",
            responses: {
              "200": {
                description: "Success",
                content: {
                  "application/json": {
                    schema: {
                      type: "object",
                      properties: {
                        success: {
                          type: "boolean"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      async (ctx) => {
        const sessionCookieToken = await ctx.getSignedCookie(
          ctx.context.authCookies.sessionToken.name,
          ctx.context.secret
        );
        if (!sessionCookieToken) {
          deleteSessionCookie(ctx);
          throw new APIError("BAD_REQUEST", {
            message: BASE_ERROR_CODES.FAILED_TO_GET_SESSION
          });
        }
        await ctx.context.internalAdapter.deleteSession(sessionCookieToken);
        deleteSessionCookie(ctx);
        return ctx.json({
          success: true
        });
      }
    );
    __name2(redirectError, "redirectError");
    __name2(redirectCallback, "redirectCallback");
    forgetPassword = createAuthEndpoint(
      "/forget-password",
      {
        method: "POST",
        body: external_exports.object({
          /**
           * The email address of the user to send a password reset email to.
           */
          email: external_exports.string({
            description: "The email address of the user to send a password reset email to"
          }).email(),
          /**
           * The URL to redirect the user to reset their password.
           * If the token isn't valid or expired, it'll be redirected with a query parameter `?
           * error=INVALID_TOKEN`. If the token is valid, it'll be redirected with a query parameter `?
           * token=VALID_TOKEN
           */
          redirectTo: external_exports.string({
            description: "The URL to redirect the user to reset their password. If the token isn't valid or expired, it'll be redirected with a query parameter `?error=INVALID_TOKEN`. If the token is valid, it'll be redirected with a query parameter `?token=VALID_TOKEN"
          }).optional()
        }),
        metadata: {
          openapi: {
            description: "Send a password reset email to the user",
            responses: {
              "200": {
                description: "Success",
                content: {
                  "application/json": {
                    schema: {
                      type: "object",
                      properties: {
                        status: {
                          type: "boolean"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      async (ctx) => {
        if (!ctx.context.options.emailAndPassword?.sendResetPassword) {
          ctx.context.logger.error(
            "Reset password isn't enabled.Please pass an emailAndPassword.sendResetPassword function in your auth config!"
          );
          throw new APIError("BAD_REQUEST", {
            message: "Reset password isn't enabled"
          });
        }
        const { email, redirectTo } = ctx.body;
        const user = await ctx.context.internalAdapter.findUserByEmail(email, {
          includeAccounts: true
        });
        if (!user) {
          ctx.context.logger.error("Reset Password: User not found", { email });
          return ctx.json({
            status: true
          });
        }
        const defaultExpiresIn = 60 * 60 * 1;
        const expiresAt = getDate(
          ctx.context.options.emailAndPassword.resetPasswordTokenExpiresIn || defaultExpiresIn,
          "sec"
        );
        const verificationToken = generateId(24);
        await ctx.context.internalAdapter.createVerificationValue(
          {
            value: user.user.id,
            identifier: `reset-password:${verificationToken}`,
            expiresAt
          },
          ctx
        );
        const url = `${ctx.context.baseURL}/reset-password/${verificationToken}?callbackURL=${redirectTo}`;
        await ctx.context.options.emailAndPassword.sendResetPassword(
          {
            user: user.user,
            url,
            token: verificationToken
          },
          ctx.request
        );
        return ctx.json({
          status: true
        });
      }
    );
    forgetPasswordCallback = createAuthEndpoint(
      "/reset-password/:token",
      {
        method: "GET",
        query: external_exports.object({
          callbackURL: external_exports.string({
            description: "The URL to redirect the user to reset their password"
          })
        }),
        use: [originCheck((ctx) => ctx.query.callbackURL)],
        metadata: {
          openapi: {
            description: "Redirects the user to the callback URL with the token",
            responses: {
              "200": {
                description: "Success",
                content: {
                  "application/json": {
                    schema: {
                      type: "object",
                      properties: {
                        token: {
                          type: "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      async (ctx) => {
        const { token } = ctx.params;
        const { callbackURL } = ctx.query;
        if (!token || !callbackURL) {
          throw ctx.redirect(
            redirectError(ctx.context, callbackURL, { error: "INVALID_TOKEN" })
          );
        }
        const verification = await ctx.context.internalAdapter.findVerificationValue(
          `reset-password:${token}`
        );
        if (!verification || verification.expiresAt < /* @__PURE__ */ new Date()) {
          throw ctx.redirect(
            redirectError(ctx.context, callbackURL, { error: "INVALID_TOKEN" })
          );
        }
        throw ctx.redirect(redirectCallback(ctx.context, callbackURL, { token }));
      }
    );
    resetPassword = createAuthEndpoint(
      "/reset-password",
      {
        method: "POST",
        query: external_exports.object({
          token: external_exports.string().optional()
        }).optional(),
        body: external_exports.object({
          newPassword: external_exports.string({
            description: "The new password to set"
          }),
          token: external_exports.string({
            description: "The token to reset the password"
          }).optional()
        }),
        metadata: {
          openapi: {
            description: "Reset the password for a user",
            responses: {
              "200": {
                description: "Success",
                content: {
                  "application/json": {
                    schema: {
                      type: "object",
                      properties: {
                        status: {
                          type: "boolean"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      async (ctx) => {
        const token = ctx.body.token || ctx.query?.token;
        if (!token) {
          throw new APIError("BAD_REQUEST", {
            message: BASE_ERROR_CODES.INVALID_TOKEN
          });
        }
        const { newPassword } = ctx.body;
        const minLength = ctx.context.password?.config.minPasswordLength;
        const maxLength = ctx.context.password?.config.maxPasswordLength;
        if (newPassword.length < minLength) {
          throw new APIError("BAD_REQUEST", {
            message: BASE_ERROR_CODES.PASSWORD_TOO_SHORT
          });
        }
        if (newPassword.length > maxLength) {
          throw new APIError("BAD_REQUEST", {
            message: BASE_ERROR_CODES.PASSWORD_TOO_LONG
          });
        }
        const id = `reset-password:${token}`;
        const verification = await ctx.context.internalAdapter.findVerificationValue(id);
        if (!verification || verification.expiresAt < /* @__PURE__ */ new Date()) {
          throw new APIError("BAD_REQUEST", {
            message: BASE_ERROR_CODES.INVALID_TOKEN
          });
        }
        const userId = verification.value;
        const hashedPassword = await ctx.context.password.hash(newPassword);
        const accounts = await ctx.context.internalAdapter.findAccounts(userId);
        const account = accounts.find((ac) => ac.providerId === "credential");
        if (!account) {
          await ctx.context.internalAdapter.createAccount(
            {
              userId,
              providerId: "credential",
              password: hashedPassword,
              accountId: userId
            },
            ctx
          );
          await ctx.context.internalAdapter.deleteVerificationValue(
            verification.id
          );
          return ctx.json({
            status: true
          });
        }
        await ctx.context.internalAdapter.updatePassword(
          userId,
          hashedPassword,
          ctx
        );
        await ctx.context.internalAdapter.deleteVerificationValue(verification.id);
        if (ctx.context.options.emailAndPassword?.revokeSessionsOnPasswordReset) {
          await ctx.context.internalAdapter.deleteSessions(userId);
        }
        return ctx.json({
          status: true
        });
      }
    );
    updateUser = /* @__PURE__ */ __name2(() => createAuthEndpoint(
      "/update-user",
      {
        method: "POST",
        body: external_exports.record(external_exports.string(), external_exports.any()),
        use: [sessionMiddleware],
        metadata: {
          $Infer: {
            body: {}
          },
          openapi: {
            description: "Update the current user",
            requestBody: {
              content: {
                "application/json": {
                  schema: {
                    type: "object",
                    properties: {
                      name: {
                        type: "string",
                        description: "The name of the user"
                      },
                      image: {
                        type: "string",
                        description: "The image of the user"
                      }
                    }
                  }
                }
              }
            },
            responses: {
              "200": {
                description: "Success",
                content: {
                  "application/json": {
                    schema: {
                      type: "object",
                      properties: {
                        status: {
                          type: "boolean",
                          description: "Indicates if the update was successful"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      async (ctx) => {
        const body = ctx.body;
        if (body.email) {
          throw new APIError("BAD_REQUEST", {
            message: BASE_ERROR_CODES.EMAIL_CAN_NOT_BE_UPDATED
          });
        }
        const { name, image, ...rest } = body;
        const session = ctx.context.session;
        if (image === void 0 && name === void 0 && Object.keys(rest).length === 0) {
          return ctx.json({
            status: true
          });
        }
        const additionalFields = parseUserInput(
          ctx.context.options,
          rest,
          "update"
        );
        const user = await ctx.context.internalAdapter.updateUser(
          session.user.id,
          {
            name,
            image,
            ...additionalFields
          },
          ctx
        );
        await setSessionCookie(ctx, {
          session: session.session,
          user
        });
        return ctx.json({
          status: true
        });
      }
    ), "updateUser");
    changePassword = createAuthEndpoint(
      "/change-password",
      {
        method: "POST",
        body: external_exports.object({
          /**
           * The new password to set
           */
          newPassword: external_exports.string({
            description: "The new password to set"
          }),
          /**
           * The current password of the user
           */
          currentPassword: external_exports.string({
            description: "The current password"
          }),
          /**
           * revoke all sessions that are not the
           * current one logged in by the user
           */
          revokeOtherSessions: external_exports.boolean({
            description: "Revoke all other sessions"
          }).optional()
        }),
        use: [sessionMiddleware],
        metadata: {
          openapi: {
            description: "Change the password of the user",
            responses: {
              "200": {
                description: "Password successfully changed",
                content: {
                  "application/json": {
                    schema: {
                      type: "object",
                      properties: {
                        token: {
                          type: "string",
                          nullable: true,
                          // Only present if revokeOtherSessions is true
                          description: "New session token if other sessions were revoked"
                        },
                        user: {
                          type: "object",
                          properties: {
                            id: {
                              type: "string",
                              description: "The unique identifier of the user"
                            },
                            email: {
                              type: "string",
                              format: "email",
                              description: "The email address of the user"
                            },
                            name: {
                              type: "string",
                              description: "The name of the user"
                            },
                            image: {
                              type: "string",
                              format: "uri",
                              nullable: true,
                              description: "The profile image URL of the user"
                            },
                            emailVerified: {
                              type: "boolean",
                              description: "Whether the email has been verified"
                            },
                            createdAt: {
                              type: "string",
                              format: "date-time",
                              description: "When the user was created"
                            },
                            updatedAt: {
                              type: "string",
                              format: "date-time",
                              description: "When the user was last updated"
                            }
                          },
                          required: [
                            "id",
                            "email",
                            "name",
                            "emailVerified",
                            "createdAt",
                            "updatedAt"
                          ]
                        }
                      },
                      required: ["user"]
                    }
                  }
                }
              }
            }
          }
        }
      },
      async (ctx) => {
        const { newPassword, currentPassword, revokeOtherSessions: revokeOtherSessions2 } = ctx.body;
        const session = ctx.context.session;
        const minPasswordLength = ctx.context.password.config.minPasswordLength;
        if (newPassword.length < minPasswordLength) {
          ctx.context.logger.error("Password is too short");
          throw new APIError("BAD_REQUEST", {
            message: BASE_ERROR_CODES.PASSWORD_TOO_SHORT
          });
        }
        const maxPasswordLength = ctx.context.password.config.maxPasswordLength;
        if (newPassword.length > maxPasswordLength) {
          ctx.context.logger.error("Password is too long");
          throw new APIError("BAD_REQUEST", {
            message: BASE_ERROR_CODES.PASSWORD_TOO_LONG
          });
        }
        const accounts = await ctx.context.internalAdapter.findAccounts(
          session.user.id
        );
        const account = accounts.find(
          (account2) => account2.providerId === "credential" && account2.password
        );
        if (!account || !account.password) {
          throw new APIError("BAD_REQUEST", {
            message: BASE_ERROR_CODES.CREDENTIAL_ACCOUNT_NOT_FOUND
          });
        }
        const passwordHash = await ctx.context.password.hash(newPassword);
        const verify2 = await ctx.context.password.verify({
          hash: account.password,
          password: currentPassword
        });
        if (!verify2) {
          throw new APIError("BAD_REQUEST", {
            message: BASE_ERROR_CODES.INVALID_PASSWORD
          });
        }
        await ctx.context.internalAdapter.updateAccount(account.id, {
          password: passwordHash
        });
        let token = null;
        if (revokeOtherSessions2) {
          await ctx.context.internalAdapter.deleteSessions(session.user.id);
          const newSession = await ctx.context.internalAdapter.createSession(
            session.user.id,
            ctx
          );
          if (!newSession) {
            throw new APIError("INTERNAL_SERVER_ERROR", {
              message: BASE_ERROR_CODES.FAILED_TO_GET_SESSION
            });
          }
          await setSessionCookie(ctx, {
            session: newSession,
            user: session.user
          });
          token = newSession.token;
        }
        return ctx.json({
          token,
          user: {
            id: session.user.id,
            email: session.user.email,
            name: session.user.name,
            image: session.user.image,
            emailVerified: session.user.emailVerified,
            createdAt: session.user.createdAt,
            updatedAt: session.user.updatedAt
          }
        });
      }
    );
    setPassword = createAuthEndpoint(
      "/set-password",
      {
        method: "POST",
        body: external_exports.object({
          /**
           * The new password to set
           */
          newPassword: external_exports.string()
        }),
        metadata: {
          SERVER_ONLY: true
        },
        use: [sessionMiddleware]
      },
      async (ctx) => {
        const { newPassword } = ctx.body;
        const session = ctx.context.session;
        const minPasswordLength = ctx.context.password.config.minPasswordLength;
        if (newPassword.length < minPasswordLength) {
          ctx.context.logger.error("Password is too short");
          throw new APIError("BAD_REQUEST", {
            message: BASE_ERROR_CODES.PASSWORD_TOO_SHORT
          });
        }
        const maxPasswordLength = ctx.context.password.config.maxPasswordLength;
        if (newPassword.length > maxPasswordLength) {
          ctx.context.logger.error("Password is too long");
          throw new APIError("BAD_REQUEST", {
            message: BASE_ERROR_CODES.PASSWORD_TOO_LONG
          });
        }
        const accounts = await ctx.context.internalAdapter.findAccounts(
          session.user.id
        );
        const account = accounts.find(
          (account2) => account2.providerId === "credential" && account2.password
        );
        const passwordHash = await ctx.context.password.hash(newPassword);
        if (!account) {
          await ctx.context.internalAdapter.linkAccount(
            {
              userId: session.user.id,
              providerId: "credential",
              accountId: session.user.id,
              password: passwordHash
            },
            ctx
          );
          return ctx.json({
            status: true
          });
        }
        throw new APIError("BAD_REQUEST", {
          message: "user already has a password"
        });
      }
    );
    deleteUser = createAuthEndpoint(
      "/delete-user",
      {
        method: "POST",
        use: [sessionMiddleware],
        body: external_exports.object({
          /**
           * The callback URL to redirect to after the user is deleted
           * this is only used on delete user callback
           */
          callbackURL: external_exports.string().optional(),
          /**
           * The password of the user. If the password isn't provided, session freshness
           * will be checked.
           */
          password: external_exports.string().optional(),
          /**
           * The token to delete the user. If the token is provided, the user will be deleted
           */
          token: external_exports.string().optional()
        }),
        metadata: {
          openapi: {
            description: "Delete the user",
            responses: {
              "200": {
                description: "User deletion processed successfully",
                content: {
                  "application/json": {
                    schema: {
                      type: "object",
                      properties: {
                        success: {
                          type: "boolean",
                          description: "Indicates if the operation was successful"
                        },
                        message: {
                          type: "string",
                          enum: ["User deleted", "Verification email sent"],
                          description: "Status message of the deletion process"
                        }
                      },
                      required: ["success", "message"]
                    }
                  }
                }
              }
            }
          }
        }
      },
      async (ctx) => {
        if (!ctx.context.options.user?.deleteUser?.enabled) {
          ctx.context.logger.error(
            "Delete user is disabled. Enable it in the options",
            {
              session: ctx.context.session
            }
          );
          throw new APIError("NOT_FOUND");
        }
        const session = ctx.context.session;
        if (ctx.body.password) {
          const accounts = await ctx.context.internalAdapter.findAccounts(
            session.user.id
          );
          const account = accounts.find(
            (account2) => account2.providerId === "credential" && account2.password
          );
          if (!account || !account.password) {
            throw new APIError("BAD_REQUEST", {
              message: BASE_ERROR_CODES.CREDENTIAL_ACCOUNT_NOT_FOUND
            });
          }
          const verify2 = await ctx.context.password.verify({
            hash: account.password,
            password: ctx.body.password
          });
          if (!verify2) {
            throw new APIError("BAD_REQUEST", {
              message: BASE_ERROR_CODES.INVALID_PASSWORD
            });
          }
        } else {
          if (ctx.context.options.session?.freshAge) {
            const currentAge = session.session.createdAt.getTime();
            const freshAge = ctx.context.options.session.freshAge;
            const now = Date.now();
            if (now - currentAge > freshAge) {
              throw new APIError("BAD_REQUEST", {
                message: BASE_ERROR_CODES.SESSION_EXPIRED
              });
            }
          }
        }
        if (ctx.body.token) {
          await deleteUserCallback({
            ...ctx,
            query: {
              token: ctx.body.token
            }
          });
          return ctx.json({
            success: true,
            message: "User deleted"
          });
        }
        if (ctx.context.options.user.deleteUser?.sendDeleteAccountVerification) {
          const token = generateRandomString(32, "0-9", "a-z");
          await ctx.context.internalAdapter.createVerificationValue(
            {
              value: session.user.id,
              identifier: `delete-account-${token}`,
              expiresAt: new Date(
                Date.now() + (ctx.context.options.user.deleteUser?.deleteTokenExpiresIn || 60 * 60 * 24) * 1e3
              )
            },
            ctx
          );
          const url = `${ctx.context.baseURL}/delete-user/callback?token=${token}&callbackURL=${ctx.body.callbackURL || "/"}`;
          await ctx.context.options.user.deleteUser.sendDeleteAccountVerification(
            {
              user: session.user,
              url,
              token
            },
            ctx.request
          );
          return ctx.json({
            success: true,
            message: "Verification email sent"
          });
        }
        const beforeDelete = ctx.context.options.user.deleteUser?.beforeDelete;
        if (beforeDelete) {
          await beforeDelete(session.user, ctx.request);
        }
        await ctx.context.internalAdapter.deleteUser(session.user.id);
        await ctx.context.internalAdapter.deleteSessions(session.user.id);
        await ctx.context.internalAdapter.deleteAccounts(session.user.id);
        deleteSessionCookie(ctx);
        const afterDelete = ctx.context.options.user.deleteUser?.afterDelete;
        if (afterDelete) {
          await afterDelete(session.user, ctx.request);
        }
        return ctx.json({
          success: true,
          message: "User deleted"
        });
      }
    );
    deleteUserCallback = createAuthEndpoint(
      "/delete-user/callback",
      {
        method: "GET",
        query: external_exports.object({
          token: external_exports.string(),
          callbackURL: external_exports.string().optional()
        }),
        use: [originCheck((ctx) => ctx.query.callbackURL)],
        metadata: {
          openapi: {
            description: "Callback to complete user deletion with verification token",
            responses: {
              "200": {
                description: "User successfully deleted",
                content: {
                  "application/json": {
                    schema: {
                      type: "object",
                      properties: {
                        success: {
                          type: "boolean",
                          description: "Indicates if the deletion was successful"
                        },
                        message: {
                          type: "string",
                          enum: ["User deleted"],
                          description: "Confirmation message"
                        }
                      },
                      required: ["success", "message"]
                    }
                  }
                }
              }
            }
          }
        }
      },
      async (ctx) => {
        if (!ctx.context.options.user?.deleteUser?.enabled) {
          ctx.context.logger.error(
            "Delete user is disabled. Enable it in the options"
          );
          throw new APIError("NOT_FOUND");
        }
        const session = await getSessionFromCtx(ctx);
        if (!session) {
          throw new APIError("NOT_FOUND", {
            message: BASE_ERROR_CODES.FAILED_TO_GET_USER_INFO
          });
        }
        const token = await ctx.context.internalAdapter.findVerificationValue(
          `delete-account-${ctx.query.token}`
        );
        if (!token || token.expiresAt < /* @__PURE__ */ new Date()) {
          throw new APIError("NOT_FOUND", {
            message: BASE_ERROR_CODES.INVALID_TOKEN
          });
        }
        if (token.value !== session.user.id) {
          throw new APIError("NOT_FOUND", {
            message: BASE_ERROR_CODES.INVALID_TOKEN
          });
        }
        const beforeDelete = ctx.context.options.user.deleteUser?.beforeDelete;
        if (beforeDelete) {
          await beforeDelete(session.user, ctx.request);
        }
        await ctx.context.internalAdapter.deleteUser(session.user.id);
        await ctx.context.internalAdapter.deleteSessions(session.user.id);
        await ctx.context.internalAdapter.deleteAccounts(session.user.id);
        await ctx.context.internalAdapter.deleteVerificationValue(token.id);
        deleteSessionCookie(ctx);
        const afterDelete = ctx.context.options.user.deleteUser?.afterDelete;
        if (afterDelete) {
          await afterDelete(session.user, ctx.request);
        }
        if (ctx.query.callbackURL) {
          throw ctx.redirect(ctx.query.callbackURL || "/");
        }
        return ctx.json({
          success: true,
          message: "User deleted"
        });
      }
    );
    changeEmail = createAuthEndpoint(
      "/change-email",
      {
        method: "POST",
        body: external_exports.object({
          newEmail: external_exports.string({
            description: "The new email to set"
          }).email(),
          callbackURL: external_exports.string({
            description: "The URL to redirect to after email verification"
          }).optional()
        }),
        use: [sessionMiddleware],
        metadata: {
          openapi: {
            responses: {
              "200": {
                description: "Email change request processed successfully",
                content: {
                  "application/json": {
                    schema: {
                      type: "object",
                      properties: {
                        status: {
                          type: "boolean",
                          description: "Indicates if the request was successful"
                        },
                        message: {
                          type: "string",
                          enum: ["Email updated", "Verification email sent"],
                          description: "Status message of the email change process",
                          nullable: true
                        }
                      },
                      required: ["status"]
                    }
                  }
                }
              }
            }
          }
        }
      },
      async (ctx) => {
        if (!ctx.context.options.user?.changeEmail?.enabled) {
          ctx.context.logger.error("Change email is disabled.");
          throw new APIError("BAD_REQUEST", {
            message: "Change email is disabled"
          });
        }
        const newEmail = ctx.body.newEmail.toLowerCase();
        if (newEmail === ctx.context.session.user.email) {
          ctx.context.logger.error("Email is the same");
          throw new APIError("BAD_REQUEST", {
            message: "Email is the same"
          });
        }
        const existingUser = await ctx.context.internalAdapter.findUserByEmail(newEmail);
        if (existingUser) {
          ctx.context.logger.error("Email already exists");
          throw new APIError("BAD_REQUEST", {
            message: "Couldn't update your email"
          });
        }
        if (ctx.context.session.user.emailVerified !== true) {
          const existing = await ctx.context.internalAdapter.findUserByEmail(newEmail);
          if (existing) {
            throw new APIError("UNPROCESSABLE_ENTITY", {
              message: BASE_ERROR_CODES.USER_ALREADY_EXISTS
            });
          }
          await ctx.context.internalAdapter.updateUserByEmail(
            ctx.context.session.user.email,
            {
              email: newEmail
            },
            ctx
          );
          await setSessionCookie(ctx, {
            session: ctx.context.session.session,
            user: {
              ...ctx.context.session.user,
              email: newEmail
            }
          });
          if (ctx.context.options.emailVerification?.sendVerificationEmail) {
            const token2 = await createEmailVerificationToken(
              ctx.context.secret,
              newEmail,
              void 0,
              ctx.context.options.emailVerification?.expiresIn
            );
            const url2 = `${ctx.context.baseURL}/verify-email?token=${token2}&callbackURL=${ctx.body.callbackURL || "/"}`;
            await ctx.context.options.emailVerification.sendVerificationEmail(
              {
                user: {
                  ...ctx.context.session.user,
                  email: newEmail
                },
                url: url2,
                token: token2
              },
              ctx.request
            );
          }
          return ctx.json({
            status: true
          });
        }
        if (!ctx.context.options.user.changeEmail.sendChangeEmailVerification) {
          ctx.context.logger.error("Verification email isn't enabled.");
          throw new APIError("BAD_REQUEST", {
            message: "Verification email isn't enabled"
          });
        }
        const token = await createEmailVerificationToken(
          ctx.context.secret,
          ctx.context.session.user.email,
          newEmail,
          ctx.context.options.emailVerification?.expiresIn
        );
        const url = `${ctx.context.baseURL}/verify-email?token=${token}&callbackURL=${ctx.body.callbackURL || "/"}`;
        await ctx.context.options.user.changeEmail.sendChangeEmailVerification(
          {
            user: ctx.context.session.user,
            newEmail,
            url,
            token
          },
          ctx.request
        );
        return ctx.json({
          status: true
        });
      }
    );
    __name2(sanitize, "sanitize");
    html = /* @__PURE__ */ __name2((errorCode = "Unknown") => `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Authentication Error</title>
    <style>
        :root {
            --bg-color: #f8f9fa;
            --text-color: #212529;
            --accent-color: #000000;
            --error-color: #dc3545;
            --border-color: #e9ecef;
        }
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
            background-color: var(--bg-color);
            color: var(--text-color);
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
            line-height: 1.5;
        }
        .error-container {
            background-color: #ffffff;
            border-radius: 12px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
            padding: 2.5rem;
            text-align: center;
            max-width: 90%;
            width: 400px;
        }
        h1 {
            color: var(--error-color);
            font-size: 1.75rem;
            margin-bottom: 1rem;
            font-weight: 600;
        }
        p {
            margin-bottom: 1.5rem;
            color: #495057;
        }
        .btn {
            background-color: var(--accent-color);
            color: #ffffff;
            text-decoration: none;
            padding: 0.75rem 1.5rem;
            border-radius: 6px;
            transition: all 0.3s ease;
            display: inline-block;
            font-weight: 500;
            border: 2px solid var(--accent-color);
        }
        .btn:hover {
            background-color: #131721;
        }
        .error-code {
            font-size: 0.875rem;
            color: #6c757d;
            margin-top: 1.5rem;
            padding-top: 1.5rem;
            border-top: 1px solid var(--border-color);
        }
        .icon {
            font-size: 3rem;
            margin-bottom: 1rem;
        }
    </style>
</head>
<body>
    <div class="error-container">
        <div class="icon">\u26A0\uFE0F</div>
        <h1>Better Auth Error</h1>
        <p>We encountered an issue while processing your request. Please try again or contact the application owner if the problem persists.</p>
        <a href="/" id="returnLink" class="btn">Return to Application</a>
        <div class="error-code">Error Code: <span id="errorCode">${sanitize(
      errorCode
    )}</span></div>
    </div>
</body>
</html>`, "html");
    error = createAuthEndpoint(
      "/error",
      {
        method: "GET",
        metadata: {
          ...HIDE_METADATA,
          openapi: {
            description: "Displays an error page",
            responses: {
              "200": {
                description: "Success",
                content: {
                  "text/html": {
                    schema: {
                      type: "string",
                      description: "The HTML content of the error page"
                    }
                  }
                }
              }
            }
          }
        }
      },
      async (c) => {
        const query = new URL(c.request?.url || "").searchParams.get("error") || "Unknown";
        return new Response(html(query), {
          headers: {
            "Content-Type": "text/html"
          }
        });
      }
    );
    ok = createAuthEndpoint(
      "/ok",
      {
        method: "GET",
        metadata: {
          ...HIDE_METADATA,
          openapi: {
            description: "Check if the API is working",
            responses: {
              "200": {
                description: "API is working",
                content: {
                  "application/json": {
                    schema: {
                      type: "object",
                      properties: {
                        ok: {
                          type: "boolean",
                          description: "Indicates if the API is working"
                        }
                      },
                      required: ["ok"]
                    }
                  }
                }
              }
            }
          }
        }
      },
      async (ctx) => {
        return ctx.json({
          ok: true
        });
      }
    );
    listUserAccounts = createAuthEndpoint(
      "/list-accounts",
      {
        method: "GET",
        use: [sessionMiddleware],
        metadata: {
          openapi: {
            description: "List all accounts linked to the user",
            responses: {
              "200": {
                description: "Success",
                content: {
                  "application/json": {
                    schema: {
                      type: "array",
                      items: {
                        type: "object",
                        properties: {
                          id: {
                            type: "string"
                          },
                          provider: {
                            type: "string"
                          },
                          createdAt: {
                            type: "string",
                            format: "date-time"
                          },
                          updatedAt: {
                            type: "string",
                            format: "date-time"
                          }
                        },
                        accountId: {
                          type: "string"
                        },
                        scopes: {
                          type: "array",
                          items: {
                            type: "string"
                          }
                        }
                      },
                      required: [
                        "id",
                        "provider",
                        "createdAt",
                        "updatedAt",
                        "accountId",
                        "scopes"
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      async (c) => {
        const session = c.context.session;
        const accounts = await c.context.internalAdapter.findAccounts(
          session.user.id
        );
        return c.json(
          accounts.map((a) => ({
            id: a.id,
            provider: a.providerId,
            createdAt: a.createdAt,
            updatedAt: a.updatedAt,
            accountId: a.accountId,
            scopes: a.scope?.split(",") || []
          }))
        );
      }
    );
    linkSocialAccount = createAuthEndpoint(
      "/link-social",
      {
        method: "POST",
        requireHeaders: true,
        body: external_exports.object({
          /**
           * Callback URL to redirect to after the user has signed in.
           */
          callbackURL: external_exports.string({
            description: "The URL to redirect to after the user has signed in"
          }).optional(),
          /**
           * OAuth2 provider to use
           */
          provider: external_exports.enum(socialProviderList, {
            description: "The OAuth2 provider to use"
          }),
          /**
           * Additional scopes to request when linking the account.
           * This is useful for requesting additional permissions when
           * linking a social account compared to the initial authentication.
           */
          scopes: external_exports.array(external_exports.string(), {
            description: "Additional scopes to request from the provider"
          }).optional()
        }),
        use: [sessionMiddleware],
        metadata: {
          openapi: {
            description: "Link a social account to the user",
            responses: {
              "200": {
                description: "Success",
                content: {
                  "application/json": {
                    schema: {
                      type: "object",
                      properties: {
                        url: {
                          type: "string",
                          description: "The authorization URL to redirect the user to"
                        },
                        redirect: {
                          type: "boolean",
                          description: "Indicates if the user should be redirected to the authorization URL"
                        }
                      },
                      required: ["url", "redirect"]
                    }
                  }
                }
              }
            }
          }
        }
      },
      async (c) => {
        const session = c.context.session;
        const provider = c.context.socialProviders.find(
          (p) => p.id === c.body.provider
        );
        if (!provider) {
          c.context.logger.error(
            "Provider not found. Make sure to add the provider in your auth config",
            {
              provider: c.body.provider
            }
          );
          throw new APIError("NOT_FOUND", {
            message: BASE_ERROR_CODES.PROVIDER_NOT_FOUND
          });
        }
        const state = await generateState(c, {
          userId: session.user.id,
          email: session.user.email
        });
        const url = await provider.createAuthorizationURL({
          state: state.state,
          codeVerifier: state.codeVerifier,
          redirectURI: `${c.context.baseURL}/callback/${provider.id}`,
          scopes: c.body.scopes
        });
        return c.json({
          url: url.toString(),
          redirect: true
        });
      }
    );
    unlinkAccount = createAuthEndpoint(
      "/unlink-account",
      {
        method: "POST",
        body: external_exports.object({
          providerId: external_exports.string(),
          accountId: external_exports.string().optional()
        }),
        use: [freshSessionMiddleware],
        metadata: {
          openapi: {
            description: "Unlink an account",
            responses: {
              "200": {
                description: "Success",
                content: {
                  "application/json": {
                    schema: {
                      type: "object",
                      properties: {
                        status: {
                          type: "boolean"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      async (ctx) => {
        const { providerId, accountId } = ctx.body;
        const accounts = await ctx.context.internalAdapter.findAccounts(
          ctx.context.session.user.id
        );
        if (accounts.length === 1 && !ctx.context.options.account?.accountLinking?.allowUnlinkingAll) {
          throw new APIError("BAD_REQUEST", {
            message: BASE_ERROR_CODES.FAILED_TO_UNLINK_LAST_ACCOUNT
          });
        }
        const accountExist = accounts.find(
          (account) => accountId ? account.accountId === accountId && account.providerId === providerId : account.providerId === providerId
        );
        if (!accountExist) {
          throw new APIError("BAD_REQUEST", {
            message: BASE_ERROR_CODES.ACCOUNT_NOT_FOUND
          });
        }
        await ctx.context.internalAdapter.deleteAccount(accountExist.id);
        return ctx.json({
          status: true
        });
      }
    );
    getAccessToken = createAuthEndpoint(
      "/get-access-token",
      {
        method: "POST",
        body: external_exports.object({
          providerId: external_exports.string({
            description: "The provider ID for the OAuth provider"
          }),
          accountId: external_exports.string({
            description: "The account ID associated with the refresh token"
          }).optional(),
          userId: external_exports.string({
            description: "The user ID associated with the account"
          }).optional()
        }),
        metadata: {
          openapi: {
            description: "Get a valid access token, doing a refresh if needed",
            responses: {
              200: {
                description: "A Valid access token",
                content: {
                  "application/json": {
                    schema: {
                      type: "object",
                      properties: {
                        tokenType: {
                          type: "string"
                        },
                        idToken: {
                          type: "string"
                        },
                        accessToken: {
                          type: "string"
                        },
                        refreshToken: {
                          type: "string"
                        },
                        accessTokenExpiresAt: {
                          type: "string",
                          format: "date-time"
                        },
                        refreshTokenExpiresAt: {
                          type: "string",
                          format: "date-time"
                        }
                      }
                    }
                  }
                }
              },
              400: {
                description: "Invalid refresh token or provider configuration"
              }
            }
          }
        }
      },
      async (ctx) => {
        const { providerId, accountId, userId } = ctx.body;
        const req = ctx.request;
        const session = await getSessionFromCtx(ctx);
        if (req && !session) {
          throw ctx.error("UNAUTHORIZED");
        }
        let resolvedUserId = session?.user?.id || userId;
        if (!resolvedUserId) {
          throw new APIError("BAD_REQUEST", {
            message: `Either userId or session is required`
          });
        }
        if (!socialProviderList.includes(providerId)) {
          throw new APIError("BAD_REQUEST", {
            message: `Provider ${providerId} is not supported.`
          });
        }
        const accounts = await ctx.context.internalAdapter.findAccounts(resolvedUserId);
        const account = accounts.find(
          (acc) => accountId ? acc.id === accountId && acc.providerId === providerId : acc.providerId === providerId
        );
        if (!account) {
          throw new APIError("BAD_REQUEST", {
            message: "Account not found"
          });
        }
        const provider = ctx.context.socialProviders.find(
          (p) => p.id === providerId
        );
        if (!provider) {
          throw new APIError("BAD_REQUEST", {
            message: `Provider ${providerId} not found.`
          });
        }
        if (!provider.refreshAccessToken) {
          throw new APIError("BAD_REQUEST", {
            message: `Provider ${providerId} does not support token refreshing.`
          });
        }
        try {
          let newTokens = null;
          if (!account.accessTokenExpiresAt || account.accessTokenExpiresAt.getTime() - Date.now() < 5e3) {
            newTokens = await provider.refreshAccessToken(
              account.refreshToken
            );
            await ctx.context.internalAdapter.updateAccount(account.id, {
              accessToken: newTokens.accessToken,
              accessTokenExpiresAt: newTokens.accessTokenExpiresAt,
              refreshToken: newTokens.refreshToken,
              refreshTokenExpiresAt: newTokens.refreshTokenExpiresAt
            });
          }
          const tokens = {
            accessToken: newTokens?.accessToken ?? account.accessToken ?? void 0,
            accessTokenExpiresAt: newTokens?.accessTokenExpiresAt ?? account.accessTokenExpiresAt ?? void 0,
            scopes: account.scope?.split(",") ?? [],
            idToken: newTokens?.idToken ?? account.idToken ?? void 0
          };
          return ctx.json(tokens);
        } catch (error2) {
          throw new APIError("BAD_REQUEST", {
            message: "Failed to get a valid access token",
            cause: error2
          });
        }
      }
    );
    refreshToken = createAuthEndpoint(
      "/refresh-token",
      {
        method: "POST",
        body: external_exports.object({
          providerId: external_exports.string({
            description: "The provider ID for the OAuth provider"
          }),
          accountId: external_exports.string({
            description: "The account ID associated with the refresh token"
          }).optional(),
          userId: external_exports.string({
            description: "The user ID associated with the account"
          }).optional()
        }),
        metadata: {
          openapi: {
            description: "Refresh the access token using a refresh token",
            responses: {
              200: {
                description: "Access token refreshed successfully",
                content: {
                  "application/json": {
                    schema: {
                      type: "object",
                      properties: {
                        tokenType: {
                          type: "string"
                        },
                        idToken: {
                          type: "string"
                        },
                        accessToken: {
                          type: "string"
                        },
                        refreshToken: {
                          type: "string"
                        },
                        accessTokenExpiresAt: {
                          type: "string",
                          format: "date-time"
                        },
                        refreshTokenExpiresAt: {
                          type: "string",
                          format: "date-time"
                        }
                      }
                    }
                  }
                }
              },
              400: {
                description: "Invalid refresh token or provider configuration"
              }
            }
          }
        }
      },
      async (ctx) => {
        const { providerId, accountId, userId } = ctx.body;
        const req = ctx.request;
        const session = await getSessionFromCtx(ctx);
        if (req && !session) {
          throw ctx.error("UNAUTHORIZED");
        }
        let resolvedUserId = session?.user?.id || userId;
        if (!resolvedUserId) {
          throw new APIError("BAD_REQUEST", {
            message: `Either userId or session is required`
          });
        }
        if (!socialProviderList.includes(providerId)) {
          throw new APIError("BAD_REQUEST", {
            message: `Provider ${providerId} is not supported.`
          });
        }
        const accounts = await ctx.context.internalAdapter.findAccounts(resolvedUserId);
        const account = accounts.find(
          (acc) => accountId ? acc.id === accountId && acc.providerId === providerId : acc.providerId === providerId
        );
        if (!account) {
          throw new APIError("BAD_REQUEST", {
            message: "Account not found"
          });
        }
        const provider = ctx.context.socialProviders.find(
          (p) => p.id === providerId
        );
        if (!provider) {
          throw new APIError("BAD_REQUEST", {
            message: `Provider ${providerId} not found.`
          });
        }
        if (!provider.refreshAccessToken) {
          throw new APIError("BAD_REQUEST", {
            message: `Provider ${providerId} does not support token refreshing.`
          });
        }
        try {
          const tokens = await provider.refreshAccessToken(
            account.refreshToken
          );
          await ctx.context.internalAdapter.updateAccount(account.id, {
            accessToken: tokens.accessToken,
            accessTokenExpiresAt: tokens.accessTokenExpiresAt,
            refreshToken: tokens.refreshToken,
            refreshTokenExpiresAt: tokens.refreshTokenExpiresAt
          });
          return ctx.json(tokens);
        } catch (error2) {
          throw new APIError("BAD_REQUEST", {
            message: "Failed to refresh access token",
            cause: error2
          });
        }
      }
    );
  }
});
function getIp(req, options) {
  if (options.advanced?.ipAddress?.disableIpTracking) {
    return null;
  }
  const testIP = "127.0.0.1";
  if (isTest) {
    return testIP;
  }
  const headers = "headers" in req ? req.headers : req;
  const defaultHeaders = ["x-forwarded-for"];
  const ipHeaders = options.advanced?.ipAddress?.ipAddressHeaders || defaultHeaders;
  for (const key of ipHeaders) {
    const value = "get" in headers ? headers.get(key) : headers[key];
    if (typeof value === "string") {
      const ip = value.split(",")[0].trim();
      if (isValidIP3(ip)) {
        return ip;
      }
    }
  }
  return null;
}
__name(getIp, "getIp");
function isValidIP3(ip) {
  const ipv4Regex3 = /^(\d{1,3}\.){3}\d{1,3}$/;
  if (ipv4Regex3.test(ip)) {
    const parts = ip.split(".").map(Number);
    return parts.every((part) => part >= 0 && part <= 255);
  }
  const ipv6Regex3 = /^([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}$/;
  return ipv6Regex3.test(ip);
}
__name(isValidIP3, "isValidIP3");
var init_better_auth_iKoUsdFE = __esm({
  "../node_modules/better-auth/dist/shared/better-auth.iKoUsdFE.mjs"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_better_auth_8zoxzg_F();
    __name2(getIp, "getIp");
    __name2(isValidIP3, "isValidIP");
  }
});
function shouldRateLimit(max, window2, rateLimitData) {
  const now = Date.now();
  const windowInMs = window2 * 1e3;
  const timeSinceLastRequest = now - rateLimitData.lastRequest;
  return timeSinceLastRequest < windowInMs && rateLimitData.count >= max;
}
__name(shouldRateLimit, "shouldRateLimit");
function rateLimitResponse(retryAfter) {
  return new Response(
    JSON.stringify({
      message: "Too many requests. Please try again later."
    }),
    {
      status: 429,
      statusText: "Too Many Requests",
      headers: {
        "X-Retry-After": retryAfter.toString()
      }
    }
  );
}
__name(rateLimitResponse, "rateLimitResponse");
function getRetryAfter(lastRequest, window2) {
  const now = Date.now();
  const windowInMs = window2 * 1e3;
  return Math.ceil((lastRequest + windowInMs - now) / 1e3);
}
__name(getRetryAfter, "getRetryAfter");
function createDBStorage(ctx, modelName) {
  const model = ctx.options.rateLimit?.modelName || "rateLimit";
  const db = ctx.adapter;
  return {
    get: /* @__PURE__ */ __name2(async (key) => {
      const res = await db.findMany({
        model,
        where: [{ field: "key", value: key }]
      });
      const data = res[0];
      if (typeof data?.lastRequest === "bigint") {
        data.lastRequest = Number(data.lastRequest);
      }
      return data;
    }, "get"),
    set: /* @__PURE__ */ __name2(async (key, value, _update) => {
      try {
        if (_update) {
          await db.updateMany({
            model: "rateLimit",
            where: [{ field: "key", value: key }],
            update: {
              count: value.count,
              lastRequest: value.lastRequest
            }
          });
        } else {
          await db.create({
            model: "rateLimit",
            data: {
              key,
              count: value.count,
              lastRequest: value.lastRequest
            }
          });
        }
      } catch (e) {
        ctx.logger.error("Error setting rate limit", e);
      }
    }, "set")
  };
}
__name(createDBStorage, "createDBStorage");
function getRateLimitStorage(ctx) {
  if (ctx.options.rateLimit?.customStorage) {
    return ctx.options.rateLimit.customStorage;
  }
  if (ctx.rateLimit.storage === "secondary-storage") {
    return {
      get: /* @__PURE__ */ __name2(async (key) => {
        const stringified = await ctx.options.secondaryStorage?.get(key);
        return stringified ? JSON.parse(stringified) : void 0;
      }, "get"),
      set: /* @__PURE__ */ __name2(async (key, value) => {
        await ctx.options.secondaryStorage?.set?.(key, JSON.stringify(value));
      }, "set")
    };
  }
  const storage = ctx.rateLimit.storage;
  if (storage === "memory") {
    return {
      async get(key) {
        return memory.get(key);
      },
      async set(key, value, _update) {
        memory.set(key, value);
      }
    };
  }
  return createDBStorage(ctx, ctx.rateLimit.modelName);
}
__name(getRateLimitStorage, "getRateLimitStorage");
async function onRequestRateLimit(req, ctx) {
  if (!ctx.rateLimit.enabled) {
    return;
  }
  const path = new URL(req.url).pathname.replace(
    ctx.options.basePath || "/api/auth",
    ""
  );
  let window2 = ctx.rateLimit.window;
  let max = ctx.rateLimit.max;
  const ip = getIp(req, ctx.options);
  if (!ip) {
    return;
  }
  const key = ip + path;
  const specialRules = getDefaultSpecialRules();
  const specialRule = specialRules.find((rule) => rule.pathMatcher(path));
  if (specialRule) {
    window2 = specialRule.window;
    max = specialRule.max;
  }
  for (const plugin of ctx.options.plugins || []) {
    if (plugin.rateLimit) {
      const matchedRule = plugin.rateLimit.find(
        (rule) => rule.pathMatcher(path)
      );
      if (matchedRule) {
        window2 = matchedRule.window;
        max = matchedRule.max;
        break;
      }
    }
  }
  if (ctx.rateLimit.customRules) {
    const _path = Object.keys(ctx.rateLimit.customRules).find((p) => {
      if (p.includes("*")) {
        const isMatch2 = wildcardMatch(p)(path);
        return isMatch2;
      }
      return p === path;
    });
    if (_path) {
      const customRule = ctx.rateLimit.customRules[_path];
      const resolved = typeof customRule === "function" ? await customRule(req) : customRule;
      if (resolved) {
        window2 = resolved.window;
        max = resolved.max;
      }
    }
  }
  const storage = getRateLimitStorage(ctx);
  const data = await storage.get(key);
  const now = Date.now();
  if (!data) {
    await storage.set(key, {
      key,
      count: 1,
      lastRequest: now
    });
  } else {
    const timeSinceLastRequest = now - data.lastRequest;
    if (shouldRateLimit(max, window2, data)) {
      const retryAfter = getRetryAfter(data.lastRequest, window2);
      return rateLimitResponse(retryAfter);
    } else if (timeSinceLastRequest > window2 * 1e3) {
      await storage.set(
        key,
        {
          ...data,
          count: 1,
          lastRequest: now
        },
        true
      );
    } else {
      await storage.set(
        key,
        {
          ...data,
          count: data.count + 1,
          lastRequest: now
        },
        true
      );
    }
  }
}
__name(onRequestRateLimit, "onRequestRateLimit");
function getDefaultSpecialRules() {
  const specialRules = [
    {
      pathMatcher(path) {
        return path.startsWith("/sign-in") || path.startsWith("/sign-up") || path.startsWith("/change-password") || path.startsWith("/change-email");
      },
      window: 10,
      max: 3
    }
  ];
  return specialRules;
}
__name(getDefaultSpecialRules, "getDefaultSpecialRules");
function toAuthEndpoints(endpoints, ctx) {
  const api = {};
  for (const [key, endpoint] of Object.entries(endpoints)) {
    api[key] = async (context) => {
      const authContext = await ctx;
      let internalContext = {
        ...context,
        context: {
          ...authContext,
          returned: void 0,
          responseHeaders: void 0,
          session: null
        },
        path: endpoint.path,
        headers: context?.headers ? new Headers(context?.headers) : void 0
      };
      const { beforeHooks, afterHooks } = getHooks(authContext);
      const before = await runBeforeHooks(internalContext, beforeHooks);
      if ("context" in before && before.context && typeof before.context === "object") {
        const { headers, ...rest } = before.context;
        if (headers) {
          headers.forEach((value, key2) => {
            internalContext.headers.set(key2, value);
          });
        }
        internalContext = defu(rest, internalContext);
      } else if (before) {
        return before;
      }
      internalContext.asResponse = false;
      internalContext.returnHeaders = true;
      const result = await endpoint(internalContext).catch((e) => {
        if (e instanceof APIError) {
          return {
            response: e,
            headers: e.headers ? new Headers(e.headers) : null
          };
        }
        throw e;
      });
      internalContext.context.returned = result.response;
      internalContext.context.responseHeaders = result.headers;
      const after = await runAfterHooks(internalContext, afterHooks);
      if (after.response) {
        result.response = after.response;
      }
      if (result.response instanceof APIError && !context?.asResponse) {
        throw result.response;
      }
      const response = context?.asResponse ? toResponse(result.response, {
        headers: result.headers
      }) : context?.returnHeaders ? {
        headers: result.headers,
        response: result.response
      } : result.response;
      return response;
    };
    api[key].path = endpoint.path;
    api[key].options = endpoint.options;
  }
  return api;
}
__name(toAuthEndpoints, "toAuthEndpoints");
async function runBeforeHooks(context, hooks) {
  let modifiedContext = {};
  for (const hook of hooks) {
    if (hook.matcher(context)) {
      const result = await hook.handler({
        ...context,
        returnHeaders: false
      });
      if (result && typeof result === "object") {
        if ("context" in result && typeof result.context === "object") {
          const { headers, ...rest } = result.context;
          if (headers instanceof Headers) {
            if (modifiedContext.headers) {
              headers.forEach((value, key) => {
                modifiedContext.headers?.set(key, value);
              });
            } else {
              modifiedContext.headers = headers;
            }
          }
          modifiedContext = defu(rest, modifiedContext);
          continue;
        }
        return result;
      }
    }
  }
  return { context: modifiedContext };
}
__name(runBeforeHooks, "runBeforeHooks");
async function runAfterHooks(context, hooks) {
  for (const hook of hooks) {
    if (hook.matcher(context)) {
      const result = await hook.handler(context).catch((e) => {
        if (e instanceof APIError) {
          return {
            response: e,
            headers: e.headers ? new Headers(e.headers) : null
          };
        }
        throw e;
      });
      if (result.headers) {
        result.headers.forEach((value, key) => {
          if (!context.context.responseHeaders) {
            context.context.responseHeaders = new Headers({
              [key]: value
            });
          } else {
            if (key.toLowerCase() === "set-cookie") {
              context.context.responseHeaders.append(key, value);
            } else {
              context.context.responseHeaders.set(key, value);
            }
          }
        });
      }
      if (result.response) {
        context.context.returned = result.response;
      }
    }
  }
  return {
    response: context.context.returned,
    headers: context.context.responseHeaders
  };
}
__name(runAfterHooks, "runAfterHooks");
function getHooks(authContext) {
  const plugins = authContext.options.plugins || [];
  const beforeHooks = [];
  const afterHooks = [];
  if (authContext.options.hooks?.before) {
    beforeHooks.push({
      matcher: /* @__PURE__ */ __name2(() => true, "matcher"),
      handler: authContext.options.hooks.before
    });
  }
  if (authContext.options.hooks?.after) {
    afterHooks.push({
      matcher: /* @__PURE__ */ __name2(() => true, "matcher"),
      handler: authContext.options.hooks.after
    });
  }
  const pluginBeforeHooks = plugins.map((plugin) => {
    if (plugin.hooks?.before) {
      return plugin.hooks.before;
    }
  }).filter((plugin) => plugin !== void 0).flat();
  const pluginAfterHooks = plugins.map((plugin) => {
    if (plugin.hooks?.after) {
      return plugin.hooks.after;
    }
  }).filter((plugin) => plugin !== void 0).flat();
  pluginBeforeHooks.length && beforeHooks.push(...pluginBeforeHooks);
  pluginAfterHooks.length && afterHooks.push(...pluginAfterHooks);
  return {
    beforeHooks,
    afterHooks
  };
}
__name(getHooks, "getHooks");
function getEndpoints(ctx, options) {
  const pluginEndpoints = options.plugins?.reduce(
    (acc, plugin) => {
      return {
        ...acc,
        ...plugin.endpoints
      };
    },
    {}
  );
  const middlewares = options.plugins?.map(
    (plugin) => plugin.middlewares?.map((m) => {
      const middleware = /* @__PURE__ */ __name2(async (context) => {
        return m.middleware({
          ...context,
          context: {
            ...ctx,
            ...context.context
          }
        });
      }, "middleware");
      middleware.options = m.middleware.options;
      return {
        path: m.path,
        middleware
      };
    })
  ).filter((plugin) => plugin !== void 0).flat() || [];
  const baseEndpoints = {
    signInSocial,
    callbackOAuth,
    getSession: getSession(),
    signOut,
    signUpEmail: signUpEmail(),
    signInEmail,
    forgetPassword,
    resetPassword,
    verifyEmail,
    sendVerificationEmail,
    changeEmail,
    changePassword,
    setPassword,
    updateUser: updateUser(),
    deleteUser,
    forgetPasswordCallback,
    listSessions: listSessions(),
    revokeSession,
    revokeSessions,
    revokeOtherSessions,
    linkSocialAccount,
    listUserAccounts,
    deleteUserCallback,
    unlinkAccount,
    refreshToken,
    getAccessToken
  };
  const endpoints = {
    ...baseEndpoints,
    ...pluginEndpoints,
    ok,
    error
  };
  const api = toAuthEndpoints(endpoints, ctx);
  return {
    api,
    middlewares
  };
}
__name(getEndpoints, "getEndpoints");
var signUpEmail;
var memory;
var router;
var init_api3 = __esm({
  "../node_modules/better-auth/dist/api/index.mjs"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_dist2();
    init_dist2();
    init_better_auth_Dvh_YFwT();
    init_better_auth_Dvh_YFwT();
    init_esm2();
    init_cookies();
    init_better_auth_Cc72UxUH();
    init_better_auth_8zoxzg_F();
    init_better_auth_Cqykj82J();
    init_better_auth_iKoUsdFE();
    init_defu();
    init_social_providers();
    init_dist3();
    init_better_auth_DufyW0qf();
    init_base642();
    init_better_auth_CW6D9eSx();
    init_hash();
    init_dist4();
    init_hex();
    init_better_auth_B4Qoxdgc();
    init_random();
    init_better_auth_DdzSJf_n();
    init_better_auth_dn8_oqOu();
    init_better_auth_tB5eU6EY();
    init_better_auth_BUPPRXfK();
    init_hmac();
    init_better_auth_DDEbWX_S();
    init_better_auth_VTXNLFMT();
    init_binary();
    signUpEmail = /* @__PURE__ */ __name2(() => createAuthEndpoint(
      "/sign-up/email",
      {
        method: "POST",
        body: external_exports.record(external_exports.string(), external_exports.any()),
        metadata: {
          $Infer: {
            body: {}
          },
          openapi: {
            description: "Sign up a user using email and password",
            requestBody: {
              content: {
                "application/json": {
                  schema: {
                    type: "object",
                    properties: {
                      name: {
                        type: "string",
                        description: "The name of the user"
                      },
                      email: {
                        type: "string",
                        description: "The email of the user"
                      },
                      password: {
                        type: "string",
                        description: "The password of the user"
                      },
                      callbackURL: {
                        type: "string",
                        description: "The URL to use for email verification callback"
                      }
                    },
                    required: ["name", "email", "password"]
                  }
                }
              }
            },
            responses: {
              "200": {
                description: "Successfully created user",
                content: {
                  "application/json": {
                    schema: {
                      type: "object",
                      properties: {
                        token: {
                          type: "string",
                          nullable: true,
                          description: "Authentication token for the session"
                        },
                        user: {
                          type: "object",
                          properties: {
                            id: {
                              type: "string",
                              description: "The unique identifier of the user"
                            },
                            email: {
                              type: "string",
                              format: "email",
                              description: "The email address of the user"
                            },
                            name: {
                              type: "string",
                              description: "The name of the user"
                            },
                            image: {
                              type: "string",
                              format: "uri",
                              nullable: true,
                              description: "The profile image URL of the user"
                            },
                            emailVerified: {
                              type: "boolean",
                              description: "Whether the email has been verified"
                            },
                            createdAt: {
                              type: "string",
                              format: "date-time",
                              description: "When the user was created"
                            },
                            updatedAt: {
                              type: "string",
                              format: "date-time",
                              description: "When the user was last updated"
                            }
                          },
                          required: [
                            "id",
                            "email",
                            "name",
                            "emailVerified",
                            "createdAt",
                            "updatedAt"
                          ]
                        }
                      },
                      required: ["user"]
                      // token is optional
                    }
                  }
                }
              }
            }
          }
        }
      },
      async (ctx) => {
        if (!ctx.context.options.emailAndPassword?.enabled || ctx.context.options.emailAndPassword?.disableSignUp) {
          throw new APIError("BAD_REQUEST", {
            message: "Email and password sign up is not enabled"
          });
        }
        const body = ctx.body;
        const { name, email, password, image, callbackURL, ...additionalFields } = body;
        const isValidEmail = external_exports.string().email().safeParse(email);
        if (!isValidEmail.success) {
          throw new APIError("BAD_REQUEST", {
            message: BASE_ERROR_CODES.INVALID_EMAIL
          });
        }
        const minPasswordLength = ctx.context.password.config.minPasswordLength;
        if (password.length < minPasswordLength) {
          ctx.context.logger.error("Password is too short");
          throw new APIError("BAD_REQUEST", {
            message: BASE_ERROR_CODES.PASSWORD_TOO_SHORT
          });
        }
        const maxPasswordLength = ctx.context.password.config.maxPasswordLength;
        if (password.length > maxPasswordLength) {
          ctx.context.logger.error("Password is too long");
          throw new APIError("BAD_REQUEST", {
            message: BASE_ERROR_CODES.PASSWORD_TOO_LONG
          });
        }
        const dbUser = await ctx.context.internalAdapter.findUserByEmail(email);
        if (dbUser?.user) {
          ctx.context.logger.info(`Sign-up attempt for existing email: ${email}`);
          throw new APIError("UNPROCESSABLE_ENTITY", {
            message: BASE_ERROR_CODES.USER_ALREADY_EXISTS
          });
        }
        const additionalData = parseUserInput(
          ctx.context.options,
          additionalFields
        );
        const hash = await ctx.context.password.hash(password);
        let createdUser;
        try {
          createdUser = await ctx.context.internalAdapter.createUser(
            {
              email: email.toLowerCase(),
              name,
              image,
              ...additionalData,
              emailVerified: false
            },
            ctx
          );
          if (!createdUser) {
            throw new APIError("BAD_REQUEST", {
              message: BASE_ERROR_CODES.FAILED_TO_CREATE_USER
            });
          }
        } catch (e) {
          if (isDevelopment) {
            ctx.context.logger.error("Failed to create user", e);
          }
          if (e instanceof APIError) {
            throw e;
          }
          throw new APIError("UNPROCESSABLE_ENTITY", {
            message: BASE_ERROR_CODES.FAILED_TO_CREATE_USER,
            details: e
          });
        }
        if (!createdUser) {
          throw new APIError("UNPROCESSABLE_ENTITY", {
            message: BASE_ERROR_CODES.FAILED_TO_CREATE_USER
          });
        }
        await ctx.context.internalAdapter.linkAccount(
          {
            userId: createdUser.id,
            providerId: "credential",
            accountId: createdUser.id,
            password: hash
          },
          ctx
        );
        if (ctx.context.options.emailVerification?.sendOnSignUp || ctx.context.options.emailAndPassword.requireEmailVerification) {
          const token = await createEmailVerificationToken(
            ctx.context.secret,
            createdUser.email,
            void 0,
            ctx.context.options.emailVerification?.expiresIn
          );
          const url = `${ctx.context.baseURL}/verify-email?token=${token}&callbackURL=${body.callbackURL || "/"}`;
          await ctx.context.options.emailVerification?.sendVerificationEmail?.(
            {
              user: createdUser,
              url,
              token
            },
            ctx.request
          );
        }
        if (ctx.context.options.emailAndPassword.autoSignIn === false || ctx.context.options.emailAndPassword.requireEmailVerification) {
          return ctx.json({
            token: null,
            user: {
              id: createdUser.id,
              email: createdUser.email,
              name: createdUser.name,
              image: createdUser.image,
              emailVerified: createdUser.emailVerified,
              createdAt: createdUser.createdAt,
              updatedAt: createdUser.updatedAt
            }
          });
        }
        const session = await ctx.context.internalAdapter.createSession(
          createdUser.id,
          ctx
        );
        if (!session) {
          throw new APIError("BAD_REQUEST", {
            message: BASE_ERROR_CODES.FAILED_TO_CREATE_SESSION
          });
        }
        await setSessionCookie(ctx, {
          session,
          user: createdUser
        });
        return ctx.json({
          token: session.token,
          user: {
            id: createdUser.id,
            email: createdUser.email,
            name: createdUser.name,
            image: createdUser.image,
            emailVerified: createdUser.emailVerified,
            createdAt: createdUser.createdAt,
            updatedAt: createdUser.updatedAt
          }
        });
      }
    ), "signUpEmail");
    __name2(shouldRateLimit, "shouldRateLimit");
    __name2(rateLimitResponse, "rateLimitResponse");
    __name2(getRetryAfter, "getRetryAfter");
    __name2(createDBStorage, "createDBStorage");
    memory = /* @__PURE__ */ new Map();
    __name2(getRateLimitStorage, "getRateLimitStorage");
    __name2(onRequestRateLimit, "onRequestRateLimit");
    __name2(getDefaultSpecialRules, "getDefaultSpecialRules");
    __name2(toAuthEndpoints, "toAuthEndpoints");
    __name2(runBeforeHooks, "runBeforeHooks");
    __name2(runAfterHooks, "runAfterHooks");
    __name2(getHooks, "getHooks");
    __name2(getEndpoints, "getEndpoints");
    router = /* @__PURE__ */ __name2((ctx, options) => {
      const { api, middlewares } = getEndpoints(ctx, options);
      const basePath = new URL(ctx.baseURL).pathname;
      return createRouter2(api, {
        routerContext: ctx,
        openapi: {
          disabled: true
        },
        basePath,
        routerMiddleware: [
          {
            path: "/**",
            middleware: originCheckMiddleware
          },
          ...middlewares
        ],
        async onRequest(req) {
          const disabledPaths = ctx.options.disabledPaths || [];
          const path = new URL(req.url).pathname.replace(basePath, "");
          if (disabledPaths.includes(path)) {
            return new Response("Not Found", { status: 404 });
          }
          for (const plugin of ctx.options.plugins || []) {
            if (plugin.onRequest) {
              const response = await plugin.onRequest(req, ctx);
              if (response && "response" in response) {
                return response.response;
              }
            }
          }
          return onRequestRateLimit(req, ctx);
        },
        async onResponse(res) {
          for (const plugin of ctx.options.plugins || []) {
            if (plugin.onResponse) {
              const response = await plugin.onResponse(res, ctx);
              if (response) {
                return response.response;
              }
            }
          }
          return res;
        },
        onError(e) {
          if (e instanceof APIError && e.status === "FOUND") {
            return;
          }
          if (options.onAPIError?.throw) {
            throw e;
          }
          if (options.onAPIError?.onError) {
            options.onAPIError.onError(e, ctx);
            return;
          }
          const optLogLevel = options.logger?.level;
          const log = optLogLevel === "error" || optLogLevel === "warn" || optLogLevel === "debug" ? logger : void 0;
          if (options.logger?.disabled !== true) {
            if (e && typeof e === "object" && "message" in e && typeof e.message === "string") {
              if (e.message.includes("no column") || e.message.includes("column") || e.message.includes("relation") || e.message.includes("table") || e.message.includes("does not exist")) {
                ctx.logger?.error(e.message);
                return;
              }
            }
            if (e instanceof APIError) {
              if (e.status === "INTERNAL_SERVER_ERROR") {
                ctx.logger.error(e.status, e);
              }
              log?.error(e.message);
            } else {
              ctx.logger?.error(
                e && typeof e === "object" && "name" in e ? e.name : "",
                e
              );
            }
          }
        }
      });
    }, "router");
  }
});
function constantTimeEqual(a, b) {
  const aBuffer = new Uint8Array(a);
  const bBuffer = new Uint8Array(b);
  if (aBuffer.length !== bBuffer.length) {
    return false;
  }
  let c = 0;
  for (let i = 0; i < aBuffer.length; i++) {
    c |= aBuffer[i] ^ bBuffer[i];
  }
  return c === 0;
}
__name(constantTimeEqual, "constantTimeEqual");
async function generateKey(password, salt) {
  return await scryptAsync(password.normalize("NFKC"), salt, {
    N: config.N,
    p: config.p,
    r: config.r,
    dkLen: config.dkLen,
    maxmem: 128 * config.N * config.r * 2
  });
}
__name(generateKey, "generateKey");
var config;
var hashPassword;
var verifyPassword;
var init_better_auth_OT3XFeFk = __esm({
  "../node_modules/better-auth/dist/shared/better-auth.OT3XFeFk.mjs"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_scrypt();
    init_dist4();
    init_hex();
    init_utils();
    __name2(constantTimeEqual, "constantTimeEqual");
    config = {
      N: 16384,
      r: 16,
      p: 1,
      dkLen: 64
    };
    __name2(generateKey, "generateKey");
    hashPassword = /* @__PURE__ */ __name2(async (password) => {
      const salt = hex.encode(getRandomValues(new Uint8Array(16)));
      const key = await generateKey(password, salt);
      return `${salt}:${hex.encode(key)}`;
    }, "hashPassword");
    verifyPassword = /* @__PURE__ */ __name2(async ({
      hash,
      password
    }) => {
      const [salt, key] = hash.split(":");
      const targetKey = await generateKey(password, salt);
      return constantTimeEqual(targetKey, hexToBytes(key));
    }, "verifyPassword");
  }
});
var getAuthTables;
var init_better_auth_DORkW_Ge = __esm({
  "../node_modules/better-auth/dist/shared/better-auth.DORkW_Ge.mjs"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    getAuthTables = /* @__PURE__ */ __name2((options) => {
      const pluginSchema = options.plugins?.reduce(
        (acc, plugin) => {
          const schema2 = plugin.schema;
          if (!schema2) return acc;
          for (const [key, value] of Object.entries(schema2)) {
            acc[key] = {
              fields: {
                ...acc[key]?.fields,
                ...value.fields
              },
              modelName: value.modelName || key
            };
          }
          return acc;
        },
        {}
      );
      const shouldAddRateLimitTable = options.rateLimit?.storage === "database";
      const rateLimitTable = {
        rateLimit: {
          modelName: options.rateLimit?.modelName || "rateLimit",
          fields: {
            key: {
              type: "string",
              fieldName: options.rateLimit?.fields?.key || "key"
            },
            count: {
              type: "number",
              fieldName: options.rateLimit?.fields?.count || "count"
            },
            lastRequest: {
              type: "number",
              bigint: true,
              fieldName: options.rateLimit?.fields?.lastRequest || "lastRequest"
            }
          }
        }
      };
      const { user, session, account, ...pluginTables } = pluginSchema || {};
      const sessionTable = {
        session: {
          modelName: options.session?.modelName || "session",
          fields: {
            expiresAt: {
              type: "date",
              required: true,
              fieldName: options.session?.fields?.expiresAt || "expiresAt"
            },
            token: {
              type: "string",
              required: true,
              fieldName: options.session?.fields?.token || "token",
              unique: true
            },
            createdAt: {
              type: "date",
              required: true,
              fieldName: options.session?.fields?.createdAt || "createdAt"
            },
            updatedAt: {
              type: "date",
              required: true,
              fieldName: options.session?.fields?.updatedAt || "updatedAt"
            },
            ipAddress: {
              type: "string",
              required: false,
              fieldName: options.session?.fields?.ipAddress || "ipAddress"
            },
            userAgent: {
              type: "string",
              required: false,
              fieldName: options.session?.fields?.userAgent || "userAgent"
            },
            userId: {
              type: "string",
              fieldName: options.session?.fields?.userId || "userId",
              references: {
                model: options.user?.modelName || "user",
                field: "id",
                onDelete: "cascade"
              },
              required: true
            },
            ...session?.fields,
            ...options.session?.additionalFields
          },
          order: 2
        }
      };
      return {
        user: {
          modelName: options.user?.modelName || "user",
          fields: {
            name: {
              type: "string",
              required: true,
              fieldName: options.user?.fields?.name || "name",
              sortable: true
            },
            email: {
              type: "string",
              unique: true,
              required: true,
              fieldName: options.user?.fields?.email || "email",
              sortable: true
            },
            emailVerified: {
              type: "boolean",
              defaultValue: /* @__PURE__ */ __name2(() => false, "defaultValue"),
              required: true,
              fieldName: options.user?.fields?.emailVerified || "emailVerified"
            },
            image: {
              type: "string",
              required: false,
              fieldName: options.user?.fields?.image || "image"
            },
            createdAt: {
              type: "date",
              defaultValue: /* @__PURE__ */ __name2(() => /* @__PURE__ */ new Date(), "defaultValue"),
              required: true,
              fieldName: options.user?.fields?.createdAt || "createdAt"
            },
            updatedAt: {
              type: "date",
              defaultValue: /* @__PURE__ */ __name2(() => /* @__PURE__ */ new Date(), "defaultValue"),
              required: true,
              fieldName: options.user?.fields?.updatedAt || "updatedAt"
            },
            ...user?.fields,
            ...options.user?.additionalFields
          },
          order: 1
        },
        //only add session table if it's not stored in secondary storage
        ...!options.secondaryStorage || options.session?.storeSessionInDatabase ? sessionTable : {},
        account: {
          modelName: options.account?.modelName || "account",
          fields: {
            accountId: {
              type: "string",
              required: true,
              fieldName: options.account?.fields?.accountId || "accountId"
            },
            providerId: {
              type: "string",
              required: true,
              fieldName: options.account?.fields?.providerId || "providerId"
            },
            userId: {
              type: "string",
              references: {
                model: options.user?.modelName || "user",
                field: "id",
                onDelete: "cascade"
              },
              required: true,
              fieldName: options.account?.fields?.userId || "userId"
            },
            accessToken: {
              type: "string",
              required: false,
              fieldName: options.account?.fields?.accessToken || "accessToken"
            },
            refreshToken: {
              type: "string",
              required: false,
              fieldName: options.account?.fields?.refreshToken || "refreshToken"
            },
            idToken: {
              type: "string",
              required: false,
              fieldName: options.account?.fields?.idToken || "idToken"
            },
            accessTokenExpiresAt: {
              type: "date",
              required: false,
              fieldName: options.account?.fields?.accessTokenExpiresAt || "accessTokenExpiresAt"
            },
            refreshTokenExpiresAt: {
              type: "date",
              required: false,
              fieldName: options.account?.fields?.accessTokenExpiresAt || "refreshTokenExpiresAt"
            },
            scope: {
              type: "string",
              required: false,
              fieldName: options.account?.fields?.scope || "scope"
            },
            password: {
              type: "string",
              required: false,
              fieldName: options.account?.fields?.password || "password"
            },
            createdAt: {
              type: "date",
              required: true,
              fieldName: options.account?.fields?.createdAt || "createdAt"
            },
            updatedAt: {
              type: "date",
              required: true,
              fieldName: options.account?.fields?.updatedAt || "updatedAt"
            },
            ...account?.fields
          },
          order: 3
        },
        verification: {
          modelName: options.verification?.modelName || "verification",
          fields: {
            identifier: {
              type: "string",
              required: true,
              fieldName: options.verification?.fields?.identifier || "identifier"
            },
            value: {
              type: "string",
              required: true,
              fieldName: options.verification?.fields?.value || "value"
            },
            expiresAt: {
              type: "date",
              required: true,
              fieldName: options.verification?.fields?.expiresAt || "expiresAt"
            },
            createdAt: {
              type: "date",
              required: false,
              defaultValue: /* @__PURE__ */ __name2(() => /* @__PURE__ */ new Date(), "defaultValue"),
              fieldName: options.verification?.fields?.createdAt || "createdAt"
            },
            updatedAt: {
              type: "date",
              required: false,
              defaultValue: /* @__PURE__ */ __name2(() => /* @__PURE__ */ new Date(), "defaultValue"),
              fieldName: options.verification?.fields?.updatedAt || "updatedAt"
            }
          },
          order: 4
        },
        ...pluginTables,
        ...shouldAddRateLimitTable ? rateLimitTable : {}
      };
    }, "getAuthTables");
  }
});
function withApplyDefault(value, field, action) {
  if (action === "update") {
    return value;
  }
  if (value === void 0 || value === null) {
    if (field.defaultValue) {
      if (typeof field.defaultValue === "function") {
        return field.defaultValue();
      }
      return field.defaultValue;
    }
  }
  return value;
}
__name(withApplyDefault, "withApplyDefault");
var init_better_auth_0TC26uRi = __esm({
  "../node_modules/better-auth/dist/shared/better-auth.0TC26uRi.mjs"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    __name2(withApplyDefault, "withApplyDefault");
  }
});
function formatTransactionId(transactionId2) {
  return `${colors2.fg.magenta}#${transactionId2}${colors2.reset}`;
}
__name(formatTransactionId, "formatTransactionId");
function formatStep(step, total) {
  return `${colors2.bg.black}${colors2.fg.yellow}[${step}/${total}]${colors2.reset}`;
}
__name(formatStep, "formatStep");
function formatMethod(method) {
  return `${colors2.bright}${method}${colors2.reset}`;
}
__name(formatMethod, "formatMethod");
function formatAction(action) {
  return `${colors2.dim}(${action})${colors2.reset}`;
}
__name(formatAction, "formatAction");
var debugLogs;
var transactionId;
var colors2;
var createAdapter;
var init_better_auth_Dpv9J4ny = __esm({
  "../node_modules/better-auth/dist/shared/better-auth.Dpv9J4ny.mjs"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_better_auth_tB5eU6EY();
    init_better_auth_0TC26uRi();
    init_better_auth_DORkW_Ge();
    init_better_auth_BUPPRXfK();
    init_esm2();
    init_dist2();
    init_hash();
    init_base642();
    init_dist4();
    init_hex();
    init_better_auth_B4Qoxdgc();
    init_better_auth_Cqykj82J();
    debugLogs = [];
    transactionId = -1;
    colors2 = {
      reset: "\x1B[0m",
      bright: "\x1B[1m",
      dim: "\x1B[2m",
      fg: {
        yellow: "\x1B[33m",
        magenta: "\x1B[35m"
      },
      bg: {
        black: "\x1B[40m"
      }
    };
    createAdapter = /* @__PURE__ */ __name2(({
      adapter,
      config: cfg
    }) => (options) => {
      const config2 = {
        ...cfg,
        supportsBooleans: cfg.supportsBooleans ?? true,
        supportsDates: cfg.supportsDates ?? true,
        supportsJSON: cfg.supportsJSON ?? false,
        adapterName: cfg.adapterName ?? cfg.adapterId,
        supportsNumericIds: cfg.supportsNumericIds ?? true
      };
      if (options.advanced?.database?.useNumberId === true && config2.supportsNumericIds === false) {
        throw new Error(
          `[${config2.adapterName}] Your database or database adapter does not support numeric ids. Please disable "useNumberId" in your config.`
        );
      }
      const schema2 = getAuthTables(options);
      const getDefaultFieldName = /* @__PURE__ */ __name2(({
        field,
        model: unsafe_model
      }) => {
        if (field === "id") {
          return field;
        }
        const model = getDefaultModelName(unsafe_model);
        let f = schema2[model]?.fields[field];
        if (!f) {
          f = Object.values(schema2[model]?.fields).find(
            (f2) => f2.fieldName === field
          );
        }
        if (!f) {
          debugLog(`Field ${field} not found in model ${model}`);
          debugLog(`Schema:`, schema2);
          throw new Error(`Field ${field} not found in model ${model}`);
        }
        return field;
      }, "getDefaultFieldName");
      const getDefaultModelName = /* @__PURE__ */ __name2((model) => {
        if (config2.usePlural && model.charAt(model.length - 1) === "s") {
          let pluralessModel = model.slice(0, -1);
          let m2 = schema2[pluralessModel] ? pluralessModel : void 0;
          if (!m2) {
            m2 = Object.entries(schema2).find(
              ([_, f]) => f.modelName === pluralessModel
            )?.[0];
          }
          if (m2) {
            return m2;
          }
        }
        let m = schema2[model] ? model : void 0;
        if (!m) {
          m = Object.entries(schema2).find(([_, f]) => f.modelName === model)?.[0];
        }
        if (!m) {
          debugLog(`Model "${model}" not found in schema`);
          debugLog(`Schema:`, schema2);
          throw new Error(`Model "${model}" not found in schema`);
        }
        return m;
      }, "getDefaultModelName");
      const getModelName = /* @__PURE__ */ __name2((model) => {
        return schema2[getDefaultModelName(model)].modelName !== model ? schema2[getDefaultModelName(model)].modelName : config2.usePlural ? `${model}s` : model;
      }, "getModelName");
      function getFieldName({
        model: model_name,
        field: field_name
      }) {
        const model = getDefaultModelName(model_name);
        const field = getDefaultFieldName({ model, field: field_name });
        return schema2[model]?.fields[field]?.fieldName || field;
      }
      __name(getFieldName, "getFieldName");
      __name2(getFieldName, "getFieldName");
      const debugLog = /* @__PURE__ */ __name2((...args) => {
        if (config2.debugLogs === true || typeof config2.debugLogs === "object") {
          if (typeof config2.debugLogs === "object" && "isRunningAdapterTests" in config2.debugLogs) {
            if (config2.debugLogs.isRunningAdapterTests) {
              args.shift();
              debugLogs.push(args);
            }
            return;
          }
          if (typeof config2.debugLogs === "object" && config2.debugLogs.logCondition && !config2.debugLogs.logCondition?.()) {
            return;
          }
          if (typeof args[0] === "object" && "method" in args[0]) {
            const method = args.shift().method;
            if (typeof config2.debugLogs === "object") {
              if (method === "create" && !config2.debugLogs.create) {
                return;
              } else if (method === "update" && !config2.debugLogs.update) {
                return;
              } else if (method === "updateMany" && !config2.debugLogs.updateMany) {
                return;
              } else if (method === "findOne" && !config2.debugLogs.findOne) {
                return;
              } else if (method === "findMany" && !config2.debugLogs.findMany) {
                return;
              } else if (method === "delete" && !config2.debugLogs.delete) {
                return;
              } else if (method === "deleteMany" && !config2.debugLogs.deleteMany) {
                return;
              } else if (method === "count" && !config2.debugLogs.count) {
                return;
              }
            }
            logger.info(`[${config2.adapterName}]`, ...args);
          } else {
            logger.info(`[${config2.adapterName}]`, ...args);
          }
        }
      }, "debugLog");
      const idField = /* @__PURE__ */ __name2(({
        customModelName,
        forceAllowId
      }) => {
        const shouldGenerateId = !config2.disableIdGeneration && !options.advanced?.database?.useNumberId && !forceAllowId;
        const model = getDefaultModelName(customModelName ?? "id");
        return {
          type: options.advanced?.database?.useNumberId ? "number" : "string",
          required: shouldGenerateId ? true : false,
          ...shouldGenerateId ? {
            defaultValue() {
              if (config2.disableIdGeneration) return void 0;
              const useNumberId = options.advanced?.database?.useNumberId;
              let generateId$1 = options.advanced?.database?.generateId;
              if (options.advanced?.generateId !== void 0) {
                logger.warn(
                  "Your Better Auth config includes advanced.generateId which is deprecated. Please use advanced.database.generateId instead. This will be removed in future releases."
                );
                generateId$1 = options.advanced?.generateId;
              }
              if (generateId$1 === false || useNumberId) return void 0;
              if (generateId$1) {
                return generateId$1({
                  model
                });
              }
              if (config2.customIdGenerator) {
                return config2.customIdGenerator({ model });
              }
              return generateId();
            }
          } : {}
        };
      }, "idField");
      const getFieldAttributes = /* @__PURE__ */ __name2(({
        model,
        field
      }) => {
        const defaultModelName = getDefaultModelName(model);
        const defaultFieldName = getDefaultFieldName({
          field,
          model
        });
        const fields = schema2[defaultModelName].fields;
        fields.id = idField({ customModelName: defaultModelName });
        return fields[defaultFieldName];
      }, "getFieldAttributes");
      const adapterInstance = adapter({
        options,
        schema: schema2,
        debugLog,
        getFieldName,
        getModelName,
        getDefaultModelName,
        getDefaultFieldName,
        getFieldAttributes
      });
      const transformInput = /* @__PURE__ */ __name2(async (data, unsafe_model, action, forceAllowId) => {
        const transformedData = {};
        const fields = schema2[unsafe_model].fields;
        const newMappedKeys = config2.mapKeysTransformInput ?? {};
        if (!config2.disableIdGeneration && !options.advanced?.database?.useNumberId) {
          fields.id = idField({ customModelName: unsafe_model, forceAllowId });
        }
        for (const field in fields) {
          const value = data[field];
          const fieldAttributes = fields[field];
          let newFieldName = newMappedKeys[field] || fields[field].fieldName || field;
          if (value === void 0 && (!fieldAttributes.defaultValue && !fieldAttributes.transform?.input || action === "update")) {
            continue;
          }
          let newValue = withApplyDefault(value, fieldAttributes, action);
          if (fieldAttributes.transform?.input) {
            newValue = await fieldAttributes.transform.input(newValue);
          }
          if (fieldAttributes.references?.field === "id" && options.advanced?.database?.useNumberId) {
            if (Array.isArray(newValue)) {
              newValue = newValue.map(Number);
            } else {
              newValue = Number(newValue);
            }
          } else if (config2.supportsJSON === false && typeof newValue === "object" && //@ts-expect-error -Future proofing
          fieldAttributes.type === "json") {
            newValue = JSON.stringify(newValue);
          } else if (config2.supportsDates === false && newValue instanceof Date && fieldAttributes.type === "date") {
            newValue = newValue.toISOString();
          } else if (config2.supportsBooleans === false && typeof newValue === "boolean") {
            newValue = newValue ? 1 : 0;
          }
          if (config2.customTransformInput) {
            newValue = config2.customTransformInput({
              data: newValue,
              action,
              field: newFieldName,
              fieldAttributes,
              model: unsafe_model,
              schema: schema2,
              options
            });
          }
          transformedData[newFieldName] = newValue;
        }
        return transformedData;
      }, "transformInput");
      const transformOutput = /* @__PURE__ */ __name2(async (data, unsafe_model, select = []) => {
        if (!data) return null;
        const newMappedKeys = config2.mapKeysTransformOutput ?? {};
        const transformedData = {};
        const tableSchema = schema2[unsafe_model].fields;
        const idKey = Object.entries(newMappedKeys).find(
          ([_, v]) => v === "id"
        )?.[0];
        tableSchema[idKey ?? "id"] = {
          type: options.advanced?.database?.useNumberId ? "number" : "string"
        };
        for (const key in tableSchema) {
          if (select.length && !select.includes(key)) {
            continue;
          }
          const field = tableSchema[key];
          if (field) {
            const originalKey = field.fieldName || key;
            let newValue = data[Object.entries(newMappedKeys).find(
              ([_, v]) => v === originalKey
            )?.[0] || originalKey];
            if (field.transform?.output) {
              newValue = await field.transform.output(newValue);
            }
            let newFieldName = newMappedKeys[key] || key;
            if (originalKey === "id" || field.references?.field === "id") {
              if (typeof newValue !== "undefined") newValue = String(newValue);
            } else if (config2.supportsJSON === false && typeof newValue === "string" && //@ts-expect-error - Future proofing
            field.type === "json") {
              newValue = safeJSONParse(newValue);
            } else if (config2.supportsDates === false && typeof newValue === "string" && field.type === "date") {
              newValue = new Date(newValue);
            } else if (config2.supportsBooleans === false && typeof newValue === "number" && field.type === "boolean") {
              newValue = newValue === 1;
            }
            if (config2.customTransformOutput) {
              newValue = config2.customTransformOutput({
                data: newValue,
                field: newFieldName,
                fieldAttributes: field,
                select,
                model: unsafe_model,
                schema: schema2,
                options
              });
            }
            transformedData[newFieldName] = newValue;
          }
        }
        return transformedData;
      }, "transformOutput");
      const transformWhereClause = /* @__PURE__ */ __name2(({
        model,
        where
      }) => {
        if (!where) return void 0;
        return where.map((w) => {
          const {
            field: unsafe_field,
            value,
            operator = "eq",
            connector = "AND"
          } = w;
          if (operator === "in") {
            if (!Array.isArray(value)) {
              throw new Error("Value must be an array");
            }
          }
          const defaultModelName = getDefaultModelName(model);
          const defaultFieldName = getDefaultFieldName({
            field: unsafe_field,
            model
          });
          const fieldName = getFieldName({
            field: defaultFieldName,
            model: defaultModelName
          });
          const fieldAttr = getFieldAttributes({
            field: defaultFieldName,
            model: defaultModelName
          });
          if (defaultFieldName === "id" || fieldAttr.references?.field === "id") {
            if (options.advanced?.database?.useNumberId) {
              if (Array.isArray(value)) {
                return {
                  operator,
                  connector,
                  field: fieldName,
                  value: value.map(Number)
                };
              }
              return {
                operator,
                connector,
                field: fieldName,
                value: Number(value)
              };
            }
          }
          return {
            operator,
            connector,
            field: fieldName,
            value
          };
        });
      }, "transformWhereClause");
      return {
        create: /* @__PURE__ */ __name2(async ({
          data: unsafeData,
          model: unsafeModel,
          select,
          forceAllowId = false
        }) => {
          transactionId++;
          let thisTransactionId = transactionId;
          const model = getModelName(unsafeModel);
          if ("id" in unsafeData && !forceAllowId) {
            logger.warn(
              `[${config2.adapterName}] - You are trying to create a record with an id. This is not allowed as we handle id generation for you, unless you pass in the \`forceAllowId\` parameter. The id will be ignored.`
            );
            const err = new Error();
            const stack = err.stack?.split("\n").filter((_, i) => i !== 1).join("\n").replace("Error:", "Create method with `id` being called at:");
            console.log(stack);
            unsafeData.id = void 0;
          }
          debugLog(
            { method: "create" },
            `${formatTransactionId(thisTransactionId)} ${formatStep(1, 4)}`,
            `${formatMethod("create")} ${formatAction("Unsafe Input")}:`,
            { model, data: unsafeData }
          );
          const data = await transformInput(
            unsafeData,
            unsafeModel,
            "create",
            forceAllowId
          );
          debugLog(
            { method: "create" },
            `${formatTransactionId(thisTransactionId)} ${formatStep(2, 4)}`,
            `${formatMethod("create")} ${formatAction("Parsed Input")}:`,
            { model, data }
          );
          const res = await adapterInstance.create({ data, model });
          debugLog(
            { method: "create" },
            `${formatTransactionId(thisTransactionId)} ${formatStep(3, 4)}`,
            `${formatMethod("create")} ${formatAction("DB Result")}:`,
            { model, res }
          );
          const transformed = await transformOutput(res, unsafeModel, select);
          debugLog(
            { method: "create" },
            `${formatTransactionId(thisTransactionId)} ${formatStep(4, 4)}`,
            `${formatMethod("create")} ${formatAction("Parsed Result")}:`,
            { model, data: transformed }
          );
          return transformed;
        }, "create"),
        update: /* @__PURE__ */ __name2(async ({
          model: unsafeModel,
          where: unsafeWhere,
          update: unsafeData
        }) => {
          transactionId++;
          let thisTransactionId = transactionId;
          const model = getModelName(unsafeModel);
          const where = transformWhereClause({
            model: unsafeModel,
            where: unsafeWhere
          });
          debugLog(
            { method: "update" },
            `${formatTransactionId(thisTransactionId)} ${formatStep(1, 4)}`,
            `${formatMethod("update")} ${formatAction("Unsafe Input")}:`,
            { model, data: unsafeData }
          );
          const data = await transformInput(
            unsafeData,
            unsafeModel,
            "update"
          );
          debugLog(
            { method: "update" },
            `${formatTransactionId(thisTransactionId)} ${formatStep(2, 4)}`,
            `${formatMethod("update")} ${formatAction("Parsed Input")}:`,
            { model, data }
          );
          const res = await adapterInstance.update({
            model,
            where,
            update: data
          });
          debugLog(
            { method: "update" },
            `${formatTransactionId(thisTransactionId)} ${formatStep(3, 4)}`,
            `${formatMethod("update")} ${formatAction("DB Result")}:`,
            { model, data: res }
          );
          const transformed = await transformOutput(res, unsafeModel);
          debugLog(
            { method: "update" },
            `${formatTransactionId(thisTransactionId)} ${formatStep(4, 4)}`,
            `${formatMethod("update")} ${formatAction("Parsed Result")}:`,
            { model, data: transformed }
          );
          return transformed;
        }, "update"),
        updateMany: /* @__PURE__ */ __name2(async ({
          model: unsafeModel,
          where: unsafeWhere,
          update: unsafeData
        }) => {
          transactionId++;
          let thisTransactionId = transactionId;
          const model = getModelName(unsafeModel);
          const where = transformWhereClause({
            model: unsafeModel,
            where: unsafeWhere
          });
          debugLog(
            { method: "updateMany" },
            `${formatTransactionId(thisTransactionId)} ${formatStep(1, 4)}`,
            `${formatMethod("updateMany")} ${formatAction("Unsafe Input")}:`,
            { model, data: unsafeData }
          );
          const data = await transformInput(unsafeData, unsafeModel, "update");
          debugLog(
            { method: "updateMany" },
            `${formatTransactionId(thisTransactionId)} ${formatStep(2, 4)}`,
            `${formatMethod("updateMany")} ${formatAction("Parsed Input")}:`,
            { model, data }
          );
          const updatedCount = await adapterInstance.updateMany({
            model,
            where,
            update: data
          });
          debugLog(
            { method: "updateMany" },
            `${formatTransactionId(thisTransactionId)} ${formatStep(3, 4)}`,
            `${formatMethod("updateMany")} ${formatAction("DB Result")}:`,
            { model, data: updatedCount }
          );
          debugLog(
            { method: "updateMany" },
            `${formatTransactionId(thisTransactionId)} ${formatStep(4, 4)}`,
            `${formatMethod("updateMany")} ${formatAction("Parsed Result")}:`,
            { model, data: updatedCount }
          );
          return updatedCount;
        }, "updateMany"),
        findOne: /* @__PURE__ */ __name2(async ({
          model: unsafeModel,
          where: unsafeWhere,
          select
        }) => {
          transactionId++;
          let thisTransactionId = transactionId;
          const model = getModelName(unsafeModel);
          const where = transformWhereClause({
            model: unsafeModel,
            where: unsafeWhere
          });
          debugLog(
            { method: "findOne" },
            `${formatTransactionId(thisTransactionId)} ${formatStep(1, 3)}`,
            `${formatMethod("findOne")}:`,
            { model, where, select }
          );
          const res = await adapterInstance.findOne({
            model,
            where,
            select
          });
          debugLog(
            { method: "findOne" },
            `${formatTransactionId(thisTransactionId)} ${formatStep(2, 3)}`,
            `${formatMethod("findOne")} ${formatAction("DB Result")}:`,
            { model, data: res }
          );
          const transformed = await transformOutput(
            res,
            unsafeModel,
            select
          );
          debugLog(
            { method: "findOne" },
            `${formatTransactionId(thisTransactionId)} ${formatStep(3, 3)}`,
            `${formatMethod("findOne")} ${formatAction("Parsed Result")}:`,
            { model, data: transformed }
          );
          return transformed;
        }, "findOne"),
        findMany: /* @__PURE__ */ __name2(async ({
          model: unsafeModel,
          where: unsafeWhere,
          limit: unsafeLimit,
          sortBy,
          offset
        }) => {
          transactionId++;
          let thisTransactionId = transactionId;
          const limit = unsafeLimit ?? options.advanced?.database?.defaultFindManyLimit ?? 100;
          const model = getModelName(unsafeModel);
          const where = transformWhereClause({
            model: unsafeModel,
            where: unsafeWhere
          });
          debugLog(
            { method: "findMany" },
            `${formatTransactionId(thisTransactionId)} ${formatStep(1, 3)}`,
            `${formatMethod("findMany")}:`,
            { model, where, limit, sortBy, offset }
          );
          const res = await adapterInstance.findMany({
            model,
            where,
            limit,
            sortBy,
            offset
          });
          debugLog(
            { method: "findMany" },
            `${formatTransactionId(thisTransactionId)} ${formatStep(2, 3)}`,
            `${formatMethod("findMany")} ${formatAction("DB Result")}:`,
            { model, data: res }
          );
          const transformed = await Promise.all(
            res.map(async (r) => await transformOutput(r, unsafeModel))
          );
          debugLog(
            { method: "findMany" },
            `${formatTransactionId(thisTransactionId)} ${formatStep(3, 3)}`,
            `${formatMethod("findMany")} ${formatAction("Parsed Result")}:`,
            { model, data: transformed }
          );
          return transformed;
        }, "findMany"),
        delete: /* @__PURE__ */ __name2(async ({
          model: unsafeModel,
          where: unsafeWhere
        }) => {
          transactionId++;
          let thisTransactionId = transactionId;
          const model = getModelName(unsafeModel);
          const where = transformWhereClause({
            model: unsafeModel,
            where: unsafeWhere
          });
          debugLog(
            { method: "delete" },
            `${formatTransactionId(thisTransactionId)} ${formatStep(1, 2)}`,
            `${formatMethod("delete")}:`,
            { model, where }
          );
          await adapterInstance.delete({
            model,
            where
          });
          debugLog(
            { method: "delete" },
            `${formatTransactionId(thisTransactionId)} ${formatStep(2, 2)}`,
            `${formatMethod("delete")} ${formatAction("DB Result")}:`,
            { model }
          );
        }, "delete"),
        deleteMany: /* @__PURE__ */ __name2(async ({
          model: unsafeModel,
          where: unsafeWhere
        }) => {
          transactionId++;
          let thisTransactionId = transactionId;
          const model = getModelName(unsafeModel);
          const where = transformWhereClause({
            model: unsafeModel,
            where: unsafeWhere
          });
          debugLog(
            { method: "deleteMany" },
            `${formatTransactionId(thisTransactionId)} ${formatStep(1, 2)}`,
            `${formatMethod("deleteMany")} ${formatAction("DeleteMany")}:`,
            { model, where }
          );
          const res = await adapterInstance.deleteMany({
            model,
            where
          });
          debugLog(
            { method: "deleteMany" },
            `${formatTransactionId(thisTransactionId)} ${formatStep(2, 2)}`,
            `${formatMethod("deleteMany")} ${formatAction("DB Result")}:`,
            { model, data: res }
          );
          return res;
        }, "deleteMany"),
        count: /* @__PURE__ */ __name2(async ({
          model: unsafeModel,
          where: unsafeWhere
        }) => {
          transactionId++;
          let thisTransactionId = transactionId;
          const model = getModelName(unsafeModel);
          const where = transformWhereClause({
            model: unsafeModel,
            where: unsafeWhere
          });
          debugLog(
            { method: "count" },
            `${formatTransactionId(thisTransactionId)} ${formatStep(1, 2)}`,
            `${formatMethod("count")}:`,
            {
              model,
              where
            }
          );
          const res = await adapterInstance.count({
            model,
            where
          });
          debugLog(
            { method: "count" },
            `${formatTransactionId(thisTransactionId)} ${formatStep(2, 2)}`,
            `${formatMethod("count")}:`,
            {
              model,
              data: res
            }
          );
          return res;
        }, "count"),
        createSchema: adapterInstance.createSchema ? async (_, file) => {
          const tables = getAuthTables(options);
          if (options.secondaryStorage && !options.session?.storeSessionInDatabase) {
            delete tables.session;
          }
          if (options.rateLimit && options.rateLimit.storage === "database" && // rate-limit will default to enabled in production,
          // and given storage is database, it will try to use the rate-limit table,
          // so we should make sure to generate rate-limit table schema
          (typeof options.rateLimit.enabled === "undefined" || // and of course if they forcefully set to true, then they want rate-limit,
          // thus we should also generate rate-limit table schema
          options.rateLimit.enabled === true)) {
            tables.ratelimit = {
              modelName: options.rateLimit.modelName ?? "ratelimit",
              fields: {
                key: {
                  type: "string",
                  unique: true,
                  required: true,
                  fieldName: options.rateLimit.fields?.key ?? "key"
                },
                count: {
                  type: "number",
                  required: true,
                  fieldName: options.rateLimit.fields?.count ?? "count"
                },
                lastRequest: {
                  type: "number",
                  required: true,
                  bigint: true,
                  defaultValue: /* @__PURE__ */ __name2(() => Date.now(), "defaultValue"),
                  fieldName: options.rateLimit.fields?.lastRequest ?? "lastRequest"
                }
              }
            };
          }
          return adapterInstance.createSchema({ file, tables });
        } : void 0,
        options: {
          adapterConfig: config2,
          ...adapterInstance.options ?? {}
        },
        id: config2.adapterId,
        // Secretly export values ONLY if this adapter has enabled adapter-test-debug-logs.
        // This would then be used during our adapter-tests to help print debug logs if a test fails.
        //@ts-expect-error - ^^
        ...config2.debugLogs?.isRunningAdapterTests ? {
          adapterTestDebugLogs: {
            resetDebugLogs() {
              debugLogs = [];
            },
            printDebugLogs() {
              const separator = `\u2500`.repeat(80);
              let log = debugLogs.reverse().map((log2) => {
                log2[0] = `
${log2[0]}`;
                return [...log2, "\n"];
              }).reduce(
                (prev, curr) => {
                  return [...curr, ...prev];
                },
                [`
${separator}`]
              );
              console.log(...log);
            }
          }
        } : {}
      };
    }, "createAdapter");
    __name2(formatTransactionId, "formatTransactionId");
    __name2(formatStep, "formatStep");
    __name2(formatMethod, "formatMethod");
    __name2(formatAction, "formatAction");
  }
});
function getDatabaseType(db) {
  if (!db) {
    return null;
  }
  if ("dialect" in db) {
    return getDatabaseType(db.dialect);
  }
  if ("createDriver" in db) {
    if (db instanceof SqliteDialect) {
      return "sqlite";
    }
    if (db instanceof MysqlDialect) {
      return "mysql";
    }
    if (db instanceof PostgresDialect) {
      return "postgres";
    }
    if (db instanceof MssqlDialect) {
      return "mssql";
    }
  }
  if ("aggregate" in db) {
    return "sqlite";
  }
  if ("getConnection" in db) {
    return "mysql";
  }
  if ("connect" in db) {
    return "postgres";
  }
  return null;
}
__name(getDatabaseType, "getDatabaseType");
var createKyselyAdapter;
var kyselyAdapter;
var init_better_auth_Ia_Tf4f9 = __esm({
  "../node_modules/better-auth/dist/shared/better-auth.Ia_Tf4f9.mjs"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_esm();
    init_better_auth_Dpv9J4ny();
    __name2(getDatabaseType, "getDatabaseType");
    createKyselyAdapter = /* @__PURE__ */ __name2(async (config2) => {
      const db = config2.database;
      if (!db) {
        return {
          kysely: null,
          databaseType: null
        };
      }
      if ("db" in db) {
        return {
          kysely: db.db,
          databaseType: db.type
        };
      }
      if ("dialect" in db) {
        return {
          kysely: new Kysely({ dialect: db.dialect }),
          databaseType: db.type
        };
      }
      let dialect = void 0;
      const databaseType = getDatabaseType(db);
      if ("createDriver" in db) {
        dialect = db;
      }
      if ("aggregate" in db) {
        dialect = new SqliteDialect({
          database: db
        });
      }
      if ("getConnection" in db) {
        dialect = new MysqlDialect(db);
      }
      if ("connect" in db) {
        dialect = new PostgresDialect({
          pool: db
        });
      }
      return {
        kysely: dialect ? new Kysely({ dialect }) : null,
        databaseType
      };
    }, "createKyselyAdapter");
    kyselyAdapter = /* @__PURE__ */ __name2((db, config2) => createAdapter({
      config: {
        adapterId: "kysely",
        adapterName: "Kysely Adapter",
        usePlural: config2?.usePlural,
        debugLogs: config2?.debugLogs,
        supportsBooleans: config2?.type === "sqlite" || config2?.type === "mssql" || !config2?.type ? false : true,
        supportsDates: config2?.type === "sqlite" || config2?.type === "mssql" || !config2?.type ? false : true,
        supportsJSON: false
      },
      adapter: /* @__PURE__ */ __name2(({ getFieldName, schema: schema2 }) => {
        const withReturning = /* @__PURE__ */ __name2(async (values, builder, model, where) => {
          let res;
          if (config2?.type === "mysql") {
            await builder.execute();
            const field = values.id ? "id" : where.length > 0 && where[0].field ? where[0].field : "id";
            if (!values.id && where.length === 0) {
              res = await db.selectFrom(model).selectAll().orderBy(getFieldName({ model, field }), "desc").limit(1).executeTakeFirst();
              return res;
            }
            const value = values[field] || where[0].value;
            res = await db.selectFrom(model).selectAll().orderBy(getFieldName({ model, field }), "desc").where(getFieldName({ model, field }), "=", value).limit(1).executeTakeFirst();
            return res;
          }
          if (config2?.type === "mssql") {
            res = await builder.outputAll("inserted").executeTakeFirst();
            return res;
          }
          res = await builder.returningAll().executeTakeFirst();
          return res;
        }, "withReturning");
        function transformValueToDB(value, model, field) {
          if (field === "id") {
            return value;
          }
          const { type = "sqlite" } = config2 || {};
          let f = schema2[model]?.fields[field];
          if (!f) {
            f = Object.values(schema2).find((f2) => f2.modelName === model);
          }
          if (f.type === "boolean" && (type === "sqlite" || type === "mssql") && value !== null && value !== void 0) {
            return value ? 1 : 0;
          }
          if (f.type === "date" && value && value instanceof Date) {
            return type === "sqlite" ? value.toISOString() : value;
          }
          return value;
        }
        __name(transformValueToDB, "transformValueToDB");
        __name2(transformValueToDB, "transformValueToDB");
        function convertWhereClause(model, w) {
          if (!w)
            return {
              and: null,
              or: null
            };
          const conditions = {
            and: [],
            or: []
          };
          w.forEach((condition) => {
            let {
              field: _field,
              value,
              operator = "=",
              connector = "AND"
            } = condition;
            const field = getFieldName({ model, field: _field });
            value = transformValueToDB(value, model, _field);
            const expr = /* @__PURE__ */ __name2((eb) => {
              if (operator.toLowerCase() === "in") {
                return eb(field, "in", Array.isArray(value) ? value : [value]);
              }
              if (operator === "contains") {
                return eb(field, "like", `%${value}%`);
              }
              if (operator === "starts_with") {
                return eb(field, "like", `${value}%`);
              }
              if (operator === "ends_with") {
                return eb(field, "like", `%${value}`);
              }
              if (operator === "eq") {
                return eb(field, "=", value);
              }
              if (operator === "ne") {
                return eb(field, "<>", value);
              }
              if (operator === "gt") {
                return eb(field, ">", value);
              }
              if (operator === "gte") {
                return eb(field, ">=", value);
              }
              if (operator === "lt") {
                return eb(field, "<", value);
              }
              if (operator === "lte") {
                return eb(field, "<=", value);
              }
              return eb(field, operator, value);
            }, "expr");
            if (connector === "OR") {
              conditions.or.push(expr);
            } else {
              conditions.and.push(expr);
            }
          });
          return {
            and: conditions.and.length ? conditions.and : null,
            or: conditions.or.length ? conditions.or : null
          };
        }
        __name(convertWhereClause, "convertWhereClause");
        __name2(convertWhereClause, "convertWhereClause");
        return {
          async create({ data, model }) {
            const builder = db.insertInto(model).values(data);
            return await withReturning(data, builder, model, []);
          },
          async findOne({ model, where, select }) {
            const { and, or } = convertWhereClause(model, where);
            let query = db.selectFrom(model).selectAll();
            if (and) {
              query = query.where((eb) => eb.and(and.map((expr) => expr(eb))));
            }
            if (or) {
              query = query.where((eb) => eb.or(or.map((expr) => expr(eb))));
            }
            const res = await query.executeTakeFirst();
            if (!res) return null;
            return res;
          },
          async findMany({ model, where, limit, offset, sortBy }) {
            const { and, or } = convertWhereClause(model, where);
            let query = db.selectFrom(model);
            if (and) {
              query = query.where((eb) => eb.and(and.map((expr) => expr(eb))));
            }
            if (or) {
              query = query.where((eb) => eb.or(or.map((expr) => expr(eb))));
            }
            if (config2?.type === "mssql") {
              if (!offset) {
                query = query.top(limit || 100);
              }
            } else {
              query = query.limit(limit || 100);
            }
            if (sortBy) {
              query = query.orderBy(
                getFieldName({ model, field: sortBy.field }),
                sortBy.direction
              );
            }
            if (offset) {
              if (config2?.type === "mssql") {
                if (!sortBy) {
                  query = query.orderBy(getFieldName({ model, field: "id" }));
                }
                query = query.offset(offset).fetch(limit || 100);
              } else {
                query = query.offset(offset);
              }
            }
            const res = await query.selectAll().execute();
            if (!res) return [];
            return res;
          },
          async update({ model, where, update: values }) {
            const { and, or } = convertWhereClause(model, where);
            let query = db.updateTable(model).set(values);
            if (and) {
              query = query.where((eb) => eb.and(and.map((expr) => expr(eb))));
            }
            if (or) {
              query = query.where((eb) => eb.or(or.map((expr) => expr(eb))));
            }
            return await withReturning(values, query, model, where);
          },
          async updateMany({ model, where, update: values }) {
            const { and, or } = convertWhereClause(model, where);
            let query = db.updateTable(model).set(values);
            if (and) {
              query = query.where((eb) => eb.and(and.map((expr) => expr(eb))));
            }
            if (or) {
              query = query.where((eb) => eb.or(or.map((expr) => expr(eb))));
            }
            const res = await query.execute();
            return res.length;
          },
          async count({ model, where }) {
            const { and, or } = convertWhereClause(model, where);
            let query = db.selectFrom(model).select(db.fn.count("id").as("count"));
            if (and) {
              query = query.where((eb) => eb.and(and.map((expr) => expr(eb))));
            }
            if (or) {
              query = query.where((eb) => eb.or(or.map((expr) => expr(eb))));
            }
            const res = await query.execute();
            return res[0].count;
          },
          async delete({ model, where }) {
            const { and, or } = convertWhereClause(model, where);
            let query = db.deleteFrom(model);
            if (and) {
              query = query.where((eb) => eb.and(and.map((expr) => expr(eb))));
            }
            if (or) {
              query = query.where((eb) => eb.or(or.map((expr) => expr(eb))));
            }
            await query.execute();
          },
          async deleteMany({ model, where }) {
            const { and, or } = convertWhereClause(model, where);
            let query = db.deleteFrom(model);
            if (and) {
              query = query.where((eb) => eb.and(and.map((expr) => expr(eb))));
            }
            if (or) {
              query = query.where((eb) => eb.or(or.map((expr) => expr(eb))));
            }
            return (await query.execute()).length;
          },
          options: config2
        };
      }, "adapter")
    }), "kyselyAdapter");
  }
});
var memoryAdapter;
var init_better_auth_Bdaq9Lqn = __esm({
  "../node_modules/better-auth/dist/shared/better-auth.Bdaq9Lqn.mjs"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_better_auth_Dpv9J4ny();
    memoryAdapter = /* @__PURE__ */ __name2((db, config2) => createAdapter({
      config: {
        adapterId: "memory",
        adapterName: "Memory Adapter",
        usePlural: false,
        debugLogs: config2?.debugLogs || false,
        customTransformInput(props) {
          if (props.options.advanced?.database?.useNumberId && props.field === "id" && props.action === "create") {
            return db[props.model].length + 1;
          }
          return props.data;
        }
      },
      adapter: /* @__PURE__ */ __name2(({ getFieldName, options }) => {
        function convertWhereClause(where, table) {
          return table.filter((record) => {
            return where.every((clause) => {
              let { field, value, operator } = clause;
              if (operator === "in") {
                if (!Array.isArray(value)) {
                  throw new Error("Value must be an array");
                }
                return value.includes(record[field]);
              } else if (operator === "contains") {
                return record[field].includes(value);
              } else if (operator === "starts_with") {
                return record[field].startsWith(value);
              } else if (operator === "ends_with") {
                return record[field].endsWith(value);
              } else {
                return record[field] === value;
              }
            });
          });
        }
        __name(convertWhereClause, "convertWhereClause");
        __name2(convertWhereClause, "convertWhereClause");
        return {
          create: /* @__PURE__ */ __name2(async ({ model, data }) => {
            if (options.advanced?.database?.useNumberId) {
              data.id = db[model].length + 1;
            }
            db[model].push(data);
            return data;
          }, "create"),
          findOne: /* @__PURE__ */ __name2(async ({ model, where }) => {
            const table = db[model];
            const res = convertWhereClause(where, table);
            const record = res[0] || null;
            return record;
          }, "findOne"),
          findMany: /* @__PURE__ */ __name2(async ({ model, where, sortBy, limit, offset }) => {
            let table = db[model];
            if (where) {
              table = convertWhereClause(where, table);
            }
            if (sortBy) {
              table = table.sort((a, b) => {
                const field = getFieldName({ model, field: sortBy.field });
                if (sortBy.direction === "asc") {
                  return a[field] > b[field] ? 1 : -1;
                } else {
                  return a[field] < b[field] ? 1 : -1;
                }
              });
            }
            if (offset !== void 0) {
              table = table.slice(offset);
            }
            if (limit !== void 0) {
              table = table.slice(0, limit);
            }
            return table;
          }, "findMany"),
          count: /* @__PURE__ */ __name2(async ({ model }) => {
            return db[model].length;
          }, "count"),
          update: /* @__PURE__ */ __name2(async ({ model, where, update }) => {
            const table = db[model];
            const res = convertWhereClause(where, table);
            res.forEach((record) => {
              Object.assign(record, update);
            });
            return res[0] || null;
          }, "update"),
          delete: /* @__PURE__ */ __name2(async ({ model, where }) => {
            const table = db[model];
            const res = convertWhereClause(where, table);
            db[model] = table.filter((record) => !res.includes(record));
          }, "delete"),
          deleteMany: /* @__PURE__ */ __name2(async ({ model, where }) => {
            const table = db[model];
            const res = convertWhereClause(where, table);
            let count = 0;
            db[model] = table.filter((record) => {
              if (res.includes(record)) {
                count++;
                return false;
              }
              return !res.includes(record);
            });
            return count;
          }, "deleteMany"),
          updateMany({ model, where, update }) {
            const table = db[model];
            const res = convertWhereClause(where, table);
            res.forEach((record) => {
              Object.assign(record, update);
            });
            return res[0] || null;
          }
        };
      }, "adapter")
    }), "memoryAdapter");
  }
});
function getWithHooks(adapter, ctx) {
  const hooks = ctx.hooks;
  async function createWithHooks(data, model, customCreateFn, context) {
    let actualData = data;
    for (const hook of hooks || []) {
      const toRun = hook[model]?.create?.before;
      if (toRun) {
        const result = await toRun(actualData, context);
        if (result === false) {
          return null;
        }
        const isObject3 = typeof result === "object" && "data" in result;
        if (isObject3) {
          actualData = {
            ...actualData,
            ...result.data
          };
        }
      }
    }
    const customCreated = customCreateFn ? await customCreateFn.fn(actualData) : null;
    const created = !customCreateFn || customCreateFn.executeMainFn ? await adapter.create({
      model,
      data: actualData
    }) : customCreated;
    for (const hook of hooks || []) {
      const toRun = hook[model]?.create?.after;
      if (toRun) {
        await toRun(created, context);
      }
    }
    return created;
  }
  __name(createWithHooks, "createWithHooks");
  __name2(createWithHooks, "createWithHooks");
  async function updateWithHooks(data, where, model, customUpdateFn, context) {
    let actualData = data;
    for (const hook of hooks || []) {
      const toRun = hook[model]?.update?.before;
      if (toRun) {
        const result = await toRun(data, context);
        if (result === false) {
          return null;
        }
        const isObject3 = typeof result === "object";
        actualData = isObject3 ? result.data : result;
      }
    }
    const customUpdated = customUpdateFn ? await customUpdateFn.fn(actualData) : null;
    const updated = !customUpdateFn || customUpdateFn.executeMainFn ? await adapter.update({
      model,
      update: actualData,
      where
    }) : customUpdated;
    for (const hook of hooks || []) {
      const toRun = hook[model]?.update?.after;
      if (toRun) {
        await toRun(updated, context);
      }
    }
    return updated;
  }
  __name(updateWithHooks, "updateWithHooks");
  __name2(updateWithHooks, "updateWithHooks");
  async function updateManyWithHooks(data, where, model, customUpdateFn, context) {
    let actualData = data;
    for (const hook of hooks || []) {
      const toRun = hook[model]?.update?.before;
      if (toRun) {
        const result = await toRun(data, context);
        if (result === false) {
          return null;
        }
        const isObject3 = typeof result === "object";
        actualData = isObject3 ? result.data : result;
      }
    }
    const customUpdated = customUpdateFn ? await customUpdateFn.fn(actualData) : null;
    const updated = !customUpdateFn || customUpdateFn.executeMainFn ? await adapter.updateMany({
      model,
      update: actualData,
      where
    }) : customUpdated;
    for (const hook of hooks || []) {
      const toRun = hook[model]?.update?.after;
      if (toRun) {
        await toRun(updated, context);
      }
    }
    return updated;
  }
  __name(updateManyWithHooks, "updateManyWithHooks");
  __name2(updateManyWithHooks, "updateManyWithHooks");
  return {
    createWithHooks,
    updateWithHooks,
    updateManyWithHooks
  };
}
__name(getWithHooks, "getWithHooks");
async function getAdapter(options) {
  if (!options.database) {
    const tables = getAuthTables(options);
    const memoryDB = Object.keys(tables).reduce((acc, key) => {
      acc[key] = [];
      return acc;
    }, {});
    logger.warn(
      "No database configuration provided. Using memory adapter in development"
    );
    return memoryAdapter(memoryDB)(options);
  }
  if (typeof options.database === "function") {
    return options.database(options);
  }
  const { kysely, databaseType } = await createKyselyAdapter(options);
  if (!kysely) {
    throw new BetterAuthError("Failed to initialize database adapter");
  }
  return kyselyAdapter(kysely, {
    type: databaseType || "sqlite"
  })(options);
}
__name(getAdapter, "getAdapter");
function getSchema(config2) {
  const tables = getAuthTables(config2);
  let schema2 = {};
  for (const key in tables) {
    const table = tables[key];
    const fields = table.fields;
    let actualFields = {};
    Object.entries(fields).forEach(([key2, field]) => {
      actualFields[field.fieldName || key2] = field;
      if (field.references) {
        const refTable = tables[field.references.model];
        if (refTable) {
          actualFields[field.fieldName || key2].references = {
            model: refTable.modelName,
            field: field.references.field
          };
        }
      }
    });
    if (schema2[table.modelName]) {
      schema2[table.modelName].fields = {
        ...schema2[table.modelName].fields,
        ...actualFields
      };
      continue;
    }
    schema2[table.modelName] = {
      fields: actualFields,
      order: table.order || Infinity
    };
  }
  return schema2;
}
__name(getSchema, "getSchema");
function matchType(columnDataType, fieldType, dbType) {
  if (fieldType === "string[]" || fieldType === "number[]") {
    return columnDataType.toLowerCase().includes("json");
  }
  const types2 = map[dbType];
  const type = Array.isArray(fieldType) ? types2["string"].map((t) => t.toLowerCase()) : types2[fieldType].map((t) => t.toLowerCase());
  const matches = type.includes(columnDataType.toLowerCase());
  return matches;
}
__name(matchType, "matchType");
async function getMigrations(config2) {
  const betterAuthSchema = getSchema(config2);
  const logger2 = createLogger(config2.logger);
  let { kysely: db, databaseType: dbType } = await createKyselyAdapter(config2);
  if (!dbType) {
    logger2.warn(
      "Could not determine database type, defaulting to sqlite. Please provide a type in the database options to avoid this."
    );
    dbType = "sqlite";
  }
  if (!db) {
    logger2.error(
      "Only kysely adapter is supported for migrations. You can use `generate` command to generate the schema, if you're using a different adapter."
    );
    process.exit(1);
  }
  const tableMetadata = await db.introspection.getTables();
  const toBeCreated = [];
  const toBeAdded = [];
  for (const [key, value] of Object.entries(betterAuthSchema)) {
    const table = tableMetadata.find((t) => t.name === key);
    if (!table) {
      const tIndex = toBeCreated.findIndex((t) => t.table === key);
      const tableData = {
        table: key,
        fields: value.fields,
        order: value.order || Infinity
      };
      const insertIndex = toBeCreated.findIndex(
        (t) => (t.order || Infinity) > tableData.order
      );
      if (insertIndex === -1) {
        if (tIndex === -1) {
          toBeCreated.push(tableData);
        } else {
          toBeCreated[tIndex].fields = {
            ...toBeCreated[tIndex].fields,
            ...value.fields
          };
        }
      } else {
        toBeCreated.splice(insertIndex, 0, tableData);
      }
      continue;
    }
    let toBeAddedFields = {};
    for (const [fieldName, field] of Object.entries(value.fields)) {
      const column = table.columns.find((c) => c.name === fieldName);
      if (!column) {
        toBeAddedFields[fieldName] = field;
        continue;
      }
      if (matchType(column.dataType, field.type, dbType)) {
        continue;
      } else {
        logger2.warn(
          `Field ${fieldName} in table ${key} has a different type in the database. Expected ${field.type} but got ${column.dataType}.`
        );
      }
    }
    if (Object.keys(toBeAddedFields).length > 0) {
      toBeAdded.push({
        table: key,
        fields: toBeAddedFields,
        order: value.order || Infinity
      });
    }
  }
  const migrations = [];
  function getType(field, fieldName) {
    const type = field.type;
    const typeMap = {
      string: {
        sqlite: "text",
        postgres: "text",
        mysql: field.unique ? "varchar(255)" : field.references ? "varchar(36)" : "text",
        mssql: field.unique || field.sortable ? "varchar(255)" : field.references ? "varchar(36)" : "text"
      },
      boolean: {
        sqlite: "integer",
        postgres: "boolean",
        mysql: "boolean",
        mssql: "smallint"
      },
      number: {
        sqlite: field.bigint ? "bigint" : "integer",
        postgres: field.bigint ? "bigint" : "integer",
        mysql: field.bigint ? "bigint" : "integer",
        mssql: field.bigint ? "bigint" : "integer"
      },
      date: {
        sqlite: "date",
        postgres: "timestamp",
        mysql: "datetime",
        mssql: "datetime"
      },
      id: {
        postgres: config2.advanced?.database?.useNumberId ? "serial" : "text",
        mysql: config2.advanced?.database?.useNumberId ? "integer" : "varchar(36)",
        mssql: config2.advanced?.database?.useNumberId ? "integer" : "varchar(36)",
        sqlite: config2.advanced?.database?.useNumberId ? "integer" : "text"
      }
    };
    if (fieldName === "id" || field.references?.field === "id") {
      return typeMap.id[dbType];
    }
    if (dbType === "sqlite" && (type === "string[]" || type === "number[]")) {
      return "text";
    }
    if (type === "string[]" || type === "number[]") {
      return "jsonb";
    }
    if (Array.isArray(type)) {
      return "text";
    }
    return typeMap[type][dbType || "sqlite"];
  }
  __name(getType, "getType");
  __name2(getType, "getType");
  if (toBeAdded.length) {
    for (const table of toBeAdded) {
      for (const [fieldName, field] of Object.entries(table.fields)) {
        const type = getType(field, fieldName);
        const exec = db.schema.alterTable(table.table).addColumn(fieldName, type, (col) => {
          col = field.required !== false ? col.notNull() : col;
          if (field.references) {
            col = col.references(
              `${field.references.model}.${field.references.field}`
            );
          }
          if (field.unique) {
            col = col.unique();
          }
          return col;
        });
        migrations.push(exec);
      }
    }
  }
  if (toBeCreated.length) {
    for (const table of toBeCreated) {
      let dbT = db.schema.createTable(table.table).addColumn(
        "id",
        config2.advanced?.database?.useNumberId ? dbType === "postgres" ? "serial" : "integer" : dbType === "mysql" || dbType === "mssql" ? "varchar(36)" : "text",
        (col) => {
          if (config2.advanced?.database?.useNumberId) {
            if (dbType === "postgres") {
              return col.primaryKey().notNull();
            }
            return col.autoIncrement().primaryKey().notNull();
          }
          return col.primaryKey().notNull();
        }
      );
      for (const [fieldName, field] of Object.entries(table.fields)) {
        const type = getType(field, fieldName);
        dbT = dbT.addColumn(fieldName, type, (col) => {
          col = field.required !== false ? col.notNull() : col;
          if (field.references) {
            col = col.references(
              `${field.references.model}.${field.references.field}`
            );
          }
          if (field.unique) {
            col = col.unique();
          }
          return col;
        });
      }
      migrations.push(dbT);
    }
  }
  async function runMigrations() {
    for (const migration of migrations) {
      await migration.execute();
    }
  }
  __name(runMigrations, "runMigrations");
  __name2(runMigrations, "runMigrations");
  async function compileMigrations() {
    const compiled = migrations.map((m) => m.compile().sql);
    return compiled.join(";\n\n") + ";";
  }
  __name(compileMigrations, "compileMigrations");
  __name2(compileMigrations, "compileMigrations");
  return { toBeCreated, toBeAdded, runMigrations, compileMigrations };
}
__name(getMigrations, "getMigrations");
var createInternalAdapter;
var postgresMap;
var mysqlMap;
var sqliteMap;
var mssqlMap;
var map;
var init_better_auth_XjdOGtZf = __esm({
  "../node_modules/better-auth/dist/shared/better-auth.XjdOGtZf.mjs"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_better_auth_CW6D9eSx();
    init_better_auth_Cc72UxUH();
    init_better_auth_iKoUsdFE();
    init_better_auth_tB5eU6EY();
    init_better_auth_BUPPRXfK();
    init_esm2();
    init_dist2();
    init_hash();
    init_base642();
    init_dist4();
    init_hex();
    init_better_auth_B4Qoxdgc();
    init_better_auth_Cqykj82J();
    init_better_auth_8zoxzg_F();
    init_random();
    init_better_auth_DORkW_Ge();
    init_better_auth_DdzSJf_n();
    init_better_auth_Ia_Tf4f9();
    init_better_auth_Bdaq9Lqn();
    __name2(getWithHooks, "getWithHooks");
    createInternalAdapter = /* @__PURE__ */ __name2((adapter, ctx) => {
      const options = ctx.options;
      const secondaryStorage = options.secondaryStorage;
      const sessionExpiration = options.session?.expiresIn || 60 * 60 * 24 * 7;
      const { createWithHooks, updateWithHooks, updateManyWithHooks } = getWithHooks(adapter, ctx);
      return {
        createOAuthUser: /* @__PURE__ */ __name2(async (user, account, context) => {
          const createdUser = await createWithHooks(
            {
              createdAt: /* @__PURE__ */ new Date(),
              updatedAt: /* @__PURE__ */ new Date(),
              ...user
            },
            "user",
            void 0,
            context
          );
          const createdAccount = await createWithHooks(
            {
              ...account,
              userId: createdUser.id || user.id,
              createdAt: /* @__PURE__ */ new Date(),
              updatedAt: /* @__PURE__ */ new Date()
            },
            "account",
            void 0,
            context
          );
          return {
            user: createdUser,
            account: createdAccount
          };
        }, "createOAuthUser"),
        createUser: /* @__PURE__ */ __name2(async (user, context) => {
          const createdUser = await createWithHooks(
            {
              createdAt: /* @__PURE__ */ new Date(),
              updatedAt: /* @__PURE__ */ new Date(),
              emailVerified: false,
              ...user,
              email: user.email?.toLowerCase()
            },
            "user",
            void 0,
            context
          );
          return createdUser;
        }, "createUser"),
        createAccount: /* @__PURE__ */ __name2(async (account, context) => {
          const createdAccount = await createWithHooks(
            {
              createdAt: /* @__PURE__ */ new Date(),
              updatedAt: /* @__PURE__ */ new Date(),
              ...account
            },
            "account",
            void 0,
            context
          );
          return createdAccount;
        }, "createAccount"),
        listSessions: /* @__PURE__ */ __name2(async (userId) => {
          if (secondaryStorage) {
            const currentList = await secondaryStorage.get(
              `active-sessions-${userId}`
            );
            if (!currentList) return [];
            const list = safeJSONParse(currentList) || [];
            const now = Date.now();
            const validSessions = list.filter((s) => s.expiresAt > now);
            const sessions2 = [];
            for (const session of validSessions) {
              const sessionStringified = await secondaryStorage.get(session.token);
              if (sessionStringified) {
                const s = JSON.parse(sessionStringified);
                const parsedSession = parseSessionOutput(ctx.options, {
                  ...s.session,
                  expiresAt: new Date(s.session.expiresAt)
                });
                sessions2.push(parsedSession);
              }
            }
            return sessions2;
          }
          const sessions = await adapter.findMany({
            model: "session",
            where: [
              {
                field: "userId",
                value: userId
              }
            ]
          });
          return sessions;
        }, "listSessions"),
        listUsers: /* @__PURE__ */ __name2(async (limit, offset, sortBy, where) => {
          const users = await adapter.findMany({
            model: "user",
            limit,
            offset,
            sortBy,
            where
          });
          return users;
        }, "listUsers"),
        countTotalUsers: /* @__PURE__ */ __name2(async (where) => {
          const total = await adapter.count({
            model: "user",
            where
          });
          if (typeof total === "string") {
            return parseInt(total);
          }
          return total;
        }, "countTotalUsers"),
        deleteUser: /* @__PURE__ */ __name2(async (userId) => {
          if (secondaryStorage) {
            await secondaryStorage.delete(`active-sessions-${userId}`);
          }
          if (!secondaryStorage || options.session?.storeSessionInDatabase) {
            await adapter.deleteMany({
              model: "session",
              where: [
                {
                  field: "userId",
                  value: userId
                }
              ]
            });
          }
          await adapter.deleteMany({
            model: "account",
            where: [
              {
                field: "userId",
                value: userId
              }
            ]
          });
          await adapter.delete({
            model: "user",
            where: [
              {
                field: "id",
                value: userId
              }
            ]
          });
        }, "deleteUser"),
        createSession: /* @__PURE__ */ __name2(async (userId, ctx2, dontRememberMe, override, overrideAll) => {
          const headers = ctx2.headers || ctx2.request?.headers;
          const { id: _, ...rest } = override || {};
          const data = {
            ipAddress: ctx2.request || ctx2.headers ? getIp(ctx2.request || ctx2.headers, ctx2.context.options) || "" : "",
            userAgent: headers?.get("user-agent") || "",
            ...rest,
            /**
             * If the user doesn't want to be remembered
             * set the session to expire in 1 day.
             * The cookie will be set to expire at the end of the session
             */
            expiresAt: dontRememberMe ? getDate(60 * 60 * 24, "sec") : getDate(sessionExpiration, "sec"),
            userId,
            token: generateId(32),
            createdAt: /* @__PURE__ */ new Date(),
            updatedAt: /* @__PURE__ */ new Date(),
            ...overrideAll ? rest : {}
          };
          const res = await createWithHooks(
            data,
            "session",
            secondaryStorage ? {
              fn: /* @__PURE__ */ __name2(async (sessionData) => {
                const currentList = await secondaryStorage.get(
                  `active-sessions-${userId}`
                );
                let list = [];
                const now = Date.now();
                if (currentList) {
                  list = safeJSONParse(currentList) || [];
                  list = list.filter((session) => session.expiresAt > now);
                }
                list.push({
                  token: data.token,
                  expiresAt: now + sessionExpiration * 1e3
                });
                await secondaryStorage.set(
                  `active-sessions-${userId}`,
                  JSON.stringify(list),
                  sessionExpiration
                );
                return sessionData;
              }, "fn"),
              executeMainFn: options.session?.storeSessionInDatabase
            } : void 0,
            ctx2
          );
          return res;
        }, "createSession"),
        findSession: /* @__PURE__ */ __name2(async (token) => {
          if (secondaryStorage) {
            const sessionStringified = await secondaryStorage.get(token);
            if (!sessionStringified && !options.session?.storeSessionInDatabase) {
              return null;
            }
            if (sessionStringified) {
              const s = JSON.parse(sessionStringified);
              const parsedSession2 = parseSessionOutput(ctx.options, {
                ...s.session,
                expiresAt: new Date(s.session.expiresAt),
                createdAt: new Date(s.session.createdAt),
                updatedAt: new Date(s.session.updatedAt)
              });
              const parsedUser2 = parseUserOutput(ctx.options, {
                ...s.user,
                createdAt: new Date(s.user.createdAt),
                updatedAt: new Date(s.user.updatedAt)
              });
              return {
                session: parsedSession2,
                user: parsedUser2
              };
            }
          }
          const session = await adapter.findOne({
            model: "session",
            where: [
              {
                value: token,
                field: "token"
              }
            ]
          });
          if (!session) {
            return null;
          }
          const user = await adapter.findOne({
            model: "user",
            where: [
              {
                value: session.userId,
                field: "id"
              }
            ]
          });
          if (!user) {
            return null;
          }
          const parsedSession = parseSessionOutput(ctx.options, session);
          const parsedUser = parseUserOutput(ctx.options, user);
          return {
            session: parsedSession,
            user: parsedUser
          };
        }, "findSession"),
        findSessions: /* @__PURE__ */ __name2(async (sessionTokens) => {
          if (secondaryStorage) {
            const sessions2 = [];
            for (const sessionToken of sessionTokens) {
              const sessionStringified = await secondaryStorage.get(sessionToken);
              if (sessionStringified) {
                const s = JSON.parse(sessionStringified);
                const session = {
                  session: {
                    ...s.session,
                    expiresAt: new Date(s.session.expiresAt)
                  },
                  user: {
                    ...s.user,
                    createdAt: new Date(s.user.createdAt),
                    updatedAt: new Date(s.user.updatedAt)
                  }
                };
                sessions2.push(session);
              }
            }
            return sessions2;
          }
          const sessions = await adapter.findMany({
            model: "session",
            where: [
              {
                field: "token",
                value: sessionTokens,
                operator: "in"
              }
            ]
          });
          const userIds = sessions.map((session) => {
            return session.userId;
          });
          if (!userIds.length) return [];
          const users = await adapter.findMany({
            model: "user",
            where: [
              {
                field: "id",
                value: userIds,
                operator: "in"
              }
            ]
          });
          return sessions.map((session) => {
            const user = users.find((u) => u.id === session.userId);
            if (!user) return null;
            return {
              session,
              user
            };
          });
        }, "findSessions"),
        updateSession: /* @__PURE__ */ __name2(async (sessionToken, session, context) => {
          const updatedSession = await updateWithHooks(
            session,
            [{ field: "token", value: sessionToken }],
            "session",
            secondaryStorage ? {
              async fn(data) {
                const currentSession = await secondaryStorage.get(sessionToken);
                let updatedSession2 = null;
                if (currentSession) {
                  const parsedSession = JSON.parse(currentSession);
                  updatedSession2 = {
                    ...parsedSession.session,
                    ...data
                  };
                  return updatedSession2;
                } else {
                  return null;
                }
              },
              executeMainFn: options.session?.storeSessionInDatabase
            } : void 0,
            context
          );
          return updatedSession;
        }, "updateSession"),
        deleteSession: /* @__PURE__ */ __name2(async (token) => {
          if (secondaryStorage) {
            await secondaryStorage.delete(token);
            if (!options.session?.storeSessionInDatabase || ctx.options.session?.preserveSessionInDatabase) {
              return;
            }
          }
          await adapter.delete({
            model: "session",
            where: [
              {
                field: "token",
                value: token
              }
            ]
          });
        }, "deleteSession"),
        deleteAccounts: /* @__PURE__ */ __name2(async (userId) => {
          await adapter.deleteMany({
            model: "account",
            where: [
              {
                field: "userId",
                value: userId
              }
            ]
          });
        }, "deleteAccounts"),
        deleteAccount: /* @__PURE__ */ __name2(async (accountId) => {
          await adapter.delete({
            model: "account",
            where: [
              {
                field: "id",
                value: accountId
              }
            ]
          });
        }, "deleteAccount"),
        deleteSessions: /* @__PURE__ */ __name2(async (userIdOrSessionTokens) => {
          if (secondaryStorage) {
            if (typeof userIdOrSessionTokens === "string") {
              const activeSession = await secondaryStorage.get(
                `active-sessions-${userIdOrSessionTokens}`
              );
              const sessions = activeSession ? safeJSONParse(activeSession) : [];
              if (!sessions) return;
              for (const session of sessions) {
                await secondaryStorage.delete(session.token);
              }
            } else {
              for (const sessionToken of userIdOrSessionTokens) {
                const session = await secondaryStorage.get(sessionToken);
                if (session) {
                  await secondaryStorage.delete(sessionToken);
                }
              }
            }
            if (!options.session?.storeSessionInDatabase || ctx.options.session?.preserveSessionInDatabase) {
              return;
            }
          }
          await adapter.deleteMany({
            model: "session",
            where: [
              {
                field: Array.isArray(userIdOrSessionTokens) ? "token" : "userId",
                value: userIdOrSessionTokens,
                operator: Array.isArray(userIdOrSessionTokens) ? "in" : void 0
              }
            ]
          });
        }, "deleteSessions"),
        findOAuthUser: /* @__PURE__ */ __name2(async (email, accountId, providerId) => {
          const account = await adapter.findOne({
            model: "account",
            where: [
              {
                value: accountId,
                field: "accountId"
              },
              {
                value: providerId,
                field: "providerId"
              }
            ]
          });
          if (account) {
            const user = await adapter.findOne({
              model: "user",
              where: [
                {
                  value: account.userId,
                  field: "id"
                }
              ]
            });
            if (user) {
              return {
                user,
                accounts: [account]
              };
            } else {
              return null;
            }
          } else {
            const user = await adapter.findOne({
              model: "user",
              where: [
                {
                  value: email.toLowerCase(),
                  field: "email"
                }
              ]
            });
            if (user) {
              const accounts = await adapter.findMany({
                model: "account",
                where: [
                  {
                    value: user.id,
                    field: "userId"
                  }
                ]
              });
              return {
                user,
                accounts: accounts || []
              };
            } else {
              return null;
            }
          }
        }, "findOAuthUser"),
        findUserByEmail: /* @__PURE__ */ __name2(async (email, options2) => {
          const user = await adapter.findOne({
            model: "user",
            where: [
              {
                value: email.toLowerCase(),
                field: "email"
              }
            ]
          });
          if (!user) return null;
          if (options2?.includeAccounts) {
            const accounts = await adapter.findMany({
              model: "account",
              where: [
                {
                  value: user.id,
                  field: "userId"
                }
              ]
            });
            return {
              user,
              accounts
            };
          }
          return {
            user,
            accounts: []
          };
        }, "findUserByEmail"),
        findUserById: /* @__PURE__ */ __name2(async (userId) => {
          const user = await adapter.findOne({
            model: "user",
            where: [
              {
                field: "id",
                value: userId
              }
            ]
          });
          return user;
        }, "findUserById"),
        linkAccount: /* @__PURE__ */ __name2(async (account, context) => {
          const _account = await createWithHooks(
            {
              ...account,
              createdAt: /* @__PURE__ */ new Date(),
              updatedAt: /* @__PURE__ */ new Date()
            },
            "account",
            void 0,
            context
          );
          return _account;
        }, "linkAccount"),
        updateUser: /* @__PURE__ */ __name2(async (userId, data, context) => {
          const user = await updateWithHooks(
            data,
            [
              {
                field: "id",
                value: userId
              }
            ],
            "user",
            void 0,
            context
          );
          return user;
        }, "updateUser"),
        updateUserByEmail: /* @__PURE__ */ __name2(async (email, data, context) => {
          const user = await updateWithHooks(
            data,
            [
              {
                field: "email",
                value: email.toLowerCase()
              }
            ],
            "user",
            void 0,
            context
          );
          return user;
        }, "updateUserByEmail"),
        updatePassword: /* @__PURE__ */ __name2(async (userId, password, context) => {
          await updateManyWithHooks(
            {
              password
            },
            [
              {
                field: "userId",
                value: userId
              },
              {
                field: "providerId",
                value: "credential"
              }
            ],
            "account",
            void 0,
            context
          );
        }, "updatePassword"),
        findAccounts: /* @__PURE__ */ __name2(async (userId) => {
          const accounts = await adapter.findMany({
            model: "account",
            where: [
              {
                field: "userId",
                value: userId
              }
            ]
          });
          return accounts;
        }, "findAccounts"),
        findAccount: /* @__PURE__ */ __name2(async (accountId) => {
          const account = await adapter.findOne({
            model: "account",
            where: [
              {
                field: "accountId",
                value: accountId
              }
            ]
          });
          return account;
        }, "findAccount"),
        findAccountByProviderId: /* @__PURE__ */ __name2(async (accountId, providerId) => {
          const account = await adapter.findOne({
            model: "account",
            where: [
              {
                field: "accountId",
                value: accountId
              },
              {
                field: "providerId",
                value: providerId
              }
            ]
          });
          return account;
        }, "findAccountByProviderId"),
        findAccountByUserId: /* @__PURE__ */ __name2(async (userId) => {
          const account = await adapter.findMany({
            model: "account",
            where: [
              {
                field: "userId",
                value: userId
              }
            ]
          });
          return account;
        }, "findAccountByUserId"),
        updateAccount: /* @__PURE__ */ __name2(async (id, data, context) => {
          const account = await updateWithHooks(
            data,
            [{ field: "id", value: id }],
            "account",
            void 0,
            context
          );
          return account;
        }, "updateAccount"),
        createVerificationValue: /* @__PURE__ */ __name2(async (data, context) => {
          const verification = await createWithHooks(
            {
              createdAt: /* @__PURE__ */ new Date(),
              updatedAt: /* @__PURE__ */ new Date(),
              ...data
            },
            "verification",
            void 0,
            context
          );
          return verification;
        }, "createVerificationValue"),
        findVerificationValue: /* @__PURE__ */ __name2(async (identifier) => {
          const verification = await adapter.findMany({
            model: "verification",
            where: [
              {
                field: "identifier",
                value: identifier
              }
            ],
            sortBy: {
              field: "createdAt",
              direction: "desc"
            },
            limit: 1
          });
          if (!options.verification?.disableCleanup) {
            await adapter.deleteMany({
              model: "verification",
              where: [
                {
                  field: "expiresAt",
                  value: /* @__PURE__ */ new Date(),
                  operator: "lt"
                }
              ]
            });
          }
          const lastVerification = verification[0];
          return lastVerification;
        }, "findVerificationValue"),
        deleteVerificationValue: /* @__PURE__ */ __name2(async (id) => {
          await adapter.delete({
            model: "verification",
            where: [
              {
                field: "id",
                value: id
              }
            ]
          });
        }, "deleteVerificationValue"),
        deleteVerificationByIdentifier: /* @__PURE__ */ __name2(async (identifier) => {
          await adapter.delete({
            model: "verification",
            where: [
              {
                field: "identifier",
                value: identifier
              }
            ]
          });
        }, "deleteVerificationByIdentifier"),
        updateVerificationValue: /* @__PURE__ */ __name2(async (id, data, context) => {
          const verification = await updateWithHooks(
            data,
            [{ field: "id", value: id }],
            "verification",
            void 0,
            context
          );
          return verification;
        }, "updateVerificationValue")
      };
    }, "createInternalAdapter");
    __name2(getAdapter, "getAdapter");
    __name2(getSchema, "getSchema");
    postgresMap = {
      string: ["character varying", "text"],
      number: [
        "int4",
        "integer",
        "bigint",
        "smallint",
        "numeric",
        "real",
        "double precision"
      ],
      boolean: ["bool", "boolean"],
      date: ["timestamp", "date"]
    };
    mysqlMap = {
      string: ["varchar", "text"],
      number: [
        "integer",
        "int",
        "bigint",
        "smallint",
        "decimal",
        "float",
        "double"
      ],
      boolean: ["boolean", "tinyint"],
      date: ["timestamp", "datetime", "date"]
    };
    sqliteMap = {
      string: ["TEXT"],
      number: ["INTEGER", "REAL"],
      boolean: ["INTEGER", "BOOLEAN"],
      // 0 or 1
      date: ["DATE", "INTEGER"]
    };
    mssqlMap = {
      string: ["text", "varchar"],
      number: ["int", "bigint", "smallint", "decimal", "float", "double"],
      boolean: ["bit", "smallint"],
      date: ["datetime", "date"]
    };
    map = {
      postgres: postgresMap,
      mysql: mysqlMap,
      sqlite: sqliteMap,
      mssql: mssqlMap
    };
    __name2(matchType, "matchType");
    __name2(getMigrations, "getMigrations");
  }
});
async function checkPassword(userId, c) {
  const accounts = await c.context.internalAdapter.findAccounts(userId);
  const credentialAccount = accounts?.find(
    (account) => account.providerId === "credential"
  );
  const currentPassword = credentialAccount?.password;
  if (!credentialAccount || !currentPassword || !c.body.password) {
    throw new APIError("BAD_REQUEST", {
      message: "No password credential found"
    });
  }
  const compare = await c.context.password.verify({
    hash: currentPassword,
    password: c.body.password
  });
  if (!compare) {
    throw new APIError("BAD_REQUEST", {
      message: "Invalid password"
    });
  }
  return true;
}
__name(checkPassword, "checkPassword");
var init_better_auth_YwDQhoPc = __esm({
  "../node_modules/better-auth/dist/shared/better-auth.YwDQhoPc.mjs"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_dist2();
    __name2(checkPassword, "checkPassword");
  }
});
var init_better_auth_D_2CmEwz = __esm({
  "../node_modules/better-auth/dist/shared/better-auth.D-2CmEwz.mjs"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
  }
});
function runPluginInit(ctx) {
  let options = ctx.options;
  const plugins = options.plugins || [];
  let context = ctx;
  const dbHooks = [];
  for (const plugin of plugins) {
    if (plugin.init) {
      const result = plugin.init(ctx);
      if (typeof result === "object") {
        if (result.options) {
          const { databaseHooks, ...restOpts } = result.options;
          if (databaseHooks) {
            dbHooks.push(databaseHooks);
          }
          options = defu(options, restOpts);
        }
        if (result.context) {
          context = {
            ...context,
            ...result.context
          };
        }
      }
    }
  }
  dbHooks.push(options.databaseHooks);
  context.internalAdapter = createInternalAdapter(ctx.adapter, {
    options,
    hooks: dbHooks.filter((u) => u !== void 0),
    generateId: ctx.generateId
  });
  context.options = options;
  return { context };
}
__name(runPluginInit, "runPluginInit");
function getInternalPlugins(options) {
  const plugins = [];
  if (options.advanced?.crossSubDomainCookies?.enabled) ;
  return plugins;
}
__name(getInternalPlugins, "getInternalPlugins");
function getTrustedOrigins(options) {
  const baseURL = getBaseURL(options.baseURL, options.basePath);
  if (!baseURL) {
    return [];
  }
  const trustedOrigins = [new URL(baseURL).origin];
  if (options.trustedOrigins && Array.isArray(options.trustedOrigins)) {
    trustedOrigins.push(...options.trustedOrigins);
  }
  const envTrustedOrigins = env.BETTER_AUTH_TRUSTED_ORIGINS;
  if (envTrustedOrigins) {
    trustedOrigins.push(...envTrustedOrigins.split(","));
  }
  return trustedOrigins;
}
__name(getTrustedOrigins, "getTrustedOrigins");
var DEFAULT_SECRET;
var init;
var betterAuth;
var init_dist5 = __esm({
  "../node_modules/better-auth/dist/index.mjs"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_api3();
    init_defu();
    init_better_auth_OT3XFeFk();
    init_better_auth_XjdOGtZf();
    init_better_auth_DORkW_Ge();
    init_esm2();
    init_better_auth_Cc72UxUH();
    init_cookies();
    init_better_auth_Cqykj82J();
    init_better_auth_Cqykj82J();
    init_social_providers();
    init_better_auth_BUPPRXfK();
    init_dist2();
    init_hash();
    init_base642();
    init_better_auth_B4Qoxdgc();
    init_better_auth_8zoxzg_F();
    init_better_auth_YwDQhoPc();
    init_better_auth_VTXNLFMT();
    init_better_auth_DdzSJf_n();
    init_better_auth_DdzSJf_n();
    init_better_auth_Dvh_YFwT();
    init_better_auth_Dvh_YFwT();
    init_better_auth_D_2CmEwz();
    init_better_auth_dn8_oqOu();
    init_better_auth_iKoUsdFE();
    init_dist4();
    init_hex();
    init_better_auth_CW6D9eSx();
    init_better_auth_tB5eU6EY();
    init_random();
    init_better_auth_Ia_Tf4f9();
    init_better_auth_Dpv9J4ny();
    init_better_auth_0TC26uRi();
    init_better_auth_Bdaq9Lqn();
    init_hmac();
    init_dist3();
    init_better_auth_DufyW0qf();
    init_better_auth_DDEbWX_S();
    init_binary();
    DEFAULT_SECRET = "better-auth-secret-123456789";
    init = /* @__PURE__ */ __name2(async (options) => {
      const adapter = await getAdapter(options);
      const plugins = options.plugins || [];
      const internalPlugins = getInternalPlugins(options);
      const logger2 = createLogger(options.logger);
      const baseURL = getBaseURL(options.baseURL, options.basePath);
      const secret = options.secret || env.BETTER_AUTH_SECRET || env.AUTH_SECRET || DEFAULT_SECRET;
      if (secret === DEFAULT_SECRET) {
        if (isProduction) {
          logger2.error(
            "You are using the default secret. Please set `BETTER_AUTH_SECRET` in your environment variables or pass `secret` in your auth config."
          );
        }
      }
      options = {
        ...options,
        secret,
        baseURL: baseURL ? new URL(baseURL).origin : "",
        basePath: options.basePath || "/api/auth",
        plugins: plugins.concat(internalPlugins)
      };
      const cookies = getCookies(options);
      const tables = getAuthTables(options);
      const providers = Object.keys(options.socialProviders || {}).map((key) => {
        const value = options.socialProviders?.[key];
        if (!value || value.enabled === false) {
          return null;
        }
        if (!value.clientId) {
          logger2.warn(
            `Social provider ${key} is missing clientId or clientSecret`
          );
        }
        const provider = socialProviders[key](
          value
          // TODO: fix this
        );
        provider.disableImplicitSignUp = value.disableImplicitSignUp;
        return provider;
      }).filter((x) => x !== null);
      const generateIdFunc = /* @__PURE__ */ __name2(({ model, size }) => {
        if (typeof options.advanced?.generateId === "function") {
          return options.advanced.generateId({ model, size });
        }
        if (typeof options?.advanced?.database?.generateId === "function") {
          return options.advanced.database.generateId({ model, size });
        }
        return generateId(size);
      }, "generateIdFunc");
      const ctx = {
        appName: options.appName || "Better Auth",
        socialProviders: providers,
        options,
        tables,
        trustedOrigins: getTrustedOrigins(options),
        baseURL: baseURL || "",
        sessionConfig: {
          updateAge: options.session?.updateAge !== void 0 ? options.session.updateAge : 24 * 60 * 60,
          // 24 hours
          expiresIn: options.session?.expiresIn || 60 * 60 * 24 * 7,
          // 7 days
          freshAge: options.session?.freshAge === void 0 ? 60 * 60 * 24 : options.session.freshAge
        },
        secret,
        rateLimit: {
          ...options.rateLimit,
          enabled: options.rateLimit?.enabled ?? isProduction,
          window: options.rateLimit?.window || 10,
          max: options.rateLimit?.max || 100,
          storage: options.rateLimit?.storage || (options.secondaryStorage ? "secondary-storage" : "memory")
        },
        authCookies: cookies,
        logger: logger2,
        generateId: generateIdFunc,
        session: null,
        secondaryStorage: options.secondaryStorage,
        password: {
          hash: options.emailAndPassword?.password?.hash || hashPassword,
          verify: options.emailAndPassword?.password?.verify || verifyPassword,
          config: {
            minPasswordLength: options.emailAndPassword?.minPasswordLength || 8,
            maxPasswordLength: options.emailAndPassword?.maxPasswordLength || 128
          },
          checkPassword
        },
        setNewSession(session) {
          this.newSession = session;
        },
        newSession: null,
        adapter,
        internalAdapter: createInternalAdapter(adapter, {
          options,
          hooks: options.databaseHooks ? [options.databaseHooks] : []
        }),
        createAuthCookie: createCookieGetter(options),
        async runMigrations() {
          if (!options.database || "updateMany" in options.database) {
            throw new BetterAuthError(
              "Database is not provided or it's an adapter. Migrations are only supported with a database instance."
            );
          }
          const { runMigrations } = await getMigrations(options);
          await runMigrations();
        }
      };
      let { context } = runPluginInit(ctx);
      return context;
    }, "init");
    __name2(runPluginInit, "runPluginInit");
    __name2(getInternalPlugins, "getInternalPlugins");
    __name2(getTrustedOrigins, "getTrustedOrigins");
    betterAuth = /* @__PURE__ */ __name2((options) => {
      const authContext = init(options);
      const { api } = getEndpoints(authContext, options);
      const errorCodes = options.plugins?.reduce((acc, plugin) => {
        if (plugin.$ERROR_CODES) {
          return {
            ...acc,
            ...plugin.$ERROR_CODES
          };
        }
        return acc;
      }, {});
      return {
        handler: /* @__PURE__ */ __name2(async (request) => {
          const ctx = await authContext;
          const basePath = ctx.options.basePath || "/api/auth";
          if (!ctx.options.baseURL) {
            const baseURL = getBaseURL(void 0, basePath, request);
            if (baseURL) {
              ctx.baseURL = baseURL;
              ctx.options.baseURL = getOrigin(ctx.baseURL) || void 0;
            } else {
              throw new BetterAuthError(
                "Could not get base URL from request. Please provide a valid base URL."
              );
            }
          }
          ctx.trustedOrigins = [
            ...options.trustedOrigins ? Array.isArray(options.trustedOrigins) ? options.trustedOrigins : await options.trustedOrigins(request) : [],
            ctx.options.baseURL
          ];
          const { handler } = router(ctx, options);
          return handler(request);
        }, "handler"),
        api,
        options,
        $context: authContext,
        $Infer: {},
        $ERROR_CODES: {
          ...errorCodes,
          ...BASE_ERROR_CODES
        }
      };
    }, "betterAuth");
  }
});
var require_u64 = __commonJS({
  "../node_modules/@noble/hashes/_u64.js"(exports) {
    "use strict";
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toBig = exports.shrSL = exports.shrSH = exports.rotrSL = exports.rotrSH = exports.rotrBL = exports.rotrBH = exports.rotr32L = exports.rotr32H = exports.rotlSL = exports.rotlSH = exports.rotlBL = exports.rotlBH = exports.add5L = exports.add5H = exports.add4L = exports.add4H = exports.add3L = exports.add3H = void 0;
    exports.add = add;
    exports.fromBig = fromBig;
    exports.split = split;
    var U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);
    var _32n = /* @__PURE__ */ BigInt(32);
    function fromBig(n, le = false) {
      if (le)
        return { h: Number(n & U32_MASK64), l: Number(n >> _32n & U32_MASK64) };
      return { h: Number(n >> _32n & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };
    }
    __name(fromBig, "fromBig");
    __name2(fromBig, "fromBig");
    function split(lst, le = false) {
      const len = lst.length;
      let Ah = new Uint32Array(len);
      let Al = new Uint32Array(len);
      for (let i = 0; i < len; i++) {
        const { h, l } = fromBig(lst[i], le);
        [Ah[i], Al[i]] = [h, l];
      }
      return [Ah, Al];
    }
    __name(split, "split");
    __name2(split, "split");
    var toBig = /* @__PURE__ */ __name2((h, l) => BigInt(h >>> 0) << _32n | BigInt(l >>> 0), "toBig");
    exports.toBig = toBig;
    var shrSH = /* @__PURE__ */ __name2((h, _l, s) => h >>> s, "shrSH");
    exports.shrSH = shrSH;
    var shrSL = /* @__PURE__ */ __name2((h, l, s) => h << 32 - s | l >>> s, "shrSL");
    exports.shrSL = shrSL;
    var rotrSH = /* @__PURE__ */ __name2((h, l, s) => h >>> s | l << 32 - s, "rotrSH");
    exports.rotrSH = rotrSH;
    var rotrSL = /* @__PURE__ */ __name2((h, l, s) => h << 32 - s | l >>> s, "rotrSL");
    exports.rotrSL = rotrSL;
    var rotrBH = /* @__PURE__ */ __name2((h, l, s) => h << 64 - s | l >>> s - 32, "rotrBH");
    exports.rotrBH = rotrBH;
    var rotrBL = /* @__PURE__ */ __name2((h, l, s) => h >>> s - 32 | l << 64 - s, "rotrBL");
    exports.rotrBL = rotrBL;
    var rotr32H = /* @__PURE__ */ __name2((_h, l) => l, "rotr32H");
    exports.rotr32H = rotr32H;
    var rotr32L = /* @__PURE__ */ __name2((h, _l) => h, "rotr32L");
    exports.rotr32L = rotr32L;
    var rotlSH = /* @__PURE__ */ __name2((h, l, s) => h << s | l >>> 32 - s, "rotlSH");
    exports.rotlSH = rotlSH;
    var rotlSL = /* @__PURE__ */ __name2((h, l, s) => l << s | h >>> 32 - s, "rotlSL");
    exports.rotlSL = rotlSL;
    var rotlBH = /* @__PURE__ */ __name2((h, l, s) => l << s - 32 | h >>> 64 - s, "rotlBH");
    exports.rotlBH = rotlBH;
    var rotlBL = /* @__PURE__ */ __name2((h, l, s) => h << s - 32 | l >>> 64 - s, "rotlBL");
    exports.rotlBL = rotlBL;
    function add(Ah, Al, Bh, Bl) {
      const l = (Al >>> 0) + (Bl >>> 0);
      return { h: Ah + Bh + (l / 2 ** 32 | 0) | 0, l: l | 0 };
    }
    __name(add, "add");
    __name2(add, "add");
    var add3L = /* @__PURE__ */ __name2((Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0), "add3L");
    exports.add3L = add3L;
    var add3H = /* @__PURE__ */ __name2((low, Ah, Bh, Ch) => Ah + Bh + Ch + (low / 2 ** 32 | 0) | 0, "add3H");
    exports.add3H = add3H;
    var add4L = /* @__PURE__ */ __name2((Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0), "add4L");
    exports.add4L = add4L;
    var add4H = /* @__PURE__ */ __name2((low, Ah, Bh, Ch, Dh) => Ah + Bh + Ch + Dh + (low / 2 ** 32 | 0) | 0, "add4H");
    exports.add4H = add4H;
    var add5L = /* @__PURE__ */ __name2((Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0), "add5L");
    exports.add5L = add5L;
    var add5H = /* @__PURE__ */ __name2((low, Ah, Bh, Ch, Dh, Eh) => Ah + Bh + Ch + Dh + Eh + (low / 2 ** 32 | 0) | 0, "add5H");
    exports.add5H = add5H;
    var u64 = {
      fromBig,
      split,
      toBig,
      shrSH,
      shrSL,
      rotrSH,
      rotrSL,
      rotrBH,
      rotrBL,
      rotr32H,
      rotr32L,
      rotlSH,
      rotlSL,
      rotlBH,
      rotlBL,
      add,
      add3L,
      add3H,
      add4L,
      add4H,
      add5H,
      add5L
    };
    exports.default = u64;
  }
});
var require_crypto = __commonJS({
  "../node_modules/@noble/hashes/crypto.js"(exports) {
    "use strict";
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.crypto = void 0;
    exports.crypto = typeof globalThis === "object" && "crypto" in globalThis ? globalThis.crypto : void 0;
  }
});
var require_utils = __commonJS({
  "../node_modules/@noble/hashes/utils.js"(exports) {
    "use strict";
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.wrapXOFConstructorWithOpts = exports.wrapConstructorWithOpts = exports.wrapConstructor = exports.Hash = exports.nextTick = exports.swap32IfBE = exports.byteSwapIfBE = exports.swap8IfBE = exports.isLE = void 0;
    exports.isBytes = isBytes2;
    exports.anumber = anumber2;
    exports.abytes = abytes2;
    exports.ahash = ahash2;
    exports.aexists = aexists2;
    exports.aoutput = aoutput2;
    exports.u8 = u8;
    exports.u32 = u322;
    exports.clean = clean2;
    exports.createView = createView2;
    exports.rotr = rotr2;
    exports.rotl = rotl2;
    exports.byteSwap = byteSwap2;
    exports.byteSwap32 = byteSwap322;
    exports.bytesToHex = bytesToHex;
    exports.hexToBytes = hexToBytes2;
    exports.asyncLoop = asyncLoop2;
    exports.utf8ToBytes = utf8ToBytes2;
    exports.bytesToUtf8 = bytesToUtf8;
    exports.toBytes = toBytes2;
    exports.kdfInputToBytes = kdfInputToBytes2;
    exports.concatBytes = concatBytes;
    exports.checkOpts = checkOpts2;
    exports.createHasher = createHasher2;
    exports.createOptHasher = createOptHasher;
    exports.createXOFer = createXOFer;
    exports.randomBytes = randomBytes;
    var crypto_1 = require_crypto();
    function isBytes2(a) {
      return a instanceof Uint8Array || ArrayBuffer.isView(a) && a.constructor.name === "Uint8Array";
    }
    __name(isBytes2, "isBytes2");
    __name2(isBytes2, "isBytes");
    function anumber2(n) {
      if (!Number.isSafeInteger(n) || n < 0)
        throw new Error("positive integer expected, got " + n);
    }
    __name(anumber2, "anumber2");
    __name2(anumber2, "anumber");
    function abytes2(b, ...lengths) {
      if (!isBytes2(b))
        throw new Error("Uint8Array expected");
      if (lengths.length > 0 && !lengths.includes(b.length))
        throw new Error("Uint8Array expected of length " + lengths + ", got length=" + b.length);
    }
    __name(abytes2, "abytes2");
    __name2(abytes2, "abytes");
    function ahash2(h) {
      if (typeof h !== "function" || typeof h.create !== "function")
        throw new Error("Hash should be wrapped by utils.createHasher");
      anumber2(h.outputLen);
      anumber2(h.blockLen);
    }
    __name(ahash2, "ahash2");
    __name2(ahash2, "ahash");
    function aexists2(instance, checkFinished = true) {
      if (instance.destroyed)
        throw new Error("Hash instance has been destroyed");
      if (checkFinished && instance.finished)
        throw new Error("Hash#digest() has already been called");
    }
    __name(aexists2, "aexists2");
    __name2(aexists2, "aexists");
    function aoutput2(out, instance) {
      abytes2(out);
      const min = instance.outputLen;
      if (out.length < min) {
        throw new Error("digestInto() expects output buffer of length at least " + min);
      }
    }
    __name(aoutput2, "aoutput2");
    __name2(aoutput2, "aoutput");
    function u8(arr) {
      return new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);
    }
    __name(u8, "u8");
    __name2(u8, "u8");
    function u322(arr) {
      return new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));
    }
    __name(u322, "u322");
    __name2(u322, "u32");
    function clean2(...arrays) {
      for (let i = 0; i < arrays.length; i++) {
        arrays[i].fill(0);
      }
    }
    __name(clean2, "clean2");
    __name2(clean2, "clean");
    function createView2(arr) {
      return new DataView(arr.buffer, arr.byteOffset, arr.byteLength);
    }
    __name(createView2, "createView2");
    __name2(createView2, "createView");
    function rotr2(word, shift) {
      return word << 32 - shift | word >>> shift;
    }
    __name(rotr2, "rotr2");
    __name2(rotr2, "rotr");
    function rotl2(word, shift) {
      return word << shift | word >>> 32 - shift >>> 0;
    }
    __name(rotl2, "rotl2");
    __name2(rotl2, "rotl");
    exports.isLE = (() => new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68)();
    function byteSwap2(word) {
      return word << 24 & 4278190080 | word << 8 & 16711680 | word >>> 8 & 65280 | word >>> 24 & 255;
    }
    __name(byteSwap2, "byteSwap2");
    __name2(byteSwap2, "byteSwap");
    exports.swap8IfBE = exports.isLE ? (n) => n : (n) => byteSwap2(n);
    exports.byteSwapIfBE = exports.swap8IfBE;
    function byteSwap322(arr) {
      for (let i = 0; i < arr.length; i++) {
        arr[i] = byteSwap2(arr[i]);
      }
      return arr;
    }
    __name(byteSwap322, "byteSwap322");
    __name2(byteSwap322, "byteSwap32");
    exports.swap32IfBE = exports.isLE ? (u) => u : byteSwap322;
    var hasHexBuiltin2 = /* @__PURE__ */ (() => (
      // @ts-ignore
      typeof Uint8Array.from([]).toHex === "function" && typeof Uint8Array.fromHex === "function"
    ))();
    var hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, "0"));
    function bytesToHex(bytes) {
      abytes2(bytes);
      if (hasHexBuiltin2)
        return bytes.toHex();
      let hex2 = "";
      for (let i = 0; i < bytes.length; i++) {
        hex2 += hexes[bytes[i]];
      }
      return hex2;
    }
    __name(bytesToHex, "bytesToHex");
    __name2(bytesToHex, "bytesToHex");
    var asciis2 = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 };
    function asciiToBase162(ch) {
      if (ch >= asciis2._0 && ch <= asciis2._9)
        return ch - asciis2._0;
      if (ch >= asciis2.A && ch <= asciis2.F)
        return ch - (asciis2.A - 10);
      if (ch >= asciis2.a && ch <= asciis2.f)
        return ch - (asciis2.a - 10);
      return;
    }
    __name(asciiToBase162, "asciiToBase162");
    __name2(asciiToBase162, "asciiToBase16");
    function hexToBytes2(hex2) {
      if (typeof hex2 !== "string")
        throw new Error("hex string expected, got " + typeof hex2);
      if (hasHexBuiltin2)
        return Uint8Array.fromHex(hex2);
      const hl = hex2.length;
      const al = hl / 2;
      if (hl % 2)
        throw new Error("hex string expected, got unpadded hex of length " + hl);
      const array3 = new Uint8Array(al);
      for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {
        const n1 = asciiToBase162(hex2.charCodeAt(hi));
        const n2 = asciiToBase162(hex2.charCodeAt(hi + 1));
        if (n1 === void 0 || n2 === void 0) {
          const char = hex2[hi] + hex2[hi + 1];
          throw new Error('hex string expected, got non-hex character "' + char + '" at index ' + hi);
        }
        array3[ai] = n1 * 16 + n2;
      }
      return array3;
    }
    __name(hexToBytes2, "hexToBytes2");
    __name2(hexToBytes2, "hexToBytes");
    var nextTick2 = /* @__PURE__ */ __name2(async () => {
    }, "nextTick");
    exports.nextTick = nextTick2;
    async function asyncLoop2(iters, tick, cb) {
      let ts = Date.now();
      for (let i = 0; i < iters; i++) {
        cb(i);
        const diff = Date.now() - ts;
        if (diff >= 0 && diff < tick)
          continue;
        await (0, exports.nextTick)();
        ts += diff;
      }
    }
    __name(asyncLoop2, "asyncLoop2");
    __name2(asyncLoop2, "asyncLoop");
    function utf8ToBytes2(str) {
      if (typeof str !== "string")
        throw new Error("string expected");
      return new Uint8Array(new TextEncoder().encode(str));
    }
    __name(utf8ToBytes2, "utf8ToBytes2");
    __name2(utf8ToBytes2, "utf8ToBytes");
    function bytesToUtf8(bytes) {
      return new TextDecoder().decode(bytes);
    }
    __name(bytesToUtf8, "bytesToUtf8");
    __name2(bytesToUtf8, "bytesToUtf8");
    function toBytes2(data) {
      if (typeof data === "string")
        data = utf8ToBytes2(data);
      abytes2(data);
      return data;
    }
    __name(toBytes2, "toBytes2");
    __name2(toBytes2, "toBytes");
    function kdfInputToBytes2(data) {
      if (typeof data === "string")
        data = utf8ToBytes2(data);
      abytes2(data);
      return data;
    }
    __name(kdfInputToBytes2, "kdfInputToBytes2");
    __name2(kdfInputToBytes2, "kdfInputToBytes");
    function concatBytes(...arrays) {
      let sum = 0;
      for (let i = 0; i < arrays.length; i++) {
        const a = arrays[i];
        abytes2(a);
        sum += a.length;
      }
      const res = new Uint8Array(sum);
      for (let i = 0, pad = 0; i < arrays.length; i++) {
        const a = arrays[i];
        res.set(a, pad);
        pad += a.length;
      }
      return res;
    }
    __name(concatBytes, "concatBytes");
    __name2(concatBytes, "concatBytes");
    function checkOpts2(defaults, opts) {
      if (opts !== void 0 && {}.toString.call(opts) !== "[object Object]")
        throw new Error("options should be object or undefined");
      const merged = Object.assign(defaults, opts);
      return merged;
    }
    __name(checkOpts2, "checkOpts2");
    __name2(checkOpts2, "checkOpts");
    var Hash2 = class {
      static {
        __name(this, "Hash2");
      }
      static {
        __name2(this, "Hash");
      }
    };
    exports.Hash = Hash2;
    function createHasher2(hashCons) {
      const hashC = /* @__PURE__ */ __name2((msg) => hashCons().update(toBytes2(msg)).digest(), "hashC");
      const tmp = hashCons();
      hashC.outputLen = tmp.outputLen;
      hashC.blockLen = tmp.blockLen;
      hashC.create = () => hashCons();
      return hashC;
    }
    __name(createHasher2, "createHasher2");
    __name2(createHasher2, "createHasher");
    function createOptHasher(hashCons) {
      const hashC = /* @__PURE__ */ __name2((msg, opts) => hashCons(opts).update(toBytes2(msg)).digest(), "hashC");
      const tmp = hashCons({});
      hashC.outputLen = tmp.outputLen;
      hashC.blockLen = tmp.blockLen;
      hashC.create = (opts) => hashCons(opts);
      return hashC;
    }
    __name(createOptHasher, "createOptHasher");
    __name2(createOptHasher, "createOptHasher");
    function createXOFer(hashCons) {
      const hashC = /* @__PURE__ */ __name2((msg, opts) => hashCons(opts).update(toBytes2(msg)).digest(), "hashC");
      const tmp = hashCons({});
      hashC.outputLen = tmp.outputLen;
      hashC.blockLen = tmp.blockLen;
      hashC.create = (opts) => hashCons(opts);
      return hashC;
    }
    __name(createXOFer, "createXOFer");
    __name2(createXOFer, "createXOFer");
    exports.wrapConstructor = createHasher2;
    exports.wrapConstructorWithOpts = createOptHasher;
    exports.wrapXOFConstructorWithOpts = createXOFer;
    function randomBytes(bytesLength = 32) {
      if (crypto_1.crypto && typeof crypto_1.crypto.getRandomValues === "function") {
        return crypto_1.crypto.getRandomValues(new Uint8Array(bytesLength));
      }
      if (crypto_1.crypto && typeof crypto_1.crypto.randomBytes === "function") {
        return Uint8Array.from(crypto_1.crypto.randomBytes(bytesLength));
      }
      throw new Error("crypto.getRandomValues must be defined");
    }
    __name(randomBytes, "randomBytes");
    __name2(randomBytes, "randomBytes");
  }
});
var require_sha3 = __commonJS({
  "../node_modules/@noble/hashes/sha3.js"(exports) {
    "use strict";
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.shake256 = exports.shake128 = exports.keccak_512 = exports.keccak_384 = exports.keccak_256 = exports.keccak_224 = exports.sha3_512 = exports.sha3_384 = exports.sha3_256 = exports.sha3_224 = exports.Keccak = void 0;
    exports.keccakP = keccakP;
    var _u64_ts_1 = require_u64();
    var utils_ts_1 = require_utils();
    var _0n = BigInt(0);
    var _1n = BigInt(1);
    var _2n = BigInt(2);
    var _7n = BigInt(7);
    var _256n = BigInt(256);
    var _0x71n = BigInt(113);
    var SHA3_PI = [];
    var SHA3_ROTL = [];
    var _SHA3_IOTA = [];
    for (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {
      [x, y] = [y, (2 * x + 3 * y) % 5];
      SHA3_PI.push(2 * (5 * y + x));
      SHA3_ROTL.push((round + 1) * (round + 2) / 2 % 64);
      let t = _0n;
      for (let j = 0; j < 7; j++) {
        R = (R << _1n ^ (R >> _7n) * _0x71n) % _256n;
        if (R & _2n)
          t ^= _1n << (_1n << /* @__PURE__ */ BigInt(j)) - _1n;
      }
      _SHA3_IOTA.push(t);
    }
    var IOTAS = (0, _u64_ts_1.split)(_SHA3_IOTA, true);
    var SHA3_IOTA_H = IOTAS[0];
    var SHA3_IOTA_L = IOTAS[1];
    var rotlH = /* @__PURE__ */ __name2((h, l, s) => s > 32 ? (0, _u64_ts_1.rotlBH)(h, l, s) : (0, _u64_ts_1.rotlSH)(h, l, s), "rotlH");
    var rotlL = /* @__PURE__ */ __name2((h, l, s) => s > 32 ? (0, _u64_ts_1.rotlBL)(h, l, s) : (0, _u64_ts_1.rotlSL)(h, l, s), "rotlL");
    function keccakP(s, rounds = 24) {
      const B = new Uint32Array(5 * 2);
      for (let round = 24 - rounds; round < 24; round++) {
        for (let x = 0; x < 10; x++)
          B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];
        for (let x = 0; x < 10; x += 2) {
          const idx1 = (x + 8) % 10;
          const idx0 = (x + 2) % 10;
          const B0 = B[idx0];
          const B1 = B[idx0 + 1];
          const Th = rotlH(B0, B1, 1) ^ B[idx1];
          const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];
          for (let y = 0; y < 50; y += 10) {
            s[x + y] ^= Th;
            s[x + y + 1] ^= Tl;
          }
        }
        let curH = s[2];
        let curL = s[3];
        for (let t = 0; t < 24; t++) {
          const shift = SHA3_ROTL[t];
          const Th = rotlH(curH, curL, shift);
          const Tl = rotlL(curH, curL, shift);
          const PI = SHA3_PI[t];
          curH = s[PI];
          curL = s[PI + 1];
          s[PI] = Th;
          s[PI + 1] = Tl;
        }
        for (let y = 0; y < 50; y += 10) {
          for (let x = 0; x < 10; x++)
            B[x] = s[y + x];
          for (let x = 0; x < 10; x++)
            s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];
        }
        s[0] ^= SHA3_IOTA_H[round];
        s[1] ^= SHA3_IOTA_L[round];
      }
      (0, utils_ts_1.clean)(B);
    }
    __name(keccakP, "keccakP");
    __name2(keccakP, "keccakP");
    var Keccak = class _Keccak extends utils_ts_1.Hash {
      static {
        __name(this, "_Keccak");
      }
      static {
        __name2(this, "Keccak");
      }
      // NOTE: we accept arguments in bytes instead of bits here.
      constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {
        super();
        this.pos = 0;
        this.posOut = 0;
        this.finished = false;
        this.destroyed = false;
        this.enableXOF = false;
        this.blockLen = blockLen;
        this.suffix = suffix;
        this.outputLen = outputLen;
        this.enableXOF = enableXOF;
        this.rounds = rounds;
        (0, utils_ts_1.anumber)(outputLen);
        if (!(0 < blockLen && blockLen < 200))
          throw new Error("only keccak-f1600 function is supported");
        this.state = new Uint8Array(200);
        this.state32 = (0, utils_ts_1.u32)(this.state);
      }
      clone() {
        return this._cloneInto();
      }
      keccak() {
        (0, utils_ts_1.swap32IfBE)(this.state32);
        keccakP(this.state32, this.rounds);
        (0, utils_ts_1.swap32IfBE)(this.state32);
        this.posOut = 0;
        this.pos = 0;
      }
      update(data) {
        (0, utils_ts_1.aexists)(this);
        data = (0, utils_ts_1.toBytes)(data);
        (0, utils_ts_1.abytes)(data);
        const { blockLen, state } = this;
        const len = data.length;
        for (let pos = 0; pos < len; ) {
          const take = Math.min(blockLen - this.pos, len - pos);
          for (let i = 0; i < take; i++)
            state[this.pos++] ^= data[pos++];
          if (this.pos === blockLen)
            this.keccak();
        }
        return this;
      }
      finish() {
        if (this.finished)
          return;
        this.finished = true;
        const { state, suffix, pos, blockLen } = this;
        state[pos] ^= suffix;
        if ((suffix & 128) !== 0 && pos === blockLen - 1)
          this.keccak();
        state[blockLen - 1] ^= 128;
        this.keccak();
      }
      writeInto(out) {
        (0, utils_ts_1.aexists)(this, false);
        (0, utils_ts_1.abytes)(out);
        this.finish();
        const bufferOut = this.state;
        const { blockLen } = this;
        for (let pos = 0, len = out.length; pos < len; ) {
          if (this.posOut >= blockLen)
            this.keccak();
          const take = Math.min(blockLen - this.posOut, len - pos);
          out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);
          this.posOut += take;
          pos += take;
        }
        return out;
      }
      xofInto(out) {
        if (!this.enableXOF)
          throw new Error("XOF is not possible for this instance");
        return this.writeInto(out);
      }
      xof(bytes) {
        (0, utils_ts_1.anumber)(bytes);
        return this.xofInto(new Uint8Array(bytes));
      }
      digestInto(out) {
        (0, utils_ts_1.aoutput)(out, this);
        if (this.finished)
          throw new Error("digest() was already called");
        this.writeInto(out);
        this.destroy();
        return out;
      }
      digest() {
        return this.digestInto(new Uint8Array(this.outputLen));
      }
      destroy() {
        this.destroyed = true;
        (0, utils_ts_1.clean)(this.state);
      }
      _cloneInto(to) {
        const { blockLen, suffix, outputLen, rounds, enableXOF } = this;
        to || (to = new _Keccak(blockLen, suffix, outputLen, enableXOF, rounds));
        to.state32.set(this.state32);
        to.pos = this.pos;
        to.posOut = this.posOut;
        to.finished = this.finished;
        to.rounds = rounds;
        to.suffix = suffix;
        to.outputLen = outputLen;
        to.enableXOF = enableXOF;
        to.destroyed = this.destroyed;
        return to;
      }
    };
    exports.Keccak = Keccak;
    var gen = /* @__PURE__ */ __name2((suffix, blockLen, outputLen) => (0, utils_ts_1.createHasher)(() => new Keccak(blockLen, suffix, outputLen)), "gen");
    exports.sha3_224 = (() => gen(6, 144, 224 / 8))();
    exports.sha3_256 = (() => gen(6, 136, 256 / 8))();
    exports.sha3_384 = (() => gen(6, 104, 384 / 8))();
    exports.sha3_512 = (() => gen(6, 72, 512 / 8))();
    exports.keccak_224 = (() => gen(1, 144, 224 / 8))();
    exports.keccak_256 = (() => gen(1, 136, 256 / 8))();
    exports.keccak_384 = (() => gen(1, 104, 384 / 8))();
    exports.keccak_512 = (() => gen(1, 72, 512 / 8))();
    var genShake = /* @__PURE__ */ __name2((suffix, blockLen, outputLen) => (0, utils_ts_1.createXOFer)((opts = {}) => new Keccak(blockLen, suffix, opts.dkLen === void 0 ? outputLen : opts.dkLen, true)), "genShake");
    exports.shake128 = (() => genShake(31, 168, 128 / 8))();
    exports.shake256 = (() => genShake(31, 136, 256 / 8))();
  }
});
var require_src = __commonJS({
  "../node_modules/@paralleldrive/cuid2/src/index.js"(exports, module) {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    var { sha3_512: sha3 } = require_sha3();
    var defaultLength = 24;
    var bigLength = 32;
    var createEntropy = /* @__PURE__ */ __name2((length = 4, random = Math.random) => {
      let entropy = "";
      while (entropy.length < length) {
        entropy = entropy + Math.floor(random() * 36).toString(36);
      }
      return entropy;
    }, "createEntropy");
    function bufToBigInt(buf) {
      let bits = 8n;
      let value = 0n;
      for (const i of buf.values()) {
        const bi = BigInt(i);
        value = (value << bits) + bi;
      }
      return value;
    }
    __name(bufToBigInt, "bufToBigInt");
    __name2(bufToBigInt, "bufToBigInt");
    var hash = /* @__PURE__ */ __name2((input = "") => {
      return bufToBigInt(sha3(input)).toString(36).slice(1);
    }, "hash");
    var alphabet = Array.from(
      { length: 26 },
      (x, i) => String.fromCharCode(i + 97)
    );
    var randomLetter = /* @__PURE__ */ __name2((random) => alphabet[Math.floor(random() * alphabet.length)], "randomLetter");
    var createFingerprint = /* @__PURE__ */ __name2(({
      globalObj = typeof global !== "undefined" ? global : typeof window !== "undefined" ? window : {},
      random = Math.random
    } = {}) => {
      const globals = Object.keys(globalObj).toString();
      const sourceString = globals.length ? globals + createEntropy(bigLength, random) : createEntropy(bigLength, random);
      return hash(sourceString).substring(0, bigLength);
    }, "createFingerprint");
    var createCounter = /* @__PURE__ */ __name2((count) => () => {
      return count++;
    }, "createCounter");
    var initialCountMax = 476782367;
    var init2 = /* @__PURE__ */ __name2(({
      // Fallback if the user does not pass in a CSPRNG. This should be OK
      // because we don't rely solely on the random number generator for entropy.
      // We also use the host fingerprint, current time, and a session counter.
      random = Math.random,
      counter = createCounter(Math.floor(random() * initialCountMax)),
      length = defaultLength,
      fingerprint = createFingerprint({ random })
    } = {}) => {
      return /* @__PURE__ */ __name2(/* @__PURE__ */ __name(function cuid2() {
        const firstLetter = randomLetter(random);
        const time = Date.now().toString(36);
        const count = counter().toString(36);
        const salt = createEntropy(length, random);
        const hashInput = `${time + salt + count + fingerprint}`;
        return `${firstLetter + hash(hashInput).substring(1, length)}`;
      }, "cuid2"), "cuid2");
    }, "init");
    var createId3 = init2();
    var isCuid = /* @__PURE__ */ __name2((id, { minLength = 2, maxLength = bigLength } = {}) => {
      const length = id.length;
      const regex = /^[0-9a-z]+$/;
      try {
        if (typeof id === "string" && length >= minLength && length <= maxLength && regex.test(id))
          return true;
      } finally {
      }
      return false;
    }, "isCuid");
    module.exports.getConstants = () => ({ defaultLength, bigLength });
    module.exports.init = init2;
    module.exports.createId = createId3;
    module.exports.bufToBigInt = bufToBigInt;
    module.exports.createCounter = createCounter;
    module.exports.createFingerprint = createFingerprint;
    module.exports.isCuid = isCuid;
  }
});
var require_cuid2 = __commonJS({
  "../node_modules/@paralleldrive/cuid2/index.js"(exports, module) {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    var { createId: createId3, init: init2, getConstants, isCuid } = require_src();
    module.exports.createId = createId3;
    module.exports.init = init2;
    module.exports.getConstants = getConstants;
    module.exports.isCuid = isCuid;
  }
});
function getDbClient(env2) {
  if (!env2 || !env2.TURSO_DB_URL || !env2.TURSO_DB_AUTH_TOKEN) {
    throw new Error("Database environment variables are required");
  }
  return createClient({
    url: env2.TURSO_DB_URL,
    authToken: env2.TURSO_DB_AUTH_TOKEN
  });
}
__name(getDbClient, "getDbClient");
function getLibsqlDialect(env2) {
  if (!env2.TURSO_DB_URL || !env2.TURSO_DB_AUTH_TOKEN) {
    throw new Error("Database environment variables are required");
  }
  return new LibsqlDialect({
    url: env2.TURSO_DB_URL,
    authToken: env2.TURSO_DB_AUTH_TOKEN
  });
}
__name(getLibsqlDialect, "getLibsqlDialect");
function createAuthForRuntime(env2) {
  const dialect = getLibsqlDialect(env2);
  const isLocalDevelopment = env2.ENVIRONMENT === "development" || !env2.TURSO_DB_URL?.includes(".turso.io");
  return betterAuth({
    database: {
      dialect,
      type: "sqlite"
    },
    secret: env2.BETTER_AUTH_SECRET || "dev-secret-min-32-chars",
    emailAndPassword: {
      enabled: true,
      requireEmailVerification: false,
      minPasswordLength: 8
    },
    session: {
      expiresIn: 604800,
      // 7日（秒）
      updateAge: 86400,
      // 1日（秒）
      cookieCache: {
        enabled: true,
        // セッションクッキーキャッシュを有効
        maxAge: 300
        // 5分（セッション情報更新）
      },
      // freshAge: 60 * 60 * 24, // デフォルトで1日
      storeSessionInDatabase: true
      // データベースにセッション保存
    },
    // 環境に応じた設定（クッキー設定は削除してデフォルト使用）
    advanced: {
      crossSubDomainCookies: {
        enabled: false
        // 単一ドメイン用
      },
      useSecureCookies: !isLocalDevelopment,
      // 本番環境では自動的にtrue
      disableCSRFCheck: false,
      database: {
        generateId: /* @__PURE__ */ __name2(() => (0, import_cuid2.createId)(), "generateId")
        // CUID2でID生成
      }
    }
  });
}
__name(createAuthForRuntime, "createAuthForRuntime");
var import_cuid2;
var init_db = __esm({
  "api/utils/db.ts"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_web3();
    init_lib_esm3();
    init_dist5();
    import_cuid2 = __toESM(require_cuid2(), 1);
    __name2(getDbClient, "getDbClient");
    __name2(getLibsqlDialect, "getLibsqlDialect");
    __name2(createAuthForRuntime, "createAuthForRuntime");
  }
});
function safeString(value, defaultValue = "") {
  return value ? String(value) : defaultValue;
}
__name(safeString, "safeString");
function safeBoolean(value, defaultValue = false) {
  return value ? Boolean(value) : defaultValue;
}
__name(safeBoolean, "safeBoolean");
function safeDate(value, defaultValue) {
  if (!value) return defaultValue || /* @__PURE__ */ new Date();
  const date = new Date(value);
  return isNaN(date.getTime()) ? defaultValue || /* @__PURE__ */ new Date() : date;
}
__name(safeDate, "safeDate");
function transformBetterAuthUser(authUser) {
  if (typeof authUser !== "object" || authUser === null) {
    throw new Error("Invalid auth user data");
  }
  const userObj = authUser;
  return {
    id: safeString(userObj.id),
    email: safeString(userObj.email),
    emailVerified: safeBoolean(userObj.emailVerified),
    name: userObj.name ? safeString(userObj.name) : null,
    image: userObj.image ? safeString(userObj.image) : null,
    createdAt: safeDate(userObj.createdAt),
    updatedAt: safeDate(userObj.updatedAt)
  };
}
__name(transformBetterAuthUser, "transformBetterAuthUser");
var init_auth_data = __esm({
  "api/utils/auth-data.ts"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    __name2(safeString, "safeString");
    __name2(safeBoolean, "safeBoolean");
    __name2(safeDate, "safeDate");
    __name2(transformBetterAuthUser, "transformBetterAuthUser");
  }
});
async function getCurrentUser(request, env2) {
  try {
    const auth = createAuthForRuntime(env2);
    const sessionResult = await auth.api.getSession({
      headers: request.headers,
      asResponse: false
    });
    if (!sessionResult || !sessionResult.user) {
      return null;
    }
    return transformBetterAuthUser(sessionResult.user);
  } catch (error2) {
    console.error("Error getting current user:", error2);
    return null;
  }
}
__name(getCurrentUser, "getCurrentUser");
function validateEmail(email) {
  const emailRegex3 = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return emailRegex3.test(email);
}
__name(validateEmail, "validateEmail");
function validatePassword(password) {
  const errors = [];
  if (password.length < 8) {
    errors.push("\u30D1\u30B9\u30EF\u30FC\u30C9\u306F8\u6587\u5B57\u4EE5\u4E0A\u3067\u3042\u308B\u5FC5\u8981\u304C\u3042\u308A\u307E\u3059");
  }
  if (password.length > 128) {
    errors.push("\u30D1\u30B9\u30EF\u30FC\u30C9\u306F128\u6587\u5B57\u4EE5\u4E0B\u3067\u3042\u308B\u5FC5\u8981\u304C\u3042\u308A\u307E\u3059");
  }
  return {
    isValid: errors.length === 0,
    errors
  };
}
__name(validatePassword, "validatePassword");
var init_auth = __esm({
  "api/utils/auth.ts"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_db();
    init_auth_data();
    __name2(getCurrentUser, "getCurrentUser");
    __name2(validateEmail, "validateEmail");
    __name2(validatePassword, "validatePassword");
  }
});
function jsonResponse(data, status = 200) {
  return new Response(JSON.stringify(data), {
    status,
    headers: {
      "Content-Type": "application/json"
    }
  });
}
__name(jsonResponse, "jsonResponse");
function errorResponse(message2, status = 500) {
  return jsonResponse({ error: message2 }, status);
}
__name(errorResponse, "errorResponse");
function authSuccessResponse(authData, status = 200) {
  const response = {
    success: true,
    ...authData
  };
  return jsonResponse(response, status);
}
__name(authSuccessResponse, "authSuccessResponse");
function authErrorResponse(message2, status = 400) {
  const response = {
    success: false,
    authenticated: false,
    user: void 0,
    session: void 0,
    error: message2
  };
  return jsonResponse(response, status);
}
__name(authErrorResponse, "authErrorResponse");
function unauthenticatedResponse(message2 = "\u8A8D\u8A3C\u3055\u308C\u3066\u3044\u307E\u305B\u3093") {
  const response = {
    success: true,
    authenticated: false,
    user: void 0,
    session: void 0,
    message: message2
  };
  return jsonResponse(response, 200);
}
__name(unauthenticatedResponse, "unauthenticatedResponse");
var init_response = __esm({
  "api/utils/response.ts"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    __name2(jsonResponse, "jsonResponse");
    __name2(errorResponse, "errorResponse");
    __name2(authSuccessResponse, "authSuccessResponse");
    __name2(authErrorResponse, "authErrorResponse");
    __name2(unauthenticatedResponse, "unauthenticatedResponse");
  }
});
function transformEventRow(row) {
  if (typeof row !== "object" || row === null) {
    throw new Error("Invalid event row data");
  }
  const rowObj = row;
  const description = typeof rowObj?.description === "string" ? rowObj.description.replace(/\\n/g, "\n") : "";
  return {
    id: String(rowObj.id ?? ""),
    title: String(rowObj.title ?? ""),
    date: String(rowObj.date ?? ""),
    location: String(rowObj.location ?? ""),
    // description: rowObj.description ? String(rowObj.description) : '',
    description,
    image_url: rowObj.image_url ? String(rowObj.image_url) : void 0,
    capacity: rowObj.capacity != null ? Number(rowObj.capacity) : void 0,
    creator_id: rowObj.creator_id ? String(rowObj.creator_id) : null,
    //  creator_id の処理、undefined → null に変更
    created_at: rowObj.created_at != null ? Number(rowObj.created_at) : void 0
  };
}
__name(transformEventRow, "transformEventRow");
var init_data = __esm({
  "api/utils/data.ts"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    __name2(transformEventRow, "transformEventRow");
  }
});
async function validateEventAccess(context, action = "edit") {
  const user = await getCurrentUser(context.request, context.env);
  if (!user) {
    return errorResponse("\u8A8D\u8A3C\u304C\u5FC5\u8981\u3067\u3059", 401);
  }
  const url = new URL(context.request.url);
  const pathParts = url.pathname.split("/");
  const eventId = pathParts[pathParts.indexOf("events") + 1];
  if (!eventId) {
    return errorResponse("\u30A4\u30D9\u30F3\u30C8ID\u304C\u6307\u5B9A\u3055\u308C\u3066\u3044\u307E\u305B\u3093", 400);
  }
  const client = getDbClient(context.env);
  const existingEvent = await client.execute({
    sql: "SELECT * FROM events WHERE id = ?",
    args: [eventId]
  });
  if (existingEvent.rows.length === 0) {
    return errorResponse("\u30A4\u30D9\u30F3\u30C8\u304C\u898B\u3064\u304B\u308A\u307E\u305B\u3093", 404);
  }
  const eventRow = existingEvent.rows[0];
  if (eventRow.creator_id !== user.id) {
    const actionText = action === "edit" ? "\u7DE8\u96C6" : "\u524A\u9664";
    return errorResponse(`\u3053\u306E\u30A4\u30D9\u30F3\u30C8\u3092${actionText}\u3059\u308B\u6A29\u9650\u304C\u3042\u308A\u307E\u305B\u3093`, 403);
  }
  const event = transformEventRow(eventRow);
  return {
    user,
    event,
    eventId,
    client
  };
}
__name(validateEventAccess, "validateEventAccess");
function isEventAuthError(result) {
  return result instanceof Response;
}
__name(isEventAuthError, "isEventAuthError");
var init_event_auth = __esm({
  "api/utils/event-auth.ts"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_auth();
    init_db();
    init_response();
    init_data();
    __name2(validateEventAccess, "validateEventAccess");
    __name2(isEventAuthError, "isEventAuthError");
  }
});
async function onRequest(context) {
  if (context.request.method !== "DELETE") {
    return errorResponse("Method not allowed", 405);
  }
  try {
    const authResult = await validateEventAccess(context, "delete");
    if (isEventAuthError(authResult)) {
      return authResult;
    }
    const { eventId, client } = authResult;
    const attendeeCount = await client.execute({
      sql: "SELECT COUNT(*) as count FROM attendees WHERE event_id = ?",
      args: [eventId]
    });
    const count = Number(attendeeCount.rows[0].count);
    if (count > 0) {
      return errorResponse(`\u53C2\u52A0\u8005\u304C${count}\u4EBA\u3044\u308B\u305F\u3081\u524A\u9664\u3067\u304D\u307E\u305B\u3093`, 400);
    }
    await client.execute({
      sql: "DELETE FROM events WHERE id = ?",
      args: [eventId]
    });
    return jsonResponse({
      message: "\u30A4\u30D9\u30F3\u30C8\u304C\u524A\u9664\u3055\u308C\u307E\u3057\u305F",
      eventId
    });
  } catch (error2) {
    console.error("Error deleting event:", error2);
    return errorResponse("\u30A4\u30D9\u30F3\u30C8\u306E\u524A\u9664\u4E2D\u306B\u30A8\u30E9\u30FC\u304C\u767A\u751F\u3057\u307E\u3057\u305F", 500);
  }
}
__name(onRequest, "onRequest");
var init_delete = __esm({
  "api/events/[id]/delete.ts"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_event_auth();
    init_response();
    __name2(onRequest, "onRequest");
  }
});
function validateEventData(data) {
  const errors = [];
  if (!data.title?.trim()) {
    errors.push("\u30BF\u30A4\u30C8\u30EB\u306F\u5FC5\u9808\u3067\u3059");
  }
  if (!data.date?.trim()) {
    errors.push("\u958B\u50AC\u65E5\u6642\u306F\u5FC5\u9808\u3067\u3059");
  }
  if (!data.location?.trim()) {
    errors.push("\u958B\u50AC\u5834\u6240\u306F\u5FC5\u9808\u3067\u3059");
  }
  if (data.capacity && data.capacity < 1) {
    errors.push("\u5B9A\u54E1\u306F1\u4EBA\u4EE5\u4E0A\u306B\u8A2D\u5B9A\u3057\u3066\u304F\u3060\u3055\u3044");
  }
  if (data.title && data.title.length > 100) {
    errors.push("\u30BF\u30A4\u30C8\u30EB\u306F100\u6587\u5B57\u4EE5\u5185\u3067\u5165\u529B\u3057\u3066\u304F\u3060\u3055\u3044");
  }
  if (data.description && data.description.length > 1e3) {
    errors.push("\u8AAC\u660E\u306F1000\u6587\u5B57\u4EE5\u5185\u3067\u5165\u529B\u3057\u3066\u304F\u3060\u3055\u3044");
  }
  return errors;
}
__name(validateEventData, "validateEventData");
function validatePartialEventData(data) {
  const errors = [];
  if (Object.keys(data).length === 0) {
    errors.push("\u66F4\u65B0\u3059\u308B\u9805\u76EE\u304C\u3042\u308A\u307E\u305B\u3093");
    return errors;
  }
  if (data.title !== void 0 && !data.title.trim()) {
    errors.push("\u30BF\u30A4\u30C8\u30EB\u306F\u5FC5\u9808\u3067\u3059");
  }
  if (data.date !== void 0 && !data.date.trim()) {
    errors.push("\u958B\u50AC\u65E5\u6642\u306F\u5FC5\u9808\u3067\u3059");
  }
  if (data.location !== void 0 && !data.location.trim()) {
    errors.push("\u958B\u50AC\u5834\u6240\u306F\u5FC5\u9808\u3067\u3059");
  }
  if (data.capacity !== void 0 && data.capacity < 1) {
    errors.push("\u5B9A\u54E1\u306F1\u4EBA\u4EE5\u4E0A\u306B\u8A2D\u5B9A\u3057\u3066\u304F\u3060\u3055\u3044");
  }
  if (data.title !== void 0 && data.title.length > 100) {
    errors.push("\u30BF\u30A4\u30C8\u30EB\u306F100\u6587\u5B57\u4EE5\u5185\u3067\u5165\u529B\u3057\u3066\u304F\u3060\u3055\u3044");
  }
  if (data.description !== void 0 && data.description.length > 1e3) {
    errors.push("\u8AAC\u660E\u306F1000\u6587\u5B57\u4EE5\u5185\u3067\u5165\u529B\u3057\u3066\u304F\u3060\u3055\u3044");
  }
  return errors;
}
__name(validatePartialEventData, "validatePartialEventData");
var init_event_validation = __esm({
  "api/utils/event-validation.ts"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    __name2(validateEventData, "validateEventData");
    __name2(validatePartialEventData, "validatePartialEventData");
  }
});
async function onRequest2(context) {
  if (context.request.method !== "PUT") {
    return errorResponse("Method not allowed", 405);
  }
  try {
    const authResult = await validateEventAccess(context, "edit");
    if (isEventAuthError(authResult)) {
      return authResult;
    }
    const { event, eventId, client } = authResult;
    const body = await context.request.json();
    const validationErrors = validatePartialEventData(body);
    if (validationErrors.length > 0) {
      return errorResponse(validationErrors.join(", "), 400);
    }
    await client.execute({
      sql: `UPDATE events 
            SET title = ?, date = ?, location = ?, description = ?, image_url = ?, capacity = ?
            WHERE id = ?`,
      args: [
        body.title ?? String(event.title),
        body.date ?? String(event.date),
        body.location ?? String(event.location),
        body.description ?? String(event.description || ""),
        body.image_url ?? (event.image_url ? String(event.image_url) : null),
        body.capacity ?? (event.capacity ? Number(event.capacity) : null),
        eventId
      ]
    });
    const updatedEvent = await client.execute({
      sql: "SELECT * FROM events WHERE id = ?",
      args: [eventId]
    });
    return jsonResponse({
      message: "\u30A4\u30D9\u30F3\u30C8\u304C\u66F4\u65B0\u3055\u308C\u307E\u3057\u305F",
      eventId,
      event: updatedEvent.rows[0]
    });
  } catch (error2) {
    console.error("Error updating event:", error2);
    return errorResponse("\u30A4\u30D9\u30F3\u30C8\u306E\u66F4\u65B0\u4E2D\u306B\u30A8\u30E9\u30FC\u304C\u767A\u751F\u3057\u307E\u3057\u305F", 500);
  }
}
__name(onRequest2, "onRequest2");
var init_update = __esm({
  "api/events/[id]/update.ts"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_event_validation();
    init_event_auth();
    init_response();
    __name2(onRequest2, "onRequest");
  }
});
async function onRequest3(context) {
  if (context.request.method !== "GET") {
    return authErrorResponse("Method not allowed", 405);
  }
  try {
    const auth = createAuthForRuntime(context.env);
    console.log("=== Better Auth Session Check (Enhanced) ===");
    const sessionResult = await auth.api.getSession({
      headers: context.request.headers,
      asResponse: false
      // オブジェクトとして取得
    });
    console.log("Better Auth getSession result:", {
      hasUser: !!sessionResult?.user,
      hasSession: !!sessionResult?.session,
      userEmail: sessionResult?.user?.email,
      sessionId: sessionResult?.session?.id
    });
    if (sessionResult?.session && sessionResult?.user) {
      console.log("\u2705 Better Auth session found!");
      const user = transformBetterAuthUser(sessionResult.user);
      const session = {
        id: sessionResult.session.id,
        userId: sessionResult.session.userId,
        expiresAt: new Date(sessionResult.session.expiresAt),
        user
      };
      return authSuccessResponse({
        authenticated: true,
        user,
        session,
        message: "\u8A8D\u8A3C\u6E08\u307F\u3067\u3059\uFF08Better Auth\uFF09"
      });
    }
    console.log(
      "\u26A0\uFE0F Better Auth session not found, falling back to direct DB check"
    );
    const cookieHeader = context.request.headers.get("Cookie");
    let sessionToken = null;
    if (cookieHeader) {
      const cookies = cookieHeader.split(";").map((c) => c.trim());
      const sessionCookie = cookies.find(
        (c) => c.startsWith("better-auth.session_token=")
      );
      if (sessionCookie) {
        sessionToken = sessionCookie.split("=")[1];
      }
    }
    if (!sessionToken) {
      return unauthenticatedResponse("\u8A8D\u8A3C\u3055\u308C\u3066\u3044\u307E\u305B\u3093");
    }
    console.log("=== Direct DB Session Check (Fallback) ===");
    const dbClient = getDbClient(context.env);
    const dbSessionResult = await dbClient.execute({
      sql: `SELECT 
              s.id as session_id, s.userId, s.token, s.expiresAt,
              u.id as user_id, u.email, u.emailVerified, u.name, u.image, 
              u.createdAt as user_createdAt, u.updatedAt as user_updatedAt
            FROM session s 
            JOIN user u ON s.userId = u.id 
            WHERE s.token = ? AND s.expiresAt > datetime("now")`,
      args: [sessionToken]
    });
    if (dbSessionResult.rows.length > 0) {
      const row = dbSessionResult.rows[0];
      console.log("\u2705 Session found in DB (fallback)");
      const user = transformBetterAuthUser({
        id: row.user_id,
        email: row.email,
        emailVerified: row.emailVerified,
        name: row.name,
        image: row.image,
        createdAt: row.user_createdAt,
        updatedAt: row.user_updatedAt
      });
      const session = {
        id: String(row.session_id),
        userId: String(row.userId),
        expiresAt: new Date(row.expiresAt),
        user
      };
      return authSuccessResponse({
        authenticated: true,
        user,
        session,
        message: "\u8A8D\u8A3C\u6E08\u307F\u3067\u3059\uFF08DB\u76F4\u63A5\u78BA\u8A8D\uFF09"
      });
    }
    console.log("\u274C No session found");
    return unauthenticatedResponse("\u30BB\u30C3\u30B7\u30E7\u30F3\u304C\u7121\u52B9\u3067\u3059");
  } catch (error2) {
    console.error("Session check error:", error2);
    if (error2 instanceof APIError) {
      console.log("APIError in getSession:", {
        status: error2.status,
        statusCode: error2.statusCode,
        message: error2.message,
        body: error2.body
      });
    }
    return authErrorResponse("\u30BB\u30C3\u30B7\u30E7\u30F3\u78BA\u8A8D\u4E2D\u306B\u30A8\u30E9\u30FC\u304C\u767A\u751F\u3057\u307E\u3057\u305F", 500);
  }
}
__name(onRequest3, "onRequest3");
var init_session = __esm({
  "api/auth/session.ts"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_db();
    init_response();
    init_api3();
    init_auth_data();
    __name2(onRequest3, "onRequest");
  }
});
async function onRequest4(context) {
  if (context.request.method !== "POST") {
    return authErrorResponse("Method not allowed", 405);
  }
  try {
    const auth = createAuthForRuntime(context.env);
    const body = await context.request.json();
    console.log("Login attempt for:", body.email);
    if (!body.email || !body.password) {
      return authErrorResponse("\u30E1\u30FC\u30EB\u30A2\u30C9\u30EC\u30B9\u3068\u30D1\u30B9\u30EF\u30FC\u30C9\u306F\u5FC5\u9808\u3067\u3059", 400);
    }
    if (!validateEmail(body.email)) {
      return authErrorResponse("\u6709\u52B9\u306A\u30E1\u30FC\u30EB\u30A2\u30C9\u30EC\u30B9\u3092\u5165\u529B\u3057\u3066\u304F\u3060\u3055\u3044", 400);
    }
    console.log("Attempting Better Auth signInEmail with returnHeaders...");
    const result = await auth.api.signInEmail({
      body: {
        email: body.email,
        password: body.password
      },
      headers: context.request.headers,
      returnHeaders: true
      // ← これが重要！
    });
    console.log("Better Auth signInEmail result:", {
      hasResponse: !!result.response,
      hasUser: !!result.response?.user,
      userEmail: result.response?.user?.email,
      hasToken: !!result.response?.token,
      hasHeaders: !!result.headers
    });
    if (!result?.response || !result.response.user) {
      return authErrorResponse(
        "\u30E1\u30FC\u30EB\u30A2\u30C9\u30EC\u30B9\u307E\u305F\u306F\u30D1\u30B9\u30EF\u30FC\u30C9\u304C\u9593\u9055\u3063\u3066\u3044\u307E\u3059",
        401
      );
    }
    const user = transformBetterAuthUser(result.response.user);
    const session = void 0;
    console.log("Extracted data:", {
      hasUser: !!user,
      hasSession: !!session,
      token: result.response.token?.substring(0, 10) + "..."
    });
    const response = authSuccessResponse({
      authenticated: true,
      user,
      session,
      message: "\u30ED\u30B0\u30A4\u30F3\u3057\u307E\u3057\u305F"
    });
    if (result.headers) {
      const setCookieHeader = result.headers.get("set-cookie");
      if (setCookieHeader) {
        console.log("Setting cookies from Better Auth:", setCookieHeader);
        response.headers.set("Set-Cookie", setCookieHeader);
      }
    }
    return response;
  } catch (error2) {
    console.error("Sign in error:", error2);
    if (error2 instanceof APIError) {
      console.log("APIError details:", {
        status: error2.status,
        statusCode: error2.statusCode,
        message: error2.message,
        body: error2.body
      });
      if (error2.statusCode === 401 || error2.message.includes("invalid credentials") || error2.message.includes("Invalid credentials")) {
        return authErrorResponse(
          "\u30E1\u30FC\u30EB\u30A2\u30C9\u30EC\u30B9\u307E\u305F\u306F\u30D1\u30B9\u30EF\u30FC\u30C9\u304C\u9593\u9055\u3063\u3066\u3044\u307E\u3059",
          401
        );
      }
      return authErrorResponse(error2.message, error2.statusCode || 400);
    }
    if (error2 instanceof Error) {
      return authErrorResponse(error2.message, 400);
    }
    return authErrorResponse("\u30ED\u30B0\u30A4\u30F3\u4E2D\u306B\u30A8\u30E9\u30FC\u304C\u767A\u751F\u3057\u307E\u3057\u305F", 500);
  }
}
__name(onRequest4, "onRequest4");
var init_sign_in = __esm({
  "api/auth/sign-in.ts"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_db();
    init_response();
    init_auth();
    init_api3();
    init_auth_data();
    __name2(onRequest4, "onRequest");
  }
});
async function onRequest5(context) {
  if (context.request.method !== "POST") {
    return authErrorResponse("Method not allowed", 405);
  }
  try {
    const auth = createAuthForRuntime(context.env);
    console.log("=== Better Auth Sign Out (Enhanced) ===");
    const signOutResult = await auth.api.signOut({
      headers: context.request.headers,
      returnHeaders: true
      // ← これが重要！
    });
    console.log("Better Auth signOut result:", {
      success: !!signOutResult,
      hasHeaders: !!signOutResult?.headers
    });
    const response = authSuccessResponse({
      authenticated: false,
      user: void 0,
      session: void 0,
      message: "\u30ED\u30B0\u30A2\u30A6\u30C8\u3057\u307E\u3057\u305F"
    });
    if (signOutResult?.headers) {
      const setCookieHeader = signOutResult.headers.get("set-cookie");
      if (setCookieHeader) {
        console.log("Setting cookie deletion from Better Auth:", setCookieHeader);
        response.headers.set("Set-Cookie", setCookieHeader);
      }
    } else {
      console.log("Fallback: Manual cookie deletion");
      response.headers.set("Set-Cookie", "better-auth.session_token=; Path=/; HttpOnly; SameSite=Lax; Max-Age=0");
    }
    return response;
  } catch (error2) {
    console.error("Sign out error:", error2);
    if (error2 instanceof APIError) {
      console.log("APIError in signOut, falling back to manual cleanup:", {
        status: error2.status,
        statusCode: error2.statusCode,
        message: error2.message
      });
      try {
        const cookieHeader = context.request.headers.get("Cookie");
        let sessionToken = null;
        if (cookieHeader) {
          const cookies = cookieHeader.split(";").map((c) => c.trim());
          const sessionCookie = cookies.find((c) => c.startsWith("better-auth.session_token="));
          if (sessionCookie) {
            sessionToken = sessionCookie.split("=")[1];
          }
        }
        if (sessionToken) {
          const dbClient = getDbClient(context.env);
          await dbClient.execute({
            sql: "DELETE FROM session WHERE token = ?",
            args: [sessionToken]
          });
          console.log("\u2705 Session manually deleted from database");
        }
      } catch (dbError) {
        console.error("Failed to manually delete session:", dbError);
      }
    }
    const response = authSuccessResponse({
      authenticated: false,
      user: void 0,
      session: void 0,
      message: "\u30ED\u30B0\u30A2\u30A6\u30C8\u3057\u307E\u3057\u305F"
    });
    response.headers.set("Set-Cookie", "better-auth.session_token=; Path=/; HttpOnly; SameSite=Lax; Max-Age=0");
    return response;
  }
}
__name(onRequest5, "onRequest5");
var init_sign_out = __esm({
  "api/auth/sign-out.ts"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_db();
    init_response();
    init_api3();
    __name2(onRequest5, "onRequest");
  }
});
async function onRequest6(context) {
  if (context.request.method !== "POST") {
    return authErrorResponse("Method not allowed", 405);
  }
  try {
    const auth = createAuthForRuntime(context.env);
    const body = await context.request.json();
    console.log("Registration attempt for:", body.email);
    if (!body.email || !body.password || !body.name) {
      return authErrorResponse(
        "\u30E1\u30FC\u30EB\u30A2\u30C9\u30EC\u30B9\u3001\u30D1\u30B9\u30EF\u30FC\u30C9\u3001\u540D\u524D\u306F\u5FC5\u9808\u3067\u3059",
        400
      );
    }
    if (!validateEmail(body.email)) {
      return authErrorResponse("\u6709\u52B9\u306A\u30E1\u30FC\u30EB\u30A2\u30C9\u30EC\u30B9\u3092\u5165\u529B\u3057\u3066\u304F\u3060\u3055\u3044", 400);
    }
    const passwordValidation = validatePassword(body.password);
    if (!passwordValidation.isValid) {
      return authErrorResponse(passwordValidation.errors.join(", "), 400);
    }
    console.log("Attempting Better Auth signUpEmail with returnHeaders...");
    const result = await auth.api.signUpEmail({
      body: {
        email: body.email,
        password: body.password,
        name: body.name
      },
      headers: context.request.headers,
      returnHeaders: true
      // ← これが重要！
    });
    console.log("Better Auth signUpEmail result:", {
      hasResponse: !!result.response,
      hasUser: !!result.response?.user,
      userEmail: result.response?.user?.email,
      hasToken: !!result.response?.token,
      hasHeaders: !!result.headers
    });
    if (!result?.response || !result.response.user) {
      return authErrorResponse("\u30E6\u30FC\u30B6\u30FC\u767B\u9332\u306B\u5931\u6557\u3057\u307E\u3057\u305F", 400);
    }
    const user = transformBetterAuthUser(result.response.user);
    const session = void 0;
    console.log("Extracted data:", {
      hasUser: !!user,
      hasSession: !!session,
      token: result.response.token?.substring(0, 10) + "..."
    });
    const response = authSuccessResponse({
      authenticated: true,
      user,
      session,
      message: "\u30E6\u30FC\u30B6\u30FC\u767B\u9332\u304C\u5B8C\u4E86\u3057\u307E\u3057\u305F"
    });
    if (result.headers) {
      const setCookieHeader = result.headers.get("set-cookie");
      if (setCookieHeader) {
        console.log("Setting cookies from Better Auth:", setCookieHeader);
        response.headers.set("Set-Cookie", setCookieHeader);
      }
    }
    return response;
  } catch (error2) {
    console.error("Sign up error:", error2);
    if (error2 instanceof APIError) {
      console.log("APIError details:", {
        status: error2.status,
        statusCode: error2.statusCode,
        message: error2.message,
        body: error2.body
      });
      if (error2.statusCode === 409 || error2.message.includes("already exists") || error2.message.includes("duplicate") || error2.message.includes("UNIQUE constraint failed")) {
        return authErrorResponse(
          "\u3053\u306E\u30E1\u30FC\u30EB\u30A2\u30C9\u30EC\u30B9\u306F\u65E2\u306B\u767B\u9332\u3055\u308C\u3066\u3044\u307E\u3059",
          409
        );
      }
      return authErrorResponse(error2.message, error2.statusCode || 400);
    }
    if (error2 instanceof Error) {
      if (error2.message.includes("UNIQUE constraint failed")) {
        return authErrorResponse(
          "\u3053\u306E\u30E1\u30FC\u30EB\u30A2\u30C9\u30EC\u30B9\u306F\u65E2\u306B\u767B\u9332\u3055\u308C\u3066\u3044\u307E\u3059",
          409
        );
      }
      return authErrorResponse(error2.message, 400);
    }
    return authErrorResponse("\u30E6\u30FC\u30B6\u30FC\u767B\u9332\u4E2D\u306B\u30A8\u30E9\u30FC\u304C\u767A\u751F\u3057\u307E\u3057\u305F", 500);
  }
}
__name(onRequest6, "onRequest6");
var init_sign_up = __esm({
  "api/auth/sign-up.ts"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_db();
    init_response();
    init_auth();
    init_api3();
    init_auth_data();
    __name2(onRequest6, "onRequest");
  }
});
async function onRequest7(context) {
  if (context.request.method !== "POST") {
    return errorResponse("Method not allowed", 405);
  }
  try {
    const user = await getCurrentUser(context.request, context.env);
    if (!user) {
      return errorResponse("\u8A8D\u8A3C\u304C\u5FC5\u8981\u3067\u3059", 401);
    }
    const body = await context.request.json();
    const validationErrors = validateEventData(body);
    if (validationErrors.length > 0) {
      return errorResponse(validationErrors.join(", "), 400);
    }
    const client = getDbClient(context.env);
    const eventId = (0, import_cuid22.createId)();
    await client.execute({
      sql: `INSERT INTO events (id, title, date, location, description, image_url, capacity, creator_id) 
            VALUES (?, ?, ?, ?, ?, ?, ?, ?)`,
      args: [
        eventId,
        body.title,
        body.date,
        body.location,
        body.description || "",
        body.image_url || null,
        body.capacity || null,
        user.id
      ]
    });
    return jsonResponse({
      message: "\u30A4\u30D9\u30F3\u30C8\u304C\u4F5C\u6210\u3055\u308C\u307E\u3057\u305F",
      eventId,
      event: {
        id: eventId,
        ...body,
        creator_id: user.id,
        attendees: 0,
        created_at: Math.floor(Date.now() / 1e3)
      }
    }, 201);
  } catch (error2) {
    console.error("Error creating event:", error2);
    return errorResponse("\u30A4\u30D9\u30F3\u30C8\u306E\u4F5C\u6210\u4E2D\u306B\u30A8\u30E9\u30FC\u304C\u767A\u751F\u3057\u307E\u3057\u305F", 500);
  }
}
__name(onRequest7, "onRequest7");
var import_cuid22;
var init_create = __esm({
  "api/events/create.ts"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_db();
    init_auth();
    init_event_validation();
    init_response();
    import_cuid22 = __toESM(require_cuid2(), 1);
    __name2(onRequest7, "onRequest");
  }
});
async function onRequest8(context) {
  try {
    const url = new URL(context.request.url);
    const id = url.pathname.split("/").pop();
    if (!id) {
      return errorResponse("\u30A4\u30D9\u30F3\u30C8ID\u304C\u6307\u5B9A\u3055\u308C\u3066\u3044\u307E\u305B\u3093", 400);
    }
    const client = getDbClient(context.env);
    const eventResult = await client.execute({
      sql: "SELECT * FROM events WHERE id = ?",
      args: [id]
    });
    if (eventResult.rows.length === 0) {
      return errorResponse("\u30A4\u30D9\u30F3\u30C8\u304C\u898B\u3064\u304B\u308A\u307E\u305B\u3093", 404);
    }
    const attendeesResult = await client.execute({
      sql: "SELECT COUNT(*) as count FROM attendees WHERE event_id = ?",
      args: [id]
    });
    const event = transformEventRow(eventResult.rows[0]);
    const attendees = Number(attendeesResult.rows[0].count);
    return jsonResponse({
      ...event,
      attendees
    });
  } catch (error2) {
    console.error(`Error fetching event:`, error2);
    return errorResponse("\u30A4\u30D9\u30F3\u30C8\u306E\u53D6\u5F97\u4E2D\u306B\u30A8\u30E9\u30FC\u304C\u767A\u751F\u3057\u307E\u3057\u305F", 500);
  }
}
__name(onRequest8, "onRequest8");
var init_id = __esm({
  "api/events/[id].ts"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_db();
    init_response();
    init_data();
    __name2(onRequest8, "onRequest");
  }
});
async function onRequest9(context) {
  try {
    const client = getDbClient(context.env);
    const eventsResult = await client.execute("SELECT * FROM events");
    const attendeesResult = await client.execute(
      "SELECT event_id, COUNT(*) as count FROM attendees GROUP BY event_id"
    );
    const attendeesMap = /* @__PURE__ */ new Map();
    for (const row of attendeesResult.rows) {
      const eventId = String(row.event_id);
      attendeesMap.set(eventId, Number(row.count));
    }
    const events = eventsResult.rows.map((row) => {
      const event = transformEventRow(row);
      const attendees = attendeesMap.get(event.id) || 0;
      return {
        ...event,
        attendees
      };
    });
    return jsonResponse(events);
  } catch (error2) {
    console.error("Error fetching events:", error2);
    return errorResponse("\u30A4\u30D9\u30F3\u30C8\u306E\u53D6\u5F97\u4E2D\u306B\u30A8\u30E9\u30FC\u304C\u767A\u751F\u3057\u307E\u3057\u305F", 500);
  }
}
__name(onRequest9, "onRequest9");
var init_events = __esm({
  "api/events.ts"() {
    init_functionsRoutes_0_35485157297900294();
    init_strip_cf_connecting_ip_header();
    init_db();
    init_response();
    init_data();
    __name2(onRequest9, "onRequest");
  }
});
var routes;
var init_functionsRoutes_0_35485157297900294 = __esm({
  "../.wrangler/tmp/pages-gZIvIM/functionsRoutes-0.35485157297900294.mjs"() {
    init_delete();
    init_update();
    init_session();
    init_sign_in();
    init_sign_out();
    init_sign_up();
    init_create();
    init_id();
    init_events();
    routes = [
      {
        routePath: "/api/events/:id/delete",
        mountPath: "/api/events/:id",
        method: "",
        middlewares: [],
        modules: [onRequest]
      },
      {
        routePath: "/api/events/:id/update",
        mountPath: "/api/events/:id",
        method: "",
        middlewares: [],
        modules: [onRequest2]
      },
      {
        routePath: "/api/auth/session",
        mountPath: "/api/auth",
        method: "",
        middlewares: [],
        modules: [onRequest3]
      },
      {
        routePath: "/api/auth/sign-in",
        mountPath: "/api/auth",
        method: "",
        middlewares: [],
        modules: [onRequest4]
      },
      {
        routePath: "/api/auth/sign-out",
        mountPath: "/api/auth",
        method: "",
        middlewares: [],
        modules: [onRequest5]
      },
      {
        routePath: "/api/auth/sign-up",
        mountPath: "/api/auth",
        method: "",
        middlewares: [],
        modules: [onRequest6]
      },
      {
        routePath: "/api/events/create",
        mountPath: "/api/events",
        method: "",
        middlewares: [],
        modules: [onRequest7]
      },
      {
        routePath: "/api/events/:id",
        mountPath: "/api/events",
        method: "",
        middlewares: [],
        modules: [onRequest8]
      },
      {
        routePath: "/api/events",
        mountPath: "/api",
        method: "",
        middlewares: [],
        modules: [onRequest9]
      }
    ];
  }
});
init_functionsRoutes_0_35485157297900294();
init_strip_cf_connecting_ip_header();
init_functionsRoutes_0_35485157297900294();
init_strip_cf_connecting_ip_header();
init_functionsRoutes_0_35485157297900294();
init_strip_cf_connecting_ip_header();
init_functionsRoutes_0_35485157297900294();
init_strip_cf_connecting_ip_header();
function lexer(str) {
  var tokens = [];
  var i = 0;
  while (i < str.length) {
    var char = str[i];
    if (char === "*" || char === "+" || char === "?") {
      tokens.push({ type: "MODIFIER", index: i, value: str[i++] });
      continue;
    }
    if (char === "\\") {
      tokens.push({ type: "ESCAPED_CHAR", index: i++, value: str[i++] });
      continue;
    }
    if (char === "{") {
      tokens.push({ type: "OPEN", index: i, value: str[i++] });
      continue;
    }
    if (char === "}") {
      tokens.push({ type: "CLOSE", index: i, value: str[i++] });
      continue;
    }
    if (char === ":") {
      var name = "";
      var j = i + 1;
      while (j < str.length) {
        var code = str.charCodeAt(j);
        if (
          // `0-9`
          code >= 48 && code <= 57 || // `A-Z`
          code >= 65 && code <= 90 || // `a-z`
          code >= 97 && code <= 122 || // `_`
          code === 95
        ) {
          name += str[j++];
          continue;
        }
        break;
      }
      if (!name)
        throw new TypeError("Missing parameter name at ".concat(i));
      tokens.push({ type: "NAME", index: i, value: name });
      i = j;
      continue;
    }
    if (char === "(") {
      var count = 1;
      var pattern = "";
      var j = i + 1;
      if (str[j] === "?") {
        throw new TypeError('Pattern cannot start with "?" at '.concat(j));
      }
      while (j < str.length) {
        if (str[j] === "\\") {
          pattern += str[j++] + str[j++];
          continue;
        }
        if (str[j] === ")") {
          count--;
          if (count === 0) {
            j++;
            break;
          }
        } else if (str[j] === "(") {
          count++;
          if (str[j + 1] !== "?") {
            throw new TypeError("Capturing groups are not allowed at ".concat(j));
          }
        }
        pattern += str[j++];
      }
      if (count)
        throw new TypeError("Unbalanced pattern at ".concat(i));
      if (!pattern)
        throw new TypeError("Missing pattern at ".concat(i));
      tokens.push({ type: "PATTERN", index: i, value: pattern });
      i = j;
      continue;
    }
    tokens.push({ type: "CHAR", index: i, value: str[i++] });
  }
  tokens.push({ type: "END", index: i, value: "" });
  return tokens;
}
__name(lexer, "lexer");
__name2(lexer, "lexer");
function parse2(str, options) {
  if (options === void 0) {
    options = {};
  }
  var tokens = lexer(str);
  var _a = options.prefixes, prefixes = _a === void 0 ? "./" : _a, _b = options.delimiter, delimiter = _b === void 0 ? "/#?" : _b;
  var result = [];
  var key = 0;
  var i = 0;
  var path = "";
  var tryConsume = /* @__PURE__ */ __name2(function(type) {
    if (i < tokens.length && tokens[i].type === type)
      return tokens[i++].value;
  }, "tryConsume");
  var mustConsume = /* @__PURE__ */ __name2(function(type) {
    var value2 = tryConsume(type);
    if (value2 !== void 0)
      return value2;
    var _a2 = tokens[i], nextType = _a2.type, index = _a2.index;
    throw new TypeError("Unexpected ".concat(nextType, " at ").concat(index, ", expected ").concat(type));
  }, "mustConsume");
  var consumeText = /* @__PURE__ */ __name2(function() {
    var result2 = "";
    var value2;
    while (value2 = tryConsume("CHAR") || tryConsume("ESCAPED_CHAR")) {
      result2 += value2;
    }
    return result2;
  }, "consumeText");
  var isSafe = /* @__PURE__ */ __name2(function(value2) {
    for (var _i = 0, delimiter_1 = delimiter; _i < delimiter_1.length; _i++) {
      var char2 = delimiter_1[_i];
      if (value2.indexOf(char2) > -1)
        return true;
    }
    return false;
  }, "isSafe");
  var safePattern = /* @__PURE__ */ __name2(function(prefix2) {
    var prev = result[result.length - 1];
    var prevText = prefix2 || (prev && typeof prev === "string" ? prev : "");
    if (prev && !prevText) {
      throw new TypeError('Must have text between two parameters, missing text after "'.concat(prev.name, '"'));
    }
    if (!prevText || isSafe(prevText))
      return "[^".concat(escapeString(delimiter), "]+?");
    return "(?:(?!".concat(escapeString(prevText), ")[^").concat(escapeString(delimiter), "])+?");
  }, "safePattern");
  while (i < tokens.length) {
    var char = tryConsume("CHAR");
    var name = tryConsume("NAME");
    var pattern = tryConsume("PATTERN");
    if (name || pattern) {
      var prefix = char || "";
      if (prefixes.indexOf(prefix) === -1) {
        path += prefix;
        prefix = "";
      }
      if (path) {
        result.push(path);
        path = "";
      }
      result.push({
        name: name || key++,
        prefix,
        suffix: "",
        pattern: pattern || safePattern(prefix),
        modifier: tryConsume("MODIFIER") || ""
      });
      continue;
    }
    var value = char || tryConsume("ESCAPED_CHAR");
    if (value) {
      path += value;
      continue;
    }
    if (path) {
      result.push(path);
      path = "";
    }
    var open = tryConsume("OPEN");
    if (open) {
      var prefix = consumeText();
      var name_1 = tryConsume("NAME") || "";
      var pattern_1 = tryConsume("PATTERN") || "";
      var suffix = consumeText();
      mustConsume("CLOSE");
      result.push({
        name: name_1 || (pattern_1 ? key++ : ""),
        pattern: name_1 && !pattern_1 ? safePattern(prefix) : pattern_1,
        prefix,
        suffix,
        modifier: tryConsume("MODIFIER") || ""
      });
      continue;
    }
    mustConsume("END");
  }
  return result;
}
__name(parse2, "parse2");
__name2(parse2, "parse");
function match(str, options) {
  var keys = [];
  var re = pathToRegexp(str, keys, options);
  return regexpToFunction(re, keys, options);
}
__name(match, "match");
__name2(match, "match");
function regexpToFunction(re, keys, options) {
  if (options === void 0) {
    options = {};
  }
  var _a = options.decode, decode4 = _a === void 0 ? function(x) {
    return x;
  } : _a;
  return function(pathname) {
    var m = re.exec(pathname);
    if (!m)
      return false;
    var path = m[0], index = m.index;
    var params = /* @__PURE__ */ Object.create(null);
    var _loop_1 = /* @__PURE__ */ __name2(function(i2) {
      if (m[i2] === void 0)
        return "continue";
      var key = keys[i2 - 1];
      if (key.modifier === "*" || key.modifier === "+") {
        params[key.name] = m[i2].split(key.prefix + key.suffix).map(function(value) {
          return decode4(value, key);
        });
      } else {
        params[key.name] = decode4(m[i2], key);
      }
    }, "_loop_1");
    for (var i = 1; i < m.length; i++) {
      _loop_1(i);
    }
    return { path, index, params };
  };
}
__name(regexpToFunction, "regexpToFunction");
__name2(regexpToFunction, "regexpToFunction");
function escapeString(str) {
  return str.replace(/([.+*?=^!:${}()[\]|/\\])/g, "\\$1");
}
__name(escapeString, "escapeString");
__name2(escapeString, "escapeString");
function flags(options) {
  return options && options.sensitive ? "" : "i";
}
__name(flags, "flags");
__name2(flags, "flags");
function regexpToRegexp(path, keys) {
  if (!keys)
    return path;
  var groupsRegex = /\((?:\?<(.*?)>)?(?!\?)/g;
  var index = 0;
  var execResult = groupsRegex.exec(path.source);
  while (execResult) {
    keys.push({
      // Use parenthesized substring match if available, index otherwise
      name: execResult[1] || index++,
      prefix: "",
      suffix: "",
      modifier: "",
      pattern: ""
    });
    execResult = groupsRegex.exec(path.source);
  }
  return path;
}
__name(regexpToRegexp, "regexpToRegexp");
__name2(regexpToRegexp, "regexpToRegexp");
function arrayToRegexp(paths2, keys, options) {
  var parts = paths2.map(function(path) {
    return pathToRegexp(path, keys, options).source;
  });
  return new RegExp("(?:".concat(parts.join("|"), ")"), flags(options));
}
__name(arrayToRegexp, "arrayToRegexp");
__name2(arrayToRegexp, "arrayToRegexp");
function stringToRegexp(path, keys, options) {
  return tokensToRegexp(parse2(path, options), keys, options);
}
__name(stringToRegexp, "stringToRegexp");
__name2(stringToRegexp, "stringToRegexp");
function tokensToRegexp(tokens, keys, options) {
  if (options === void 0) {
    options = {};
  }
  var _a = options.strict, strict = _a === void 0 ? false : _a, _b = options.start, start = _b === void 0 ? true : _b, _c = options.end, end = _c === void 0 ? true : _c, _d = options.encode, encode3 = _d === void 0 ? function(x) {
    return x;
  } : _d, _e = options.delimiter, delimiter = _e === void 0 ? "/#?" : _e, _f = options.endsWith, endsWith = _f === void 0 ? "" : _f;
  var endsWithRe = "[".concat(escapeString(endsWith), "]|$");
  var delimiterRe = "[".concat(escapeString(delimiter), "]");
  var route = start ? "^" : "";
  for (var _i = 0, tokens_1 = tokens; _i < tokens_1.length; _i++) {
    var token = tokens_1[_i];
    if (typeof token === "string") {
      route += escapeString(encode3(token));
    } else {
      var prefix = escapeString(encode3(token.prefix));
      var suffix = escapeString(encode3(token.suffix));
      if (token.pattern) {
        if (keys)
          keys.push(token);
        if (prefix || suffix) {
          if (token.modifier === "+" || token.modifier === "*") {
            var mod = token.modifier === "*" ? "?" : "";
            route += "(?:".concat(prefix, "((?:").concat(token.pattern, ")(?:").concat(suffix).concat(prefix, "(?:").concat(token.pattern, "))*)").concat(suffix, ")").concat(mod);
          } else {
            route += "(?:".concat(prefix, "(").concat(token.pattern, ")").concat(suffix, ")").concat(token.modifier);
          }
        } else {
          if (token.modifier === "+" || token.modifier === "*") {
            throw new TypeError('Can not repeat "'.concat(token.name, '" without a prefix and suffix'));
          }
          route += "(".concat(token.pattern, ")").concat(token.modifier);
        }
      } else {
        route += "(?:".concat(prefix).concat(suffix, ")").concat(token.modifier);
      }
    }
  }
  if (end) {
    if (!strict)
      route += "".concat(delimiterRe, "?");
    route += !options.endsWith ? "$" : "(?=".concat(endsWithRe, ")");
  } else {
    var endToken = tokens[tokens.length - 1];
    var isEndDelimited = typeof endToken === "string" ? delimiterRe.indexOf(endToken[endToken.length - 1]) > -1 : endToken === void 0;
    if (!strict) {
      route += "(?:".concat(delimiterRe, "(?=").concat(endsWithRe, "))?");
    }
    if (!isEndDelimited) {
      route += "(?=".concat(delimiterRe, "|").concat(endsWithRe, ")");
    }
  }
  return new RegExp(route, flags(options));
}
__name(tokensToRegexp, "tokensToRegexp");
__name2(tokensToRegexp, "tokensToRegexp");
function pathToRegexp(path, keys, options) {
  if (path instanceof RegExp)
    return regexpToRegexp(path, keys);
  if (Array.isArray(path))
    return arrayToRegexp(path, keys, options);
  return stringToRegexp(path, keys, options);
}
__name(pathToRegexp, "pathToRegexp");
__name2(pathToRegexp, "pathToRegexp");
var escapeRegex = /[.+?^${}()|[\]\\]/g;
function* executeRequest(request) {
  const requestPath = new URL(request.url).pathname;
  for (const route of [...routes].reverse()) {
    if (route.method && route.method !== request.method) {
      continue;
    }
    const routeMatcher = match(route.routePath.replace(escapeRegex, "\\$&"), {
      end: false
    });
    const mountMatcher = match(route.mountPath.replace(escapeRegex, "\\$&"), {
      end: false
    });
    const matchResult = routeMatcher(requestPath);
    const mountMatchResult = mountMatcher(requestPath);
    if (matchResult && mountMatchResult) {
      for (const handler of route.middlewares.flat()) {
        yield {
          handler,
          params: matchResult.params,
          path: mountMatchResult.path
        };
      }
    }
  }
  for (const route of routes) {
    if (route.method && route.method !== request.method) {
      continue;
    }
    const routeMatcher = match(route.routePath.replace(escapeRegex, "\\$&"), {
      end: true
    });
    const mountMatcher = match(route.mountPath.replace(escapeRegex, "\\$&"), {
      end: false
    });
    const matchResult = routeMatcher(requestPath);
    const mountMatchResult = mountMatcher(requestPath);
    if (matchResult && mountMatchResult && route.modules.length) {
      for (const handler of route.modules.flat()) {
        yield {
          handler,
          params: matchResult.params,
          path: matchResult.path
        };
      }
      break;
    }
  }
}
__name(executeRequest, "executeRequest");
__name2(executeRequest, "executeRequest");
var pages_template_worker_default = {
  async fetch(originalRequest, env2, workerContext) {
    let request = originalRequest;
    const handlerIterator = executeRequest(request);
    let data = {};
    let isFailOpen = false;
    const next = /* @__PURE__ */ __name2(async (input, init2) => {
      if (input !== void 0) {
        let url = input;
        if (typeof input === "string") {
          url = new URL(input, request.url).toString();
        }
        request = new Request(url, init2);
      }
      const result = handlerIterator.next();
      if (result.done === false) {
        const { handler, params, path } = result.value;
        const context = {
          request: new Request(request.clone()),
          functionPath: path,
          next,
          params,
          get data() {
            return data;
          },
          set data(value) {
            if (typeof value !== "object" || value === null) {
              throw new Error("context.data must be an object");
            }
            data = value;
          },
          env: env2,
          waitUntil: workerContext.waitUntil.bind(workerContext),
          passThroughOnException: /* @__PURE__ */ __name2(() => {
            isFailOpen = true;
          }, "passThroughOnException")
        };
        const response = await handler(context);
        if (!(response instanceof Response)) {
          throw new Error("Your Pages function should return a Response");
        }
        return cloneResponse(response);
      } else if ("ASSETS") {
        const response = await env2["ASSETS"].fetch(request);
        return cloneResponse(response);
      } else {
        const response = await fetch(request);
        return cloneResponse(response);
      }
    }, "next");
    try {
      return await next();
    } catch (error2) {
      if (isFailOpen) {
        const response = await env2["ASSETS"].fetch(request);
        return cloneResponse(response);
      }
      throw error2;
    }
  }
};
var cloneResponse = /* @__PURE__ */ __name2((response) => (
  // https://fetch.spec.whatwg.org/#null-body-status
  new Response(
    [101, 204, 205, 304].includes(response.status) ? null : response.body,
    response
  )
), "cloneResponse");
init_functionsRoutes_0_35485157297900294();
init_strip_cf_connecting_ip_header();
var drainBody = /* @__PURE__ */ __name2(async (request, env2, _ctx, middlewareCtx) => {
  try {
    return await middlewareCtx.next(request, env2);
  } finally {
    try {
      if (request.body !== null && !request.bodyUsed) {
        const reader = request.body.getReader();
        while (!(await reader.read()).done) {
        }
      }
    } catch (e) {
      console.error("Failed to drain the unused request body.", e);
    }
  }
}, "drainBody");
var middleware_ensure_req_body_drained_default = drainBody;
init_functionsRoutes_0_35485157297900294();
init_strip_cf_connecting_ip_header();
function reduceError(e) {
  return {
    name: e?.name,
    message: e?.message ?? String(e),
    stack: e?.stack,
    cause: e?.cause === void 0 ? void 0 : reduceError(e.cause)
  };
}
__name(reduceError, "reduceError");
__name2(reduceError, "reduceError");
var jsonError = /* @__PURE__ */ __name2(async (request, env2, _ctx, middlewareCtx) => {
  try {
    return await middlewareCtx.next(request, env2);
  } catch (e) {
    const error2 = reduceError(e);
    return Response.json(error2, {
      status: 500,
      headers: { "MF-Experimental-Error-Stack": "true" }
    });
  }
}, "jsonError");
var middleware_miniflare3_json_error_default = jsonError;
var __INTERNAL_WRANGLER_MIDDLEWARE__ = [
  middleware_ensure_req_body_drained_default,
  middleware_miniflare3_json_error_default
];
var middleware_insertion_facade_default = pages_template_worker_default;
init_functionsRoutes_0_35485157297900294();
init_strip_cf_connecting_ip_header();
var __facade_middleware__ = [];
function __facade_register__(...args) {
  __facade_middleware__.push(...args.flat());
}
__name(__facade_register__, "__facade_register__");
__name2(__facade_register__, "__facade_register__");
function __facade_invokeChain__(request, env2, ctx, dispatch, middlewareChain) {
  const [head, ...tail] = middlewareChain;
  const middlewareCtx = {
    dispatch,
    next(newRequest, newEnv) {
      return __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);
    }
  };
  return head(request, env2, ctx, middlewareCtx);
}
__name(__facade_invokeChain__, "__facade_invokeChain__");
__name2(__facade_invokeChain__, "__facade_invokeChain__");
function __facade_invoke__(request, env2, ctx, dispatch, finalMiddleware) {
  return __facade_invokeChain__(request, env2, ctx, dispatch, [
    ...__facade_middleware__,
    finalMiddleware
  ]);
}
__name(__facade_invoke__, "__facade_invoke__");
__name2(__facade_invoke__, "__facade_invoke__");
var __Facade_ScheduledController__ = class ___Facade_ScheduledController__ {
  static {
    __name(this, "___Facade_ScheduledController__");
  }
  constructor(scheduledTime, cron, noRetry) {
    this.scheduledTime = scheduledTime;
    this.cron = cron;
    this.#noRetry = noRetry;
  }
  static {
    __name2(this, "__Facade_ScheduledController__");
  }
  #noRetry;
  noRetry() {
    if (!(this instanceof ___Facade_ScheduledController__)) {
      throw new TypeError("Illegal invocation");
    }
    this.#noRetry();
  }
};
function wrapExportedHandler(worker) {
  if (__INTERNAL_WRANGLER_MIDDLEWARE__ === void 0 || __INTERNAL_WRANGLER_MIDDLEWARE__.length === 0) {
    return worker;
  }
  for (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {
    __facade_register__(middleware);
  }
  const fetchDispatcher = /* @__PURE__ */ __name2(function(request, env2, ctx) {
    if (worker.fetch === void 0) {
      throw new Error("Handler does not export a fetch() function.");
    }
    return worker.fetch(request, env2, ctx);
  }, "fetchDispatcher");
  return {
    ...worker,
    fetch(request, env2, ctx) {
      const dispatcher = /* @__PURE__ */ __name2(function(type, init2) {
        if (type === "scheduled" && worker.scheduled !== void 0) {
          const controller = new __Facade_ScheduledController__(
            Date.now(),
            init2.cron ?? "",
            () => {
            }
          );
          return worker.scheduled(controller, env2, ctx);
        }
      }, "dispatcher");
      return __facade_invoke__(request, env2, ctx, dispatcher, fetchDispatcher);
    }
  };
}
__name(wrapExportedHandler, "wrapExportedHandler");
__name2(wrapExportedHandler, "wrapExportedHandler");
function wrapWorkerEntrypoint(klass) {
  if (__INTERNAL_WRANGLER_MIDDLEWARE__ === void 0 || __INTERNAL_WRANGLER_MIDDLEWARE__.length === 0) {
    return klass;
  }
  for (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {
    __facade_register__(middleware);
  }
  return class extends klass {
    #fetchDispatcher = /* @__PURE__ */ __name2((request, env2, ctx) => {
      this.env = env2;
      this.ctx = ctx;
      if (super.fetch === void 0) {
        throw new Error("Entrypoint class does not define a fetch() function.");
      }
      return super.fetch(request);
    }, "#fetchDispatcher");
    #dispatcher = /* @__PURE__ */ __name2((type, init2) => {
      if (type === "scheduled" && super.scheduled !== void 0) {
        const controller = new __Facade_ScheduledController__(
          Date.now(),
          init2.cron ?? "",
          () => {
          }
        );
        return super.scheduled(controller);
      }
    }, "#dispatcher");
    fetch(request) {
      return __facade_invoke__(
        request,
        this.env,
        this.ctx,
        this.#dispatcher,
        this.#fetchDispatcher
      );
    }
  };
}
__name(wrapWorkerEntrypoint, "wrapWorkerEntrypoint");
__name2(wrapWorkerEntrypoint, "wrapWorkerEntrypoint");
var WRAPPED_ENTRY;
if (typeof middleware_insertion_facade_default === "object") {
  WRAPPED_ENTRY = wrapExportedHandler(middleware_insertion_facade_default);
} else if (typeof middleware_insertion_facade_default === "function") {
  WRAPPED_ENTRY = wrapWorkerEntrypoint(middleware_insertion_facade_default);
}
var middleware_loader_entry_default = WRAPPED_ENTRY;

// ../../../../../private/tmp/bunx-501-wrangler@latest/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts
var drainBody2 = /* @__PURE__ */ __name(async (request, env2, _ctx, middlewareCtx) => {
  try {
    return await middlewareCtx.next(request, env2);
  } finally {
    try {
      if (request.body !== null && !request.bodyUsed) {
        const reader = request.body.getReader();
        while (!(await reader.read()).done) {
        }
      }
    } catch (e) {
      console.error("Failed to drain the unused request body.", e);
    }
  }
}, "drainBody");
var middleware_ensure_req_body_drained_default2 = drainBody2;

// ../../../../../private/tmp/bunx-501-wrangler@latest/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts
function reduceError2(e) {
  return {
    name: e?.name,
    message: e?.message ?? String(e),
    stack: e?.stack,
    cause: e?.cause === void 0 ? void 0 : reduceError2(e.cause)
  };
}
__name(reduceError2, "reduceError");
var jsonError2 = /* @__PURE__ */ __name(async (request, env2, _ctx, middlewareCtx) => {
  try {
    return await middlewareCtx.next(request, env2);
  } catch (e) {
    const error2 = reduceError2(e);
    return Response.json(error2, {
      status: 500,
      headers: { "MF-Experimental-Error-Stack": "true" }
    });
  }
}, "jsonError");
var middleware_miniflare3_json_error_default2 = jsonError2;

// .wrangler/tmp/bundle-lPmCNf/middleware-insertion-facade.js
var __INTERNAL_WRANGLER_MIDDLEWARE__2 = [
  middleware_ensure_req_body_drained_default2,
  middleware_miniflare3_json_error_default2
];
var middleware_insertion_facade_default2 = middleware_loader_entry_default;

// ../../../../../private/tmp/bunx-501-wrangler@latest/node_modules/wrangler/templates/middleware/common.ts
var __facade_middleware__2 = [];
function __facade_register__2(...args) {
  __facade_middleware__2.push(...args.flat());
}
__name(__facade_register__2, "__facade_register__");
function __facade_invokeChain__2(request, env2, ctx, dispatch, middlewareChain) {
  const [head, ...tail] = middlewareChain;
  const middlewareCtx = {
    dispatch,
    next(newRequest, newEnv) {
      return __facade_invokeChain__2(newRequest, newEnv, ctx, dispatch, tail);
    }
  };
  return head(request, env2, ctx, middlewareCtx);
}
__name(__facade_invokeChain__2, "__facade_invokeChain__");
function __facade_invoke__2(request, env2, ctx, dispatch, finalMiddleware) {
  return __facade_invokeChain__2(request, env2, ctx, dispatch, [
    ...__facade_middleware__2,
    finalMiddleware
  ]);
}
__name(__facade_invoke__2, "__facade_invoke__");

// .wrangler/tmp/bundle-lPmCNf/middleware-loader.entry.ts
var __Facade_ScheduledController__2 = class ___Facade_ScheduledController__2 {
  constructor(scheduledTime, cron, noRetry) {
    this.scheduledTime = scheduledTime;
    this.cron = cron;
    this.#noRetry = noRetry;
  }
  static {
    __name(this, "__Facade_ScheduledController__");
  }
  #noRetry;
  noRetry() {
    if (!(this instanceof ___Facade_ScheduledController__2)) {
      throw new TypeError("Illegal invocation");
    }
    this.#noRetry();
  }
};
function wrapExportedHandler2(worker) {
  if (__INTERNAL_WRANGLER_MIDDLEWARE__2 === void 0 || __INTERNAL_WRANGLER_MIDDLEWARE__2.length === 0) {
    return worker;
  }
  for (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__2) {
    __facade_register__2(middleware);
  }
  const fetchDispatcher = /* @__PURE__ */ __name(function(request, env2, ctx) {
    if (worker.fetch === void 0) {
      throw new Error("Handler does not export a fetch() function.");
    }
    return worker.fetch(request, env2, ctx);
  }, "fetchDispatcher");
  return {
    ...worker,
    fetch(request, env2, ctx) {
      const dispatcher = /* @__PURE__ */ __name(function(type, init2) {
        if (type === "scheduled" && worker.scheduled !== void 0) {
          const controller = new __Facade_ScheduledController__2(
            Date.now(),
            init2.cron ?? "",
            () => {
            }
          );
          return worker.scheduled(controller, env2, ctx);
        }
      }, "dispatcher");
      return __facade_invoke__2(request, env2, ctx, dispatcher, fetchDispatcher);
    }
  };
}
__name(wrapExportedHandler2, "wrapExportedHandler");
function wrapWorkerEntrypoint2(klass) {
  if (__INTERNAL_WRANGLER_MIDDLEWARE__2 === void 0 || __INTERNAL_WRANGLER_MIDDLEWARE__2.length === 0) {
    return klass;
  }
  for (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__2) {
    __facade_register__2(middleware);
  }
  return class extends klass {
    #fetchDispatcher = /* @__PURE__ */ __name((request, env2, ctx) => {
      this.env = env2;
      this.ctx = ctx;
      if (super.fetch === void 0) {
        throw new Error("Entrypoint class does not define a fetch() function.");
      }
      return super.fetch(request);
    }, "#fetchDispatcher");
    #dispatcher = /* @__PURE__ */ __name((type, init2) => {
      if (type === "scheduled" && super.scheduled !== void 0) {
        const controller = new __Facade_ScheduledController__2(
          Date.now(),
          init2.cron ?? "",
          () => {
          }
        );
        return super.scheduled(controller);
      }
    }, "#dispatcher");
    fetch(request) {
      return __facade_invoke__2(
        request,
        this.env,
        this.ctx,
        this.#dispatcher,
        this.#fetchDispatcher
      );
    }
  };
}
__name(wrapWorkerEntrypoint2, "wrapWorkerEntrypoint");
var WRAPPED_ENTRY2;
if (typeof middleware_insertion_facade_default2 === "object") {
  WRAPPED_ENTRY2 = wrapExportedHandler2(middleware_insertion_facade_default2);
} else if (typeof middleware_insertion_facade_default2 === "function") {
  WRAPPED_ENTRY2 = wrapWorkerEntrypoint2(middleware_insertion_facade_default2);
}
var middleware_loader_entry_default2 = WRAPPED_ENTRY2;
export {
  __INTERNAL_WRANGLER_MIDDLEWARE__2 as __INTERNAL_WRANGLER_MIDDLEWARE__,
  middleware_loader_entry_default2 as default
};
/*! Bundled license information:

@noble/hashes/esm/utils.js:
@noble/hashes/utils.js:
  (*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) *)
*/
//# sourceMappingURL=functionsWorker-0.2970714327557382.js.map
